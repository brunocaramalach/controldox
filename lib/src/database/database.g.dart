// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'database.dart';

// **************************************************************************
// MoorGenerator
// **************************************************************************

// ignore_for_file: unnecessary_brace_in_string_interps, unnecessary_this
// class CardapiosCompanion extends UpdateCompanion<Cardapio> {
//   final Value<int> id;
//   final Value<int?> idProduto;
//   final Value<String?> modoPreparo;
//   final Value<String?> infoAlergico;
//   final Value<String?> ingredientes;
//   const CardapiosCompanion({
//     this.id = const Value.absent(),
//     this.idProduto = const Value.absent(),
//     this.modoPreparo = const Value.absent(),
//     this.infoAlergico = const Value.absent(),
//     this.ingredientes = const Value.absent(),
//   });
//   CardapiosCompanion.insert({
//     this.id = const Value.absent(),
//     this.idProduto = const Value.absent(),
//     this.modoPreparo = const Value.absent(),
//     this.infoAlergico = const Value.absent(),
//     this.ingredientes = const Value.absent(),
//   });
//   static Insertable<Cardapio> custom({
//     Expression<int>? id,
//     Expression<int?>? idProduto,
//     Expression<String?>? modoPreparo,
//     Expression<String?>? infoAlergico,
//     Expression<String?>? ingredientes,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idProduto != null) 'ID_PRODUTO': idProduto,
//       if (modoPreparo != null) 'MODO_PREPARO': modoPreparo,
//       if (infoAlergico != null) 'INFO_ALERGICO': infoAlergico,
//       if (ingredientes != null) 'INGREDIENTES': ingredientes,
//     });
//   }

//   CardapiosCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idProduto,
//       Value<String?>? modoPreparo,
//       Value<String?>? infoAlergico,
//       Value<String?>? ingredientes}) {
//     return CardapiosCompanion(
//       id: id ?? this.id,
//       idProduto: idProduto ?? this.idProduto,
//       modoPreparo: modoPreparo ?? this.modoPreparo,
//       infoAlergico: infoAlergico ?? this.infoAlergico,
//       ingredientes: ingredientes ?? this.ingredientes,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idProduto.present) {
//       map['ID_PRODUTO'] = Variable<int?>(idProduto.value);
//     }
//     if (modoPreparo.present) {
//       map['MODO_PREPARO'] = Variable<String?>(modoPreparo.value);
//     }
//     if (infoAlergico.present) {
//       map['INFO_ALERGICO'] = Variable<String?>(infoAlergico.value);
//     }
//     if (ingredientes.present) {
//       map['INGREDIENTES'] = Variable<String?>(ingredientes.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('CardapiosCompanion(')
//           ..write('id: $id, ')
//           ..write('idProduto: $idProduto, ')
//           ..write('modoPreparo: $modoPreparo, ')
//           ..write('infoAlergico: $infoAlergico, ')
//           ..write('ingredientes: $ingredientes')
//           ..write(')'))
//         .toString();
//   }
// }

// class $CardapiosTable extends Cardapios
//     with TableInfo<$CardapiosTable, Cardapio> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $CardapiosTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idProdutoMeta = const VerificationMeta('idProduto');
//   late final GeneratedColumn<int?> idProduto = GeneratedColumn<int?>(
//       'ID_PRODUTO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES PRODUTO(ID)');
//   final VerificationMeta _modoPreparoMeta =
//       const VerificationMeta('modoPreparo');
//   late final GeneratedColumn<String?> modoPreparo = GeneratedColumn<String?>(
//       'MODO_PREPARO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _infoAlergicoMeta =
//       const VerificationMeta('infoAlergico');
//   late final GeneratedColumn<String?> infoAlergico = GeneratedColumn<String?>(
//       'INFO_ALERGICO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _ingredientesMeta =
//       const VerificationMeta('ingredientes');
//   late final GeneratedColumn<String?> ingredientes = GeneratedColumn<String?>(
//       'INGREDIENTES', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns =>
//       [id, idProduto, modoPreparo, infoAlergico, ingredientes];
//   @override
//   String get aliasedName => _alias ?? 'CARDAPIO';
//   @override
//   String get actualTableName => 'CARDAPIO';
//   @override
//   VerificationContext validateIntegrity(Insertable<Cardapio> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_PRODUTO')) {
//       context.handle(_idProdutoMeta,
//           idProduto.isAcceptableOrUnknown(data['ID_PRODUTO']!, _idProdutoMeta));
//     }
//     if (data.containsKey('MODO_PREPARO')) {
//       context.handle(
//           _modoPreparoMeta,
//           modoPreparo.isAcceptableOrUnknown(
//               data['MODO_PREPARO']!, _modoPreparoMeta));
//     }
//     if (data.containsKey('INFO_ALERGICO')) {
//       context.handle(
//           _infoAlergicoMeta,
//           infoAlergico.isAcceptableOrUnknown(
//               data['INFO_ALERGICO']!, _infoAlergicoMeta));
//     }
//     if (data.containsKey('INGREDIENTES')) {
//       context.handle(
//           _ingredientesMeta,
//           ingredientes.isAcceptableOrUnknown(
//               data['INGREDIENTES']!, _ingredientesMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   Cardapio map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return Cardapio(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idProduto: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_PRODUTO']),
//       modoPreparo: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}MODO_PREPARO']),
//       infoAlergico: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}INFO_ALERGICO']),
//       ingredientes: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}INGREDIENTES']),
//     );
//   }

//   @override
//   $CardapiosTable createAlias(String alias) {
//     return $CardapiosTable(_db, alias);
//   }
// }

// class CardapioPerguntaPadraosCompanion
//     extends UpdateCompanion<CardapioPerguntaPadrao> {
//   final Value<int> id;
//   final Value<int?> idCardapio;
//   final Value<String?> pergunta;
//   const CardapioPerguntaPadraosCompanion({
//     this.id = const Value.absent(),
//     this.idCardapio = const Value.absent(),
//     this.pergunta = const Value.absent(),
//   });
//   CardapioPerguntaPadraosCompanion.insert({
//     this.id = const Value.absent(),
//     this.idCardapio = const Value.absent(),
//     this.pergunta = const Value.absent(),
//   });
//   static Insertable<CardapioPerguntaPadrao> custom({
//     Expression<int>? id,
//     Expression<int?>? idCardapio,
//     Expression<String?>? pergunta,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idCardapio != null) 'ID_CARDAPIO': idCardapio,
//       if (pergunta != null) 'PERGUNTA': pergunta,
//     });
//   }

//   CardapioPerguntaPadraosCompanion copyWith(
//       {Value<int>? id, Value<int?>? idCardapio, Value<String?>? pergunta}) {
//     return CardapioPerguntaPadraosCompanion(
//       id: id ?? this.id,
//       idCardapio: idCardapio ?? this.idCardapio,
//       pergunta: pergunta ?? this.pergunta,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idCardapio.present) {
//       map['ID_CARDAPIO'] = Variable<int?>(idCardapio.value);
//     }
//     if (pergunta.present) {
//       map['PERGUNTA'] = Variable<String?>(pergunta.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('CardapioPerguntaPadraosCompanion(')
//           ..write('id: $id, ')
//           ..write('idCardapio: $idCardapio, ')
//           ..write('pergunta: $pergunta')
//           ..write(')'))
//         .toString();
//   }
// }

// class $CardapioPerguntaPadraosTable extends CardapioPerguntaPadraos
//     with TableInfo<$CardapioPerguntaPadraosTable, CardapioPerguntaPadrao> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $CardapioPerguntaPadraosTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idCardapioMeta = const VerificationMeta('idCardapio');
//   late final GeneratedColumn<int?> idCardapio = GeneratedColumn<int?>(
//       'ID_CARDAPIO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES CARDAPIO(ID)');
//   final VerificationMeta _perguntaMeta = const VerificationMeta('pergunta');
//   late final GeneratedColumn<String?> pergunta = GeneratedColumn<String?>(
//       'PERGUNTA', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [id, idCardapio, pergunta];
//   @override
//   String get aliasedName => _alias ?? 'CARDAPIO_PERGUNTA_PADRAO';
//   @override
//   String get actualTableName => 'CARDAPIO_PERGUNTA_PADRAO';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<CardapioPerguntaPadrao> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_CARDAPIO')) {
//       context.handle(
//           _idCardapioMeta,
//           idCardapio.isAcceptableOrUnknown(
//               data['ID_CARDAPIO']!, _idCardapioMeta));
//     }
//     if (data.containsKey('PERGUNTA')) {
//       context.handle(_perguntaMeta,
//           pergunta.isAcceptableOrUnknown(data['PERGUNTA']!, _perguntaMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   CardapioPerguntaPadrao map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return CardapioPerguntaPadrao(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idCardapio: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_CARDAPIO']),
//       pergunta: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}PERGUNTA']),
//     );
//   }

//   @override
//   $CardapioPerguntaPadraosTable createAlias(String alias) {
//     return $CardapioPerguntaPadraosTable(_db, alias);
//   }
// }

// class CardapioRespostaPadraosCompanion
//     extends UpdateCompanion<CardapioRespostaPadrao> {
//   final Value<int> id;
//   final Value<int?> idCardapioPerguntaPadrao;
//   final Value<String?> resposta;
//   const CardapioRespostaPadraosCompanion({
//     this.id = const Value.absent(),
//     this.idCardapioPerguntaPadrao = const Value.absent(),
//     this.resposta = const Value.absent(),
//   });
//   CardapioRespostaPadraosCompanion.insert({
//     this.id = const Value.absent(),
//     this.idCardapioPerguntaPadrao = const Value.absent(),
//     this.resposta = const Value.absent(),
//   });
//   static Insertable<CardapioRespostaPadrao> custom({
//     Expression<int>? id,
//     Expression<int?>? idCardapioPerguntaPadrao,
//     Expression<String?>? resposta,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idCardapioPerguntaPadrao != null)
//         'ID_CARDAPIO_PERGUNTA_PADRAO': idCardapioPerguntaPadrao,
//       if (resposta != null) 'RESPOSTA': resposta,
//     });
//   }

//   CardapioRespostaPadraosCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idCardapioPerguntaPadrao,
//       Value<String?>? resposta}) {
//     return CardapioRespostaPadraosCompanion(
//       id: id ?? this.id,
//       idCardapioPerguntaPadrao:
//           idCardapioPerguntaPadrao ?? this.idCardapioPerguntaPadrao,
//       resposta: resposta ?? this.resposta,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idCardapioPerguntaPadrao.present) {
//       map['ID_CARDAPIO_PERGUNTA_PADRAO'] =
//           Variable<int?>(idCardapioPerguntaPadrao.value);
//     }
//     if (resposta.present) {
//       map['RESPOSTA'] = Variable<String?>(resposta.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('CardapioRespostaPadraosCompanion(')
//           ..write('id: $id, ')
//           ..write('idCardapioPerguntaPadrao: $idCardapioPerguntaPadrao, ')
//           ..write('resposta: $resposta')
//           ..write(')'))
//         .toString();
//   }
// }

// class $CardapioRespostaPadraosTable extends CardapioRespostaPadraos
//     with TableInfo<$CardapioRespostaPadraosTable, CardapioRespostaPadrao> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $CardapioRespostaPadraosTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idCardapioPerguntaPadraoMeta =
//       const VerificationMeta('idCardapioPerguntaPadrao');
//   late final GeneratedColumn<int?> idCardapioPerguntaPadrao =
//       GeneratedColumn<int?>('ID_CARDAPIO_PERGUNTA_PADRAO', aliasedName, true,
//           typeName: 'INTEGER',
//           requiredDuringInsert: false,
//           $customConstraints:
//               'NULLABLE REFERENCES CARDAPIO_PERGUNTA_PADRAO(ID)');
//   final VerificationMeta _respostaMeta = const VerificationMeta('resposta');
//   late final GeneratedColumn<String?> resposta = GeneratedColumn<String?>(
//       'RESPOSTA', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns =>
//       [id, idCardapioPerguntaPadrao, resposta];
//   @override
//   String get aliasedName => _alias ?? 'CARDAPIO_RESPOSTA_PADRAO';
//   @override
//   String get actualTableName => 'CARDAPIO_RESPOSTA_PADRAO';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<CardapioRespostaPadrao> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_CARDAPIO_PERGUNTA_PADRAO')) {
//       context.handle(
//           _idCardapioPerguntaPadraoMeta,
//           idCardapioPerguntaPadrao.isAcceptableOrUnknown(
//               data['ID_CARDAPIO_PERGUNTA_PADRAO']!,
//               _idCardapioPerguntaPadraoMeta));
//     }
//     if (data.containsKey('RESPOSTA')) {
//       context.handle(_respostaMeta,
//           resposta.isAcceptableOrUnknown(data['RESPOSTA']!, _respostaMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   CardapioRespostaPadrao map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return CardapioRespostaPadrao(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idCardapioPerguntaPadrao: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ID_CARDAPIO_PERGUNTA_PADRAO']),
//       resposta: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}RESPOSTA']),
//     );
//   }

//   @override
//   $CardapioRespostaPadraosTable createAlias(String alias) {
//     return $CardapioRespostaPadraosTable(_db, alias);
//   }
// }

// class CfopsCompanion extends UpdateCompanion<Cfop> {
//   final Value<int> id;
//   final Value<int?> codigo;
//   final Value<String?> descricao;
//   final Value<String?> aplicacao;
//   const CfopsCompanion({
//     this.id = const Value.absent(),
//     this.codigo = const Value.absent(),
//     this.descricao = const Value.absent(),
//     this.aplicacao = const Value.absent(),
//   });
//   CfopsCompanion.insert({
//     this.id = const Value.absent(),
//     this.codigo = const Value.absent(),
//     this.descricao = const Value.absent(),
//     this.aplicacao = const Value.absent(),
//   });
//   static Insertable<Cfop> custom({
//     Expression<int>? id,
//     Expression<int?>? codigo,
//     Expression<String?>? descricao,
//     Expression<String?>? aplicacao,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (codigo != null) 'CODIGO': codigo,
//       if (descricao != null) 'DESCRICAO': descricao,
//       if (aplicacao != null) 'APLICACAO': aplicacao,
//     });
//   }

//   CfopsCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? codigo,
//       Value<String?>? descricao,
//       Value<String?>? aplicacao}) {
//     return CfopsCompanion(
//       id: id ?? this.id,
//       codigo: codigo ?? this.codigo,
//       descricao: descricao ?? this.descricao,
//       aplicacao: aplicacao ?? this.aplicacao,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (codigo.present) {
//       map['CODIGO'] = Variable<int?>(codigo.value);
//     }
//     if (descricao.present) {
//       map['DESCRICAO'] = Variable<String?>(descricao.value);
//     }
//     if (aplicacao.present) {
//       map['APLICACAO'] = Variable<String?>(aplicacao.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('CfopsCompanion(')
//           ..write('id: $id, ')
//           ..write('codigo: $codigo, ')
//           ..write('descricao: $descricao, ')
//           ..write('aplicacao: $aplicacao')
//           ..write(')'))
//         .toString();
//   }
// }

// class $CfopsTable extends Cfops with TableInfo<$CfopsTable, Cfop> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $CfopsTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _codigoMeta = const VerificationMeta('codigo');
//   late final GeneratedColumn<int?> codigo = GeneratedColumn<int?>(
//       'CODIGO', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _descricaoMeta = const VerificationMeta('descricao');
//   late final GeneratedColumn<String?> descricao = GeneratedColumn<String?>(
//       'DESCRICAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _aplicacaoMeta = const VerificationMeta('aplicacao');
//   late final GeneratedColumn<String?> aplicacao = GeneratedColumn<String?>(
//       'APLICACAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [id, codigo, descricao, aplicacao];
//   @override
//   String get aliasedName => _alias ?? 'CFOP';
//   @override
//   String get actualTableName => 'CFOP';
//   @override
//   VerificationContext validateIntegrity(Insertable<Cfop> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('CODIGO')) {
//       context.handle(_codigoMeta,
//           codigo.isAcceptableOrUnknown(data['CODIGO']!, _codigoMeta));
//     }
//     if (data.containsKey('DESCRICAO')) {
//       context.handle(_descricaoMeta,
//           descricao.isAcceptableOrUnknown(data['DESCRICAO']!, _descricaoMeta));
//     }
//     if (data.containsKey('APLICACAO')) {
//       context.handle(_aplicacaoMeta,
//           aplicacao.isAcceptableOrUnknown(data['APLICACAO']!, _aplicacaoMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   Cfop map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return Cfop(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       codigo: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO']),
//       descricao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DESCRICAO']),
//       aplicacao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}APLICACAO']),
//     );
//   }

//   @override
//   $CfopsTable createAlias(String alias) {
//     return $CfopsTable(_db, alias);
//   }
// }

// class ClientesCompanion extends UpdateCompanion<Cliente> {
//   final Value<int> id;
//   final Value<String?> nome;
//   final Value<String?> fantasia;
//   final Value<String?> email;
//   final Value<String?> url;
//   final Value<String?> cpfCnpj;
//   final Value<String?> rg;
//   final Value<String?> orgaoRg;
//   final Value<DateTime?> dataEmissaoRg;
//   final Value<String?> sexo;
//   final Value<String?> inscricaoEstadual;
//   final Value<String?> inscricaoMunicipal;
//   final Value<String?> tipoPessoa;
//   final Value<DateTime?> dataCadastro;
//   final Value<String?> logradouro;
//   final Value<String?> numero;
//   final Value<String?> complemento;
//   final Value<String?> cep;
//   final Value<String?> bairro;
//   final Value<String?> cidade;
//   final Value<String?> uf;
//   final Value<String?> telefone;
//   final Value<String?> celular;
//   final Value<String?> contato;
//   final Value<int?> codigoIbgeCidade;
//   final Value<int?> codigoIbgeUf;
//   final Value<String?> fidelidadeAviso;
//   final Value<int?> fidelidadeQuantidade;
//   final Value<double?> fidelidadeValor;
//   const ClientesCompanion({
//     this.id = const Value.absent(),
//     this.nome = const Value.absent(),
//     this.fantasia = const Value.absent(),
//     this.email = const Value.absent(),
//     this.url = const Value.absent(),
//     this.cpfCnpj = const Value.absent(),
//     this.rg = const Value.absent(),
//     this.orgaoRg = const Value.absent(),
//     this.dataEmissaoRg = const Value.absent(),
//     this.sexo = const Value.absent(),
//     this.inscricaoEstadual = const Value.absent(),
//     this.inscricaoMunicipal = const Value.absent(),
//     this.tipoPessoa = const Value.absent(),
//     this.dataCadastro = const Value.absent(),
//     this.logradouro = const Value.absent(),
//     this.numero = const Value.absent(),
//     this.complemento = const Value.absent(),
//     this.cep = const Value.absent(),
//     this.bairro = const Value.absent(),
//     this.cidade = const Value.absent(),
//     this.uf = const Value.absent(),
//     this.telefone = const Value.absent(),
//     this.celular = const Value.absent(),
//     this.contato = const Value.absent(),
//     this.codigoIbgeCidade = const Value.absent(),
//     this.codigoIbgeUf = const Value.absent(),
//     this.fidelidadeAviso = const Value.absent(),
//     this.fidelidadeQuantidade = const Value.absent(),
//     this.fidelidadeValor = const Value.absent(),
//   });
//   ClientesCompanion.insert({
//     this.id = const Value.absent(),
//     this.nome = const Value.absent(),
//     this.fantasia = const Value.absent(),
//     this.email = const Value.absent(),
//     this.url = const Value.absent(),
//     this.cpfCnpj = const Value.absent(),
//     this.rg = const Value.absent(),
//     this.orgaoRg = const Value.absent(),
//     this.dataEmissaoRg = const Value.absent(),
//     this.sexo = const Value.absent(),
//     this.inscricaoEstadual = const Value.absent(),
//     this.inscricaoMunicipal = const Value.absent(),
//     this.tipoPessoa = const Value.absent(),
//     this.dataCadastro = const Value.absent(),
//     this.logradouro = const Value.absent(),
//     this.numero = const Value.absent(),
//     this.complemento = const Value.absent(),
//     this.cep = const Value.absent(),
//     this.bairro = const Value.absent(),
//     this.cidade = const Value.absent(),
//     this.uf = const Value.absent(),
//     this.telefone = const Value.absent(),
//     this.celular = const Value.absent(),
//     this.contato = const Value.absent(),
//     this.codigoIbgeCidade = const Value.absent(),
//     this.codigoIbgeUf = const Value.absent(),
//     this.fidelidadeAviso = const Value.absent(),
//     this.fidelidadeQuantidade = const Value.absent(),
//     this.fidelidadeValor = const Value.absent(),
//   });
//   static Insertable<Cliente> custom({
//     Expression<int>? id,
//     Expression<String?>? nome,
//     Expression<String?>? fantasia,
//     Expression<String?>? email,
//     Expression<String?>? url,
//     Expression<String?>? cpfCnpj,
//     Expression<String?>? rg,
//     Expression<String?>? orgaoRg,
//     Expression<DateTime?>? dataEmissaoRg,
//     Expression<String?>? sexo,
//     Expression<String?>? inscricaoEstadual,
//     Expression<String?>? inscricaoMunicipal,
//     Expression<String?>? tipoPessoa,
//     Expression<DateTime?>? dataCadastro,
//     Expression<String?>? logradouro,
//     Expression<String?>? numero,
//     Expression<String?>? complemento,
//     Expression<String?>? cep,
//     Expression<String?>? bairro,
//     Expression<String?>? cidade,
//     Expression<String?>? uf,
//     Expression<String?>? telefone,
//     Expression<String?>? celular,
//     Expression<String?>? contato,
//     Expression<int?>? codigoIbgeCidade,
//     Expression<int?>? codigoIbgeUf,
//     Expression<String?>? fidelidadeAviso,
//     Expression<int?>? fidelidadeQuantidade,
//     Expression<double?>? fidelidadeValor,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (nome != null) 'NOME': nome,
//       if (fantasia != null) 'FANTASIA': fantasia,
//       if (email != null) 'EMAIL': email,
//       if (url != null) 'URL': url,
//       if (cpfCnpj != null) 'CPF_CNPJ': cpfCnpj,
//       if (rg != null) 'RG': rg,
//       if (orgaoRg != null) 'ORGAO_RG': orgaoRg,
//       if (dataEmissaoRg != null) 'DATA_EMISSAO_RG': dataEmissaoRg,
//       if (sexo != null) 'SEXO': sexo,
//       if (inscricaoEstadual != null) 'INSCRICAO_ESTADUAL': inscricaoEstadual,
//       if (inscricaoMunicipal != null) 'INSCRICAO_MUNICIPAL': inscricaoMunicipal,
//       if (tipoPessoa != null) 'TIPO_PESSOA': tipoPessoa,
//       if (dataCadastro != null) 'DATA_CADASTRO': dataCadastro,
//       if (logradouro != null) 'LOGRADOURO': logradouro,
//       if (numero != null) 'NUMERO': numero,
//       if (complemento != null) 'COMPLEMENTO': complemento,
//       if (cep != null) 'CEP': cep,
//       if (bairro != null) 'BAIRRO': bairro,
//       if (cidade != null) 'CIDADE': cidade,
//       if (uf != null) 'UF': uf,
//       if (telefone != null) 'TELEFONE': telefone,
//       if (celular != null) 'CELULAR': celular,
//       if (contato != null) 'CONTATO': contato,
//       if (codigoIbgeCidade != null) 'CODIGO_IBGE_CIDADE': codigoIbgeCidade,
//       if (codigoIbgeUf != null) 'CODIGO_IBGE_UF': codigoIbgeUf,
//       if (fidelidadeAviso != null) 'FIDELIDADE_AVISO': fidelidadeAviso,
//       if (fidelidadeQuantidade != null)
//         'FIDELIDADE_QUANTIDADE': fidelidadeQuantidade,
//       if (fidelidadeValor != null) 'FIDELIDADE_VALOR': fidelidadeValor,
//     });
//   }

//   ClientesCompanion copyWith(
//       {Value<int>? id,
//       Value<String?>? nome,
//       Value<String?>? fantasia,
//       Value<String?>? email,
//       Value<String?>? url,
//       Value<String?>? cpfCnpj,
//       Value<String?>? rg,
//       Value<String?>? orgaoRg,
//       Value<DateTime?>? dataEmissaoRg,
//       Value<String?>? sexo,
//       Value<String?>? inscricaoEstadual,
//       Value<String?>? inscricaoMunicipal,
//       Value<String?>? tipoPessoa,
//       Value<DateTime?>? dataCadastro,
//       Value<String?>? logradouro,
//       Value<String?>? numero,
//       Value<String?>? complemento,
//       Value<String?>? cep,
//       Value<String?>? bairro,
//       Value<String?>? cidade,
//       Value<String?>? uf,
//       Value<String?>? telefone,
//       Value<String?>? celular,
//       Value<String?>? contato,
//       Value<int?>? codigoIbgeCidade,
//       Value<int?>? codigoIbgeUf,
//       Value<String?>? fidelidadeAviso,
//       Value<int?>? fidelidadeQuantidade,
//       Value<double?>? fidelidadeValor}) {
//     return ClientesCompanion(
//       id: id ?? this.id,
//       nome: nome ?? this.nome,
//       fantasia: fantasia ?? this.fantasia,
//       email: email ?? this.email,
//       url: url ?? this.url,
//       cpfCnpj: cpfCnpj ?? this.cpfCnpj,
//       rg: rg ?? this.rg,
//       orgaoRg: orgaoRg ?? this.orgaoRg,
//       dataEmissaoRg: dataEmissaoRg ?? this.dataEmissaoRg,
//       sexo: sexo ?? this.sexo,
//       inscricaoEstadual: inscricaoEstadual ?? this.inscricaoEstadual,
//       inscricaoMunicipal: inscricaoMunicipal ?? this.inscricaoMunicipal,
//       tipoPessoa: tipoPessoa ?? this.tipoPessoa,
//       dataCadastro: dataCadastro ?? this.dataCadastro,
//       logradouro: logradouro ?? this.logradouro,
//       numero: numero ?? this.numero,
//       complemento: complemento ?? this.complemento,
//       cep: cep ?? this.cep,
//       bairro: bairro ?? this.bairro,
//       cidade: cidade ?? this.cidade,
//       uf: uf ?? this.uf,
//       telefone: telefone ?? this.telefone,
//       celular: celular ?? this.celular,
//       contato: contato ?? this.contato,
//       codigoIbgeCidade: codigoIbgeCidade ?? this.codigoIbgeCidade,
//       codigoIbgeUf: codigoIbgeUf ?? this.codigoIbgeUf,
//       fidelidadeAviso: fidelidadeAviso ?? this.fidelidadeAviso,
//       fidelidadeQuantidade: fidelidadeQuantidade ?? this.fidelidadeQuantidade,
//       fidelidadeValor: fidelidadeValor ?? this.fidelidadeValor,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (nome.present) {
//       map['NOME'] = Variable<String?>(nome.value);
//     }
//     if (fantasia.present) {
//       map['FANTASIA'] = Variable<String?>(fantasia.value);
//     }
//     if (email.present) {
//       map['EMAIL'] = Variable<String?>(email.value);
//     }
//     if (url.present) {
//       map['URL'] = Variable<String?>(url.value);
//     }
//     if (cpfCnpj.present) {
//       map['CPF_CNPJ'] = Variable<String?>(cpfCnpj.value);
//     }
//     if (rg.present) {
//       map['RG'] = Variable<String?>(rg.value);
//     }
//     if (orgaoRg.present) {
//       map['ORGAO_RG'] = Variable<String?>(orgaoRg.value);
//     }
//     if (dataEmissaoRg.present) {
//       map['DATA_EMISSAO_RG'] = Variable<DateTime?>(dataEmissaoRg.value);
//     }
//     if (sexo.present) {
//       map['SEXO'] = Variable<String?>(sexo.value);
//     }
//     if (inscricaoEstadual.present) {
//       map['INSCRICAO_ESTADUAL'] = Variable<String?>(inscricaoEstadual.value);
//     }
//     if (inscricaoMunicipal.present) {
//       map['INSCRICAO_MUNICIPAL'] = Variable<String?>(inscricaoMunicipal.value);
//     }
//     if (tipoPessoa.present) {
//       map['TIPO_PESSOA'] = Variable<String?>(tipoPessoa.value);
//     }
//     if (dataCadastro.present) {
//       map['DATA_CADASTRO'] = Variable<DateTime?>(dataCadastro.value);
//     }
//     if (logradouro.present) {
//       map['LOGRADOURO'] = Variable<String?>(logradouro.value);
//     }
//     if (numero.present) {
//       map['NUMERO'] = Variable<String?>(numero.value);
//     }
//     if (complemento.present) {
//       map['COMPLEMENTO'] = Variable<String?>(complemento.value);
//     }
//     if (cep.present) {
//       map['CEP'] = Variable<String?>(cep.value);
//     }
//     if (bairro.present) {
//       map['BAIRRO'] = Variable<String?>(bairro.value);
//     }
//     if (cidade.present) {
//       map['CIDADE'] = Variable<String?>(cidade.value);
//     }
//     if (uf.present) {
//       map['UF'] = Variable<String?>(uf.value);
//     }
//     if (telefone.present) {
//       map['TELEFONE'] = Variable<String?>(telefone.value);
//     }
//     if (celular.present) {
//       map['CELULAR'] = Variable<String?>(celular.value);
//     }
//     if (contato.present) {
//       map['CONTATO'] = Variable<String?>(contato.value);
//     }
//     if (codigoIbgeCidade.present) {
//       map['CODIGO_IBGE_CIDADE'] = Variable<int?>(codigoIbgeCidade.value);
//     }
//     if (codigoIbgeUf.present) {
//       map['CODIGO_IBGE_UF'] = Variable<int?>(codigoIbgeUf.value);
//     }
//     if (fidelidadeAviso.present) {
//       map['FIDELIDADE_AVISO'] = Variable<String?>(fidelidadeAviso.value);
//     }
//     if (fidelidadeQuantidade.present) {
//       map['FIDELIDADE_QUANTIDADE'] = Variable<int?>(fidelidadeQuantidade.value);
//     }
//     if (fidelidadeValor.present) {
//       map['FIDELIDADE_VALOR'] = Variable<double?>(fidelidadeValor.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('ClientesCompanion(')
//           ..write('id: $id, ')
//           ..write('nome: $nome, ')
//           ..write('fantasia: $fantasia, ')
//           ..write('email: $email, ')
//           ..write('url: $url, ')
//           ..write('cpfCnpj: $cpfCnpj, ')
//           ..write('rg: $rg, ')
//           ..write('orgaoRg: $orgaoRg, ')
//           ..write('dataEmissaoRg: $dataEmissaoRg, ')
//           ..write('sexo: $sexo, ')
//           ..write('inscricaoEstadual: $inscricaoEstadual, ')
//           ..write('inscricaoMunicipal: $inscricaoMunicipal, ')
//           ..write('tipoPessoa: $tipoPessoa, ')
//           ..write('dataCadastro: $dataCadastro, ')
//           ..write('logradouro: $logradouro, ')
//           ..write('numero: $numero, ')
//           ..write('complemento: $complemento, ')
//           ..write('cep: $cep, ')
//           ..write('bairro: $bairro, ')
//           ..write('cidade: $cidade, ')
//           ..write('uf: $uf, ')
//           ..write('telefone: $telefone, ')
//           ..write('celular: $celular, ')
//           ..write('contato: $contato, ')
//           ..write('codigoIbgeCidade: $codigoIbgeCidade, ')
//           ..write('codigoIbgeUf: $codigoIbgeUf, ')
//           ..write('fidelidadeAviso: $fidelidadeAviso, ')
//           ..write('fidelidadeQuantidade: $fidelidadeQuantidade, ')
//           ..write('fidelidadeValor: $fidelidadeValor')
//           ..write(')'))
//         .toString();
//   }
// }

// class $ClientesTable extends Clientes with TableInfo<$ClientesTable, Cliente> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $ClientesTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _nomeMeta = const VerificationMeta('nome');
//   late final GeneratedColumn<String?> nome = GeneratedColumn<String?>(
//       'NOME', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 150),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _fantasiaMeta = const VerificationMeta('fantasia');
//   late final GeneratedColumn<String?> fantasia = GeneratedColumn<String?>(
//       'FANTASIA', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 150),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _emailMeta = const VerificationMeta('email');
//   late final GeneratedColumn<String?> email = GeneratedColumn<String?>(
//       'EMAIL', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _urlMeta = const VerificationMeta('url');
//   late final GeneratedColumn<String?> url = GeneratedColumn<String?>(
//       'URL', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cpfCnpjMeta = const VerificationMeta('cpfCnpj');
//   late final GeneratedColumn<String?> cpfCnpj = GeneratedColumn<String?>(
//       'CPF_CNPJ', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _rgMeta = const VerificationMeta('rg');
//   late final GeneratedColumn<String?> rg = GeneratedColumn<String?>(
//       'RG', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _orgaoRgMeta = const VerificationMeta('orgaoRg');
//   late final GeneratedColumn<String?> orgaoRg = GeneratedColumn<String?>(
//       'ORGAO_RG', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _dataEmissaoRgMeta =
//       const VerificationMeta('dataEmissaoRg');
//   late final GeneratedColumn<DateTime?> dataEmissaoRg =
//       GeneratedColumn<DateTime?>('DATA_EMISSAO_RG', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _sexoMeta = const VerificationMeta('sexo');
//   late final GeneratedColumn<String?> sexo = GeneratedColumn<String?>(
//       'SEXO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _inscricaoEstadualMeta =
//       const VerificationMeta('inscricaoEstadual');
//   late final GeneratedColumn<String?> inscricaoEstadual =
//       GeneratedColumn<String?>('INSCRICAO_ESTADUAL', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 30),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _inscricaoMunicipalMeta =
//       const VerificationMeta('inscricaoMunicipal');
//   late final GeneratedColumn<String?> inscricaoMunicipal =
//       GeneratedColumn<String?>(
//           'INSCRICAO_MUNICIPAL', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 30),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _tipoPessoaMeta = const VerificationMeta('tipoPessoa');
//   late final GeneratedColumn<String?> tipoPessoa = GeneratedColumn<String?>(
//       'TIPO_PESSOA', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _dataCadastroMeta =
//       const VerificationMeta('dataCadastro');
//   late final GeneratedColumn<DateTime?> dataCadastro =
//       GeneratedColumn<DateTime?>('DATA_CADASTRO', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _logradouroMeta = const VerificationMeta('logradouro');
//   late final GeneratedColumn<String?> logradouro = GeneratedColumn<String?>(
//       'LOGRADOURO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _numeroMeta = const VerificationMeta('numero');
//   late final GeneratedColumn<String?> numero = GeneratedColumn<String?>(
//       'NUMERO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 10),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _complementoMeta =
//       const VerificationMeta('complemento');
//   late final GeneratedColumn<String?> complemento = GeneratedColumn<String?>(
//       'COMPLEMENTO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cepMeta = const VerificationMeta('cep');
//   late final GeneratedColumn<String?> cep = GeneratedColumn<String?>(
//       'CEP', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _bairroMeta = const VerificationMeta('bairro');
//   late final GeneratedColumn<String?> bairro = GeneratedColumn<String?>(
//       'BAIRRO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cidadeMeta = const VerificationMeta('cidade');
//   late final GeneratedColumn<String?> cidade = GeneratedColumn<String?>(
//       'CIDADE', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _ufMeta = const VerificationMeta('uf');
//   late final GeneratedColumn<String?> uf = GeneratedColumn<String?>(
//       'UF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _telefoneMeta = const VerificationMeta('telefone');
//   late final GeneratedColumn<String?> telefone = GeneratedColumn<String?>(
//       'TELEFONE', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 15),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _celularMeta = const VerificationMeta('celular');
//   late final GeneratedColumn<String?> celular = GeneratedColumn<String?>(
//       'CELULAR', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 15),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _contatoMeta = const VerificationMeta('contato');
//   late final GeneratedColumn<String?> contato = GeneratedColumn<String?>(
//       'CONTATO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 50),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _codigoIbgeCidadeMeta =
//       const VerificationMeta('codigoIbgeCidade');
//   late final GeneratedColumn<int?> codigoIbgeCidade = GeneratedColumn<int?>(
//       'CODIGO_IBGE_CIDADE', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _codigoIbgeUfMeta =
//       const VerificationMeta('codigoIbgeUf');
//   late final GeneratedColumn<int?> codigoIbgeUf = GeneratedColumn<int?>(
//       'CODIGO_IBGE_UF', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _fidelidadeAvisoMeta =
//       const VerificationMeta('fidelidadeAviso');
//   late final GeneratedColumn<String?> fidelidadeAviso =
//       GeneratedColumn<String?>('FIDELIDADE_AVISO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _fidelidadeQuantidadeMeta =
//       const VerificationMeta('fidelidadeQuantidade');
//   late final GeneratedColumn<int?> fidelidadeQuantidade = GeneratedColumn<int?>(
//       'FIDELIDADE_QUANTIDADE', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _fidelidadeValorMeta =
//       const VerificationMeta('fidelidadeValor');
//   late final GeneratedColumn<double?> fidelidadeValor =
//       GeneratedColumn<double?>('FIDELIDADE_VALOR', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         nome,
//         fantasia,
//         email,
//         url,
//         cpfCnpj,
//         rg,
//         orgaoRg,
//         dataEmissaoRg,
//         sexo,
//         inscricaoEstadual,
//         inscricaoMunicipal,
//         tipoPessoa,
//         dataCadastro,
//         logradouro,
//         numero,
//         complemento,
//         cep,
//         bairro,
//         cidade,
//         uf,
//         telefone,
//         celular,
//         contato,
//         codigoIbgeCidade,
//         codigoIbgeUf,
//         fidelidadeAviso,
//         fidelidadeQuantidade,
//         fidelidadeValor
//       ];
//   @override
//   String get aliasedName => _alias ?? 'CLIENTE';
//   @override
//   String get actualTableName => 'CLIENTE';
//   @override
//   VerificationContext validateIntegrity(Insertable<Cliente> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('NOME')) {
//       context.handle(
//           _nomeMeta, nome.isAcceptableOrUnknown(data['NOME']!, _nomeMeta));
//     }
//     if (data.containsKey('FANTASIA')) {
//       context.handle(_fantasiaMeta,
//           fantasia.isAcceptableOrUnknown(data['FANTASIA']!, _fantasiaMeta));
//     }
//     if (data.containsKey('EMAIL')) {
//       context.handle(
//           _emailMeta, email.isAcceptableOrUnknown(data['EMAIL']!, _emailMeta));
//     }
//     if (data.containsKey('URL')) {
//       context.handle(
//           _urlMeta, url.isAcceptableOrUnknown(data['URL']!, _urlMeta));
//     }
//     if (data.containsKey('CPF_CNPJ')) {
//       context.handle(_cpfCnpjMeta,
//           cpfCnpj.isAcceptableOrUnknown(data['CPF_CNPJ']!, _cpfCnpjMeta));
//     }
//     if (data.containsKey('RG')) {
//       context.handle(_rgMeta, rg.isAcceptableOrUnknown(data['RG']!, _rgMeta));
//     }
//     if (data.containsKey('ORGAO_RG')) {
//       context.handle(_orgaoRgMeta,
//           orgaoRg.isAcceptableOrUnknown(data['ORGAO_RG']!, _orgaoRgMeta));
//     }
//     if (data.containsKey('DATA_EMISSAO_RG')) {
//       context.handle(
//           _dataEmissaoRgMeta,
//           dataEmissaoRg.isAcceptableOrUnknown(
//               data['DATA_EMISSAO_RG']!, _dataEmissaoRgMeta));
//     }
//     if (data.containsKey('SEXO')) {
//       context.handle(
//           _sexoMeta, sexo.isAcceptableOrUnknown(data['SEXO']!, _sexoMeta));
//     }
//     if (data.containsKey('INSCRICAO_ESTADUAL')) {
//       context.handle(
//           _inscricaoEstadualMeta,
//           inscricaoEstadual.isAcceptableOrUnknown(
//               data['INSCRICAO_ESTADUAL']!, _inscricaoEstadualMeta));
//     }
//     if (data.containsKey('INSCRICAO_MUNICIPAL')) {
//       context.handle(
//           _inscricaoMunicipalMeta,
//           inscricaoMunicipal.isAcceptableOrUnknown(
//               data['INSCRICAO_MUNICIPAL']!, _inscricaoMunicipalMeta));
//     }
//     if (data.containsKey('TIPO_PESSOA')) {
//       context.handle(
//           _tipoPessoaMeta,
//           tipoPessoa.isAcceptableOrUnknown(
//               data['TIPO_PESSOA']!, _tipoPessoaMeta));
//     }
//     if (data.containsKey('DATA_CADASTRO')) {
//       context.handle(
//           _dataCadastroMeta,
//           dataCadastro.isAcceptableOrUnknown(
//               data['DATA_CADASTRO']!, _dataCadastroMeta));
//     }
//     if (data.containsKey('LOGRADOURO')) {
//       context.handle(
//           _logradouroMeta,
//           logradouro.isAcceptableOrUnknown(
//               data['LOGRADOURO']!, _logradouroMeta));
//     }
//     if (data.containsKey('NUMERO')) {
//       context.handle(_numeroMeta,
//           numero.isAcceptableOrUnknown(data['NUMERO']!, _numeroMeta));
//     }
//     if (data.containsKey('COMPLEMENTO')) {
//       context.handle(
//           _complementoMeta,
//           complemento.isAcceptableOrUnknown(
//               data['COMPLEMENTO']!, _complementoMeta));
//     }
//     if (data.containsKey('CEP')) {
//       context.handle(
//           _cepMeta, cep.isAcceptableOrUnknown(data['CEP']!, _cepMeta));
//     }
//     if (data.containsKey('BAIRRO')) {
//       context.handle(_bairroMeta,
//           bairro.isAcceptableOrUnknown(data['BAIRRO']!, _bairroMeta));
//     }
//     if (data.containsKey('CIDADE')) {
//       context.handle(_cidadeMeta,
//           cidade.isAcceptableOrUnknown(data['CIDADE']!, _cidadeMeta));
//     }
//     if (data.containsKey('UF')) {
//       context.handle(_ufMeta, uf.isAcceptableOrUnknown(data['UF']!, _ufMeta));
//     }
//     if (data.containsKey('TELEFONE')) {
//       context.handle(_telefoneMeta,
//           telefone.isAcceptableOrUnknown(data['TELEFONE']!, _telefoneMeta));
//     }
//     if (data.containsKey('CELULAR')) {
//       context.handle(_celularMeta,
//           celular.isAcceptableOrUnknown(data['CELULAR']!, _celularMeta));
//     }
//     if (data.containsKey('CONTATO')) {
//       context.handle(_contatoMeta,
//           contato.isAcceptableOrUnknown(data['CONTATO']!, _contatoMeta));
//     }
//     if (data.containsKey('CODIGO_IBGE_CIDADE')) {
//       context.handle(
//           _codigoIbgeCidadeMeta,
//           codigoIbgeCidade.isAcceptableOrUnknown(
//               data['CODIGO_IBGE_CIDADE']!, _codigoIbgeCidadeMeta));
//     }
//     if (data.containsKey('CODIGO_IBGE_UF')) {
//       context.handle(
//           _codigoIbgeUfMeta,
//           codigoIbgeUf.isAcceptableOrUnknown(
//               data['CODIGO_IBGE_UF']!, _codigoIbgeUfMeta));
//     }
//     if (data.containsKey('FIDELIDADE_AVISO')) {
//       context.handle(
//           _fidelidadeAvisoMeta,
//           fidelidadeAviso.isAcceptableOrUnknown(
//               data['FIDELIDADE_AVISO']!, _fidelidadeAvisoMeta));
//     }
//     if (data.containsKey('FIDELIDADE_QUANTIDADE')) {
//       context.handle(
//           _fidelidadeQuantidadeMeta,
//           fidelidadeQuantidade.isAcceptableOrUnknown(
//               data['FIDELIDADE_QUANTIDADE']!, _fidelidadeQuantidadeMeta));
//     }
//     if (data.containsKey('FIDELIDADE_VALOR')) {
//       context.handle(
//           _fidelidadeValorMeta,
//           fidelidadeValor.isAcceptableOrUnknown(
//               data['FIDELIDADE_VALOR']!, _fidelidadeValorMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   Cliente map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return Cliente(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       nome: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NOME']),
//       fantasia: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}FANTASIA']),
//       email: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}EMAIL']),
//       url: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}URL']),
//       cpfCnpj: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CPF_CNPJ']),
//       rg: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}RG']),
//       orgaoRg: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ORGAO_RG']),
//       dataEmissaoRg: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_EMISSAO_RG']),
//       sexo: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}SEXO']),
//       inscricaoEstadual: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}INSCRICAO_ESTADUAL']),
//       inscricaoMunicipal: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}INSCRICAO_MUNICIPAL']),
//       tipoPessoa: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TIPO_PESSOA']),
//       dataCadastro: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_CADASTRO']),
//       logradouro: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}LOGRADOURO']),
//       numero: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO']),
//       complemento: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}COMPLEMENTO']),
//       cep: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CEP']),
//       bairro: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}BAIRRO']),
//       cidade: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CIDADE']),
//       uf: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}UF']),
//       telefone: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TELEFONE']),
//       celular: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CELULAR']),
//       contato: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CONTATO']),
//       codigoIbgeCidade: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}CODIGO_IBGE_CIDADE']),
//       codigoIbgeUf: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO_IBGE_UF']),
//       fidelidadeAviso: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}FIDELIDADE_AVISO']),
//       fidelidadeQuantidade: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}FIDELIDADE_QUANTIDADE']),
//       fidelidadeValor: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}FIDELIDADE_VALOR']),
//     );
//   }

//   @override
//   $ClientesTable createAlias(String alias) {
//     return $ClientesTable(_db, alias);
//   }
// }

// class ColaboradorsCompanion extends UpdateCompanion<Colaborador> {
//   final Value<int> id;
//   final Value<String?> nome;
//   final Value<String?> cpf;
//   final Value<String?> telefone;
//   final Value<String?> celular;
//   final Value<String?> email;
//   final Value<double?> comissaoVista;
//   final Value<double?> comissaoPrazo;
//   final Value<String?> nivelAutorizacao;
//   final Value<String?> entregadorVeiculo;
//   const ColaboradorsCompanion({
//     this.id = const Value.absent(),
//     this.nome = const Value.absent(),
//     this.cpf = const Value.absent(),
//     this.telefone = const Value.absent(),
//     this.celular = const Value.absent(),
//     this.email = const Value.absent(),
//     this.comissaoVista = const Value.absent(),
//     this.comissaoPrazo = const Value.absent(),
//     this.nivelAutorizacao = const Value.absent(),
//     this.entregadorVeiculo = const Value.absent(),
//   });
//   ColaboradorsCompanion.insert({
//     this.id = const Value.absent(),
//     this.nome = const Value.absent(),
//     this.cpf = const Value.absent(),
//     this.telefone = const Value.absent(),
//     this.celular = const Value.absent(),
//     this.email = const Value.absent(),
//     this.comissaoVista = const Value.absent(),
//     this.comissaoPrazo = const Value.absent(),
//     this.nivelAutorizacao = const Value.absent(),
//     this.entregadorVeiculo = const Value.absent(),
//   });
//   static Insertable<Colaborador> custom({
//     Expression<int>? id,
//     Expression<String?>? nome,
//     Expression<String?>? cpf,
//     Expression<String?>? telefone,
//     Expression<String?>? celular,
//     Expression<String?>? email,
//     Expression<double?>? comissaoVista,
//     Expression<double?>? comissaoPrazo,
//     Expression<String?>? nivelAutorizacao,
//     Expression<String?>? entregadorVeiculo,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (nome != null) 'NOME': nome,
//       if (cpf != null) 'CPF': cpf,
//       if (telefone != null) 'TELEFONE': telefone,
//       if (celular != null) 'CELULAR': celular,
//       if (email != null) 'EMAIL': email,
//       if (comissaoVista != null) 'COMISSAO_VISTA': comissaoVista,
//       if (comissaoPrazo != null) 'COMISSAO_PRAZO': comissaoPrazo,
//       if (nivelAutorizacao != null) 'NIVEL_AUTORIZACAO': nivelAutorizacao,
//       if (entregadorVeiculo != null) 'ENTREGADOR_VEICULO': entregadorVeiculo,
//     });
//   }

//   ColaboradorsCompanion copyWith(
//       {Value<int>? id,
//       Value<String?>? nome,
//       Value<String?>? cpf,
//       Value<String?>? telefone,
//       Value<String?>? celular,
//       Value<String?>? email,
//       Value<double?>? comissaoVista,
//       Value<double?>? comissaoPrazo,
//       Value<String?>? nivelAutorizacao,
//       Value<String?>? entregadorVeiculo}) {
//     return ColaboradorsCompanion(
//       id: id ?? this.id,
//       nome: nome ?? this.nome,
//       cpf: cpf ?? this.cpf,
//       telefone: telefone ?? this.telefone,
//       celular: celular ?? this.celular,
//       email: email ?? this.email,
//       comissaoVista: comissaoVista ?? this.comissaoVista,
//       comissaoPrazo: comissaoPrazo ?? this.comissaoPrazo,
//       nivelAutorizacao: nivelAutorizacao ?? this.nivelAutorizacao,
//       entregadorVeiculo: entregadorVeiculo ?? this.entregadorVeiculo,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (nome.present) {
//       map['NOME'] = Variable<String?>(nome.value);
//     }
//     if (cpf.present) {
//       map['CPF'] = Variable<String?>(cpf.value);
//     }
//     if (telefone.present) {
//       map['TELEFONE'] = Variable<String?>(telefone.value);
//     }
//     if (celular.present) {
//       map['CELULAR'] = Variable<String?>(celular.value);
//     }
//     if (email.present) {
//       map['EMAIL'] = Variable<String?>(email.value);
//     }
//     if (comissaoVista.present) {
//       map['COMISSAO_VISTA'] = Variable<double?>(comissaoVista.value);
//     }
//     if (comissaoPrazo.present) {
//       map['COMISSAO_PRAZO'] = Variable<double?>(comissaoPrazo.value);
//     }
//     if (nivelAutorizacao.present) {
//       map['NIVEL_AUTORIZACAO'] = Variable<String?>(nivelAutorizacao.value);
//     }
//     if (entregadorVeiculo.present) {
//       map['ENTREGADOR_VEICULO'] = Variable<String?>(entregadorVeiculo.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('ColaboradorsCompanion(')
//           ..write('id: $id, ')
//           ..write('nome: $nome, ')
//           ..write('cpf: $cpf, ')
//           ..write('telefone: $telefone, ')
//           ..write('celular: $celular, ')
//           ..write('email: $email, ')
//           ..write('comissaoVista: $comissaoVista, ')
//           ..write('comissaoPrazo: $comissaoPrazo, ')
//           ..write('nivelAutorizacao: $nivelAutorizacao, ')
//           ..write('entregadorVeiculo: $entregadorVeiculo')
//           ..write(')'))
//         .toString();
//   }
// }

// class $ColaboradorsTable extends Colaboradors
//     with TableInfo<$ColaboradorsTable, Colaborador> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $ColaboradorsTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _nomeMeta = const VerificationMeta('nome');
//   late final GeneratedColumn<String?> nome = GeneratedColumn<String?>(
//       'NOME', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cpfMeta = const VerificationMeta('cpf');
//   late final GeneratedColumn<String?> cpf = GeneratedColumn<String?>(
//       'CPF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 11),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _telefoneMeta = const VerificationMeta('telefone');
//   late final GeneratedColumn<String?> telefone = GeneratedColumn<String?>(
//       'TELEFONE', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 15),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _celularMeta = const VerificationMeta('celular');
//   late final GeneratedColumn<String?> celular = GeneratedColumn<String?>(
//       'CELULAR', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 15),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _emailMeta = const VerificationMeta('email');
//   late final GeneratedColumn<String?> email = GeneratedColumn<String?>(
//       'EMAIL', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _comissaoVistaMeta =
//       const VerificationMeta('comissaoVista');
//   late final GeneratedColumn<double?> comissaoVista = GeneratedColumn<double?>(
//       'COMISSAO_VISTA', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _comissaoPrazoMeta =
//       const VerificationMeta('comissaoPrazo');
//   late final GeneratedColumn<double?> comissaoPrazo = GeneratedColumn<double?>(
//       'COMISSAO_PRAZO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _nivelAutorizacaoMeta =
//       const VerificationMeta('nivelAutorizacao');
//   late final GeneratedColumn<String?> nivelAutorizacao =
//       GeneratedColumn<String?>('NIVEL_AUTORIZACAO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _entregadorVeiculoMeta =
//       const VerificationMeta('entregadorVeiculo');
//   late final GeneratedColumn<String?> entregadorVeiculo =
//       GeneratedColumn<String?>('ENTREGADOR_VEICULO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         nome,
//         cpf,
//         telefone,
//         celular,
//         email,
//         comissaoVista,
//         comissaoPrazo,
//         nivelAutorizacao,
//         entregadorVeiculo
//       ];
//   @override
//   String get aliasedName => _alias ?? 'COLABORADOR';
//   @override
//   String get actualTableName => 'COLABORADOR';
//   @override
//   VerificationContext validateIntegrity(Insertable<Colaborador> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('NOME')) {
//       context.handle(
//           _nomeMeta, nome.isAcceptableOrUnknown(data['NOME']!, _nomeMeta));
//     }
//     if (data.containsKey('CPF')) {
//       context.handle(
//           _cpfMeta, cpf.isAcceptableOrUnknown(data['CPF']!, _cpfMeta));
//     }
//     if (data.containsKey('TELEFONE')) {
//       context.handle(_telefoneMeta,
//           telefone.isAcceptableOrUnknown(data['TELEFONE']!, _telefoneMeta));
//     }
//     if (data.containsKey('CELULAR')) {
//       context.handle(_celularMeta,
//           celular.isAcceptableOrUnknown(data['CELULAR']!, _celularMeta));
//     }
//     if (data.containsKey('EMAIL')) {
//       context.handle(
//           _emailMeta, email.isAcceptableOrUnknown(data['EMAIL']!, _emailMeta));
//     }
//     if (data.containsKey('COMISSAO_VISTA')) {
//       context.handle(
//           _comissaoVistaMeta,
//           comissaoVista.isAcceptableOrUnknown(
//               data['COMISSAO_VISTA']!, _comissaoVistaMeta));
//     }
//     if (data.containsKey('COMISSAO_PRAZO')) {
//       context.handle(
//           _comissaoPrazoMeta,
//           comissaoPrazo.isAcceptableOrUnknown(
//               data['COMISSAO_PRAZO']!, _comissaoPrazoMeta));
//     }
//     if (data.containsKey('NIVEL_AUTORIZACAO')) {
//       context.handle(
//           _nivelAutorizacaoMeta,
//           nivelAutorizacao.isAcceptableOrUnknown(
//               data['NIVEL_AUTORIZACAO']!, _nivelAutorizacaoMeta));
//     }
//     if (data.containsKey('ENTREGADOR_VEICULO')) {
//       context.handle(
//           _entregadorVeiculoMeta,
//           entregadorVeiculo.isAcceptableOrUnknown(
//               data['ENTREGADOR_VEICULO']!, _entregadorVeiculoMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   Colaborador map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return Colaborador(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       nome: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NOME']),
//       cpf: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CPF']),
//       telefone: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TELEFONE']),
//       celular: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CELULAR']),
//       email: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}EMAIL']),
//       comissaoVista: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}COMISSAO_VISTA']),
//       comissaoPrazo: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}COMISSAO_PRAZO']),
//       nivelAutorizacao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NIVEL_AUTORIZACAO']),
//       entregadorVeiculo: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ENTREGADOR_VEICULO']),
//     );
//   }

//   @override
//   $ColaboradorsTable createAlias(String alias) {
//     return $ColaboradorsTable(_db, alias);
//   }
// }

// class ComandasCompanion extends UpdateCompanion<Comanda> {
//   final Value<int> id;
//   final Value<int?> idColaborador;
//   final Value<int?> idMesa;
//   final Value<int?> idCliente;
//   final Value<int?> idEmpresaDeliveryPedido;
//   final Value<int?> numero;
//   final Value<DateTime?> dataChegada;
//   final Value<String?> horaChegada;
//   final Value<DateTime?> dataSaida;
//   final Value<String?> horaSaida;
//   final Value<double?> total;
//   final Value<String?> tipo;
//   final Value<int?> quantidadePessoas;
//   final Value<double?> valorPorPessoa;
//   const ComandasCompanion({
//     this.id = const Value.absent(),
//     this.idColaborador = const Value.absent(),
//     this.idMesa = const Value.absent(),
//     this.idCliente = const Value.absent(),
//     this.idEmpresaDeliveryPedido = const Value.absent(),
//     this.numero = const Value.absent(),
//     this.dataChegada = const Value.absent(),
//     this.horaChegada = const Value.absent(),
//     this.dataSaida = const Value.absent(),
//     this.horaSaida = const Value.absent(),
//     this.total = const Value.absent(),
//     this.tipo = const Value.absent(),
//     this.quantidadePessoas = const Value.absent(),
//     this.valorPorPessoa = const Value.absent(),
//   });
//   ComandasCompanion.insert({
//     this.id = const Value.absent(),
//     this.idColaborador = const Value.absent(),
//     this.idMesa = const Value.absent(),
//     this.idCliente = const Value.absent(),
//     this.idEmpresaDeliveryPedido = const Value.absent(),
//     this.numero = const Value.absent(),
//     this.dataChegada = const Value.absent(),
//     this.horaChegada = const Value.absent(),
//     this.dataSaida = const Value.absent(),
//     this.horaSaida = const Value.absent(),
//     this.total = const Value.absent(),
//     this.tipo = const Value.absent(),
//     this.quantidadePessoas = const Value.absent(),
//     this.valorPorPessoa = const Value.absent(),
//   });
//   static Insertable<Comanda> custom({
//     Expression<int>? id,
//     Expression<int?>? idColaborador,
//     Expression<int?>? idMesa,
//     Expression<int?>? idCliente,
//     Expression<int?>? idEmpresaDeliveryPedido,
//     Expression<int?>? numero,
//     Expression<DateTime?>? dataChegada,
//     Expression<String?>? horaChegada,
//     Expression<DateTime?>? dataSaida,
//     Expression<String?>? horaSaida,
//     Expression<double?>? total,
//     Expression<String?>? tipo,
//     Expression<int?>? quantidadePessoas,
//     Expression<double?>? valorPorPessoa,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idColaborador != null) 'ID_COLABORADOR': idColaborador,
//       if (idMesa != null) 'ID_MESA': idMesa,
//       if (idCliente != null) 'ID_CLIENTE': idCliente,
//       if (idEmpresaDeliveryPedido != null)
//         'ID_EMPRESA_DELIVERY_PEDIDO': idEmpresaDeliveryPedido,
//       if (numero != null) 'NUMERO': numero,
//       if (dataChegada != null) 'DATA_CHEGADA': dataChegada,
//       if (horaChegada != null) 'HORA_CHEGADA': horaChegada,
//       if (dataSaida != null) 'DATA_SAIDA': dataSaida,
//       if (horaSaida != null) 'HORA_SAIDA': horaSaida,
//       if (total != null) 'TOTAL': total,
//       if (tipo != null) 'TIPO': tipo,
//       if (quantidadePessoas != null) 'QUANTIDADE_PESSOAS': quantidadePessoas,
//       if (valorPorPessoa != null) 'VALOR_POR_PESSOA': valorPorPessoa,
//     });
//   }

//   ComandasCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idColaborador,
//       Value<int?>? idMesa,
//       Value<int?>? idCliente,
//       Value<int?>? idEmpresaDeliveryPedido,
//       Value<int?>? numero,
//       Value<DateTime?>? dataChegada,
//       Value<String?>? horaChegada,
//       Value<DateTime?>? dataSaida,
//       Value<String?>? horaSaida,
//       Value<double?>? total,
//       Value<String?>? tipo,
//       Value<int?>? quantidadePessoas,
//       Value<double?>? valorPorPessoa}) {
//     return ComandasCompanion(
//       id: id ?? this.id,
//       idColaborador: idColaborador ?? this.idColaborador,
//       idMesa: idMesa ?? this.idMesa,
//       idCliente: idCliente ?? this.idCliente,
//       idEmpresaDeliveryPedido:
//           idEmpresaDeliveryPedido ?? this.idEmpresaDeliveryPedido,
//       numero: numero ?? this.numero,
//       dataChegada: dataChegada ?? this.dataChegada,
//       horaChegada: horaChegada ?? this.horaChegada,
//       dataSaida: dataSaida ?? this.dataSaida,
//       horaSaida: horaSaida ?? this.horaSaida,
//       total: total ?? this.total,
//       tipo: tipo ?? this.tipo,
//       quantidadePessoas: quantidadePessoas ?? this.quantidadePessoas,
//       valorPorPessoa: valorPorPessoa ?? this.valorPorPessoa,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idColaborador.present) {
//       map['ID_COLABORADOR'] = Variable<int?>(idColaborador.value);
//     }
//     if (idMesa.present) {
//       map['ID_MESA'] = Variable<int?>(idMesa.value);
//     }
//     if (idCliente.present) {
//       map['ID_CLIENTE'] = Variable<int?>(idCliente.value);
//     }
//     if (idEmpresaDeliveryPedido.present) {
//       map['ID_EMPRESA_DELIVERY_PEDIDO'] =
//           Variable<int?>(idEmpresaDeliveryPedido.value);
//     }
//     if (numero.present) {
//       map['NUMERO'] = Variable<int?>(numero.value);
//     }
//     if (dataChegada.present) {
//       map['DATA_CHEGADA'] = Variable<DateTime?>(dataChegada.value);
//     }
//     if (horaChegada.present) {
//       map['HORA_CHEGADA'] = Variable<String?>(horaChegada.value);
//     }
//     if (dataSaida.present) {
//       map['DATA_SAIDA'] = Variable<DateTime?>(dataSaida.value);
//     }
//     if (horaSaida.present) {
//       map['HORA_SAIDA'] = Variable<String?>(horaSaida.value);
//     }
//     if (total.present) {
//       map['TOTAL'] = Variable<double?>(total.value);
//     }
//     if (tipo.present) {
//       map['TIPO'] = Variable<String?>(tipo.value);
//     }
//     if (quantidadePessoas.present) {
//       map['QUANTIDADE_PESSOAS'] = Variable<int?>(quantidadePessoas.value);
//     }
//     if (valorPorPessoa.present) {
//       map['VALOR_POR_PESSOA'] = Variable<double?>(valorPorPessoa.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('ComandasCompanion(')
//           ..write('id: $id, ')
//           ..write('idColaborador: $idColaborador, ')
//           ..write('idMesa: $idMesa, ')
//           ..write('idCliente: $idCliente, ')
//           ..write('idEmpresaDeliveryPedido: $idEmpresaDeliveryPedido, ')
//           ..write('numero: $numero, ')
//           ..write('dataChegada: $dataChegada, ')
//           ..write('horaChegada: $horaChegada, ')
//           ..write('dataSaida: $dataSaida, ')
//           ..write('horaSaida: $horaSaida, ')
//           ..write('total: $total, ')
//           ..write('tipo: $tipo, ')
//           ..write('quantidadePessoas: $quantidadePessoas, ')
//           ..write('valorPorPessoa: $valorPorPessoa')
//           ..write(')'))
//         .toString();
//   }
// }

// class $ComandasTable extends Comandas with TableInfo<$ComandasTable, Comanda> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $ComandasTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idColaboradorMeta =
//       const VerificationMeta('idColaborador');
//   late final GeneratedColumn<int?> idColaborador = GeneratedColumn<int?>(
//       'ID_COLABORADOR', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES COLABORADOR(ID)');
//   final VerificationMeta _idMesaMeta = const VerificationMeta('idMesa');
//   late final GeneratedColumn<int?> idMesa = GeneratedColumn<int?>(
//       'ID_MESA', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES MESA(ID)');
//   final VerificationMeta _idClienteMeta = const VerificationMeta('idCliente');
//   late final GeneratedColumn<int?> idCliente = GeneratedColumn<int?>(
//       'ID_CLIENTE', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES CLIENTE(ID)');
//   final VerificationMeta _idEmpresaDeliveryPedidoMeta =
//       const VerificationMeta('idEmpresaDeliveryPedido');
//   late final GeneratedColumn<int?> idEmpresaDeliveryPedido =
//       GeneratedColumn<int?>('ID_EMPRESA_DELIVERY_PEDIDO', aliasedName, true,
//           typeName: 'INTEGER',
//           requiredDuringInsert: false,
//           $customConstraints:
//               'NULLABLE REFERENCES EMPRESA_DELIVERY_PEDIDO(ID)');
//   final VerificationMeta _numeroMeta = const VerificationMeta('numero');
//   late final GeneratedColumn<int?> numero = GeneratedColumn<int?>(
//       'NUMERO', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _dataChegadaMeta =
//       const VerificationMeta('dataChegada');
//   late final GeneratedColumn<DateTime?> dataChegada =
//       GeneratedColumn<DateTime?>('DATA_CHEGADA', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _horaChegadaMeta =
//       const VerificationMeta('horaChegada');
//   late final GeneratedColumn<String?> horaChegada = GeneratedColumn<String?>(
//       'HORA_CHEGADA', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _dataSaidaMeta = const VerificationMeta('dataSaida');
//   late final GeneratedColumn<DateTime?> dataSaida = GeneratedColumn<DateTime?>(
//       'DATA_SAIDA', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _horaSaidaMeta = const VerificationMeta('horaSaida');
//   late final GeneratedColumn<String?> horaSaida = GeneratedColumn<String?>(
//       'HORA_SAIDA', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _totalMeta = const VerificationMeta('total');
//   late final GeneratedColumn<double?> total = GeneratedColumn<double?>(
//       'TOTAL', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _tipoMeta = const VerificationMeta('tipo');
//   late final GeneratedColumn<String?> tipo = GeneratedColumn<String?>(
//       'TIPO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _quantidadePessoasMeta =
//       const VerificationMeta('quantidadePessoas');
//   late final GeneratedColumn<int?> quantidadePessoas = GeneratedColumn<int?>(
//       'QUANTIDADE_PESSOAS', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _valorPorPessoaMeta =
//       const VerificationMeta('valorPorPessoa');
//   late final GeneratedColumn<double?> valorPorPessoa = GeneratedColumn<double?>(
//       'VALOR_POR_PESSOA', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idColaborador,
//         idMesa,
//         idCliente,
//         idEmpresaDeliveryPedido,
//         numero,
//         dataChegada,
//         horaChegada,
//         dataSaida,
//         horaSaida,
//         total,
//         tipo,
//         quantidadePessoas,
//         valorPorPessoa
//       ];
//   @override
//   String get aliasedName => _alias ?? 'COMANDA';
//   @override
//   String get actualTableName => 'COMANDA';
//   @override
//   VerificationContext validateIntegrity(Insertable<Comanda> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_COLABORADOR')) {
//       context.handle(
//           _idColaboradorMeta,
//           idColaborador.isAcceptableOrUnknown(
//               data['ID_COLABORADOR']!, _idColaboradorMeta));
//     }
//     if (data.containsKey('ID_MESA')) {
//       context.handle(_idMesaMeta,
//           idMesa.isAcceptableOrUnknown(data['ID_MESA']!, _idMesaMeta));
//     }
//     if (data.containsKey('ID_CLIENTE')) {
//       context.handle(_idClienteMeta,
//           idCliente.isAcceptableOrUnknown(data['ID_CLIENTE']!, _idClienteMeta));
//     }
//     if (data.containsKey('ID_EMPRESA_DELIVERY_PEDIDO')) {
//       context.handle(
//           _idEmpresaDeliveryPedidoMeta,
//           idEmpresaDeliveryPedido.isAcceptableOrUnknown(
//               data['ID_EMPRESA_DELIVERY_PEDIDO']!,
//               _idEmpresaDeliveryPedidoMeta));
//     }
//     if (data.containsKey('NUMERO')) {
//       context.handle(_numeroMeta,
//           numero.isAcceptableOrUnknown(data['NUMERO']!, _numeroMeta));
//     }
//     if (data.containsKey('DATA_CHEGADA')) {
//       context.handle(
//           _dataChegadaMeta,
//           dataChegada.isAcceptableOrUnknown(
//               data['DATA_CHEGADA']!, _dataChegadaMeta));
//     }
//     if (data.containsKey('HORA_CHEGADA')) {
//       context.handle(
//           _horaChegadaMeta,
//           horaChegada.isAcceptableOrUnknown(
//               data['HORA_CHEGADA']!, _horaChegadaMeta));
//     }
//     if (data.containsKey('DATA_SAIDA')) {
//       context.handle(_dataSaidaMeta,
//           dataSaida.isAcceptableOrUnknown(data['DATA_SAIDA']!, _dataSaidaMeta));
//     }
//     if (data.containsKey('HORA_SAIDA')) {
//       context.handle(_horaSaidaMeta,
//           horaSaida.isAcceptableOrUnknown(data['HORA_SAIDA']!, _horaSaidaMeta));
//     }
//     if (data.containsKey('TOTAL')) {
//       context.handle(
//           _totalMeta, total.isAcceptableOrUnknown(data['TOTAL']!, _totalMeta));
//     }
//     if (data.containsKey('TIPO')) {
//       context.handle(
//           _tipoMeta, tipo.isAcceptableOrUnknown(data['TIPO']!, _tipoMeta));
//     }
//     if (data.containsKey('QUANTIDADE_PESSOAS')) {
//       context.handle(
//           _quantidadePessoasMeta,
//           quantidadePessoas.isAcceptableOrUnknown(
//               data['QUANTIDADE_PESSOAS']!, _quantidadePessoasMeta));
//     }
//     if (data.containsKey('VALOR_POR_PESSOA')) {
//       context.handle(
//           _valorPorPessoaMeta,
//           valorPorPessoa.isAcceptableOrUnknown(
//               data['VALOR_POR_PESSOA']!, _valorPorPessoaMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   Comanda map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return Comanda(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idColaborador: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_COLABORADOR']),
//       idMesa: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_MESA']),
//       idCliente: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_CLIENTE']),
//       idEmpresaDeliveryPedido: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ID_EMPRESA_DELIVERY_PEDIDO']),
//       numero: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO']),
//       dataChegada: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_CHEGADA']),
//       horaChegada: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}HORA_CHEGADA']),
//       dataSaida: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_SAIDA']),
//       horaSaida: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}HORA_SAIDA']),
//       total: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TOTAL']),
//       tipo: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TIPO']),
//       quantidadePessoas: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}QUANTIDADE_PESSOAS']),
//       valorPorPessoa: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_POR_PESSOA']),
//     );
//   }

//   @override
//   $ComandasTable createAlias(String alias) {
//     return $ComandasTable(_db, alias);
//   }
// }

// class ComandaDetalhesCompanion extends UpdateCompanion<ComandaDetalhe> {
//   final Value<int> id;
//   final Value<int?> idComanda;
//   final Value<int?> idProduto;
//   final Value<double?> quantidade;
//   final Value<double?> valorUnitario;
//   final Value<double?> valorTotal;
//   final Value<String?> observacao;
//   final Value<String?> gerouPedidoCozinha;
//   const ComandaDetalhesCompanion({
//     this.id = const Value.absent(),
//     this.idComanda = const Value.absent(),
//     this.idProduto = const Value.absent(),
//     this.quantidade = const Value.absent(),
//     this.valorUnitario = const Value.absent(),
//     this.valorTotal = const Value.absent(),
//     this.observacao = const Value.absent(),
//     this.gerouPedidoCozinha = const Value.absent(),
//   });
//   ComandaDetalhesCompanion.insert({
//     this.id = const Value.absent(),
//     this.idComanda = const Value.absent(),
//     this.idProduto = const Value.absent(),
//     this.quantidade = const Value.absent(),
//     this.valorUnitario = const Value.absent(),
//     this.valorTotal = const Value.absent(),
//     this.observacao = const Value.absent(),
//     this.gerouPedidoCozinha = const Value.absent(),
//   });
//   static Insertable<ComandaDetalhe> custom({
//     Expression<int>? id,
//     Expression<int?>? idComanda,
//     Expression<int?>? idProduto,
//     Expression<double?>? quantidade,
//     Expression<double?>? valorUnitario,
//     Expression<double?>? valorTotal,
//     Expression<String?>? observacao,
//     Expression<String?>? gerouPedidoCozinha,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idComanda != null) 'ID_COMANDA': idComanda,
//       if (idProduto != null) 'ID_PRODUTO': idProduto,
//       if (quantidade != null) 'QUANTIDADE': quantidade,
//       if (valorUnitario != null) 'VALOR_UNITARIO': valorUnitario,
//       if (valorTotal != null) 'VALOR_TOTAL': valorTotal,
//       if (observacao != null) 'OBSERVACAO': observacao,
//       if (gerouPedidoCozinha != null)
//         'GEROU_PEDIDO_COZINHA': gerouPedidoCozinha,
//     });
//   }

//   ComandaDetalhesCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idComanda,
//       Value<int?>? idProduto,
//       Value<double?>? quantidade,
//       Value<double?>? valorUnitario,
//       Value<double?>? valorTotal,
//       Value<String?>? observacao,
//       Value<String?>? gerouPedidoCozinha}) {
//     return ComandaDetalhesCompanion(
//       id: id ?? this.id,
//       idComanda: idComanda ?? this.idComanda,
//       idProduto: idProduto ?? this.idProduto,
//       quantidade: quantidade ?? this.quantidade,
//       valorUnitario: valorUnitario ?? this.valorUnitario,
//       valorTotal: valorTotal ?? this.valorTotal,
//       observacao: observacao ?? this.observacao,
//       gerouPedidoCozinha: gerouPedidoCozinha ?? this.gerouPedidoCozinha,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idComanda.present) {
//       map['ID_COMANDA'] = Variable<int?>(idComanda.value);
//     }
//     if (idProduto.present) {
//       map['ID_PRODUTO'] = Variable<int?>(idProduto.value);
//     }
//     if (quantidade.present) {
//       map['QUANTIDADE'] = Variable<double?>(quantidade.value);
//     }
//     if (valorUnitario.present) {
//       map['VALOR_UNITARIO'] = Variable<double?>(valorUnitario.value);
//     }
//     if (valorTotal.present) {
//       map['VALOR_TOTAL'] = Variable<double?>(valorTotal.value);
//     }
//     if (observacao.present) {
//       map['OBSERVACAO'] = Variable<String?>(observacao.value);
//     }
//     if (gerouPedidoCozinha.present) {
//       map['GEROU_PEDIDO_COZINHA'] = Variable<String?>(gerouPedidoCozinha.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('ComandaDetalhesCompanion(')
//           ..write('id: $id, ')
//           ..write('idComanda: $idComanda, ')
//           ..write('idProduto: $idProduto, ')
//           ..write('quantidade: $quantidade, ')
//           ..write('valorUnitario: $valorUnitario, ')
//           ..write('valorTotal: $valorTotal, ')
//           ..write('observacao: $observacao, ')
//           ..write('gerouPedidoCozinha: $gerouPedidoCozinha')
//           ..write(')'))
//         .toString();
//   }
// }

// class $ComandaDetalhesTable extends ComandaDetalhes
//     with TableInfo<$ComandaDetalhesTable, ComandaDetalhe> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $ComandaDetalhesTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idComandaMeta = const VerificationMeta('idComanda');
//   late final GeneratedColumn<int?> idComanda = GeneratedColumn<int?>(
//       'ID_COMANDA', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES COMANDA(ID)');
//   final VerificationMeta _idProdutoMeta = const VerificationMeta('idProduto');
//   late final GeneratedColumn<int?> idProduto = GeneratedColumn<int?>(
//       'ID_PRODUTO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES PRODUTO(ID)');
//   final VerificationMeta _quantidadeMeta = const VerificationMeta('quantidade');
//   late final GeneratedColumn<double?> quantidade = GeneratedColumn<double?>(
//       'QUANTIDADE', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorUnitarioMeta =
//       const VerificationMeta('valorUnitario');
//   late final GeneratedColumn<double?> valorUnitario = GeneratedColumn<double?>(
//       'VALOR_UNITARIO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorTotalMeta = const VerificationMeta('valorTotal');
//   late final GeneratedColumn<double?> valorTotal = GeneratedColumn<double?>(
//       'VALOR_TOTAL', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _observacaoMeta = const VerificationMeta('observacao');
//   late final GeneratedColumn<String?> observacao = GeneratedColumn<String?>(
//       'OBSERVACAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _gerouPedidoCozinhaMeta =
//       const VerificationMeta('gerouPedidoCozinha');
//   late final GeneratedColumn<String?> gerouPedidoCozinha =
//       GeneratedColumn<String?>(
//           'GEROU_PEDIDO_COZINHA', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idComanda,
//         idProduto,
//         quantidade,
//         valorUnitario,
//         valorTotal,
//         observacao,
//         gerouPedidoCozinha
//       ];
//   @override
//   String get aliasedName => _alias ?? 'COMANDA_DETALHE';
//   @override
//   String get actualTableName => 'COMANDA_DETALHE';
//   @override
//   VerificationContext validateIntegrity(Insertable<ComandaDetalhe> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_COMANDA')) {
//       context.handle(_idComandaMeta,
//           idComanda.isAcceptableOrUnknown(data['ID_COMANDA']!, _idComandaMeta));
//     }
//     if (data.containsKey('ID_PRODUTO')) {
//       context.handle(_idProdutoMeta,
//           idProduto.isAcceptableOrUnknown(data['ID_PRODUTO']!, _idProdutoMeta));
//     }
//     if (data.containsKey('QUANTIDADE')) {
//       context.handle(
//           _quantidadeMeta,
//           quantidade.isAcceptableOrUnknown(
//               data['QUANTIDADE']!, _quantidadeMeta));
//     }
//     if (data.containsKey('VALOR_UNITARIO')) {
//       context.handle(
//           _valorUnitarioMeta,
//           valorUnitario.isAcceptableOrUnknown(
//               data['VALOR_UNITARIO']!, _valorUnitarioMeta));
//     }
//     if (data.containsKey('VALOR_TOTAL')) {
//       context.handle(
//           _valorTotalMeta,
//           valorTotal.isAcceptableOrUnknown(
//               data['VALOR_TOTAL']!, _valorTotalMeta));
//     }
//     if (data.containsKey('OBSERVACAO')) {
//       context.handle(
//           _observacaoMeta,
//           observacao.isAcceptableOrUnknown(
//               data['OBSERVACAO']!, _observacaoMeta));
//     }
//     if (data.containsKey('GEROU_PEDIDO_COZINHA')) {
//       context.handle(
//           _gerouPedidoCozinhaMeta,
//           gerouPedidoCozinha.isAcceptableOrUnknown(
//               data['GEROU_PEDIDO_COZINHA']!, _gerouPedidoCozinhaMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   ComandaDetalhe map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return ComandaDetalhe(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idComanda: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_COMANDA']),
//       idProduto: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_PRODUTO']),
//       quantidade: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}QUANTIDADE']),
//       valorUnitario: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_UNITARIO']),
//       valorTotal: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_TOTAL']),
//       observacao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}OBSERVACAO']),
//       gerouPedidoCozinha: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}GEROU_PEDIDO_COZINHA']),
//     );
//   }

//   @override
//   $ComandaDetalhesTable createAlias(String alias) {
//     return $ComandaDetalhesTable(_db, alias);
//   }
// }

// class ComandaDetalheComplementosCompanion
//     extends UpdateCompanion<ComandaDetalheComplemento> {
//   final Value<int> id;
//   final Value<int?> idComandaDetalhe;
//   final Value<int?> idProduto;
//   final Value<double?> quantidade;
//   final Value<double?> valorUnitario;
//   final Value<double?> valorTotal;
//   const ComandaDetalheComplementosCompanion({
//     this.id = const Value.absent(),
//     this.idComandaDetalhe = const Value.absent(),
//     this.idProduto = const Value.absent(),
//     this.quantidade = const Value.absent(),
//     this.valorUnitario = const Value.absent(),
//     this.valorTotal = const Value.absent(),
//   });
//   ComandaDetalheComplementosCompanion.insert({
//     this.id = const Value.absent(),
//     this.idComandaDetalhe = const Value.absent(),
//     this.idProduto = const Value.absent(),
//     this.quantidade = const Value.absent(),
//     this.valorUnitario = const Value.absent(),
//     this.valorTotal = const Value.absent(),
//   });
//   static Insertable<ComandaDetalheComplemento> custom({
//     Expression<int>? id,
//     Expression<int?>? idComandaDetalhe,
//     Expression<int?>? idProduto,
//     Expression<double?>? quantidade,
//     Expression<double?>? valorUnitario,
//     Expression<double?>? valorTotal,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idComandaDetalhe != null) 'ID_COMANDA_DETALHE': idComandaDetalhe,
//       if (idProduto != null) 'ID_PRODUTO': idProduto,
//       if (quantidade != null) 'QUANTIDADE': quantidade,
//       if (valorUnitario != null) 'VALOR_UNITARIO': valorUnitario,
//       if (valorTotal != null) 'VALOR_TOTAL': valorTotal,
//     });
//   }

//   ComandaDetalheComplementosCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idComandaDetalhe,
//       Value<int?>? idProduto,
//       Value<double?>? quantidade,
//       Value<double?>? valorUnitario,
//       Value<double?>? valorTotal}) {
//     return ComandaDetalheComplementosCompanion(
//       id: id ?? this.id,
//       idComandaDetalhe: idComandaDetalhe ?? this.idComandaDetalhe,
//       idProduto: idProduto ?? this.idProduto,
//       quantidade: quantidade ?? this.quantidade,
//       valorUnitario: valorUnitario ?? this.valorUnitario,
//       valorTotal: valorTotal ?? this.valorTotal,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idComandaDetalhe.present) {
//       map['ID_COMANDA_DETALHE'] = Variable<int?>(idComandaDetalhe.value);
//     }
//     if (idProduto.present) {
//       map['ID_PRODUTO'] = Variable<int?>(idProduto.value);
//     }
//     if (quantidade.present) {
//       map['QUANTIDADE'] = Variable<double?>(quantidade.value);
//     }
//     if (valorUnitario.present) {
//       map['VALOR_UNITARIO'] = Variable<double?>(valorUnitario.value);
//     }
//     if (valorTotal.present) {
//       map['VALOR_TOTAL'] = Variable<double?>(valorTotal.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('ComandaDetalheComplementosCompanion(')
//           ..write('id: $id, ')
//           ..write('idComandaDetalhe: $idComandaDetalhe, ')
//           ..write('idProduto: $idProduto, ')
//           ..write('quantidade: $quantidade, ')
//           ..write('valorUnitario: $valorUnitario, ')
//           ..write('valorTotal: $valorTotal')
//           ..write(')'))
//         .toString();
//   }
// }

// class $ComandaDetalheComplementosTable extends ComandaDetalheComplementos
//     with
//         TableInfo<$ComandaDetalheComplementosTable, ComandaDetalheComplemento> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $ComandaDetalheComplementosTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idComandaDetalheMeta =
//       const VerificationMeta('idComandaDetalhe');
//   late final GeneratedColumn<int?> idComandaDetalhe = GeneratedColumn<int?>(
//       'ID_COMANDA_DETALHE', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES COMANDA_DETALHE(ID)');
//   final VerificationMeta _idProdutoMeta = const VerificationMeta('idProduto');
//   late final GeneratedColumn<int?> idProduto = GeneratedColumn<int?>(
//       'ID_PRODUTO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES PRODUTO(ID)');
//   final VerificationMeta _quantidadeMeta = const VerificationMeta('quantidade');
//   late final GeneratedColumn<double?> quantidade = GeneratedColumn<double?>(
//       'QUANTIDADE', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorUnitarioMeta =
//       const VerificationMeta('valorUnitario');
//   late final GeneratedColumn<double?> valorUnitario = GeneratedColumn<double?>(
//       'VALOR_UNITARIO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorTotalMeta = const VerificationMeta('valorTotal');
//   late final GeneratedColumn<double?> valorTotal = GeneratedColumn<double?>(
//       'VALOR_TOTAL', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns =>
//       [id, idComandaDetalhe, idProduto, quantidade, valorUnitario, valorTotal];
//   @override
//   String get aliasedName => _alias ?? 'COMANDA_DETALHE_COMPLEMENTO';
//   @override
//   String get actualTableName => 'COMANDA_DETALHE_COMPLEMENTO';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<ComandaDetalheComplemento> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_COMANDA_DETALHE')) {
//       context.handle(
//           _idComandaDetalheMeta,
//           idComandaDetalhe.isAcceptableOrUnknown(
//               data['ID_COMANDA_DETALHE']!, _idComandaDetalheMeta));
//     }
//     if (data.containsKey('ID_PRODUTO')) {
//       context.handle(_idProdutoMeta,
//           idProduto.isAcceptableOrUnknown(data['ID_PRODUTO']!, _idProdutoMeta));
//     }
//     if (data.containsKey('QUANTIDADE')) {
//       context.handle(
//           _quantidadeMeta,
//           quantidade.isAcceptableOrUnknown(
//               data['QUANTIDADE']!, _quantidadeMeta));
//     }
//     if (data.containsKey('VALOR_UNITARIO')) {
//       context.handle(
//           _valorUnitarioMeta,
//           valorUnitario.isAcceptableOrUnknown(
//               data['VALOR_UNITARIO']!, _valorUnitarioMeta));
//     }
//     if (data.containsKey('VALOR_TOTAL')) {
//       context.handle(
//           _valorTotalMeta,
//           valorTotal.isAcceptableOrUnknown(
//               data['VALOR_TOTAL']!, _valorTotalMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   ComandaDetalheComplemento map(Map<String, dynamic> data,
//       {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return ComandaDetalheComplemento(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idComandaDetalhe: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ID_COMANDA_DETALHE']),
//       idProduto: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_PRODUTO']),
//       quantidade: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}QUANTIDADE']),
//       valorUnitario: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_UNITARIO']),
//       valorTotal: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_TOTAL']),
//     );
//   }

//   @override
//   $ComandaDetalheComplementosTable createAlias(String alias) {
//     return $ComandaDetalheComplementosTable(_db, alias);
//   }
// }

// class ComandaObservacaoPadraosCompanion
//     extends UpdateCompanion<ComandaObservacaoPadrao> {
//   final Value<int> id;
//   final Value<String?> codigo;
//   final Value<String?> descricao;
//   const ComandaObservacaoPadraosCompanion({
//     this.id = const Value.absent(),
//     this.codigo = const Value.absent(),
//     this.descricao = const Value.absent(),
//   });
//   ComandaObservacaoPadraosCompanion.insert({
//     this.id = const Value.absent(),
//     this.codigo = const Value.absent(),
//     this.descricao = const Value.absent(),
//   });
//   static Insertable<ComandaObservacaoPadrao> custom({
//     Expression<int>? id,
//     Expression<String?>? codigo,
//     Expression<String?>? descricao,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (codigo != null) 'CODIGO': codigo,
//       if (descricao != null) 'DESCRICAO': descricao,
//     });
//   }

//   ComandaObservacaoPadraosCompanion copyWith(
//       {Value<int>? id, Value<String?>? codigo, Value<String?>? descricao}) {
//     return ComandaObservacaoPadraosCompanion(
//       id: id ?? this.id,
//       codigo: codigo ?? this.codigo,
//       descricao: descricao ?? this.descricao,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (codigo.present) {
//       map['CODIGO'] = Variable<String?>(codigo.value);
//     }
//     if (descricao.present) {
//       map['DESCRICAO'] = Variable<String?>(descricao.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('ComandaObservacaoPadraosCompanion(')
//           ..write('id: $id, ')
//           ..write('codigo: $codigo, ')
//           ..write('descricao: $descricao')
//           ..write(')'))
//         .toString();
//   }
// }

// class $ComandaObservacaoPadraosTable extends ComandaObservacaoPadraos
//     with TableInfo<$ComandaObservacaoPadraosTable, ComandaObservacaoPadrao> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $ComandaObservacaoPadraosTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _codigoMeta = const VerificationMeta('codigo');
//   late final GeneratedColumn<String?> codigo = GeneratedColumn<String?>(
//       'CODIGO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _descricaoMeta = const VerificationMeta('descricao');
//   late final GeneratedColumn<String?> descricao = GeneratedColumn<String?>(
//       'DESCRICAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [id, codigo, descricao];
//   @override
//   String get aliasedName => _alias ?? 'COMANDA_OBSERVACAO_PADRAO';
//   @override
//   String get actualTableName => 'COMANDA_OBSERVACAO_PADRAO';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<ComandaObservacaoPadrao> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('CODIGO')) {
//       context.handle(_codigoMeta,
//           codigo.isAcceptableOrUnknown(data['CODIGO']!, _codigoMeta));
//     }
//     if (data.containsKey('DESCRICAO')) {
//       context.handle(_descricaoMeta,
//           descricao.isAcceptableOrUnknown(data['DESCRICAO']!, _descricaoMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   ComandaObservacaoPadrao map(Map<String, dynamic> data,
//       {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return ComandaObservacaoPadrao(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       codigo: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO']),
//       descricao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DESCRICAO']),
//     );
//   }

//   @override
//   $ComandaObservacaoPadraosTable createAlias(String alias) {
//     return $ComandaObservacaoPadraosTable(_db, alias);
//   }
// }

// class ComandaPedidosCompanion extends UpdateCompanion<ComandaPedido> {
//   final Value<int> id;
//   final Value<int?> idComanda;
//   final Value<int?> idCozinha;
//   final Value<DateTime?> entrouNaFila;
//   final Value<DateTime?> saiuDaFila;
//   final Value<int?> estimativaMinutos;
//   final Value<int?> posicao;
//   final Value<String?> prioridade;
//   final Value<DateTime?> inicioPreparo;
//   final Value<DateTime?> fimPreparo;
//   const ComandaPedidosCompanion({
//     this.id = const Value.absent(),
//     this.idComanda = const Value.absent(),
//     this.idCozinha = const Value.absent(),
//     this.entrouNaFila = const Value.absent(),
//     this.saiuDaFila = const Value.absent(),
//     this.estimativaMinutos = const Value.absent(),
//     this.posicao = const Value.absent(),
//     this.prioridade = const Value.absent(),
//     this.inicioPreparo = const Value.absent(),
//     this.fimPreparo = const Value.absent(),
//   });
//   ComandaPedidosCompanion.insert({
//     this.id = const Value.absent(),
//     this.idComanda = const Value.absent(),
//     this.idCozinha = const Value.absent(),
//     this.entrouNaFila = const Value.absent(),
//     this.saiuDaFila = const Value.absent(),
//     this.estimativaMinutos = const Value.absent(),
//     this.posicao = const Value.absent(),
//     this.prioridade = const Value.absent(),
//     this.inicioPreparo = const Value.absent(),
//     this.fimPreparo = const Value.absent(),
//   });
//   static Insertable<ComandaPedido> custom({
//     Expression<int>? id,
//     Expression<int?>? idComanda,
//     Expression<int?>? idCozinha,
//     Expression<DateTime?>? entrouNaFila,
//     Expression<DateTime?>? saiuDaFila,
//     Expression<int?>? estimativaMinutos,
//     Expression<int?>? posicao,
//     Expression<String?>? prioridade,
//     Expression<DateTime?>? inicioPreparo,
//     Expression<DateTime?>? fimPreparo,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idComanda != null) 'ID_COMANDA': idComanda,
//       if (idCozinha != null) 'ID_COZINHA': idCozinha,
//       if (entrouNaFila != null) 'ENTROU_NA_FILA': entrouNaFila,
//       if (saiuDaFila != null) 'SAIU_DA_FILA': saiuDaFila,
//       if (estimativaMinutos != null) 'ESTIMATIVA_MINUTOS': estimativaMinutos,
//       if (posicao != null) 'POSICAO': posicao,
//       if (prioridade != null) 'PRIORIDADE': prioridade,
//       if (inicioPreparo != null) 'INICIO_PREPARO': inicioPreparo,
//       if (fimPreparo != null) 'FIM_PREPARO': fimPreparo,
//     });
//   }

//   ComandaPedidosCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idComanda,
//       Value<int?>? idCozinha,
//       Value<DateTime?>? entrouNaFila,
//       Value<DateTime?>? saiuDaFila,
//       Value<int?>? estimativaMinutos,
//       Value<int?>? posicao,
//       Value<String?>? prioridade,
//       Value<DateTime?>? inicioPreparo,
//       Value<DateTime?>? fimPreparo}) {
//     return ComandaPedidosCompanion(
//       id: id ?? this.id,
//       idComanda: idComanda ?? this.idComanda,
//       idCozinha: idCozinha ?? this.idCozinha,
//       entrouNaFila: entrouNaFila ?? this.entrouNaFila,
//       saiuDaFila: saiuDaFila ?? this.saiuDaFila,
//       estimativaMinutos: estimativaMinutos ?? this.estimativaMinutos,
//       posicao: posicao ?? this.posicao,
//       prioridade: prioridade ?? this.prioridade,
//       inicioPreparo: inicioPreparo ?? this.inicioPreparo,
//       fimPreparo: fimPreparo ?? this.fimPreparo,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idComanda.present) {
//       map['ID_COMANDA'] = Variable<int?>(idComanda.value);
//     }
//     if (idCozinha.present) {
//       map['ID_COZINHA'] = Variable<int?>(idCozinha.value);
//     }
//     if (entrouNaFila.present) {
//       map['ENTROU_NA_FILA'] = Variable<DateTime?>(entrouNaFila.value);
//     }
//     if (saiuDaFila.present) {
//       map['SAIU_DA_FILA'] = Variable<DateTime?>(saiuDaFila.value);
//     }
//     if (estimativaMinutos.present) {
//       map['ESTIMATIVA_MINUTOS'] = Variable<int?>(estimativaMinutos.value);
//     }
//     if (posicao.present) {
//       map['POSICAO'] = Variable<int?>(posicao.value);
//     }
//     if (prioridade.present) {
//       map['PRIORIDADE'] = Variable<String?>(prioridade.value);
//     }
//     if (inicioPreparo.present) {
//       map['INICIO_PREPARO'] = Variable<DateTime?>(inicioPreparo.value);
//     }
//     if (fimPreparo.present) {
//       map['FIM_PREPARO'] = Variable<DateTime?>(fimPreparo.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('ComandaPedidosCompanion(')
//           ..write('id: $id, ')
//           ..write('idComanda: $idComanda, ')
//           ..write('idCozinha: $idCozinha, ')
//           ..write('entrouNaFila: $entrouNaFila, ')
//           ..write('saiuDaFila: $saiuDaFila, ')
//           ..write('estimativaMinutos: $estimativaMinutos, ')
//           ..write('posicao: $posicao, ')
//           ..write('prioridade: $prioridade, ')
//           ..write('inicioPreparo: $inicioPreparo, ')
//           ..write('fimPreparo: $fimPreparo')
//           ..write(')'))
//         .toString();
//   }
// }

// class $ComandaPedidosTable extends ComandaPedidos
//     with TableInfo<$ComandaPedidosTable, ComandaPedido> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $ComandaPedidosTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idComandaMeta = const VerificationMeta('idComanda');
//   late final GeneratedColumn<int?> idComanda = GeneratedColumn<int?>(
//       'ID_COMANDA', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES COMANDA(ID)');
//   final VerificationMeta _idCozinhaMeta = const VerificationMeta('idCozinha');
//   late final GeneratedColumn<int?> idCozinha = GeneratedColumn<int?>(
//       'ID_COZINHA', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES COZINHA(ID)');
//   final VerificationMeta _entrouNaFilaMeta =
//       const VerificationMeta('entrouNaFila');
//   late final GeneratedColumn<DateTime?> entrouNaFila =
//       GeneratedColumn<DateTime?>('ENTROU_NA_FILA', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _saiuDaFilaMeta = const VerificationMeta('saiuDaFila');
//   late final GeneratedColumn<DateTime?> saiuDaFila = GeneratedColumn<DateTime?>(
//       'SAIU_DA_FILA', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _estimativaMinutosMeta =
//       const VerificationMeta('estimativaMinutos');
//   late final GeneratedColumn<int?> estimativaMinutos = GeneratedColumn<int?>(
//       'ESTIMATIVA_MINUTOS', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _posicaoMeta = const VerificationMeta('posicao');
//   late final GeneratedColumn<int?> posicao = GeneratedColumn<int?>(
//       'POSICAO', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _prioridadeMeta = const VerificationMeta('prioridade');
//   late final GeneratedColumn<String?> prioridade = GeneratedColumn<String?>(
//       'PRIORIDADE', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _inicioPreparoMeta =
//       const VerificationMeta('inicioPreparo');
//   late final GeneratedColumn<DateTime?> inicioPreparo =
//       GeneratedColumn<DateTime?>('INICIO_PREPARO', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _fimPreparoMeta = const VerificationMeta('fimPreparo');
//   late final GeneratedColumn<DateTime?> fimPreparo = GeneratedColumn<DateTime?>(
//       'FIM_PREPARO', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idComanda,
//         idCozinha,
//         entrouNaFila,
//         saiuDaFila,
//         estimativaMinutos,
//         posicao,
//         prioridade,
//         inicioPreparo,
//         fimPreparo
//       ];
//   @override
//   String get aliasedName => _alias ?? 'COMANDA_PEDIDO';
//   @override
//   String get actualTableName => 'COMANDA_PEDIDO';
//   @override
//   VerificationContext validateIntegrity(Insertable<ComandaPedido> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_COMANDA')) {
//       context.handle(_idComandaMeta,
//           idComanda.isAcceptableOrUnknown(data['ID_COMANDA']!, _idComandaMeta));
//     }
//     if (data.containsKey('ID_COZINHA')) {
//       context.handle(_idCozinhaMeta,
//           idCozinha.isAcceptableOrUnknown(data['ID_COZINHA']!, _idCozinhaMeta));
//     }
//     if (data.containsKey('ENTROU_NA_FILA')) {
//       context.handle(
//           _entrouNaFilaMeta,
//           entrouNaFila.isAcceptableOrUnknown(
//               data['ENTROU_NA_FILA']!, _entrouNaFilaMeta));
//     }
//     if (data.containsKey('SAIU_DA_FILA')) {
//       context.handle(
//           _saiuDaFilaMeta,
//           saiuDaFila.isAcceptableOrUnknown(
//               data['SAIU_DA_FILA']!, _saiuDaFilaMeta));
//     }
//     if (data.containsKey('ESTIMATIVA_MINUTOS')) {
//       context.handle(
//           _estimativaMinutosMeta,
//           estimativaMinutos.isAcceptableOrUnknown(
//               data['ESTIMATIVA_MINUTOS']!, _estimativaMinutosMeta));
//     }
//     if (data.containsKey('POSICAO')) {
//       context.handle(_posicaoMeta,
//           posicao.isAcceptableOrUnknown(data['POSICAO']!, _posicaoMeta));
//     }
//     if (data.containsKey('PRIORIDADE')) {
//       context.handle(
//           _prioridadeMeta,
//           prioridade.isAcceptableOrUnknown(
//               data['PRIORIDADE']!, _prioridadeMeta));
//     }
//     if (data.containsKey('INICIO_PREPARO')) {
//       context.handle(
//           _inicioPreparoMeta,
//           inicioPreparo.isAcceptableOrUnknown(
//               data['INICIO_PREPARO']!, _inicioPreparoMeta));
//     }
//     if (data.containsKey('FIM_PREPARO')) {
//       context.handle(
//           _fimPreparoMeta,
//           fimPreparo.isAcceptableOrUnknown(
//               data['FIM_PREPARO']!, _fimPreparoMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   ComandaPedido map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return ComandaPedido(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idComanda: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_COMANDA']),
//       idCozinha: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_COZINHA']),
//       entrouNaFila: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ENTROU_NA_FILA']),
//       saiuDaFila: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}SAIU_DA_FILA']),
//       estimativaMinutos: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ESTIMATIVA_MINUTOS']),
//       posicao: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}POSICAO']),
//       prioridade: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}PRIORIDADE']),
//       inicioPreparo: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}INICIO_PREPARO']),
//       fimPreparo: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}FIM_PREPARO']),
//     );
//   }

//   @override
//   $ComandaPedidosTable createAlias(String alias) {
//     return $ComandaPedidosTable(_db, alias);
//   }
// }

// class CompraPedidoCabecalhosCompanion
//     extends UpdateCompanion<CompraPedidoCabecalho> {
//   final Value<int> id;
//   final Value<int?> idColaborador;
//   final Value<int?> idFornecedor;
//   final Value<DateTime?> dataPedido;
//   final Value<DateTime?> dataPrevisaoEntrega;
//   final Value<DateTime?> dataPrevisaoPagamento;
//   final Value<String?> localEntrega;
//   final Value<String?> localCobranca;
//   final Value<String?> contato;
//   final Value<double?> valorSubtotal;
//   final Value<double?> taxaDesconto;
//   final Value<double?> valorDesconto;
//   final Value<double?> valorTotal;
//   final Value<String?> formaPagamento;
//   final Value<String?> geraFinanceiro;
//   final Value<int?> quantidadeParcelas;
//   final Value<DateTime?> diaPrimeiroVencimento;
//   final Value<int?> intervaloEntreParcelas;
//   final Value<String?> diaFixoParcela;
//   final Value<DateTime?> dataRecebimentoItens;
//   final Value<String?> horaRecebimentoItens;
//   final Value<String?> atualizouEstoque;
//   final Value<String?> numeroDocumentoEntrada;
//   const CompraPedidoCabecalhosCompanion({
//     this.id = const Value.absent(),
//     this.idColaborador = const Value.absent(),
//     this.idFornecedor = const Value.absent(),
//     this.dataPedido = const Value.absent(),
//     this.dataPrevisaoEntrega = const Value.absent(),
//     this.dataPrevisaoPagamento = const Value.absent(),
//     this.localEntrega = const Value.absent(),
//     this.localCobranca = const Value.absent(),
//     this.contato = const Value.absent(),
//     this.valorSubtotal = const Value.absent(),
//     this.taxaDesconto = const Value.absent(),
//     this.valorDesconto = const Value.absent(),
//     this.valorTotal = const Value.absent(),
//     this.formaPagamento = const Value.absent(),
//     this.geraFinanceiro = const Value.absent(),
//     this.quantidadeParcelas = const Value.absent(),
//     this.diaPrimeiroVencimento = const Value.absent(),
//     this.intervaloEntreParcelas = const Value.absent(),
//     this.diaFixoParcela = const Value.absent(),
//     this.dataRecebimentoItens = const Value.absent(),
//     this.horaRecebimentoItens = const Value.absent(),
//     this.atualizouEstoque = const Value.absent(),
//     this.numeroDocumentoEntrada = const Value.absent(),
//   });
//   CompraPedidoCabecalhosCompanion.insert({
//     this.id = const Value.absent(),
//     this.idColaborador = const Value.absent(),
//     this.idFornecedor = const Value.absent(),
//     this.dataPedido = const Value.absent(),
//     this.dataPrevisaoEntrega = const Value.absent(),
//     this.dataPrevisaoPagamento = const Value.absent(),
//     this.localEntrega = const Value.absent(),
//     this.localCobranca = const Value.absent(),
//     this.contato = const Value.absent(),
//     this.valorSubtotal = const Value.absent(),
//     this.taxaDesconto = const Value.absent(),
//     this.valorDesconto = const Value.absent(),
//     this.valorTotal = const Value.absent(),
//     this.formaPagamento = const Value.absent(),
//     this.geraFinanceiro = const Value.absent(),
//     this.quantidadeParcelas = const Value.absent(),
//     this.diaPrimeiroVencimento = const Value.absent(),
//     this.intervaloEntreParcelas = const Value.absent(),
//     this.diaFixoParcela = const Value.absent(),
//     this.dataRecebimentoItens = const Value.absent(),
//     this.horaRecebimentoItens = const Value.absent(),
//     this.atualizouEstoque = const Value.absent(),
//     this.numeroDocumentoEntrada = const Value.absent(),
//   });
//   static Insertable<CompraPedidoCabecalho> custom({
//     Expression<int>? id,
//     Expression<int?>? idColaborador,
//     Expression<int?>? idFornecedor,
//     Expression<DateTime?>? dataPedido,
//     Expression<DateTime?>? dataPrevisaoEntrega,
//     Expression<DateTime?>? dataPrevisaoPagamento,
//     Expression<String?>? localEntrega,
//     Expression<String?>? localCobranca,
//     Expression<String?>? contato,
//     Expression<double?>? valorSubtotal,
//     Expression<double?>? taxaDesconto,
//     Expression<double?>? valorDesconto,
//     Expression<double?>? valorTotal,
//     Expression<String?>? formaPagamento,
//     Expression<String?>? geraFinanceiro,
//     Expression<int?>? quantidadeParcelas,
//     Expression<DateTime?>? diaPrimeiroVencimento,
//     Expression<int?>? intervaloEntreParcelas,
//     Expression<String?>? diaFixoParcela,
//     Expression<DateTime?>? dataRecebimentoItens,
//     Expression<String?>? horaRecebimentoItens,
//     Expression<String?>? atualizouEstoque,
//     Expression<String?>? numeroDocumentoEntrada,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idColaborador != null) 'ID_COLABORADOR': idColaborador,
//       if (idFornecedor != null) 'ID_FORNECEDOR': idFornecedor,
//       if (dataPedido != null) 'DATA_PEDIDO': dataPedido,
//       if (dataPrevisaoEntrega != null)
//         'DATA_PREVISAO_ENTREGA': dataPrevisaoEntrega,
//       if (dataPrevisaoPagamento != null)
//         'DATA_PREVISAO_PAGAMENTO': dataPrevisaoPagamento,
//       if (localEntrega != null) 'LOCAL_ENTREGA': localEntrega,
//       if (localCobranca != null) 'LOCAL_COBRANCA': localCobranca,
//       if (contato != null) 'CONTATO': contato,
//       if (valorSubtotal != null) 'VALOR_SUBTOTAL': valorSubtotal,
//       if (taxaDesconto != null) 'TAXA_DESCONTO': taxaDesconto,
//       if (valorDesconto != null) 'VALOR_DESCONTO': valorDesconto,
//       if (valorTotal != null) 'VALOR_TOTAL': valorTotal,
//       if (formaPagamento != null) 'FORMA_PAGAMENTO': formaPagamento,
//       if (geraFinanceiro != null) 'GERA_FINANCEIRO': geraFinanceiro,
//       if (quantidadeParcelas != null) 'QUANTIDADE_PARCELAS': quantidadeParcelas,
//       if (diaPrimeiroVencimento != null)
//         'DIA_PRIMEIRO_VENCIMENTO': diaPrimeiroVencimento,
//       if (intervaloEntreParcelas != null)
//         'INTERVALO_ENTRE_PARCELAS': intervaloEntreParcelas,
//       if (diaFixoParcela != null) 'DIA_FIXO_PARCELA': diaFixoParcela,
//       if (dataRecebimentoItens != null)
//         'DATA_RECEBIMENTO_ITENS': dataRecebimentoItens,
//       if (horaRecebimentoItens != null)
//         'HORA_RECEBIMENTO_ITENS': horaRecebimentoItens,
//       if (atualizouEstoque != null) 'ATUALIZOU_ESTOQUE': atualizouEstoque,
//       if (numeroDocumentoEntrada != null)
//         'NUMERO_DOCUMENTO_ENTRADA': numeroDocumentoEntrada,
//     });
//   }

//   CompraPedidoCabecalhosCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idColaborador,
//       Value<int?>? idFornecedor,
//       Value<DateTime?>? dataPedido,
//       Value<DateTime?>? dataPrevisaoEntrega,
//       Value<DateTime?>? dataPrevisaoPagamento,
//       Value<String?>? localEntrega,
//       Value<String?>? localCobranca,
//       Value<String?>? contato,
//       Value<double?>? valorSubtotal,
//       Value<double?>? taxaDesconto,
//       Value<double?>? valorDesconto,
//       Value<double?>? valorTotal,
//       Value<String?>? formaPagamento,
//       Value<String?>? geraFinanceiro,
//       Value<int?>? quantidadeParcelas,
//       Value<DateTime?>? diaPrimeiroVencimento,
//       Value<int?>? intervaloEntreParcelas,
//       Value<String?>? diaFixoParcela,
//       Value<DateTime?>? dataRecebimentoItens,
//       Value<String?>? horaRecebimentoItens,
//       Value<String?>? atualizouEstoque,
//       Value<String?>? numeroDocumentoEntrada}) {
//     return CompraPedidoCabecalhosCompanion(
//       id: id ?? this.id,
//       idColaborador: idColaborador ?? this.idColaborador,
//       idFornecedor: idFornecedor ?? this.idFornecedor,
//       dataPedido: dataPedido ?? this.dataPedido,
//       dataPrevisaoEntrega: dataPrevisaoEntrega ?? this.dataPrevisaoEntrega,
//       dataPrevisaoPagamento:
//           dataPrevisaoPagamento ?? this.dataPrevisaoPagamento,
//       localEntrega: localEntrega ?? this.localEntrega,
//       localCobranca: localCobranca ?? this.localCobranca,
//       contato: contato ?? this.contato,
//       valorSubtotal: valorSubtotal ?? this.valorSubtotal,
//       taxaDesconto: taxaDesconto ?? this.taxaDesconto,
//       valorDesconto: valorDesconto ?? this.valorDesconto,
//       valorTotal: valorTotal ?? this.valorTotal,
//       formaPagamento: formaPagamento ?? this.formaPagamento,
//       geraFinanceiro: geraFinanceiro ?? this.geraFinanceiro,
//       quantidadeParcelas: quantidadeParcelas ?? this.quantidadeParcelas,
//       diaPrimeiroVencimento:
//           diaPrimeiroVencimento ?? this.diaPrimeiroVencimento,
//       intervaloEntreParcelas:
//           intervaloEntreParcelas ?? this.intervaloEntreParcelas,
//       diaFixoParcela: diaFixoParcela ?? this.diaFixoParcela,
//       dataRecebimentoItens: dataRecebimentoItens ?? this.dataRecebimentoItens,
//       horaRecebimentoItens: horaRecebimentoItens ?? this.horaRecebimentoItens,
//       atualizouEstoque: atualizouEstoque ?? this.atualizouEstoque,
//       numeroDocumentoEntrada:
//           numeroDocumentoEntrada ?? this.numeroDocumentoEntrada,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idColaborador.present) {
//       map['ID_COLABORADOR'] = Variable<int?>(idColaborador.value);
//     }
//     if (idFornecedor.present) {
//       map['ID_FORNECEDOR'] = Variable<int?>(idFornecedor.value);
//     }
//     if (dataPedido.present) {
//       map['DATA_PEDIDO'] = Variable<DateTime?>(dataPedido.value);
//     }
//     if (dataPrevisaoEntrega.present) {
//       map['DATA_PREVISAO_ENTREGA'] =
//           Variable<DateTime?>(dataPrevisaoEntrega.value);
//     }
//     if (dataPrevisaoPagamento.present) {
//       map['DATA_PREVISAO_PAGAMENTO'] =
//           Variable<DateTime?>(dataPrevisaoPagamento.value);
//     }
//     if (localEntrega.present) {
//       map['LOCAL_ENTREGA'] = Variable<String?>(localEntrega.value);
//     }
//     if (localCobranca.present) {
//       map['LOCAL_COBRANCA'] = Variable<String?>(localCobranca.value);
//     }
//     if (contato.present) {
//       map['CONTATO'] = Variable<String?>(contato.value);
//     }
//     if (valorSubtotal.present) {
//       map['VALOR_SUBTOTAL'] = Variable<double?>(valorSubtotal.value);
//     }
//     if (taxaDesconto.present) {
//       map['TAXA_DESCONTO'] = Variable<double?>(taxaDesconto.value);
//     }
//     if (valorDesconto.present) {
//       map['VALOR_DESCONTO'] = Variable<double?>(valorDesconto.value);
//     }
//     if (valorTotal.present) {
//       map['VALOR_TOTAL'] = Variable<double?>(valorTotal.value);
//     }
//     if (formaPagamento.present) {
//       map['FORMA_PAGAMENTO'] = Variable<String?>(formaPagamento.value);
//     }
//     if (geraFinanceiro.present) {
//       map['GERA_FINANCEIRO'] = Variable<String?>(geraFinanceiro.value);
//     }
//     if (quantidadeParcelas.present) {
//       map['QUANTIDADE_PARCELAS'] = Variable<int?>(quantidadeParcelas.value);
//     }
//     if (diaPrimeiroVencimento.present) {
//       map['DIA_PRIMEIRO_VENCIMENTO'] =
//           Variable<DateTime?>(diaPrimeiroVencimento.value);
//     }
//     if (intervaloEntreParcelas.present) {
//       map['INTERVALO_ENTRE_PARCELAS'] =
//           Variable<int?>(intervaloEntreParcelas.value);
//     }
//     if (diaFixoParcela.present) {
//       map['DIA_FIXO_PARCELA'] = Variable<String?>(diaFixoParcela.value);
//     }
//     if (dataRecebimentoItens.present) {
//       map['DATA_RECEBIMENTO_ITENS'] =
//           Variable<DateTime?>(dataRecebimentoItens.value);
//     }
//     if (horaRecebimentoItens.present) {
//       map['HORA_RECEBIMENTO_ITENS'] =
//           Variable<String?>(horaRecebimentoItens.value);
//     }
//     if (atualizouEstoque.present) {
//       map['ATUALIZOU_ESTOQUE'] = Variable<String?>(atualizouEstoque.value);
//     }
//     if (numeroDocumentoEntrada.present) {
//       map['NUMERO_DOCUMENTO_ENTRADA'] =
//           Variable<String?>(numeroDocumentoEntrada.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('CompraPedidoCabecalhosCompanion(')
//           ..write('id: $id, ')
//           ..write('idColaborador: $idColaborador, ')
//           ..write('idFornecedor: $idFornecedor, ')
//           ..write('dataPedido: $dataPedido, ')
//           ..write('dataPrevisaoEntrega: $dataPrevisaoEntrega, ')
//           ..write('dataPrevisaoPagamento: $dataPrevisaoPagamento, ')
//           ..write('localEntrega: $localEntrega, ')
//           ..write('localCobranca: $localCobranca, ')
//           ..write('contato: $contato, ')
//           ..write('valorSubtotal: $valorSubtotal, ')
//           ..write('taxaDesconto: $taxaDesconto, ')
//           ..write('valorDesconto: $valorDesconto, ')
//           ..write('valorTotal: $valorTotal, ')
//           ..write('formaPagamento: $formaPagamento, ')
//           ..write('geraFinanceiro: $geraFinanceiro, ')
//           ..write('quantidadeParcelas: $quantidadeParcelas, ')
//           ..write('diaPrimeiroVencimento: $diaPrimeiroVencimento, ')
//           ..write('intervaloEntreParcelas: $intervaloEntreParcelas, ')
//           ..write('diaFixoParcela: $diaFixoParcela, ')
//           ..write('dataRecebimentoItens: $dataRecebimentoItens, ')
//           ..write('horaRecebimentoItens: $horaRecebimentoItens, ')
//           ..write('atualizouEstoque: $atualizouEstoque, ')
//           ..write('numeroDocumentoEntrada: $numeroDocumentoEntrada')
//           ..write(')'))
//         .toString();
//   }
// }

// class $CompraPedidoCabecalhosTable extends CompraPedidoCabecalhos
//     with TableInfo<$CompraPedidoCabecalhosTable, CompraPedidoCabecalho> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $CompraPedidoCabecalhosTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idColaboradorMeta =
//       const VerificationMeta('idColaborador');
//   late final GeneratedColumn<int?> idColaborador = GeneratedColumn<int?>(
//       'ID_COLABORADOR', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES COLABORADOR(ID)');
//   final VerificationMeta _idFornecedorMeta =
//       const VerificationMeta('idFornecedor');
//   late final GeneratedColumn<int?> idFornecedor = GeneratedColumn<int?>(
//       'ID_FORNECEDOR', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES FORNECEDOR(ID)');
//   final VerificationMeta _dataPedidoMeta = const VerificationMeta('dataPedido');
//   late final GeneratedColumn<DateTime?> dataPedido = GeneratedColumn<DateTime?>(
//       'DATA_PEDIDO', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _dataPrevisaoEntregaMeta =
//       const VerificationMeta('dataPrevisaoEntrega');
//   late final GeneratedColumn<DateTime?> dataPrevisaoEntrega =
//       GeneratedColumn<DateTime?>('DATA_PREVISAO_ENTREGA', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _dataPrevisaoPagamentoMeta =
//       const VerificationMeta('dataPrevisaoPagamento');
//   late final GeneratedColumn<DateTime?> dataPrevisaoPagamento =
//       GeneratedColumn<DateTime?>('DATA_PREVISAO_PAGAMENTO', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _localEntregaMeta =
//       const VerificationMeta('localEntrega');
//   late final GeneratedColumn<String?> localEntrega = GeneratedColumn<String?>(
//       'LOCAL_ENTREGA', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _localCobrancaMeta =
//       const VerificationMeta('localCobranca');
//   late final GeneratedColumn<String?> localCobranca = GeneratedColumn<String?>(
//       'LOCAL_COBRANCA', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _contatoMeta = const VerificationMeta('contato');
//   late final GeneratedColumn<String?> contato = GeneratedColumn<String?>(
//       'CONTATO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 50),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _valorSubtotalMeta =
//       const VerificationMeta('valorSubtotal');
//   late final GeneratedColumn<double?> valorSubtotal = GeneratedColumn<double?>(
//       'VALOR_SUBTOTAL', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _taxaDescontoMeta =
//       const VerificationMeta('taxaDesconto');
//   late final GeneratedColumn<double?> taxaDesconto = GeneratedColumn<double?>(
//       'TAXA_DESCONTO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorDescontoMeta =
//       const VerificationMeta('valorDesconto');
//   late final GeneratedColumn<double?> valorDesconto = GeneratedColumn<double?>(
//       'VALOR_DESCONTO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorTotalMeta = const VerificationMeta('valorTotal');
//   late final GeneratedColumn<double?> valorTotal = GeneratedColumn<double?>(
//       'VALOR_TOTAL', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _formaPagamentoMeta =
//       const VerificationMeta('formaPagamento');
//   late final GeneratedColumn<String?> formaPagamento = GeneratedColumn<String?>(
//       'FORMA_PAGAMENTO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _geraFinanceiroMeta =
//       const VerificationMeta('geraFinanceiro');
//   late final GeneratedColumn<String?> geraFinanceiro = GeneratedColumn<String?>(
//       'GERA_FINANCEIRO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _quantidadeParcelasMeta =
//       const VerificationMeta('quantidadeParcelas');
//   late final GeneratedColumn<int?> quantidadeParcelas = GeneratedColumn<int?>(
//       'QUANTIDADE_PARCELAS', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _diaPrimeiroVencimentoMeta =
//       const VerificationMeta('diaPrimeiroVencimento');
//   late final GeneratedColumn<DateTime?> diaPrimeiroVencimento =
//       GeneratedColumn<DateTime?>('DIA_PRIMEIRO_VENCIMENTO', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _intervaloEntreParcelasMeta =
//       const VerificationMeta('intervaloEntreParcelas');
//   late final GeneratedColumn<int?> intervaloEntreParcelas =
//       GeneratedColumn<int?>('INTERVALO_ENTRE_PARCELAS', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _diaFixoParcelaMeta =
//       const VerificationMeta('diaFixoParcela');
//   late final GeneratedColumn<String?> diaFixoParcela = GeneratedColumn<String?>(
//       'DIA_FIXO_PARCELA', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _dataRecebimentoItensMeta =
//       const VerificationMeta('dataRecebimentoItens');
//   late final GeneratedColumn<DateTime?> dataRecebimentoItens =
//       GeneratedColumn<DateTime?>('DATA_RECEBIMENTO_ITENS', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _horaRecebimentoItensMeta =
//       const VerificationMeta('horaRecebimentoItens');
//   late final GeneratedColumn<String?> horaRecebimentoItens =
//       GeneratedColumn<String?>('HORA_RECEBIMENTO_ITENS', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 8),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _atualizouEstoqueMeta =
//       const VerificationMeta('atualizouEstoque');
//   late final GeneratedColumn<String?> atualizouEstoque =
//       GeneratedColumn<String?>('ATUALIZOU_ESTOQUE', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _numeroDocumentoEntradaMeta =
//       const VerificationMeta('numeroDocumentoEntrada');
//   late final GeneratedColumn<String?> numeroDocumentoEntrada =
//       GeneratedColumn<String?>('NUMERO_DOCUMENTO_ENTRADA', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 50),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idColaborador,
//         idFornecedor,
//         dataPedido,
//         dataPrevisaoEntrega,
//         dataPrevisaoPagamento,
//         localEntrega,
//         localCobranca,
//         contato,
//         valorSubtotal,
//         taxaDesconto,
//         valorDesconto,
//         valorTotal,
//         formaPagamento,
//         geraFinanceiro,
//         quantidadeParcelas,
//         diaPrimeiroVencimento,
//         intervaloEntreParcelas,
//         diaFixoParcela,
//         dataRecebimentoItens,
//         horaRecebimentoItens,
//         atualizouEstoque,
//         numeroDocumentoEntrada
//       ];
//   @override
//   String get aliasedName => _alias ?? 'COMPRA_PEDIDO_CABECALHO';
//   @override
//   String get actualTableName => 'COMPRA_PEDIDO_CABECALHO';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<CompraPedidoCabecalho> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_COLABORADOR')) {
//       context.handle(
//           _idColaboradorMeta,
//           idColaborador.isAcceptableOrUnknown(
//               data['ID_COLABORADOR']!, _idColaboradorMeta));
//     }
//     if (data.containsKey('ID_FORNECEDOR')) {
//       context.handle(
//           _idFornecedorMeta,
//           idFornecedor.isAcceptableOrUnknown(
//               data['ID_FORNECEDOR']!, _idFornecedorMeta));
//     }
//     if (data.containsKey('DATA_PEDIDO')) {
//       context.handle(
//           _dataPedidoMeta,
//           dataPedido.isAcceptableOrUnknown(
//               data['DATA_PEDIDO']!, _dataPedidoMeta));
//     }
//     if (data.containsKey('DATA_PREVISAO_ENTREGA')) {
//       context.handle(
//           _dataPrevisaoEntregaMeta,
//           dataPrevisaoEntrega.isAcceptableOrUnknown(
//               data['DATA_PREVISAO_ENTREGA']!, _dataPrevisaoEntregaMeta));
//     }
//     if (data.containsKey('DATA_PREVISAO_PAGAMENTO')) {
//       context.handle(
//           _dataPrevisaoPagamentoMeta,
//           dataPrevisaoPagamento.isAcceptableOrUnknown(
//               data['DATA_PREVISAO_PAGAMENTO']!, _dataPrevisaoPagamentoMeta));
//     }
//     if (data.containsKey('LOCAL_ENTREGA')) {
//       context.handle(
//           _localEntregaMeta,
//           localEntrega.isAcceptableOrUnknown(
//               data['LOCAL_ENTREGA']!, _localEntregaMeta));
//     }
//     if (data.containsKey('LOCAL_COBRANCA')) {
//       context.handle(
//           _localCobrancaMeta,
//           localCobranca.isAcceptableOrUnknown(
//               data['LOCAL_COBRANCA']!, _localCobrancaMeta));
//     }
//     if (data.containsKey('CONTATO')) {
//       context.handle(_contatoMeta,
//           contato.isAcceptableOrUnknown(data['CONTATO']!, _contatoMeta));
//     }
//     if (data.containsKey('VALOR_SUBTOTAL')) {
//       context.handle(
//           _valorSubtotalMeta,
//           valorSubtotal.isAcceptableOrUnknown(
//               data['VALOR_SUBTOTAL']!, _valorSubtotalMeta));
//     }
//     if (data.containsKey('TAXA_DESCONTO')) {
//       context.handle(
//           _taxaDescontoMeta,
//           taxaDesconto.isAcceptableOrUnknown(
//               data['TAXA_DESCONTO']!, _taxaDescontoMeta));
//     }
//     if (data.containsKey('VALOR_DESCONTO')) {
//       context.handle(
//           _valorDescontoMeta,
//           valorDesconto.isAcceptableOrUnknown(
//               data['VALOR_DESCONTO']!, _valorDescontoMeta));
//     }
//     if (data.containsKey('VALOR_TOTAL')) {
//       context.handle(
//           _valorTotalMeta,
//           valorTotal.isAcceptableOrUnknown(
//               data['VALOR_TOTAL']!, _valorTotalMeta));
//     }
//     if (data.containsKey('FORMA_PAGAMENTO')) {
//       context.handle(
//           _formaPagamentoMeta,
//           formaPagamento.isAcceptableOrUnknown(
//               data['FORMA_PAGAMENTO']!, _formaPagamentoMeta));
//     }
//     if (data.containsKey('GERA_FINANCEIRO')) {
//       context.handle(
//           _geraFinanceiroMeta,
//           geraFinanceiro.isAcceptableOrUnknown(
//               data['GERA_FINANCEIRO']!, _geraFinanceiroMeta));
//     }
//     if (data.containsKey('QUANTIDADE_PARCELAS')) {
//       context.handle(
//           _quantidadeParcelasMeta,
//           quantidadeParcelas.isAcceptableOrUnknown(
//               data['QUANTIDADE_PARCELAS']!, _quantidadeParcelasMeta));
//     }
//     if (data.containsKey('DIA_PRIMEIRO_VENCIMENTO')) {
//       context.handle(
//           _diaPrimeiroVencimentoMeta,
//           diaPrimeiroVencimento.isAcceptableOrUnknown(
//               data['DIA_PRIMEIRO_VENCIMENTO']!, _diaPrimeiroVencimentoMeta));
//     }
//     if (data.containsKey('INTERVALO_ENTRE_PARCELAS')) {
//       context.handle(
//           _intervaloEntreParcelasMeta,
//           intervaloEntreParcelas.isAcceptableOrUnknown(
//               data['INTERVALO_ENTRE_PARCELAS']!, _intervaloEntreParcelasMeta));
//     }
//     if (data.containsKey('DIA_FIXO_PARCELA')) {
//       context.handle(
//           _diaFixoParcelaMeta,
//           diaFixoParcela.isAcceptableOrUnknown(
//               data['DIA_FIXO_PARCELA']!, _diaFixoParcelaMeta));
//     }
//     if (data.containsKey('DATA_RECEBIMENTO_ITENS')) {
//       context.handle(
//           _dataRecebimentoItensMeta,
//           dataRecebimentoItens.isAcceptableOrUnknown(
//               data['DATA_RECEBIMENTO_ITENS']!, _dataRecebimentoItensMeta));
//     }
//     if (data.containsKey('HORA_RECEBIMENTO_ITENS')) {
//       context.handle(
//           _horaRecebimentoItensMeta,
//           horaRecebimentoItens.isAcceptableOrUnknown(
//               data['HORA_RECEBIMENTO_ITENS']!, _horaRecebimentoItensMeta));
//     }
//     if (data.containsKey('ATUALIZOU_ESTOQUE')) {
//       context.handle(
//           _atualizouEstoqueMeta,
//           atualizouEstoque.isAcceptableOrUnknown(
//               data['ATUALIZOU_ESTOQUE']!, _atualizouEstoqueMeta));
//     }
//     if (data.containsKey('NUMERO_DOCUMENTO_ENTRADA')) {
//       context.handle(
//           _numeroDocumentoEntradaMeta,
//           numeroDocumentoEntrada.isAcceptableOrUnknown(
//               data['NUMERO_DOCUMENTO_ENTRADA']!, _numeroDocumentoEntradaMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   CompraPedidoCabecalho map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return CompraPedidoCabecalho(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idColaborador: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_COLABORADOR']),
//       idFornecedor: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_FORNECEDOR']),
//       dataPedido: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_PEDIDO']),
//       dataPrevisaoEntrega: const DateTimeType().mapFromDatabaseResponse(
//           data['${effectivePrefix}DATA_PREVISAO_ENTREGA']),
//       dataPrevisaoPagamento: const DateTimeType().mapFromDatabaseResponse(
//           data['${effectivePrefix}DATA_PREVISAO_PAGAMENTO']),
//       localEntrega: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}LOCAL_ENTREGA']),
//       localCobranca: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}LOCAL_COBRANCA']),
//       contato: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CONTATO']),
//       valorSubtotal: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_SUBTOTAL']),
//       taxaDesconto: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TAXA_DESCONTO']),
//       valorDesconto: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_DESCONTO']),
//       valorTotal: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_TOTAL']),
//       formaPagamento: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}FORMA_PAGAMENTO']),
//       geraFinanceiro: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}GERA_FINANCEIRO']),
//       quantidadeParcelas: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}QUANTIDADE_PARCELAS']),
//       diaPrimeiroVencimento: const DateTimeType().mapFromDatabaseResponse(
//           data['${effectivePrefix}DIA_PRIMEIRO_VENCIMENTO']),
//       intervaloEntreParcelas: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}INTERVALO_ENTRE_PARCELAS']),
//       diaFixoParcela: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DIA_FIXO_PARCELA']),
//       dataRecebimentoItens: const DateTimeType().mapFromDatabaseResponse(
//           data['${effectivePrefix}DATA_RECEBIMENTO_ITENS']),
//       horaRecebimentoItens: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}HORA_RECEBIMENTO_ITENS']),
//       atualizouEstoque: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ATUALIZOU_ESTOQUE']),
//       numeroDocumentoEntrada: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}NUMERO_DOCUMENTO_ENTRADA']),
//     );
//   }

//   @override
//   $CompraPedidoCabecalhosTable createAlias(String alias) {
//     return $CompraPedidoCabecalhosTable(_db, alias);
//   }
// }

// class CompraPedidoDetalhesCompanion
//     extends UpdateCompanion<CompraPedidoDetalhe> {
//   final Value<int> id;
//   final Value<int?> idCompraPedidoCabecalho;
//   final Value<int?> idProduto;
//   final Value<double?> quantidade;
//   final Value<double?> valorUnitario;
//   final Value<double?> valorSubtotal;
//   final Value<double?> taxaDesconto;
//   final Value<double?> valorDesconto;
//   final Value<double?> valorTotal;
//   final Value<String?> cst;
//   final Value<String?> csosn;
//   final Value<int?> cfop;
//   const CompraPedidoDetalhesCompanion({
//     this.id = const Value.absent(),
//     this.idCompraPedidoCabecalho = const Value.absent(),
//     this.idProduto = const Value.absent(),
//     this.quantidade = const Value.absent(),
//     this.valorUnitario = const Value.absent(),
//     this.valorSubtotal = const Value.absent(),
//     this.taxaDesconto = const Value.absent(),
//     this.valorDesconto = const Value.absent(),
//     this.valorTotal = const Value.absent(),
//     this.cst = const Value.absent(),
//     this.csosn = const Value.absent(),
//     this.cfop = const Value.absent(),
//   });
//   CompraPedidoDetalhesCompanion.insert({
//     this.id = const Value.absent(),
//     this.idCompraPedidoCabecalho = const Value.absent(),
//     this.idProduto = const Value.absent(),
//     this.quantidade = const Value.absent(),
//     this.valorUnitario = const Value.absent(),
//     this.valorSubtotal = const Value.absent(),
//     this.taxaDesconto = const Value.absent(),
//     this.valorDesconto = const Value.absent(),
//     this.valorTotal = const Value.absent(),
//     this.cst = const Value.absent(),
//     this.csosn = const Value.absent(),
//     this.cfop = const Value.absent(),
//   });
//   static Insertable<CompraPedidoDetalhe> custom({
//     Expression<int>? id,
//     Expression<int?>? idCompraPedidoCabecalho,
//     Expression<int?>? idProduto,
//     Expression<double?>? quantidade,
//     Expression<double?>? valorUnitario,
//     Expression<double?>? valorSubtotal,
//     Expression<double?>? taxaDesconto,
//     Expression<double?>? valorDesconto,
//     Expression<double?>? valorTotal,
//     Expression<String?>? cst,
//     Expression<String?>? csosn,
//     Expression<int?>? cfop,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idCompraPedidoCabecalho != null)
//         'ID_COMPRA_PEDIDO_CABECALHO': idCompraPedidoCabecalho,
//       if (idProduto != null) 'ID_PRODUTO': idProduto,
//       if (quantidade != null) 'QUANTIDADE': quantidade,
//       if (valorUnitario != null) 'VALOR_UNITARIO': valorUnitario,
//       if (valorSubtotal != null) 'VALOR_SUBTOTAL': valorSubtotal,
//       if (taxaDesconto != null) 'TAXA_DESCONTO': taxaDesconto,
//       if (valorDesconto != null) 'VALOR_DESCONTO': valorDesconto,
//       if (valorTotal != null) 'VALOR_TOTAL': valorTotal,
//       if (cst != null) 'CST': cst,
//       if (csosn != null) 'CSOSN': csosn,
//       if (cfop != null) 'CFOP': cfop,
//     });
//   }

//   CompraPedidoDetalhesCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idCompraPedidoCabecalho,
//       Value<int?>? idProduto,
//       Value<double?>? quantidade,
//       Value<double?>? valorUnitario,
//       Value<double?>? valorSubtotal,
//       Value<double?>? taxaDesconto,
//       Value<double?>? valorDesconto,
//       Value<double?>? valorTotal,
//       Value<String?>? cst,
//       Value<String?>? csosn,
//       Value<int?>? cfop}) {
//     return CompraPedidoDetalhesCompanion(
//       id: id ?? this.id,
//       idCompraPedidoCabecalho:
//           idCompraPedidoCabecalho ?? this.idCompraPedidoCabecalho,
//       idProduto: idProduto ?? this.idProduto,
//       quantidade: quantidade ?? this.quantidade,
//       valorUnitario: valorUnitario ?? this.valorUnitario,
//       valorSubtotal: valorSubtotal ?? this.valorSubtotal,
//       taxaDesconto: taxaDesconto ?? this.taxaDesconto,
//       valorDesconto: valorDesconto ?? this.valorDesconto,
//       valorTotal: valorTotal ?? this.valorTotal,
//       cst: cst ?? this.cst,
//       csosn: csosn ?? this.csosn,
//       cfop: cfop ?? this.cfop,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idCompraPedidoCabecalho.present) {
//       map['ID_COMPRA_PEDIDO_CABECALHO'] =
//           Variable<int?>(idCompraPedidoCabecalho.value);
//     }
//     if (idProduto.present) {
//       map['ID_PRODUTO'] = Variable<int?>(idProduto.value);
//     }
//     if (quantidade.present) {
//       map['QUANTIDADE'] = Variable<double?>(quantidade.value);
//     }
//     if (valorUnitario.present) {
//       map['VALOR_UNITARIO'] = Variable<double?>(valorUnitario.value);
//     }
//     if (valorSubtotal.present) {
//       map['VALOR_SUBTOTAL'] = Variable<double?>(valorSubtotal.value);
//     }
//     if (taxaDesconto.present) {
//       map['TAXA_DESCONTO'] = Variable<double?>(taxaDesconto.value);
//     }
//     if (valorDesconto.present) {
//       map['VALOR_DESCONTO'] = Variable<double?>(valorDesconto.value);
//     }
//     if (valorTotal.present) {
//       map['VALOR_TOTAL'] = Variable<double?>(valorTotal.value);
//     }
//     if (cst.present) {
//       map['CST'] = Variable<String?>(cst.value);
//     }
//     if (csosn.present) {
//       map['CSOSN'] = Variable<String?>(csosn.value);
//     }
//     if (cfop.present) {
//       map['CFOP'] = Variable<int?>(cfop.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('CompraPedidoDetalhesCompanion(')
//           ..write('id: $id, ')
//           ..write('idCompraPedidoCabecalho: $idCompraPedidoCabecalho, ')
//           ..write('idProduto: $idProduto, ')
//           ..write('quantidade: $quantidade, ')
//           ..write('valorUnitario: $valorUnitario, ')
//           ..write('valorSubtotal: $valorSubtotal, ')
//           ..write('taxaDesconto: $taxaDesconto, ')
//           ..write('valorDesconto: $valorDesconto, ')
//           ..write('valorTotal: $valorTotal, ')
//           ..write('cst: $cst, ')
//           ..write('csosn: $csosn, ')
//           ..write('cfop: $cfop')
//           ..write(')'))
//         .toString();
//   }
// }

// class $CompraPedidoDetalhesTable extends CompraPedidoDetalhes
//     with TableInfo<$CompraPedidoDetalhesTable, CompraPedidoDetalhe> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $CompraPedidoDetalhesTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idCompraPedidoCabecalhoMeta =
//       const VerificationMeta('idCompraPedidoCabecalho');
//   late final GeneratedColumn<int?> idCompraPedidoCabecalho =
//       GeneratedColumn<int?>('ID_COMPRA_PEDIDO_CABECALHO', aliasedName, true,
//           typeName: 'INTEGER',
//           requiredDuringInsert: false,
//           $customConstraints:
//               'NULLABLE REFERENCES COMPRA_PEDIDO_CABECALHO(ID)');
//   final VerificationMeta _idProdutoMeta = const VerificationMeta('idProduto');
//   late final GeneratedColumn<int?> idProduto = GeneratedColumn<int?>(
//       'ID_PRODUTO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES PRODUTO(ID)');
//   final VerificationMeta _quantidadeMeta = const VerificationMeta('quantidade');
//   late final GeneratedColumn<double?> quantidade = GeneratedColumn<double?>(
//       'QUANTIDADE', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorUnitarioMeta =
//       const VerificationMeta('valorUnitario');
//   late final GeneratedColumn<double?> valorUnitario = GeneratedColumn<double?>(
//       'VALOR_UNITARIO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorSubtotalMeta =
//       const VerificationMeta('valorSubtotal');
//   late final GeneratedColumn<double?> valorSubtotal = GeneratedColumn<double?>(
//       'VALOR_SUBTOTAL', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _taxaDescontoMeta =
//       const VerificationMeta('taxaDesconto');
//   late final GeneratedColumn<double?> taxaDesconto = GeneratedColumn<double?>(
//       'TAXA_DESCONTO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorDescontoMeta =
//       const VerificationMeta('valorDesconto');
//   late final GeneratedColumn<double?> valorDesconto = GeneratedColumn<double?>(
//       'VALOR_DESCONTO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorTotalMeta = const VerificationMeta('valorTotal');
//   late final GeneratedColumn<double?> valorTotal = GeneratedColumn<double?>(
//       'VALOR_TOTAL', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _cstMeta = const VerificationMeta('cst');
//   late final GeneratedColumn<String?> cst = GeneratedColumn<String?>(
//       'CST', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _csosnMeta = const VerificationMeta('csosn');
//   late final GeneratedColumn<String?> csosn = GeneratedColumn<String?>(
//       'CSOSN', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 3),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cfopMeta = const VerificationMeta('cfop');
//   late final GeneratedColumn<int?> cfop = GeneratedColumn<int?>(
//       'CFOP', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idCompraPedidoCabecalho,
//         idProduto,
//         quantidade,
//         valorUnitario,
//         valorSubtotal,
//         taxaDesconto,
//         valorDesconto,
//         valorTotal,
//         cst,
//         csosn,
//         cfop
//       ];
//   @override
//   String get aliasedName => _alias ?? 'COMPRA_PEDIDO_DETALHE';
//   @override
//   String get actualTableName => 'COMPRA_PEDIDO_DETALHE';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<CompraPedidoDetalhe> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_COMPRA_PEDIDO_CABECALHO')) {
//       context.handle(
//           _idCompraPedidoCabecalhoMeta,
//           idCompraPedidoCabecalho.isAcceptableOrUnknown(
//               data['ID_COMPRA_PEDIDO_CABECALHO']!,
//               _idCompraPedidoCabecalhoMeta));
//     }
//     if (data.containsKey('ID_PRODUTO')) {
//       context.handle(_idProdutoMeta,
//           idProduto.isAcceptableOrUnknown(data['ID_PRODUTO']!, _idProdutoMeta));
//     }
//     if (data.containsKey('QUANTIDADE')) {
//       context.handle(
//           _quantidadeMeta,
//           quantidade.isAcceptableOrUnknown(
//               data['QUANTIDADE']!, _quantidadeMeta));
//     }
//     if (data.containsKey('VALOR_UNITARIO')) {
//       context.handle(
//           _valorUnitarioMeta,
//           valorUnitario.isAcceptableOrUnknown(
//               data['VALOR_UNITARIO']!, _valorUnitarioMeta));
//     }
//     if (data.containsKey('VALOR_SUBTOTAL')) {
//       context.handle(
//           _valorSubtotalMeta,
//           valorSubtotal.isAcceptableOrUnknown(
//               data['VALOR_SUBTOTAL']!, _valorSubtotalMeta));
//     }
//     if (data.containsKey('TAXA_DESCONTO')) {
//       context.handle(
//           _taxaDescontoMeta,
//           taxaDesconto.isAcceptableOrUnknown(
//               data['TAXA_DESCONTO']!, _taxaDescontoMeta));
//     }
//     if (data.containsKey('VALOR_DESCONTO')) {
//       context.handle(
//           _valorDescontoMeta,
//           valorDesconto.isAcceptableOrUnknown(
//               data['VALOR_DESCONTO']!, _valorDescontoMeta));
//     }
//     if (data.containsKey('VALOR_TOTAL')) {
//       context.handle(
//           _valorTotalMeta,
//           valorTotal.isAcceptableOrUnknown(
//               data['VALOR_TOTAL']!, _valorTotalMeta));
//     }
//     if (data.containsKey('CST')) {
//       context.handle(
//           _cstMeta, cst.isAcceptableOrUnknown(data['CST']!, _cstMeta));
//     }
//     if (data.containsKey('CSOSN')) {
//       context.handle(
//           _csosnMeta, csosn.isAcceptableOrUnknown(data['CSOSN']!, _csosnMeta));
//     }
//     if (data.containsKey('CFOP')) {
//       context.handle(
//           _cfopMeta, cfop.isAcceptableOrUnknown(data['CFOP']!, _cfopMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   CompraPedidoDetalhe map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return CompraPedidoDetalhe(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idCompraPedidoCabecalho: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ID_COMPRA_PEDIDO_CABECALHO']),
//       idProduto: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_PRODUTO']),
//       quantidade: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}QUANTIDADE']),
//       valorUnitario: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_UNITARIO']),
//       valorSubtotal: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_SUBTOTAL']),
//       taxaDesconto: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TAXA_DESCONTO']),
//       valorDesconto: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_DESCONTO']),
//       valorTotal: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_TOTAL']),
//       cst: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CST']),
//       csosn: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CSOSN']),
//       cfop: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CFOP']),
//     );
//   }

//   @override
//   $CompraPedidoDetalhesTable createAlias(String alias) {
//     return $CompraPedidoDetalhesTable(_db, alias);
//   }
// }

// class ContadorsCompanion extends UpdateCompanion<Contador> {
//   final Value<int> id;
//   final Value<String?> cpf;
//   final Value<String?> cnpj;
//   final Value<String?> nome;
//   final Value<String?> email;
//   final Value<String?> inscricaoCrc;
//   final Value<String?> telefone;
//   final Value<String?> celular;
//   final Value<String?> logradouro;
//   final Value<String?> numero;
//   final Value<String?> complemento;
//   final Value<String?> bairro;
//   final Value<String?> cidade;
//   final Value<String?> uf;
//   final Value<String?> cep;
//   final Value<int?> codigoIbgeCidade;
//   final Value<int?> codigoIbgeUf;
//   const ContadorsCompanion({
//     this.id = const Value.absent(),
//     this.cpf = const Value.absent(),
//     this.cnpj = const Value.absent(),
//     this.nome = const Value.absent(),
//     this.email = const Value.absent(),
//     this.inscricaoCrc = const Value.absent(),
//     this.telefone = const Value.absent(),
//     this.celular = const Value.absent(),
//     this.logradouro = const Value.absent(),
//     this.numero = const Value.absent(),
//     this.complemento = const Value.absent(),
//     this.bairro = const Value.absent(),
//     this.cidade = const Value.absent(),
//     this.uf = const Value.absent(),
//     this.cep = const Value.absent(),
//     this.codigoIbgeCidade = const Value.absent(),
//     this.codigoIbgeUf = const Value.absent(),
//   });
//   ContadorsCompanion.insert({
//     this.id = const Value.absent(),
//     this.cpf = const Value.absent(),
//     this.cnpj = const Value.absent(),
//     this.nome = const Value.absent(),
//     this.email = const Value.absent(),
//     this.inscricaoCrc = const Value.absent(),
//     this.telefone = const Value.absent(),
//     this.celular = const Value.absent(),
//     this.logradouro = const Value.absent(),
//     this.numero = const Value.absent(),
//     this.complemento = const Value.absent(),
//     this.bairro = const Value.absent(),
//     this.cidade = const Value.absent(),
//     this.uf = const Value.absent(),
//     this.cep = const Value.absent(),
//     this.codigoIbgeCidade = const Value.absent(),
//     this.codigoIbgeUf = const Value.absent(),
//   });
//   static Insertable<Contador> custom({
//     Expression<int>? id,
//     Expression<String?>? cpf,
//     Expression<String?>? cnpj,
//     Expression<String?>? nome,
//     Expression<String?>? email,
//     Expression<String?>? inscricaoCrc,
//     Expression<String?>? telefone,
//     Expression<String?>? celular,
//     Expression<String?>? logradouro,
//     Expression<String?>? numero,
//     Expression<String?>? complemento,
//     Expression<String?>? bairro,
//     Expression<String?>? cidade,
//     Expression<String?>? uf,
//     Expression<String?>? cep,
//     Expression<int?>? codigoIbgeCidade,
//     Expression<int?>? codigoIbgeUf,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (cpf != null) 'CPF': cpf,
//       if (cnpj != null) 'CNPJ': cnpj,
//       if (nome != null) 'NOME': nome,
//       if (email != null) 'EMAIL': email,
//       if (inscricaoCrc != null) 'INSCRICAO_CRC': inscricaoCrc,
//       if (telefone != null) 'TELEFONE': telefone,
//       if (celular != null) 'CELULAR': celular,
//       if (logradouro != null) 'LOGRADOURO': logradouro,
//       if (numero != null) 'NUMERO': numero,
//       if (complemento != null) 'COMPLEMENTO': complemento,
//       if (bairro != null) 'BAIRRO': bairro,
//       if (cidade != null) 'CIDADE': cidade,
//       if (uf != null) 'UF': uf,
//       if (cep != null) 'CEP': cep,
//       if (codigoIbgeCidade != null) 'CODIGO_IBGE_CIDADE': codigoIbgeCidade,
//       if (codigoIbgeUf != null) 'CODIGO_IBGE_UF': codigoIbgeUf,
//     });
//   }

//   ContadorsCompanion copyWith(
//       {Value<int>? id,
//       Value<String?>? cpf,
//       Value<String?>? cnpj,
//       Value<String?>? nome,
//       Value<String?>? email,
//       Value<String?>? inscricaoCrc,
//       Value<String?>? telefone,
//       Value<String?>? celular,
//       Value<String?>? logradouro,
//       Value<String?>? numero,
//       Value<String?>? complemento,
//       Value<String?>? bairro,
//       Value<String?>? cidade,
//       Value<String?>? uf,
//       Value<String?>? cep,
//       Value<int?>? codigoIbgeCidade,
//       Value<int?>? codigoIbgeUf}) {
//     return ContadorsCompanion(
//       id: id ?? this.id,
//       cpf: cpf ?? this.cpf,
//       cnpj: cnpj ?? this.cnpj,
//       nome: nome ?? this.nome,
//       email: email ?? this.email,
//       inscricaoCrc: inscricaoCrc ?? this.inscricaoCrc,
//       telefone: telefone ?? this.telefone,
//       celular: celular ?? this.celular,
//       logradouro: logradouro ?? this.logradouro,
//       numero: numero ?? this.numero,
//       complemento: complemento ?? this.complemento,
//       bairro: bairro ?? this.bairro,
//       cidade: cidade ?? this.cidade,
//       uf: uf ?? this.uf,
//       cep: cep ?? this.cep,
//       codigoIbgeCidade: codigoIbgeCidade ?? this.codigoIbgeCidade,
//       codigoIbgeUf: codigoIbgeUf ?? this.codigoIbgeUf,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (cpf.present) {
//       map['CPF'] = Variable<String?>(cpf.value);
//     }
//     if (cnpj.present) {
//       map['CNPJ'] = Variable<String?>(cnpj.value);
//     }
//     if (nome.present) {
//       map['NOME'] = Variable<String?>(nome.value);
//     }
//     if (email.present) {
//       map['EMAIL'] = Variable<String?>(email.value);
//     }
//     if (inscricaoCrc.present) {
//       map['INSCRICAO_CRC'] = Variable<String?>(inscricaoCrc.value);
//     }
//     if (telefone.present) {
//       map['TELEFONE'] = Variable<String?>(telefone.value);
//     }
//     if (celular.present) {
//       map['CELULAR'] = Variable<String?>(celular.value);
//     }
//     if (logradouro.present) {
//       map['LOGRADOURO'] = Variable<String?>(logradouro.value);
//     }
//     if (numero.present) {
//       map['NUMERO'] = Variable<String?>(numero.value);
//     }
//     if (complemento.present) {
//       map['COMPLEMENTO'] = Variable<String?>(complemento.value);
//     }
//     if (bairro.present) {
//       map['BAIRRO'] = Variable<String?>(bairro.value);
//     }
//     if (cidade.present) {
//       map['CIDADE'] = Variable<String?>(cidade.value);
//     }
//     if (uf.present) {
//       map['UF'] = Variable<String?>(uf.value);
//     }
//     if (cep.present) {
//       map['CEP'] = Variable<String?>(cep.value);
//     }
//     if (codigoIbgeCidade.present) {
//       map['CODIGO_IBGE_CIDADE'] = Variable<int?>(codigoIbgeCidade.value);
//     }
//     if (codigoIbgeUf.present) {
//       map['CODIGO_IBGE_UF'] = Variable<int?>(codigoIbgeUf.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('ContadorsCompanion(')
//           ..write('id: $id, ')
//           ..write('cpf: $cpf, ')
//           ..write('cnpj: $cnpj, ')
//           ..write('nome: $nome, ')
//           ..write('email: $email, ')
//           ..write('inscricaoCrc: $inscricaoCrc, ')
//           ..write('telefone: $telefone, ')
//           ..write('celular: $celular, ')
//           ..write('logradouro: $logradouro, ')
//           ..write('numero: $numero, ')
//           ..write('complemento: $complemento, ')
//           ..write('bairro: $bairro, ')
//           ..write('cidade: $cidade, ')
//           ..write('uf: $uf, ')
//           ..write('cep: $cep, ')
//           ..write('codigoIbgeCidade: $codigoIbgeCidade, ')
//           ..write('codigoIbgeUf: $codigoIbgeUf')
//           ..write(')'))
//         .toString();
//   }
// }

// class $ContadorsTable extends Contadors
//     with TableInfo<$ContadorsTable, Contador> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $ContadorsTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _cpfMeta = const VerificationMeta('cpf');
//   late final GeneratedColumn<String?> cpf = GeneratedColumn<String?>(
//       'CPF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 11),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cnpjMeta = const VerificationMeta('cnpj');
//   late final GeneratedColumn<String?> cnpj = GeneratedColumn<String?>(
//       'CNPJ', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _nomeMeta = const VerificationMeta('nome');
//   late final GeneratedColumn<String?> nome = GeneratedColumn<String?>(
//       'NOME', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _emailMeta = const VerificationMeta('email');
//   late final GeneratedColumn<String?> email = GeneratedColumn<String?>(
//       'EMAIL', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _inscricaoCrcMeta =
//       const VerificationMeta('inscricaoCrc');
//   late final GeneratedColumn<String?> inscricaoCrc = GeneratedColumn<String?>(
//       'INSCRICAO_CRC', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 15),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _telefoneMeta = const VerificationMeta('telefone');
//   late final GeneratedColumn<String?> telefone = GeneratedColumn<String?>(
//       'TELEFONE', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 15),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _celularMeta = const VerificationMeta('celular');
//   late final GeneratedColumn<String?> celular = GeneratedColumn<String?>(
//       'CELULAR', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 15),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _logradouroMeta = const VerificationMeta('logradouro');
//   late final GeneratedColumn<String?> logradouro = GeneratedColumn<String?>(
//       'LOGRADOURO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _numeroMeta = const VerificationMeta('numero');
//   late final GeneratedColumn<String?> numero = GeneratedColumn<String?>(
//       'NUMERO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 10),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _complementoMeta =
//       const VerificationMeta('complemento');
//   late final GeneratedColumn<String?> complemento = GeneratedColumn<String?>(
//       'COMPLEMENTO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _bairroMeta = const VerificationMeta('bairro');
//   late final GeneratedColumn<String?> bairro = GeneratedColumn<String?>(
//       'BAIRRO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cidadeMeta = const VerificationMeta('cidade');
//   late final GeneratedColumn<String?> cidade = GeneratedColumn<String?>(
//       'CIDADE', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _ufMeta = const VerificationMeta('uf');
//   late final GeneratedColumn<String?> uf = GeneratedColumn<String?>(
//       'UF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cepMeta = const VerificationMeta('cep');
//   late final GeneratedColumn<String?> cep = GeneratedColumn<String?>(
//       'CEP', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _codigoIbgeCidadeMeta =
//       const VerificationMeta('codigoIbgeCidade');
//   late final GeneratedColumn<int?> codigoIbgeCidade = GeneratedColumn<int?>(
//       'CODIGO_IBGE_CIDADE', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _codigoIbgeUfMeta =
//       const VerificationMeta('codigoIbgeUf');
//   late final GeneratedColumn<int?> codigoIbgeUf = GeneratedColumn<int?>(
//       'CODIGO_IBGE_UF', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         cpf,
//         cnpj,
//         nome,
//         email,
//         inscricaoCrc,
//         telefone,
//         celular,
//         logradouro,
//         numero,
//         complemento,
//         bairro,
//         cidade,
//         uf,
//         cep,
//         codigoIbgeCidade,
//         codigoIbgeUf
//       ];
//   @override
//   String get aliasedName => _alias ?? 'CONTADOR';
//   @override
//   String get actualTableName => 'CONTADOR';
//   @override
//   VerificationContext validateIntegrity(Insertable<Contador> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('CPF')) {
//       context.handle(
//           _cpfMeta, cpf.isAcceptableOrUnknown(data['CPF']!, _cpfMeta));
//     }
//     if (data.containsKey('CNPJ')) {
//       context.handle(
//           _cnpjMeta, cnpj.isAcceptableOrUnknown(data['CNPJ']!, _cnpjMeta));
//     }
//     if (data.containsKey('NOME')) {
//       context.handle(
//           _nomeMeta, nome.isAcceptableOrUnknown(data['NOME']!, _nomeMeta));
//     }
//     if (data.containsKey('EMAIL')) {
//       context.handle(
//           _emailMeta, email.isAcceptableOrUnknown(data['EMAIL']!, _emailMeta));
//     }
//     if (data.containsKey('INSCRICAO_CRC')) {
//       context.handle(
//           _inscricaoCrcMeta,
//           inscricaoCrc.isAcceptableOrUnknown(
//               data['INSCRICAO_CRC']!, _inscricaoCrcMeta));
//     }
//     if (data.containsKey('TELEFONE')) {
//       context.handle(_telefoneMeta,
//           telefone.isAcceptableOrUnknown(data['TELEFONE']!, _telefoneMeta));
//     }
//     if (data.containsKey('CELULAR')) {
//       context.handle(_celularMeta,
//           celular.isAcceptableOrUnknown(data['CELULAR']!, _celularMeta));
//     }
//     if (data.containsKey('LOGRADOURO')) {
//       context.handle(
//           _logradouroMeta,
//           logradouro.isAcceptableOrUnknown(
//               data['LOGRADOURO']!, _logradouroMeta));
//     }
//     if (data.containsKey('NUMERO')) {
//       context.handle(_numeroMeta,
//           numero.isAcceptableOrUnknown(data['NUMERO']!, _numeroMeta));
//     }
//     if (data.containsKey('COMPLEMENTO')) {
//       context.handle(
//           _complementoMeta,
//           complemento.isAcceptableOrUnknown(
//               data['COMPLEMENTO']!, _complementoMeta));
//     }
//     if (data.containsKey('BAIRRO')) {
//       context.handle(_bairroMeta,
//           bairro.isAcceptableOrUnknown(data['BAIRRO']!, _bairroMeta));
//     }
//     if (data.containsKey('CIDADE')) {
//       context.handle(_cidadeMeta,
//           cidade.isAcceptableOrUnknown(data['CIDADE']!, _cidadeMeta));
//     }
//     if (data.containsKey('UF')) {
//       context.handle(_ufMeta, uf.isAcceptableOrUnknown(data['UF']!, _ufMeta));
//     }
//     if (data.containsKey('CEP')) {
//       context.handle(
//           _cepMeta, cep.isAcceptableOrUnknown(data['CEP']!, _cepMeta));
//     }
//     if (data.containsKey('CODIGO_IBGE_CIDADE')) {
//       context.handle(
//           _codigoIbgeCidadeMeta,
//           codigoIbgeCidade.isAcceptableOrUnknown(
//               data['CODIGO_IBGE_CIDADE']!, _codigoIbgeCidadeMeta));
//     }
//     if (data.containsKey('CODIGO_IBGE_UF')) {
//       context.handle(
//           _codigoIbgeUfMeta,
//           codigoIbgeUf.isAcceptableOrUnknown(
//               data['CODIGO_IBGE_UF']!, _codigoIbgeUfMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   Contador map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return Contador(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       cpf: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CPF']),
//       cnpj: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CNPJ']),
//       nome: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NOME']),
//       email: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}EMAIL']),
//       inscricaoCrc: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}INSCRICAO_CRC']),
//       telefone: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TELEFONE']),
//       celular: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CELULAR']),
//       logradouro: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}LOGRADOURO']),
//       numero: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO']),
//       complemento: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}COMPLEMENTO']),
//       bairro: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}BAIRRO']),
//       cidade: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CIDADE']),
//       uf: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}UF']),
//       cep: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CEP']),
//       codigoIbgeCidade: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}CODIGO_IBGE_CIDADE']),
//       codigoIbgeUf: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO_IBGE_UF']),
//     );
//   }

//   @override
//   $ContadorsTable createAlias(String alias) {
//     return $ContadorsTable(_db, alias);
//   }
// }

// class ContasPagarsCompanion extends UpdateCompanion<ContasPagar> {
//   final Value<int> id;
//   final Value<int?> idFornecedor;
//   final Value<int?> idCompraPedidoCabecalho;
//   final Value<DateTime?> dataLancamento;
//   final Value<DateTime?> dataVencimento;
//   final Value<DateTime?> dataPagamento;
//   final Value<double?> valorAPagar;
//   final Value<double?> taxaJuro;
//   final Value<double?> taxaMulta;
//   final Value<double?> taxaDesconto;
//   final Value<double?> valorJuro;
//   final Value<double?> valorMulta;
//   final Value<double?> valorDesconto;
//   final Value<double?> valorPago;
//   final Value<String?> numeroDocumento;
//   final Value<String?> historico;
//   final Value<String?> statusPagamento;
//   const ContasPagarsCompanion({
//     this.id = const Value.absent(),
//     this.idFornecedor = const Value.absent(),
//     this.idCompraPedidoCabecalho = const Value.absent(),
//     this.dataLancamento = const Value.absent(),
//     this.dataVencimento = const Value.absent(),
//     this.dataPagamento = const Value.absent(),
//     this.valorAPagar = const Value.absent(),
//     this.taxaJuro = const Value.absent(),
//     this.taxaMulta = const Value.absent(),
//     this.taxaDesconto = const Value.absent(),
//     this.valorJuro = const Value.absent(),
//     this.valorMulta = const Value.absent(),
//     this.valorDesconto = const Value.absent(),
//     this.valorPago = const Value.absent(),
//     this.numeroDocumento = const Value.absent(),
//     this.historico = const Value.absent(),
//     this.statusPagamento = const Value.absent(),
//   });
//   ContasPagarsCompanion.insert({
//     this.id = const Value.absent(),
//     this.idFornecedor = const Value.absent(),
//     this.idCompraPedidoCabecalho = const Value.absent(),
//     this.dataLancamento = const Value.absent(),
//     this.dataVencimento = const Value.absent(),
//     this.dataPagamento = const Value.absent(),
//     this.valorAPagar = const Value.absent(),
//     this.taxaJuro = const Value.absent(),
//     this.taxaMulta = const Value.absent(),
//     this.taxaDesconto = const Value.absent(),
//     this.valorJuro = const Value.absent(),
//     this.valorMulta = const Value.absent(),
//     this.valorDesconto = const Value.absent(),
//     this.valorPago = const Value.absent(),
//     this.numeroDocumento = const Value.absent(),
//     this.historico = const Value.absent(),
//     this.statusPagamento = const Value.absent(),
//   });
//   static Insertable<ContasPagar> custom({
//     Expression<int>? id,
//     Expression<int?>? idFornecedor,
//     Expression<int?>? idCompraPedidoCabecalho,
//     Expression<DateTime?>? dataLancamento,
//     Expression<DateTime?>? dataVencimento,
//     Expression<DateTime?>? dataPagamento,
//     Expression<double?>? valorAPagar,
//     Expression<double?>? taxaJuro,
//     Expression<double?>? taxaMulta,
//     Expression<double?>? taxaDesconto,
//     Expression<double?>? valorJuro,
//     Expression<double?>? valorMulta,
//     Expression<double?>? valorDesconto,
//     Expression<double?>? valorPago,
//     Expression<String?>? numeroDocumento,
//     Expression<String?>? historico,
//     Expression<String?>? statusPagamento,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idFornecedor != null) 'ID_FORNECEDOR': idFornecedor,
//       if (idCompraPedidoCabecalho != null)
//         'ID_COMPRA_PEDIDO_CABECALHO': idCompraPedidoCabecalho,
//       if (dataLancamento != null) 'DATA_LANCAMENTO': dataLancamento,
//       if (dataVencimento != null) 'DATA_VENCIMENTO': dataVencimento,
//       if (dataPagamento != null) 'DATA_PAGAMENTO': dataPagamento,
//       if (valorAPagar != null) 'VALOR_A_PAGAR': valorAPagar,
//       if (taxaJuro != null) 'TAXA_JURO': taxaJuro,
//       if (taxaMulta != null) 'TAXA_MULTA': taxaMulta,
//       if (taxaDesconto != null) 'TAXA_DESCONTO': taxaDesconto,
//       if (valorJuro != null) 'VALOR_JURO': valorJuro,
//       if (valorMulta != null) 'VALOR_MULTA': valorMulta,
//       if (valorDesconto != null) 'VALOR_DESCONTO': valorDesconto,
//       if (valorPago != null) 'VALOR_PAGO': valorPago,
//       if (numeroDocumento != null) 'NUMERO_DOCUMENTO': numeroDocumento,
//       if (historico != null) 'HISTORICO': historico,
//       if (statusPagamento != null) 'STATUS_PAGAMENTO': statusPagamento,
//     });
//   }

//   ContasPagarsCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idFornecedor,
//       Value<int?>? idCompraPedidoCabecalho,
//       Value<DateTime?>? dataLancamento,
//       Value<DateTime?>? dataVencimento,
//       Value<DateTime?>? dataPagamento,
//       Value<double?>? valorAPagar,
//       Value<double?>? taxaJuro,
//       Value<double?>? taxaMulta,
//       Value<double?>? taxaDesconto,
//       Value<double?>? valorJuro,
//       Value<double?>? valorMulta,
//       Value<double?>? valorDesconto,
//       Value<double?>? valorPago,
//       Value<String?>? numeroDocumento,
//       Value<String?>? historico,
//       Value<String?>? statusPagamento}) {
//     return ContasPagarsCompanion(
//       id: id ?? this.id,
//       idFornecedor: idFornecedor ?? this.idFornecedor,
//       idCompraPedidoCabecalho:
//           idCompraPedidoCabecalho ?? this.idCompraPedidoCabecalho,
//       dataLancamento: dataLancamento ?? this.dataLancamento,
//       dataVencimento: dataVencimento ?? this.dataVencimento,
//       dataPagamento: dataPagamento ?? this.dataPagamento,
//       valorAPagar: valorAPagar ?? this.valorAPagar,
//       taxaJuro: taxaJuro ?? this.taxaJuro,
//       taxaMulta: taxaMulta ?? this.taxaMulta,
//       taxaDesconto: taxaDesconto ?? this.taxaDesconto,
//       valorJuro: valorJuro ?? this.valorJuro,
//       valorMulta: valorMulta ?? this.valorMulta,
//       valorDesconto: valorDesconto ?? this.valorDesconto,
//       valorPago: valorPago ?? this.valorPago,
//       numeroDocumento: numeroDocumento ?? this.numeroDocumento,
//       historico: historico ?? this.historico,
//       statusPagamento: statusPagamento ?? this.statusPagamento,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idFornecedor.present) {
//       map['ID_FORNECEDOR'] = Variable<int?>(idFornecedor.value);
//     }
//     if (idCompraPedidoCabecalho.present) {
//       map['ID_COMPRA_PEDIDO_CABECALHO'] =
//           Variable<int?>(idCompraPedidoCabecalho.value);
//     }
//     if (dataLancamento.present) {
//       map['DATA_LANCAMENTO'] = Variable<DateTime?>(dataLancamento.value);
//     }
//     if (dataVencimento.present) {
//       map['DATA_VENCIMENTO'] = Variable<DateTime?>(dataVencimento.value);
//     }
//     if (dataPagamento.present) {
//       map['DATA_PAGAMENTO'] = Variable<DateTime?>(dataPagamento.value);
//     }
//     if (valorAPagar.present) {
//       map['VALOR_A_PAGAR'] = Variable<double?>(valorAPagar.value);
//     }
//     if (taxaJuro.present) {
//       map['TAXA_JURO'] = Variable<double?>(taxaJuro.value);
//     }
//     if (taxaMulta.present) {
//       map['TAXA_MULTA'] = Variable<double?>(taxaMulta.value);
//     }
//     if (taxaDesconto.present) {
//       map['TAXA_DESCONTO'] = Variable<double?>(taxaDesconto.value);
//     }
//     if (valorJuro.present) {
//       map['VALOR_JURO'] = Variable<double?>(valorJuro.value);
//     }
//     if (valorMulta.present) {
//       map['VALOR_MULTA'] = Variable<double?>(valorMulta.value);
//     }
//     if (valorDesconto.present) {
//       map['VALOR_DESCONTO'] = Variable<double?>(valorDesconto.value);
//     }
//     if (valorPago.present) {
//       map['VALOR_PAGO'] = Variable<double?>(valorPago.value);
//     }
//     if (numeroDocumento.present) {
//       map['NUMERO_DOCUMENTO'] = Variable<String?>(numeroDocumento.value);
//     }
//     if (historico.present) {
//       map['HISTORICO'] = Variable<String?>(historico.value);
//     }
//     if (statusPagamento.present) {
//       map['STATUS_PAGAMENTO'] = Variable<String?>(statusPagamento.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('ContasPagarsCompanion(')
//           ..write('id: $id, ')
//           ..write('idFornecedor: $idFornecedor, ')
//           ..write('idCompraPedidoCabecalho: $idCompraPedidoCabecalho, ')
//           ..write('dataLancamento: $dataLancamento, ')
//           ..write('dataVencimento: $dataVencimento, ')
//           ..write('dataPagamento: $dataPagamento, ')
//           ..write('valorAPagar: $valorAPagar, ')
//           ..write('taxaJuro: $taxaJuro, ')
//           ..write('taxaMulta: $taxaMulta, ')
//           ..write('taxaDesconto: $taxaDesconto, ')
//           ..write('valorJuro: $valorJuro, ')
//           ..write('valorMulta: $valorMulta, ')
//           ..write('valorDesconto: $valorDesconto, ')
//           ..write('valorPago: $valorPago, ')
//           ..write('numeroDocumento: $numeroDocumento, ')
//           ..write('historico: $historico, ')
//           ..write('statusPagamento: $statusPagamento')
//           ..write(')'))
//         .toString();
//   }
// }

// class $ContasPagarsTable extends ContasPagars
//     with TableInfo<$ContasPagarsTable, ContasPagar> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $ContasPagarsTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idFornecedorMeta =
//       const VerificationMeta('idFornecedor');
//   late final GeneratedColumn<int?> idFornecedor = GeneratedColumn<int?>(
//       'ID_FORNECEDOR', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES FORNECEDOR(ID)');
//   final VerificationMeta _idCompraPedidoCabecalhoMeta =
//       const VerificationMeta('idCompraPedidoCabecalho');
//   late final GeneratedColumn<int?> idCompraPedidoCabecalho =
//       GeneratedColumn<int?>('ID_COMPRA_PEDIDO_CABECALHO', aliasedName, true,
//           typeName: 'INTEGER',
//           requiredDuringInsert: false,
//           $customConstraints:
//               'NULLABLE REFERENCES COMPRA_PEDIDO_CABECALHO(ID)');
//   final VerificationMeta _dataLancamentoMeta =
//       const VerificationMeta('dataLancamento');
//   late final GeneratedColumn<DateTime?> dataLancamento =
//       GeneratedColumn<DateTime?>('DATA_LANCAMENTO', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _dataVencimentoMeta =
//       const VerificationMeta('dataVencimento');
//   late final GeneratedColumn<DateTime?> dataVencimento =
//       GeneratedColumn<DateTime?>('DATA_VENCIMENTO', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _dataPagamentoMeta =
//       const VerificationMeta('dataPagamento');
//   late final GeneratedColumn<DateTime?> dataPagamento =
//       GeneratedColumn<DateTime?>('DATA_PAGAMENTO', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _valorAPagarMeta =
//       const VerificationMeta('valorAPagar');
//   late final GeneratedColumn<double?> valorAPagar = GeneratedColumn<double?>(
//       'VALOR_A_PAGAR', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _taxaJuroMeta = const VerificationMeta('taxaJuro');
//   late final GeneratedColumn<double?> taxaJuro = GeneratedColumn<double?>(
//       'TAXA_JURO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _taxaMultaMeta = const VerificationMeta('taxaMulta');
//   late final GeneratedColumn<double?> taxaMulta = GeneratedColumn<double?>(
//       'TAXA_MULTA', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _taxaDescontoMeta =
//       const VerificationMeta('taxaDesconto');
//   late final GeneratedColumn<double?> taxaDesconto = GeneratedColumn<double?>(
//       'TAXA_DESCONTO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorJuroMeta = const VerificationMeta('valorJuro');
//   late final GeneratedColumn<double?> valorJuro = GeneratedColumn<double?>(
//       'VALOR_JURO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorMultaMeta = const VerificationMeta('valorMulta');
//   late final GeneratedColumn<double?> valorMulta = GeneratedColumn<double?>(
//       'VALOR_MULTA', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorDescontoMeta =
//       const VerificationMeta('valorDesconto');
//   late final GeneratedColumn<double?> valorDesconto = GeneratedColumn<double?>(
//       'VALOR_DESCONTO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorPagoMeta = const VerificationMeta('valorPago');
//   late final GeneratedColumn<double?> valorPago = GeneratedColumn<double?>(
//       'VALOR_PAGO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _numeroDocumentoMeta =
//       const VerificationMeta('numeroDocumento');
//   late final GeneratedColumn<String?> numeroDocumento =
//       GeneratedColumn<String?>('NUMERO_DOCUMENTO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 50),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _historicoMeta = const VerificationMeta('historico');
//   late final GeneratedColumn<String?> historico = GeneratedColumn<String?>(
//       'HISTORICO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _statusPagamentoMeta =
//       const VerificationMeta('statusPagamento');
//   late final GeneratedColumn<String?> statusPagamento =
//       GeneratedColumn<String?>('STATUS_PAGAMENTO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idFornecedor,
//         idCompraPedidoCabecalho,
//         dataLancamento,
//         dataVencimento,
//         dataPagamento,
//         valorAPagar,
//         taxaJuro,
//         taxaMulta,
//         taxaDesconto,
//         valorJuro,
//         valorMulta,
//         valorDesconto,
//         valorPago,
//         numeroDocumento,
//         historico,
//         statusPagamento
//       ];
//   @override
//   String get aliasedName => _alias ?? 'CONTAS_PAGAR';
//   @override
//   String get actualTableName => 'CONTAS_PAGAR';
//   @override
//   VerificationContext validateIntegrity(Insertable<ContasPagar> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_FORNECEDOR')) {
//       context.handle(
//           _idFornecedorMeta,
//           idFornecedor.isAcceptableOrUnknown(
//               data['ID_FORNECEDOR']!, _idFornecedorMeta));
//     }
//     if (data.containsKey('ID_COMPRA_PEDIDO_CABECALHO')) {
//       context.handle(
//           _idCompraPedidoCabecalhoMeta,
//           idCompraPedidoCabecalho.isAcceptableOrUnknown(
//               data['ID_COMPRA_PEDIDO_CABECALHO']!,
//               _idCompraPedidoCabecalhoMeta));
//     }
//     if (data.containsKey('DATA_LANCAMENTO')) {
//       context.handle(
//           _dataLancamentoMeta,
//           dataLancamento.isAcceptableOrUnknown(
//               data['DATA_LANCAMENTO']!, _dataLancamentoMeta));
//     }
//     if (data.containsKey('DATA_VENCIMENTO')) {
//       context.handle(
//           _dataVencimentoMeta,
//           dataVencimento.isAcceptableOrUnknown(
//               data['DATA_VENCIMENTO']!, _dataVencimentoMeta));
//     }
//     if (data.containsKey('DATA_PAGAMENTO')) {
//       context.handle(
//           _dataPagamentoMeta,
//           dataPagamento.isAcceptableOrUnknown(
//               data['DATA_PAGAMENTO']!, _dataPagamentoMeta));
//     }
//     if (data.containsKey('VALOR_A_PAGAR')) {
//       context.handle(
//           _valorAPagarMeta,
//           valorAPagar.isAcceptableOrUnknown(
//               data['VALOR_A_PAGAR']!, _valorAPagarMeta));
//     }
//     if (data.containsKey('TAXA_JURO')) {
//       context.handle(_taxaJuroMeta,
//           taxaJuro.isAcceptableOrUnknown(data['TAXA_JURO']!, _taxaJuroMeta));
//     }
//     if (data.containsKey('TAXA_MULTA')) {
//       context.handle(_taxaMultaMeta,
//           taxaMulta.isAcceptableOrUnknown(data['TAXA_MULTA']!, _taxaMultaMeta));
//     }
//     if (data.containsKey('TAXA_DESCONTO')) {
//       context.handle(
//           _taxaDescontoMeta,
//           taxaDesconto.isAcceptableOrUnknown(
//               data['TAXA_DESCONTO']!, _taxaDescontoMeta));
//     }
//     if (data.containsKey('VALOR_JURO')) {
//       context.handle(_valorJuroMeta,
//           valorJuro.isAcceptableOrUnknown(data['VALOR_JURO']!, _valorJuroMeta));
//     }
//     if (data.containsKey('VALOR_MULTA')) {
//       context.handle(
//           _valorMultaMeta,
//           valorMulta.isAcceptableOrUnknown(
//               data['VALOR_MULTA']!, _valorMultaMeta));
//     }
//     if (data.containsKey('VALOR_DESCONTO')) {
//       context.handle(
//           _valorDescontoMeta,
//           valorDesconto.isAcceptableOrUnknown(
//               data['VALOR_DESCONTO']!, _valorDescontoMeta));
//     }
//     if (data.containsKey('VALOR_PAGO')) {
//       context.handle(_valorPagoMeta,
//           valorPago.isAcceptableOrUnknown(data['VALOR_PAGO']!, _valorPagoMeta));
//     }
//     if (data.containsKey('NUMERO_DOCUMENTO')) {
//       context.handle(
//           _numeroDocumentoMeta,
//           numeroDocumento.isAcceptableOrUnknown(
//               data['NUMERO_DOCUMENTO']!, _numeroDocumentoMeta));
//     }
//     if (data.containsKey('HISTORICO')) {
//       context.handle(_historicoMeta,
//           historico.isAcceptableOrUnknown(data['HISTORICO']!, _historicoMeta));
//     }
//     if (data.containsKey('STATUS_PAGAMENTO')) {
//       context.handle(
//           _statusPagamentoMeta,
//           statusPagamento.isAcceptableOrUnknown(
//               data['STATUS_PAGAMENTO']!, _statusPagamentoMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   ContasPagar map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return ContasPagar(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idFornecedor: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_FORNECEDOR']),
//       idCompraPedidoCabecalho: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ID_COMPRA_PEDIDO_CABECALHO']),
//       dataLancamento: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_LANCAMENTO']),
//       dataVencimento: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_VENCIMENTO']),
//       dataPagamento: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_PAGAMENTO']),
//       valorAPagar: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_A_PAGAR']),
//       taxaJuro: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TAXA_JURO']),
//       taxaMulta: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TAXA_MULTA']),
//       taxaDesconto: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TAXA_DESCONTO']),
//       valorJuro: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_JURO']),
//       valorMulta: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_MULTA']),
//       valorDesconto: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_DESCONTO']),
//       valorPago: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_PAGO']),
//       numeroDocumento: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO_DOCUMENTO']),
//       historico: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}HISTORICO']),
//       statusPagamento: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}STATUS_PAGAMENTO']),
//     );
//   }

//   @override
//   $ContasPagarsTable createAlias(String alias) {
//     return $ContasPagarsTable(_db, alias);
//   }
// }

// class ContasRecebersCompanion extends UpdateCompanion<ContasReceber> {
//   final Value<int> id;
//   final Value<int?> idCliente;
//   final Value<int?> idPdvVendaCabecalho;
//   final Value<DateTime?> dataLancamento;
//   final Value<DateTime?> dataVencimento;
//   final Value<DateTime?> dataRecebimento;
//   final Value<double?> valorAReceber;
//   final Value<double?> taxaJuro;
//   final Value<double?> taxaMulta;
//   final Value<double?> taxaDesconto;
//   final Value<double?> valorJuro;
//   final Value<double?> valorMulta;
//   final Value<double?> valorDesconto;
//   final Value<double?> valorRecebido;
//   final Value<String?> numeroDocumento;
//   final Value<String?> historico;
//   final Value<String?> statusRecebimento;
//   const ContasRecebersCompanion({
//     this.id = const Value.absent(),
//     this.idCliente = const Value.absent(),
//     this.idPdvVendaCabecalho = const Value.absent(),
//     this.dataLancamento = const Value.absent(),
//     this.dataVencimento = const Value.absent(),
//     this.dataRecebimento = const Value.absent(),
//     this.valorAReceber = const Value.absent(),
//     this.taxaJuro = const Value.absent(),
//     this.taxaMulta = const Value.absent(),
//     this.taxaDesconto = const Value.absent(),
//     this.valorJuro = const Value.absent(),
//     this.valorMulta = const Value.absent(),
//     this.valorDesconto = const Value.absent(),
//     this.valorRecebido = const Value.absent(),
//     this.numeroDocumento = const Value.absent(),
//     this.historico = const Value.absent(),
//     this.statusRecebimento = const Value.absent(),
//   });
//   ContasRecebersCompanion.insert({
//     this.id = const Value.absent(),
//     this.idCliente = const Value.absent(),
//     this.idPdvVendaCabecalho = const Value.absent(),
//     this.dataLancamento = const Value.absent(),
//     this.dataVencimento = const Value.absent(),
//     this.dataRecebimento = const Value.absent(),
//     this.valorAReceber = const Value.absent(),
//     this.taxaJuro = const Value.absent(),
//     this.taxaMulta = const Value.absent(),
//     this.taxaDesconto = const Value.absent(),
//     this.valorJuro = const Value.absent(),
//     this.valorMulta = const Value.absent(),
//     this.valorDesconto = const Value.absent(),
//     this.valorRecebido = const Value.absent(),
//     this.numeroDocumento = const Value.absent(),
//     this.historico = const Value.absent(),
//     this.statusRecebimento = const Value.absent(),
//   });
//   static Insertable<ContasReceber> custom({
//     Expression<int>? id,
//     Expression<int?>? idCliente,
//     Expression<int?>? idPdvVendaCabecalho,
//     Expression<DateTime?>? dataLancamento,
//     Expression<DateTime?>? dataVencimento,
//     Expression<DateTime?>? dataRecebimento,
//     Expression<double?>? valorAReceber,
//     Expression<double?>? taxaJuro,
//     Expression<double?>? taxaMulta,
//     Expression<double?>? taxaDesconto,
//     Expression<double?>? valorJuro,
//     Expression<double?>? valorMulta,
//     Expression<double?>? valorDesconto,
//     Expression<double?>? valorRecebido,
//     Expression<String?>? numeroDocumento,
//     Expression<String?>? historico,
//     Expression<String?>? statusRecebimento,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idCliente != null) 'ID_CLIENTE': idCliente,
//       if (idPdvVendaCabecalho != null)
//         'ID_PDV_VENDA_CABECALHO': idPdvVendaCabecalho,
//       if (dataLancamento != null) 'DATA_LANCAMENTO': dataLancamento,
//       if (dataVencimento != null) 'DATA_VENCIMENTO': dataVencimento,
//       if (dataRecebimento != null) 'DATA_RECEBIMENTO': dataRecebimento,
//       if (valorAReceber != null) 'VALOR_A_RECEBER': valorAReceber,
//       if (taxaJuro != null) 'TAXA_JURO': taxaJuro,
//       if (taxaMulta != null) 'TAXA_MULTA': taxaMulta,
//       if (taxaDesconto != null) 'TAXA_DESCONTO': taxaDesconto,
//       if (valorJuro != null) 'VALOR_JURO': valorJuro,
//       if (valorMulta != null) 'VALOR_MULTA': valorMulta,
//       if (valorDesconto != null) 'VALOR_DESCONTO': valorDesconto,
//       if (valorRecebido != null) 'VALOR_RECEBIDO': valorRecebido,
//       if (numeroDocumento != null) 'NUMERO_DOCUMENTO': numeroDocumento,
//       if (historico != null) 'HISTORICO': historico,
//       if (statusRecebimento != null) 'STATUS_RECEBIMENTO': statusRecebimento,
//     });
//   }

//   ContasRecebersCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idCliente,
//       Value<int?>? idPdvVendaCabecalho,
//       Value<DateTime?>? dataLancamento,
//       Value<DateTime?>? dataVencimento,
//       Value<DateTime?>? dataRecebimento,
//       Value<double?>? valorAReceber,
//       Value<double?>? taxaJuro,
//       Value<double?>? taxaMulta,
//       Value<double?>? taxaDesconto,
//       Value<double?>? valorJuro,
//       Value<double?>? valorMulta,
//       Value<double?>? valorDesconto,
//       Value<double?>? valorRecebido,
//       Value<String?>? numeroDocumento,
//       Value<String?>? historico,
//       Value<String?>? statusRecebimento}) {
//     return ContasRecebersCompanion(
//       id: id ?? this.id,
//       idCliente: idCliente ?? this.idCliente,
//       idPdvVendaCabecalho: idPdvVendaCabecalho ?? this.idPdvVendaCabecalho,
//       dataLancamento: dataLancamento ?? this.dataLancamento,
//       dataVencimento: dataVencimento ?? this.dataVencimento,
//       dataRecebimento: dataRecebimento ?? this.dataRecebimento,
//       valorAReceber: valorAReceber ?? this.valorAReceber,
//       taxaJuro: taxaJuro ?? this.taxaJuro,
//       taxaMulta: taxaMulta ?? this.taxaMulta,
//       taxaDesconto: taxaDesconto ?? this.taxaDesconto,
//       valorJuro: valorJuro ?? this.valorJuro,
//       valorMulta: valorMulta ?? this.valorMulta,
//       valorDesconto: valorDesconto ?? this.valorDesconto,
//       valorRecebido: valorRecebido ?? this.valorRecebido,
//       numeroDocumento: numeroDocumento ?? this.numeroDocumento,
//       historico: historico ?? this.historico,
//       statusRecebimento: statusRecebimento ?? this.statusRecebimento,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idCliente.present) {
//       map['ID_CLIENTE'] = Variable<int?>(idCliente.value);
//     }
//     if (idPdvVendaCabecalho.present) {
//       map['ID_PDV_VENDA_CABECALHO'] = Variable<int?>(idPdvVendaCabecalho.value);
//     }
//     if (dataLancamento.present) {
//       map['DATA_LANCAMENTO'] = Variable<DateTime?>(dataLancamento.value);
//     }
//     if (dataVencimento.present) {
//       map['DATA_VENCIMENTO'] = Variable<DateTime?>(dataVencimento.value);
//     }
//     if (dataRecebimento.present) {
//       map['DATA_RECEBIMENTO'] = Variable<DateTime?>(dataRecebimento.value);
//     }
//     if (valorAReceber.present) {
//       map['VALOR_A_RECEBER'] = Variable<double?>(valorAReceber.value);
//     }
//     if (taxaJuro.present) {
//       map['TAXA_JURO'] = Variable<double?>(taxaJuro.value);
//     }
//     if (taxaMulta.present) {
//       map['TAXA_MULTA'] = Variable<double?>(taxaMulta.value);
//     }
//     if (taxaDesconto.present) {
//       map['TAXA_DESCONTO'] = Variable<double?>(taxaDesconto.value);
//     }
//     if (valorJuro.present) {
//       map['VALOR_JURO'] = Variable<double?>(valorJuro.value);
//     }
//     if (valorMulta.present) {
//       map['VALOR_MULTA'] = Variable<double?>(valorMulta.value);
//     }
//     if (valorDesconto.present) {
//       map['VALOR_DESCONTO'] = Variable<double?>(valorDesconto.value);
//     }
//     if (valorRecebido.present) {
//       map['VALOR_RECEBIDO'] = Variable<double?>(valorRecebido.value);
//     }
//     if (numeroDocumento.present) {
//       map['NUMERO_DOCUMENTO'] = Variable<String?>(numeroDocumento.value);
//     }
//     if (historico.present) {
//       map['HISTORICO'] = Variable<String?>(historico.value);
//     }
//     if (statusRecebimento.present) {
//       map['STATUS_RECEBIMENTO'] = Variable<String?>(statusRecebimento.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('ContasRecebersCompanion(')
//           ..write('id: $id, ')
//           ..write('idCliente: $idCliente, ')
//           ..write('idPdvVendaCabecalho: $idPdvVendaCabecalho, ')
//           ..write('dataLancamento: $dataLancamento, ')
//           ..write('dataVencimento: $dataVencimento, ')
//           ..write('dataRecebimento: $dataRecebimento, ')
//           ..write('valorAReceber: $valorAReceber, ')
//           ..write('taxaJuro: $taxaJuro, ')
//           ..write('taxaMulta: $taxaMulta, ')
//           ..write('taxaDesconto: $taxaDesconto, ')
//           ..write('valorJuro: $valorJuro, ')
//           ..write('valorMulta: $valorMulta, ')
//           ..write('valorDesconto: $valorDesconto, ')
//           ..write('valorRecebido: $valorRecebido, ')
//           ..write('numeroDocumento: $numeroDocumento, ')
//           ..write('historico: $historico, ')
//           ..write('statusRecebimento: $statusRecebimento')
//           ..write(')'))
//         .toString();
//   }
// }

// class $ContasRecebersTable extends ContasRecebers
//     with TableInfo<$ContasRecebersTable, ContasReceber> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $ContasRecebersTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idClienteMeta = const VerificationMeta('idCliente');
//   late final GeneratedColumn<int?> idCliente = GeneratedColumn<int?>(
//       'ID_CLIENTE', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES CLIENTE(ID)');
//   final VerificationMeta _idPdvVendaCabecalhoMeta =
//       const VerificationMeta('idPdvVendaCabecalho');
//   late final GeneratedColumn<int?> idPdvVendaCabecalho = GeneratedColumn<int?>(
//       'ID_PDV_VENDA_CABECALHO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES PDV_VENDA_CABECALHO(ID)');
//   final VerificationMeta _dataLancamentoMeta =
//       const VerificationMeta('dataLancamento');
//   late final GeneratedColumn<DateTime?> dataLancamento =
//       GeneratedColumn<DateTime?>('DATA_LANCAMENTO', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _dataVencimentoMeta =
//       const VerificationMeta('dataVencimento');
//   late final GeneratedColumn<DateTime?> dataVencimento =
//       GeneratedColumn<DateTime?>('DATA_VENCIMENTO', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _dataRecebimentoMeta =
//       const VerificationMeta('dataRecebimento');
//   late final GeneratedColumn<DateTime?> dataRecebimento =
//       GeneratedColumn<DateTime?>('DATA_RECEBIMENTO', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _valorAReceberMeta =
//       const VerificationMeta('valorAReceber');
//   late final GeneratedColumn<double?> valorAReceber = GeneratedColumn<double?>(
//       'VALOR_A_RECEBER', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _taxaJuroMeta = const VerificationMeta('taxaJuro');
//   late final GeneratedColumn<double?> taxaJuro = GeneratedColumn<double?>(
//       'TAXA_JURO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _taxaMultaMeta = const VerificationMeta('taxaMulta');
//   late final GeneratedColumn<double?> taxaMulta = GeneratedColumn<double?>(
//       'TAXA_MULTA', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _taxaDescontoMeta =
//       const VerificationMeta('taxaDesconto');
//   late final GeneratedColumn<double?> taxaDesconto = GeneratedColumn<double?>(
//       'TAXA_DESCONTO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorJuroMeta = const VerificationMeta('valorJuro');
//   late final GeneratedColumn<double?> valorJuro = GeneratedColumn<double?>(
//       'VALOR_JURO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorMultaMeta = const VerificationMeta('valorMulta');
//   late final GeneratedColumn<double?> valorMulta = GeneratedColumn<double?>(
//       'VALOR_MULTA', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorDescontoMeta =
//       const VerificationMeta('valorDesconto');
//   late final GeneratedColumn<double?> valorDesconto = GeneratedColumn<double?>(
//       'VALOR_DESCONTO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorRecebidoMeta =
//       const VerificationMeta('valorRecebido');
//   late final GeneratedColumn<double?> valorRecebido = GeneratedColumn<double?>(
//       'VALOR_RECEBIDO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _numeroDocumentoMeta =
//       const VerificationMeta('numeroDocumento');
//   late final GeneratedColumn<String?> numeroDocumento =
//       GeneratedColumn<String?>('NUMERO_DOCUMENTO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 50),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _historicoMeta = const VerificationMeta('historico');
//   late final GeneratedColumn<String?> historico = GeneratedColumn<String?>(
//       'HISTORICO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _statusRecebimentoMeta =
//       const VerificationMeta('statusRecebimento');
//   late final GeneratedColumn<String?> statusRecebimento =
//       GeneratedColumn<String?>('STATUS_RECEBIMENTO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idCliente,
//         idPdvVendaCabecalho,
//         dataLancamento,
//         dataVencimento,
//         dataRecebimento,
//         valorAReceber,
//         taxaJuro,
//         taxaMulta,
//         taxaDesconto,
//         valorJuro,
//         valorMulta,
//         valorDesconto,
//         valorRecebido,
//         numeroDocumento,
//         historico,
//         statusRecebimento
//       ];
//   @override
//   String get aliasedName => _alias ?? 'CONTAS_RECEBER';
//   @override
//   String get actualTableName => 'CONTAS_RECEBER';
//   @override
//   VerificationContext validateIntegrity(Insertable<ContasReceber> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_CLIENTE')) {
//       context.handle(_idClienteMeta,
//           idCliente.isAcceptableOrUnknown(data['ID_CLIENTE']!, _idClienteMeta));
//     }
//     if (data.containsKey('ID_PDV_VENDA_CABECALHO')) {
//       context.handle(
//           _idPdvVendaCabecalhoMeta,
//           idPdvVendaCabecalho.isAcceptableOrUnknown(
//               data['ID_PDV_VENDA_CABECALHO']!, _idPdvVendaCabecalhoMeta));
//     }
//     if (data.containsKey('DATA_LANCAMENTO')) {
//       context.handle(
//           _dataLancamentoMeta,
//           dataLancamento.isAcceptableOrUnknown(
//               data['DATA_LANCAMENTO']!, _dataLancamentoMeta));
//     }
//     if (data.containsKey('DATA_VENCIMENTO')) {
//       context.handle(
//           _dataVencimentoMeta,
//           dataVencimento.isAcceptableOrUnknown(
//               data['DATA_VENCIMENTO']!, _dataVencimentoMeta));
//     }
//     if (data.containsKey('DATA_RECEBIMENTO')) {
//       context.handle(
//           _dataRecebimentoMeta,
//           dataRecebimento.isAcceptableOrUnknown(
//               data['DATA_RECEBIMENTO']!, _dataRecebimentoMeta));
//     }
//     if (data.containsKey('VALOR_A_RECEBER')) {
//       context.handle(
//           _valorAReceberMeta,
//           valorAReceber.isAcceptableOrUnknown(
//               data['VALOR_A_RECEBER']!, _valorAReceberMeta));
//     }
//     if (data.containsKey('TAXA_JURO')) {
//       context.handle(_taxaJuroMeta,
//           taxaJuro.isAcceptableOrUnknown(data['TAXA_JURO']!, _taxaJuroMeta));
//     }
//     if (data.containsKey('TAXA_MULTA')) {
//       context.handle(_taxaMultaMeta,
//           taxaMulta.isAcceptableOrUnknown(data['TAXA_MULTA']!, _taxaMultaMeta));
//     }
//     if (data.containsKey('TAXA_DESCONTO')) {
//       context.handle(
//           _taxaDescontoMeta,
//           taxaDesconto.isAcceptableOrUnknown(
//               data['TAXA_DESCONTO']!, _taxaDescontoMeta));
//     }
//     if (data.containsKey('VALOR_JURO')) {
//       context.handle(_valorJuroMeta,
//           valorJuro.isAcceptableOrUnknown(data['VALOR_JURO']!, _valorJuroMeta));
//     }
//     if (data.containsKey('VALOR_MULTA')) {
//       context.handle(
//           _valorMultaMeta,
//           valorMulta.isAcceptableOrUnknown(
//               data['VALOR_MULTA']!, _valorMultaMeta));
//     }
//     if (data.containsKey('VALOR_DESCONTO')) {
//       context.handle(
//           _valorDescontoMeta,
//           valorDesconto.isAcceptableOrUnknown(
//               data['VALOR_DESCONTO']!, _valorDescontoMeta));
//     }
//     if (data.containsKey('VALOR_RECEBIDO')) {
//       context.handle(
//           _valorRecebidoMeta,
//           valorRecebido.isAcceptableOrUnknown(
//               data['VALOR_RECEBIDO']!, _valorRecebidoMeta));
//     }
//     if (data.containsKey('NUMERO_DOCUMENTO')) {
//       context.handle(
//           _numeroDocumentoMeta,
//           numeroDocumento.isAcceptableOrUnknown(
//               data['NUMERO_DOCUMENTO']!, _numeroDocumentoMeta));
//     }
//     if (data.containsKey('HISTORICO')) {
//       context.handle(_historicoMeta,
//           historico.isAcceptableOrUnknown(data['HISTORICO']!, _historicoMeta));
//     }
//     if (data.containsKey('STATUS_RECEBIMENTO')) {
//       context.handle(
//           _statusRecebimentoMeta,
//           statusRecebimento.isAcceptableOrUnknown(
//               data['STATUS_RECEBIMENTO']!, _statusRecebimentoMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   ContasReceber map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return ContasReceber(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idCliente: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_CLIENTE']),
//       idPdvVendaCabecalho: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ID_PDV_VENDA_CABECALHO']),
//       dataLancamento: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_LANCAMENTO']),
//       dataVencimento: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_VENCIMENTO']),
//       dataRecebimento: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_RECEBIMENTO']),
//       valorAReceber: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_A_RECEBER']),
//       taxaJuro: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TAXA_JURO']),
//       taxaMulta: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TAXA_MULTA']),
//       taxaDesconto: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TAXA_DESCONTO']),
//       valorJuro: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_JURO']),
//       valorMulta: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_MULTA']),
//       valorDesconto: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_DESCONTO']),
//       valorRecebido: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_RECEBIDO']),
//       numeroDocumento: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO_DOCUMENTO']),
//       historico: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}HISTORICO']),
//       statusRecebimento: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}STATUS_RECEBIMENTO']),
//     );
//   }

//   @override
//   $ContasRecebersTable createAlias(String alias) {
//     return $ContasRecebersTable(_db, alias);
//   }
// }

// class CozinhasCompanion extends UpdateCompanion<Cozinha> {
//   final Value<int> id;
//   final Value<String?> nome;
//   final Value<String?> impressoraNome;
//   final Value<String?> impressoraEndereco;
//   const CozinhasCompanion({
//     this.id = const Value.absent(),
//     this.nome = const Value.absent(),
//     this.impressoraNome = const Value.absent(),
//     this.impressoraEndereco = const Value.absent(),
//   });
//   CozinhasCompanion.insert({
//     this.id = const Value.absent(),
//     this.nome = const Value.absent(),
//     this.impressoraNome = const Value.absent(),
//     this.impressoraEndereco = const Value.absent(),
//   });
//   static Insertable<Cozinha> custom({
//     Expression<int>? id,
//     Expression<String?>? nome,
//     Expression<String?>? impressoraNome,
//     Expression<String?>? impressoraEndereco,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (nome != null) 'NOME': nome,
//       if (impressoraNome != null) 'IMPRESSORA_NOME': impressoraNome,
//       if (impressoraEndereco != null) 'IMPRESSORA_ENDERECO': impressoraEndereco,
//     });
//   }

//   CozinhasCompanion copyWith(
//       {Value<int>? id,
//       Value<String?>? nome,
//       Value<String?>? impressoraNome,
//       Value<String?>? impressoraEndereco}) {
//     return CozinhasCompanion(
//       id: id ?? this.id,
//       nome: nome ?? this.nome,
//       impressoraNome: impressoraNome ?? this.impressoraNome,
//       impressoraEndereco: impressoraEndereco ?? this.impressoraEndereco,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (nome.present) {
//       map['NOME'] = Variable<String?>(nome.value);
//     }
//     if (impressoraNome.present) {
//       map['IMPRESSORA_NOME'] = Variable<String?>(impressoraNome.value);
//     }
//     if (impressoraEndereco.present) {
//       map['IMPRESSORA_ENDERECO'] = Variable<String?>(impressoraEndereco.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('CozinhasCompanion(')
//           ..write('id: $id, ')
//           ..write('nome: $nome, ')
//           ..write('impressoraNome: $impressoraNome, ')
//           ..write('impressoraEndereco: $impressoraEndereco')
//           ..write(')'))
//         .toString();
//   }
// }

// class $CozinhasTable extends Cozinhas with TableInfo<$CozinhasTable, Cozinha> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $CozinhasTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _nomeMeta = const VerificationMeta('nome');
//   late final GeneratedColumn<String?> nome = GeneratedColumn<String?>(
//       'NOME', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _impressoraNomeMeta =
//       const VerificationMeta('impressoraNome');
//   late final GeneratedColumn<String?> impressoraNome = GeneratedColumn<String?>(
//       'IMPRESSORA_NOME', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _impressoraEnderecoMeta =
//       const VerificationMeta('impressoraEndereco');
//   late final GeneratedColumn<String?> impressoraEndereco =
//       GeneratedColumn<String?>(
//           'IMPRESSORA_ENDERECO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 250),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns =>
//       [id, nome, impressoraNome, impressoraEndereco];
//   @override
//   String get aliasedName => _alias ?? 'COZINHA';
//   @override
//   String get actualTableName => 'COZINHA';
//   @override
//   VerificationContext validateIntegrity(Insertable<Cozinha> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('NOME')) {
//       context.handle(
//           _nomeMeta, nome.isAcceptableOrUnknown(data['NOME']!, _nomeMeta));
//     }
//     if (data.containsKey('IMPRESSORA_NOME')) {
//       context.handle(
//           _impressoraNomeMeta,
//           impressoraNome.isAcceptableOrUnknown(
//               data['IMPRESSORA_NOME']!, _impressoraNomeMeta));
//     }
//     if (data.containsKey('IMPRESSORA_ENDERECO')) {
//       context.handle(
//           _impressoraEnderecoMeta,
//           impressoraEndereco.isAcceptableOrUnknown(
//               data['IMPRESSORA_ENDERECO']!, _impressoraEnderecoMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   Cozinha map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return Cozinha(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       nome: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NOME']),
//       impressoraNome: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}IMPRESSORA_NOME']),
//       impressoraEndereco: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}IMPRESSORA_ENDERECO']),
//     );
//   }

//   @override
//   $CozinhasTable createAlias(String alias) {
//     return $CozinhasTable(_db, alias);
//   }
// }

// class DeliverysCompanion extends UpdateCompanion<Delivery> {
//   final Value<int> id;
//   final Value<int?> idComanda;
//   final Value<int?> idTaxaEntrega;
//   final Value<int?> idColaborador;
//   final Value<String?> nomeCliente;
//   final Value<String?> telefonePrincipal;
//   final Value<String?> telefoneRecado;
//   final Value<String?> celular;
//   final Value<String?> logradouro;
//   final Value<String?> numero;
//   final Value<String?> complemento;
//   final Value<String?> cep;
//   final Value<String?> bairro;
//   final Value<String?> cidade;
//   final Value<String?> uf;
//   final Value<double?> valorFrete;
//   final Value<double?> valorRecebido;
//   final Value<double?> valorAReceber;
//   final Value<double?> valorSolicitadoTroco;
//   final Value<DateTime?> previsaoPreparo;
//   final Value<DateTime?> inicioPreparo;
//   final Value<DateTime?> previsaoEntrega;
//   final Value<DateTime?> saiuParaEntrega;
//   final Value<DateTime?> entregue;
//   final Value<DateTime?> previsaoRetirada;
//   final Value<DateTime?> prontoParaRetirada;
//   final Value<DateTime?> retirou;
//   const DeliverysCompanion({
//     this.id = const Value.absent(),
//     this.idComanda = const Value.absent(),
//     this.idTaxaEntrega = const Value.absent(),
//     this.idColaborador = const Value.absent(),
//     this.nomeCliente = const Value.absent(),
//     this.telefonePrincipal = const Value.absent(),
//     this.telefoneRecado = const Value.absent(),
//     this.celular = const Value.absent(),
//     this.logradouro = const Value.absent(),
//     this.numero = const Value.absent(),
//     this.complemento = const Value.absent(),
//     this.cep = const Value.absent(),
//     this.bairro = const Value.absent(),
//     this.cidade = const Value.absent(),
//     this.uf = const Value.absent(),
//     this.valorFrete = const Value.absent(),
//     this.valorRecebido = const Value.absent(),
//     this.valorAReceber = const Value.absent(),
//     this.valorSolicitadoTroco = const Value.absent(),
//     this.previsaoPreparo = const Value.absent(),
//     this.inicioPreparo = const Value.absent(),
//     this.previsaoEntrega = const Value.absent(),
//     this.saiuParaEntrega = const Value.absent(),
//     this.entregue = const Value.absent(),
//     this.previsaoRetirada = const Value.absent(),
//     this.prontoParaRetirada = const Value.absent(),
//     this.retirou = const Value.absent(),
//   });
//   DeliverysCompanion.insert({
//     this.id = const Value.absent(),
//     this.idComanda = const Value.absent(),
//     this.idTaxaEntrega = const Value.absent(),
//     this.idColaborador = const Value.absent(),
//     this.nomeCliente = const Value.absent(),
//     this.telefonePrincipal = const Value.absent(),
//     this.telefoneRecado = const Value.absent(),
//     this.celular = const Value.absent(),
//     this.logradouro = const Value.absent(),
//     this.numero = const Value.absent(),
//     this.complemento = const Value.absent(),
//     this.cep = const Value.absent(),
//     this.bairro = const Value.absent(),
//     this.cidade = const Value.absent(),
//     this.uf = const Value.absent(),
//     this.valorFrete = const Value.absent(),
//     this.valorRecebido = const Value.absent(),
//     this.valorAReceber = const Value.absent(),
//     this.valorSolicitadoTroco = const Value.absent(),
//     this.previsaoPreparo = const Value.absent(),
//     this.inicioPreparo = const Value.absent(),
//     this.previsaoEntrega = const Value.absent(),
//     this.saiuParaEntrega = const Value.absent(),
//     this.entregue = const Value.absent(),
//     this.previsaoRetirada = const Value.absent(),
//     this.prontoParaRetirada = const Value.absent(),
//     this.retirou = const Value.absent(),
//   });
//   static Insertable<Delivery> custom({
//     Expression<int>? id,
//     Expression<int?>? idComanda,
//     Expression<int?>? idTaxaEntrega,
//     Expression<int?>? idColaborador,
//     Expression<String?>? nomeCliente,
//     Expression<String?>? telefonePrincipal,
//     Expression<String?>? telefoneRecado,
//     Expression<String?>? celular,
//     Expression<String?>? logradouro,
//     Expression<String?>? numero,
//     Expression<String?>? complemento,
//     Expression<String?>? cep,
//     Expression<String?>? bairro,
//     Expression<String?>? cidade,
//     Expression<String?>? uf,
//     Expression<double?>? valorFrete,
//     Expression<double?>? valorRecebido,
//     Expression<double?>? valorAReceber,
//     Expression<double?>? valorSolicitadoTroco,
//     Expression<DateTime?>? previsaoPreparo,
//     Expression<DateTime?>? inicioPreparo,
//     Expression<DateTime?>? previsaoEntrega,
//     Expression<DateTime?>? saiuParaEntrega,
//     Expression<DateTime?>? entregue,
//     Expression<DateTime?>? previsaoRetirada,
//     Expression<DateTime?>? prontoParaRetirada,
//     Expression<DateTime?>? retirou,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idComanda != null) 'ID_COMANDA': idComanda,
//       if (idTaxaEntrega != null) 'ID_TAXA_ENTREGA': idTaxaEntrega,
//       if (idColaborador != null) 'ID_COLABORADOR': idColaborador,
//       if (nomeCliente != null) 'NOME_CLIENTE': nomeCliente,
//       if (telefonePrincipal != null) 'TELEFONE_PRINCIPAL': telefonePrincipal,
//       if (telefoneRecado != null) 'TELEFONE_RECADO': telefoneRecado,
//       if (celular != null) 'CELULAR': celular,
//       if (logradouro != null) 'LOGRADOURO': logradouro,
//       if (numero != null) 'NUMERO': numero,
//       if (complemento != null) 'COMPLEMENTO': complemento,
//       if (cep != null) 'CEP': cep,
//       if (bairro != null) 'BAIRRO': bairro,
//       if (cidade != null) 'CIDADE': cidade,
//       if (uf != null) 'UF': uf,
//       if (valorFrete != null) 'VALOR_FRETE': valorFrete,
//       if (valorRecebido != null) 'VALOR_RECEBIDO': valorRecebido,
//       if (valorAReceber != null) 'VALOR_A_RECEBER': valorAReceber,
//       if (valorSolicitadoTroco != null)
//         'VALOR_SOLICITADO_TROCO': valorSolicitadoTroco,
//       if (previsaoPreparo != null) 'PREVISAO_PREPARO': previsaoPreparo,
//       if (inicioPreparo != null) 'INICIO_PREPARO': inicioPreparo,
//       if (previsaoEntrega != null) 'PREVISAO_ENTREGA': previsaoEntrega,
//       if (saiuParaEntrega != null) 'SAIU_PARA_ENTREGA': saiuParaEntrega,
//       if (entregue != null) 'ENTREGUE': entregue,
//       if (previsaoRetirada != null) 'PREVISAO_RETIRADA': previsaoRetirada,
//       if (prontoParaRetirada != null)
//         'PRONTO_PARA_RETIRADA': prontoParaRetirada,
//       if (retirou != null) 'RETIROU': retirou,
//     });
//   }

//   DeliverysCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idComanda,
//       Value<int?>? idTaxaEntrega,
//       Value<int?>? idColaborador,
//       Value<String?>? nomeCliente,
//       Value<String?>? telefonePrincipal,
//       Value<String?>? telefoneRecado,
//       Value<String?>? celular,
//       Value<String?>? logradouro,
//       Value<String?>? numero,
//       Value<String?>? complemento,
//       Value<String?>? cep,
//       Value<String?>? bairro,
//       Value<String?>? cidade,
//       Value<String?>? uf,
//       Value<double?>? valorFrete,
//       Value<double?>? valorRecebido,
//       Value<double?>? valorAReceber,
//       Value<double?>? valorSolicitadoTroco,
//       Value<DateTime?>? previsaoPreparo,
//       Value<DateTime?>? inicioPreparo,
//       Value<DateTime?>? previsaoEntrega,
//       Value<DateTime?>? saiuParaEntrega,
//       Value<DateTime?>? entregue,
//       Value<DateTime?>? previsaoRetirada,
//       Value<DateTime?>? prontoParaRetirada,
//       Value<DateTime?>? retirou}) {
//     return DeliverysCompanion(
//       id: id ?? this.id,
//       idComanda: idComanda ?? this.idComanda,
//       idTaxaEntrega: idTaxaEntrega ?? this.idTaxaEntrega,
//       idColaborador: idColaborador ?? this.idColaborador,
//       nomeCliente: nomeCliente ?? this.nomeCliente,
//       telefonePrincipal: telefonePrincipal ?? this.telefonePrincipal,
//       telefoneRecado: telefoneRecado ?? this.telefoneRecado,
//       celular: celular ?? this.celular,
//       logradouro: logradouro ?? this.logradouro,
//       numero: numero ?? this.numero,
//       complemento: complemento ?? this.complemento,
//       cep: cep ?? this.cep,
//       bairro: bairro ?? this.bairro,
//       cidade: cidade ?? this.cidade,
//       uf: uf ?? this.uf,
//       valorFrete: valorFrete ?? this.valorFrete,
//       valorRecebido: valorRecebido ?? this.valorRecebido,
//       valorAReceber: valorAReceber ?? this.valorAReceber,
//       valorSolicitadoTroco: valorSolicitadoTroco ?? this.valorSolicitadoTroco,
//       previsaoPreparo: previsaoPreparo ?? this.previsaoPreparo,
//       inicioPreparo: inicioPreparo ?? this.inicioPreparo,
//       previsaoEntrega: previsaoEntrega ?? this.previsaoEntrega,
//       saiuParaEntrega: saiuParaEntrega ?? this.saiuParaEntrega,
//       entregue: entregue ?? this.entregue,
//       previsaoRetirada: previsaoRetirada ?? this.previsaoRetirada,
//       prontoParaRetirada: prontoParaRetirada ?? this.prontoParaRetirada,
//       retirou: retirou ?? this.retirou,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idComanda.present) {
//       map['ID_COMANDA'] = Variable<int?>(idComanda.value);
//     }
//     if (idTaxaEntrega.present) {
//       map['ID_TAXA_ENTREGA'] = Variable<int?>(idTaxaEntrega.value);
//     }
//     if (idColaborador.present) {
//       map['ID_COLABORADOR'] = Variable<int?>(idColaborador.value);
//     }
//     if (nomeCliente.present) {
//       map['NOME_CLIENTE'] = Variable<String?>(nomeCliente.value);
//     }
//     if (telefonePrincipal.present) {
//       map['TELEFONE_PRINCIPAL'] = Variable<String?>(telefonePrincipal.value);
//     }
//     if (telefoneRecado.present) {
//       map['TELEFONE_RECADO'] = Variable<String?>(telefoneRecado.value);
//     }
//     if (celular.present) {
//       map['CELULAR'] = Variable<String?>(celular.value);
//     }
//     if (logradouro.present) {
//       map['LOGRADOURO'] = Variable<String?>(logradouro.value);
//     }
//     if (numero.present) {
//       map['NUMERO'] = Variable<String?>(numero.value);
//     }
//     if (complemento.present) {
//       map['COMPLEMENTO'] = Variable<String?>(complemento.value);
//     }
//     if (cep.present) {
//       map['CEP'] = Variable<String?>(cep.value);
//     }
//     if (bairro.present) {
//       map['BAIRRO'] = Variable<String?>(bairro.value);
//     }
//     if (cidade.present) {
//       map['CIDADE'] = Variable<String?>(cidade.value);
//     }
//     if (uf.present) {
//       map['UF'] = Variable<String?>(uf.value);
//     }
//     if (valorFrete.present) {
//       map['VALOR_FRETE'] = Variable<double?>(valorFrete.value);
//     }
//     if (valorRecebido.present) {
//       map['VALOR_RECEBIDO'] = Variable<double?>(valorRecebido.value);
//     }
//     if (valorAReceber.present) {
//       map['VALOR_A_RECEBER'] = Variable<double?>(valorAReceber.value);
//     }
//     if (valorSolicitadoTroco.present) {
//       map['VALOR_SOLICITADO_TROCO'] =
//           Variable<double?>(valorSolicitadoTroco.value);
//     }
//     if (previsaoPreparo.present) {
//       map['PREVISAO_PREPARO'] = Variable<DateTime?>(previsaoPreparo.value);
//     }
//     if (inicioPreparo.present) {
//       map['INICIO_PREPARO'] = Variable<DateTime?>(inicioPreparo.value);
//     }
//     if (previsaoEntrega.present) {
//       map['PREVISAO_ENTREGA'] = Variable<DateTime?>(previsaoEntrega.value);
//     }
//     if (saiuParaEntrega.present) {
//       map['SAIU_PARA_ENTREGA'] = Variable<DateTime?>(saiuParaEntrega.value);
//     }
//     if (entregue.present) {
//       map['ENTREGUE'] = Variable<DateTime?>(entregue.value);
//     }
//     if (previsaoRetirada.present) {
//       map['PREVISAO_RETIRADA'] = Variable<DateTime?>(previsaoRetirada.value);
//     }
//     if (prontoParaRetirada.present) {
//       map['PRONTO_PARA_RETIRADA'] =
//           Variable<DateTime?>(prontoParaRetirada.value);
//     }
//     if (retirou.present) {
//       map['RETIROU'] = Variable<DateTime?>(retirou.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('DeliverysCompanion(')
//           ..write('id: $id, ')
//           ..write('idComanda: $idComanda, ')
//           ..write('idTaxaEntrega: $idTaxaEntrega, ')
//           ..write('idColaborador: $idColaborador, ')
//           ..write('nomeCliente: $nomeCliente, ')
//           ..write('telefonePrincipal: $telefonePrincipal, ')
//           ..write('telefoneRecado: $telefoneRecado, ')
//           ..write('celular: $celular, ')
//           ..write('logradouro: $logradouro, ')
//           ..write('numero: $numero, ')
//           ..write('complemento: $complemento, ')
//           ..write('cep: $cep, ')
//           ..write('bairro: $bairro, ')
//           ..write('cidade: $cidade, ')
//           ..write('uf: $uf, ')
//           ..write('valorFrete: $valorFrete, ')
//           ..write('valorRecebido: $valorRecebido, ')
//           ..write('valorAReceber: $valorAReceber, ')
//           ..write('valorSolicitadoTroco: $valorSolicitadoTroco, ')
//           ..write('previsaoPreparo: $previsaoPreparo, ')
//           ..write('inicioPreparo: $inicioPreparo, ')
//           ..write('previsaoEntrega: $previsaoEntrega, ')
//           ..write('saiuParaEntrega: $saiuParaEntrega, ')
//           ..write('entregue: $entregue, ')
//           ..write('previsaoRetirada: $previsaoRetirada, ')
//           ..write('prontoParaRetirada: $prontoParaRetirada, ')
//           ..write('retirou: $retirou')
//           ..write(')'))
//         .toString();
//   }
// }

// class $DeliverysTable extends Deliverys
//     with TableInfo<$DeliverysTable, Delivery> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $DeliverysTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idComandaMeta = const VerificationMeta('idComanda');
//   late final GeneratedColumn<int?> idComanda = GeneratedColumn<int?>(
//       'ID_COMANDA', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES COMANDA(ID)');
//   final VerificationMeta _idTaxaEntregaMeta =
//       const VerificationMeta('idTaxaEntrega');
//   late final GeneratedColumn<int?> idTaxaEntrega = GeneratedColumn<int?>(
//       'ID_TAXA_ENTREGA', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES TAXA_ENTREGA(ID)');
//   final VerificationMeta _idColaboradorMeta =
//       const VerificationMeta('idColaborador');
//   late final GeneratedColumn<int?> idColaborador = GeneratedColumn<int?>(
//       'ID_COLABORADOR', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES COLABORADOR(ID)');
//   final VerificationMeta _nomeClienteMeta =
//       const VerificationMeta('nomeCliente');
//   late final GeneratedColumn<String?> nomeCliente = GeneratedColumn<String?>(
//       'NOME_CLIENTE', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _telefonePrincipalMeta =
//       const VerificationMeta('telefonePrincipal');
//   late final GeneratedColumn<String?> telefonePrincipal =
//       GeneratedColumn<String?>('TELEFONE_PRINCIPAL', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 15),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _telefoneRecadoMeta =
//       const VerificationMeta('telefoneRecado');
//   late final GeneratedColumn<String?> telefoneRecado = GeneratedColumn<String?>(
//       'TELEFONE_RECADO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 15),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _celularMeta = const VerificationMeta('celular');
//   late final GeneratedColumn<String?> celular = GeneratedColumn<String?>(
//       'CELULAR', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 15),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _logradouroMeta = const VerificationMeta('logradouro');
//   late final GeneratedColumn<String?> logradouro = GeneratedColumn<String?>(
//       'LOGRADOURO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _numeroMeta = const VerificationMeta('numero');
//   late final GeneratedColumn<String?> numero = GeneratedColumn<String?>(
//       'NUMERO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 10),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _complementoMeta =
//       const VerificationMeta('complemento');
//   late final GeneratedColumn<String?> complemento = GeneratedColumn<String?>(
//       'COMPLEMENTO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cepMeta = const VerificationMeta('cep');
//   late final GeneratedColumn<String?> cep = GeneratedColumn<String?>(
//       'CEP', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _bairroMeta = const VerificationMeta('bairro');
//   late final GeneratedColumn<String?> bairro = GeneratedColumn<String?>(
//       'BAIRRO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cidadeMeta = const VerificationMeta('cidade');
//   late final GeneratedColumn<String?> cidade = GeneratedColumn<String?>(
//       'CIDADE', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _ufMeta = const VerificationMeta('uf');
//   late final GeneratedColumn<String?> uf = GeneratedColumn<String?>(
//       'UF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _valorFreteMeta = const VerificationMeta('valorFrete');
//   late final GeneratedColumn<double?> valorFrete = GeneratedColumn<double?>(
//       'VALOR_FRETE', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorRecebidoMeta =
//       const VerificationMeta('valorRecebido');
//   late final GeneratedColumn<double?> valorRecebido = GeneratedColumn<double?>(
//       'VALOR_RECEBIDO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorAReceberMeta =
//       const VerificationMeta('valorAReceber');
//   late final GeneratedColumn<double?> valorAReceber = GeneratedColumn<double?>(
//       'VALOR_A_RECEBER', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorSolicitadoTrocoMeta =
//       const VerificationMeta('valorSolicitadoTroco');
//   late final GeneratedColumn<double?> valorSolicitadoTroco =
//       GeneratedColumn<double?>('VALOR_SOLICITADO_TROCO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _previsaoPreparoMeta =
//       const VerificationMeta('previsaoPreparo');
//   late final GeneratedColumn<DateTime?> previsaoPreparo =
//       GeneratedColumn<DateTime?>('PREVISAO_PREPARO', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _inicioPreparoMeta =
//       const VerificationMeta('inicioPreparo');
//   late final GeneratedColumn<DateTime?> inicioPreparo =
//       GeneratedColumn<DateTime?>('INICIO_PREPARO', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _previsaoEntregaMeta =
//       const VerificationMeta('previsaoEntrega');
//   late final GeneratedColumn<DateTime?> previsaoEntrega =
//       GeneratedColumn<DateTime?>('PREVISAO_ENTREGA', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _saiuParaEntregaMeta =
//       const VerificationMeta('saiuParaEntrega');
//   late final GeneratedColumn<DateTime?> saiuParaEntrega =
//       GeneratedColumn<DateTime?>('SAIU_PARA_ENTREGA', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _entregueMeta = const VerificationMeta('entregue');
//   late final GeneratedColumn<DateTime?> entregue = GeneratedColumn<DateTime?>(
//       'ENTREGUE', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _previsaoRetiradaMeta =
//       const VerificationMeta('previsaoRetirada');
//   late final GeneratedColumn<DateTime?> previsaoRetirada =
//       GeneratedColumn<DateTime?>('PREVISAO_RETIRADA', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _prontoParaRetiradaMeta =
//       const VerificationMeta('prontoParaRetirada');
//   late final GeneratedColumn<DateTime?> prontoParaRetirada =
//       GeneratedColumn<DateTime?>('PRONTO_PARA_RETIRADA', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _retirouMeta = const VerificationMeta('retirou');
//   late final GeneratedColumn<DateTime?> retirou = GeneratedColumn<DateTime?>(
//       'RETIROU', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idComanda,
//         idTaxaEntrega,
//         idColaborador,
//         nomeCliente,
//         telefonePrincipal,
//         telefoneRecado,
//         celular,
//         logradouro,
//         numero,
//         complemento,
//         cep,
//         bairro,
//         cidade,
//         uf,
//         valorFrete,
//         valorRecebido,
//         valorAReceber,
//         valorSolicitadoTroco,
//         previsaoPreparo,
//         inicioPreparo,
//         previsaoEntrega,
//         saiuParaEntrega,
//         entregue,
//         previsaoRetirada,
//         prontoParaRetirada,
//         retirou
//       ];
//   @override
//   String get aliasedName => _alias ?? 'DELIVERY';
//   @override
//   String get actualTableName => 'DELIVERY';
//   @override
//   VerificationContext validateIntegrity(Insertable<Delivery> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_COMANDA')) {
//       context.handle(_idComandaMeta,
//           idComanda.isAcceptableOrUnknown(data['ID_COMANDA']!, _idComandaMeta));
//     }
//     if (data.containsKey('ID_TAXA_ENTREGA')) {
//       context.handle(
//           _idTaxaEntregaMeta,
//           idTaxaEntrega.isAcceptableOrUnknown(
//               data['ID_TAXA_ENTREGA']!, _idTaxaEntregaMeta));
//     }
//     if (data.containsKey('ID_COLABORADOR')) {
//       context.handle(
//           _idColaboradorMeta,
//           idColaborador.isAcceptableOrUnknown(
//               data['ID_COLABORADOR']!, _idColaboradorMeta));
//     }
//     if (data.containsKey('NOME_CLIENTE')) {
//       context.handle(
//           _nomeClienteMeta,
//           nomeCliente.isAcceptableOrUnknown(
//               data['NOME_CLIENTE']!, _nomeClienteMeta));
//     }
//     if (data.containsKey('TELEFONE_PRINCIPAL')) {
//       context.handle(
//           _telefonePrincipalMeta,
//           telefonePrincipal.isAcceptableOrUnknown(
//               data['TELEFONE_PRINCIPAL']!, _telefonePrincipalMeta));
//     }
//     if (data.containsKey('TELEFONE_RECADO')) {
//       context.handle(
//           _telefoneRecadoMeta,
//           telefoneRecado.isAcceptableOrUnknown(
//               data['TELEFONE_RECADO']!, _telefoneRecadoMeta));
//     }
//     if (data.containsKey('CELULAR')) {
//       context.handle(_celularMeta,
//           celular.isAcceptableOrUnknown(data['CELULAR']!, _celularMeta));
//     }
//     if (data.containsKey('LOGRADOURO')) {
//       context.handle(
//           _logradouroMeta,
//           logradouro.isAcceptableOrUnknown(
//               data['LOGRADOURO']!, _logradouroMeta));
//     }
//     if (data.containsKey('NUMERO')) {
//       context.handle(_numeroMeta,
//           numero.isAcceptableOrUnknown(data['NUMERO']!, _numeroMeta));
//     }
//     if (data.containsKey('COMPLEMENTO')) {
//       context.handle(
//           _complementoMeta,
//           complemento.isAcceptableOrUnknown(
//               data['COMPLEMENTO']!, _complementoMeta));
//     }
//     if (data.containsKey('CEP')) {
//       context.handle(
//           _cepMeta, cep.isAcceptableOrUnknown(data['CEP']!, _cepMeta));
//     }
//     if (data.containsKey('BAIRRO')) {
//       context.handle(_bairroMeta,
//           bairro.isAcceptableOrUnknown(data['BAIRRO']!, _bairroMeta));
//     }
//     if (data.containsKey('CIDADE')) {
//       context.handle(_cidadeMeta,
//           cidade.isAcceptableOrUnknown(data['CIDADE']!, _cidadeMeta));
//     }
//     if (data.containsKey('UF')) {
//       context.handle(_ufMeta, uf.isAcceptableOrUnknown(data['UF']!, _ufMeta));
//     }
//     if (data.containsKey('VALOR_FRETE')) {
//       context.handle(
//           _valorFreteMeta,
//           valorFrete.isAcceptableOrUnknown(
//               data['VALOR_FRETE']!, _valorFreteMeta));
//     }
//     if (data.containsKey('VALOR_RECEBIDO')) {
//       context.handle(
//           _valorRecebidoMeta,
//           valorRecebido.isAcceptableOrUnknown(
//               data['VALOR_RECEBIDO']!, _valorRecebidoMeta));
//     }
//     if (data.containsKey('VALOR_A_RECEBER')) {
//       context.handle(
//           _valorAReceberMeta,
//           valorAReceber.isAcceptableOrUnknown(
//               data['VALOR_A_RECEBER']!, _valorAReceberMeta));
//     }
//     if (data.containsKey('VALOR_SOLICITADO_TROCO')) {
//       context.handle(
//           _valorSolicitadoTrocoMeta,
//           valorSolicitadoTroco.isAcceptableOrUnknown(
//               data['VALOR_SOLICITADO_TROCO']!, _valorSolicitadoTrocoMeta));
//     }
//     if (data.containsKey('PREVISAO_PREPARO')) {
//       context.handle(
//           _previsaoPreparoMeta,
//           previsaoPreparo.isAcceptableOrUnknown(
//               data['PREVISAO_PREPARO']!, _previsaoPreparoMeta));
//     }
//     if (data.containsKey('INICIO_PREPARO')) {
//       context.handle(
//           _inicioPreparoMeta,
//           inicioPreparo.isAcceptableOrUnknown(
//               data['INICIO_PREPARO']!, _inicioPreparoMeta));
//     }
//     if (data.containsKey('PREVISAO_ENTREGA')) {
//       context.handle(
//           _previsaoEntregaMeta,
//           previsaoEntrega.isAcceptableOrUnknown(
//               data['PREVISAO_ENTREGA']!, _previsaoEntregaMeta));
//     }
//     if (data.containsKey('SAIU_PARA_ENTREGA')) {
//       context.handle(
//           _saiuParaEntregaMeta,
//           saiuParaEntrega.isAcceptableOrUnknown(
//               data['SAIU_PARA_ENTREGA']!, _saiuParaEntregaMeta));
//     }
//     if (data.containsKey('ENTREGUE')) {
//       context.handle(_entregueMeta,
//           entregue.isAcceptableOrUnknown(data['ENTREGUE']!, _entregueMeta));
//     }
//     if (data.containsKey('PREVISAO_RETIRADA')) {
//       context.handle(
//           _previsaoRetiradaMeta,
//           previsaoRetirada.isAcceptableOrUnknown(
//               data['PREVISAO_RETIRADA']!, _previsaoRetiradaMeta));
//     }
//     if (data.containsKey('PRONTO_PARA_RETIRADA')) {
//       context.handle(
//           _prontoParaRetiradaMeta,
//           prontoParaRetirada.isAcceptableOrUnknown(
//               data['PRONTO_PARA_RETIRADA']!, _prontoParaRetiradaMeta));
//     }
//     if (data.containsKey('RETIROU')) {
//       context.handle(_retirouMeta,
//           retirou.isAcceptableOrUnknown(data['RETIROU']!, _retirouMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   Delivery map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return Delivery(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idComanda: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_COMANDA']),
//       idTaxaEntrega: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_TAXA_ENTREGA']),
//       idColaborador: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_COLABORADOR']),
//       nomeCliente: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NOME_CLIENTE']),
//       telefonePrincipal: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}TELEFONE_PRINCIPAL']),
//       telefoneRecado: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TELEFONE_RECADO']),
//       celular: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CELULAR']),
//       logradouro: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}LOGRADOURO']),
//       numero: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO']),
//       complemento: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}COMPLEMENTO']),
//       cep: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CEP']),
//       bairro: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}BAIRRO']),
//       cidade: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CIDADE']),
//       uf: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}UF']),
//       valorFrete: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_FRETE']),
//       valorRecebido: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_RECEBIDO']),
//       valorAReceber: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_A_RECEBER']),
//       valorSolicitadoTroco: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_SOLICITADO_TROCO']),
//       previsaoPreparo: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}PREVISAO_PREPARO']),
//       inicioPreparo: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}INICIO_PREPARO']),
//       previsaoEntrega: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}PREVISAO_ENTREGA']),
//       saiuParaEntrega: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}SAIU_PARA_ENTREGA']),
//       entregue: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ENTREGUE']),
//       previsaoRetirada: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}PREVISAO_RETIRADA']),
//       prontoParaRetirada: const DateTimeType().mapFromDatabaseResponse(
//           data['${effectivePrefix}PRONTO_PARA_RETIRADA']),
//       retirou: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}RETIROU']),
//     );
//   }

//   @override
//   $DeliverysTable createAlias(String alias) {
//     return $DeliverysTable(_db, alias);
//   }
// }

// class DeliveryAcertosCompanion extends UpdateCompanion<DeliveryAcerto> {
//   final Value<int> id;
//   final Value<DateTime?> dataAcerto;
//   final Value<String?> horaAcerto;
//   final Value<double?> valorRecebido;
//   final Value<double?> valorPagoEntregador;
//   final Value<String?> observacao;
//   const DeliveryAcertosCompanion({
//     this.id = const Value.absent(),
//     this.dataAcerto = const Value.absent(),
//     this.horaAcerto = const Value.absent(),
//     this.valorRecebido = const Value.absent(),
//     this.valorPagoEntregador = const Value.absent(),
//     this.observacao = const Value.absent(),
//   });
//   DeliveryAcertosCompanion.insert({
//     this.id = const Value.absent(),
//     this.dataAcerto = const Value.absent(),
//     this.horaAcerto = const Value.absent(),
//     this.valorRecebido = const Value.absent(),
//     this.valorPagoEntregador = const Value.absent(),
//     this.observacao = const Value.absent(),
//   });
//   static Insertable<DeliveryAcerto> custom({
//     Expression<int>? id,
//     Expression<DateTime?>? dataAcerto,
//     Expression<String?>? horaAcerto,
//     Expression<double?>? valorRecebido,
//     Expression<double?>? valorPagoEntregador,
//     Expression<String?>? observacao,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (dataAcerto != null) 'DATA_ACERTO': dataAcerto,
//       if (horaAcerto != null) 'HORA_ACERTO': horaAcerto,
//       if (valorRecebido != null) 'VALOR_RECEBIDO': valorRecebido,
//       if (valorPagoEntregador != null)
//         'VALOR_PAGO_ENTREGADOR': valorPagoEntregador,
//       if (observacao != null) 'OBSERVACAO': observacao,
//     });
//   }

//   DeliveryAcertosCompanion copyWith(
//       {Value<int>? id,
//       Value<DateTime?>? dataAcerto,
//       Value<String?>? horaAcerto,
//       Value<double?>? valorRecebido,
//       Value<double?>? valorPagoEntregador,
//       Value<String?>? observacao}) {
//     return DeliveryAcertosCompanion(
//       id: id ?? this.id,
//       dataAcerto: dataAcerto ?? this.dataAcerto,
//       horaAcerto: horaAcerto ?? this.horaAcerto,
//       valorRecebido: valorRecebido ?? this.valorRecebido,
//       valorPagoEntregador: valorPagoEntregador ?? this.valorPagoEntregador,
//       observacao: observacao ?? this.observacao,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (dataAcerto.present) {
//       map['DATA_ACERTO'] = Variable<DateTime?>(dataAcerto.value);
//     }
//     if (horaAcerto.present) {
//       map['HORA_ACERTO'] = Variable<String?>(horaAcerto.value);
//     }
//     if (valorRecebido.present) {
//       map['VALOR_RECEBIDO'] = Variable<double?>(valorRecebido.value);
//     }
//     if (valorPagoEntregador.present) {
//       map['VALOR_PAGO_ENTREGADOR'] =
//           Variable<double?>(valorPagoEntregador.value);
//     }
//     if (observacao.present) {
//       map['OBSERVACAO'] = Variable<String?>(observacao.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('DeliveryAcertosCompanion(')
//           ..write('id: $id, ')
//           ..write('dataAcerto: $dataAcerto, ')
//           ..write('horaAcerto: $horaAcerto, ')
//           ..write('valorRecebido: $valorRecebido, ')
//           ..write('valorPagoEntregador: $valorPagoEntregador, ')
//           ..write('observacao: $observacao')
//           ..write(')'))
//         .toString();
//   }
// }

// class $DeliveryAcertosTable extends DeliveryAcertos
//     with TableInfo<$DeliveryAcertosTable, DeliveryAcerto> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $DeliveryAcertosTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _dataAcertoMeta = const VerificationMeta('dataAcerto');
//   late final GeneratedColumn<DateTime?> dataAcerto = GeneratedColumn<DateTime?>(
//       'DATA_ACERTO', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _horaAcertoMeta = const VerificationMeta('horaAcerto');
//   late final GeneratedColumn<String?> horaAcerto = GeneratedColumn<String?>(
//       'HORA_ACERTO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _valorRecebidoMeta =
//       const VerificationMeta('valorRecebido');
//   late final GeneratedColumn<double?> valorRecebido = GeneratedColumn<double?>(
//       'VALOR_RECEBIDO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorPagoEntregadorMeta =
//       const VerificationMeta('valorPagoEntregador');
//   late final GeneratedColumn<double?> valorPagoEntregador =
//       GeneratedColumn<double?>('VALOR_PAGO_ENTREGADOR', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _observacaoMeta = const VerificationMeta('observacao');
//   late final GeneratedColumn<String?> observacao = GeneratedColumn<String?>(
//       'OBSERVACAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         dataAcerto,
//         horaAcerto,
//         valorRecebido,
//         valorPagoEntregador,
//         observacao
//       ];
//   @override
//   String get aliasedName => _alias ?? 'DELIVERY_ACERTO';
//   @override
//   String get actualTableName => 'DELIVERY_ACERTO';
//   @override
//   VerificationContext validateIntegrity(Insertable<DeliveryAcerto> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('DATA_ACERTO')) {
//       context.handle(
//           _dataAcertoMeta,
//           dataAcerto.isAcceptableOrUnknown(
//               data['DATA_ACERTO']!, _dataAcertoMeta));
//     }
//     if (data.containsKey('HORA_ACERTO')) {
//       context.handle(
//           _horaAcertoMeta,
//           horaAcerto.isAcceptableOrUnknown(
//               data['HORA_ACERTO']!, _horaAcertoMeta));
//     }
//     if (data.containsKey('VALOR_RECEBIDO')) {
//       context.handle(
//           _valorRecebidoMeta,
//           valorRecebido.isAcceptableOrUnknown(
//               data['VALOR_RECEBIDO']!, _valorRecebidoMeta));
//     }
//     if (data.containsKey('VALOR_PAGO_ENTREGADOR')) {
//       context.handle(
//           _valorPagoEntregadorMeta,
//           valorPagoEntregador.isAcceptableOrUnknown(
//               data['VALOR_PAGO_ENTREGADOR']!, _valorPagoEntregadorMeta));
//     }
//     if (data.containsKey('OBSERVACAO')) {
//       context.handle(
//           _observacaoMeta,
//           observacao.isAcceptableOrUnknown(
//               data['OBSERVACAO']!, _observacaoMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   DeliveryAcerto map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return DeliveryAcerto(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       dataAcerto: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_ACERTO']),
//       horaAcerto: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}HORA_ACERTO']),
//       valorRecebido: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_RECEBIDO']),
//       valorPagoEntregador: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_PAGO_ENTREGADOR']),
//       observacao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}OBSERVACAO']),
//     );
//   }

//   @override
//   $DeliveryAcertosTable createAlias(String alias) {
//     return $DeliveryAcertosTable(_db, alias);
//   }
// }

// class DeliveryAcertoComandasCompanion
//     extends UpdateCompanion<DeliveryAcertoComanda> {
//   final Value<int> id;
//   final Value<int?> idDeliveryAcerto;
//   final Value<int?> idDelivery;
//   const DeliveryAcertoComandasCompanion({
//     this.id = const Value.absent(),
//     this.idDeliveryAcerto = const Value.absent(),
//     this.idDelivery = const Value.absent(),
//   });
//   DeliveryAcertoComandasCompanion.insert({
//     this.id = const Value.absent(),
//     this.idDeliveryAcerto = const Value.absent(),
//     this.idDelivery = const Value.absent(),
//   });
//   static Insertable<DeliveryAcertoComanda> custom({
//     Expression<int>? id,
//     Expression<int?>? idDeliveryAcerto,
//     Expression<int?>? idDelivery,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idDeliveryAcerto != null) 'ID_DELIVERY_ACERTO': idDeliveryAcerto,
//       if (idDelivery != null) 'ID_DELIVERY': idDelivery,
//     });
//   }

//   DeliveryAcertoComandasCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idDeliveryAcerto,
//       Value<int?>? idDelivery}) {
//     return DeliveryAcertoComandasCompanion(
//       id: id ?? this.id,
//       idDeliveryAcerto: idDeliveryAcerto ?? this.idDeliveryAcerto,
//       idDelivery: idDelivery ?? this.idDelivery,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idDeliveryAcerto.present) {
//       map['ID_DELIVERY_ACERTO'] = Variable<int?>(idDeliveryAcerto.value);
//     }
//     if (idDelivery.present) {
//       map['ID_DELIVERY'] = Variable<int?>(idDelivery.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('DeliveryAcertoComandasCompanion(')
//           ..write('id: $id, ')
//           ..write('idDeliveryAcerto: $idDeliveryAcerto, ')
//           ..write('idDelivery: $idDelivery')
//           ..write(')'))
//         .toString();
//   }
// }

// class $DeliveryAcertoComandasTable extends DeliveryAcertoComandas
//     with TableInfo<$DeliveryAcertoComandasTable, DeliveryAcertoComanda> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $DeliveryAcertoComandasTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idDeliveryAcertoMeta =
//       const VerificationMeta('idDeliveryAcerto');
//   late final GeneratedColumn<int?> idDeliveryAcerto = GeneratedColumn<int?>(
//       'ID_DELIVERY_ACERTO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES DELIVERY_ACERTO(ID)');
//   final VerificationMeta _idDeliveryMeta = const VerificationMeta('idDelivery');
//   late final GeneratedColumn<int?> idDelivery = GeneratedColumn<int?>(
//       'ID_DELIVERY', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES DELIVERY(ID)');
//   @override
//   List<GeneratedColumn> get $columns => [id, idDeliveryAcerto, idDelivery];
//   @override
//   String get aliasedName => _alias ?? 'DELIVERY_ACERTO_COMANDA';
//   @override
//   String get actualTableName => 'DELIVERY_ACERTO_COMANDA';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<DeliveryAcertoComanda> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_DELIVERY_ACERTO')) {
//       context.handle(
//           _idDeliveryAcertoMeta,
//           idDeliveryAcerto.isAcceptableOrUnknown(
//               data['ID_DELIVERY_ACERTO']!, _idDeliveryAcertoMeta));
//     }
//     if (data.containsKey('ID_DELIVERY')) {
//       context.handle(
//           _idDeliveryMeta,
//           idDelivery.isAcceptableOrUnknown(
//               data['ID_DELIVERY']!, _idDeliveryMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   DeliveryAcertoComanda map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return DeliveryAcertoComanda(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idDeliveryAcerto: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ID_DELIVERY_ACERTO']),
//       idDelivery: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_DELIVERY']),
//     );
//   }

//   @override
//   $DeliveryAcertoComandasTable createAlias(String alias) {
//     return $DeliveryAcertoComandasTable(_db, alias);
//   }
// }

// class EcfAliquotassCompanion extends UpdateCompanion<EcfAliquotas> {
//   final Value<int> id;
//   final Value<String?> totalizadorParcial;
//   final Value<String?> ecfIcmsSt;
//   final Value<String?> pafPSt;
//   const EcfAliquotassCompanion({
//     this.id = const Value.absent(),
//     this.totalizadorParcial = const Value.absent(),
//     this.ecfIcmsSt = const Value.absent(),
//     this.pafPSt = const Value.absent(),
//   });
//   EcfAliquotassCompanion.insert({
//     this.id = const Value.absent(),
//     this.totalizadorParcial = const Value.absent(),
//     this.ecfIcmsSt = const Value.absent(),
//     this.pafPSt = const Value.absent(),
//   });
//   static Insertable<EcfAliquotas> custom({
//     Expression<int>? id,
//     Expression<String?>? totalizadorParcial,
//     Expression<String?>? ecfIcmsSt,
//     Expression<String?>? pafPSt,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (totalizadorParcial != null) 'TOTALIZADOR_PARCIAL': totalizadorParcial,
//       if (ecfIcmsSt != null) 'ECF_ICMS_ST': ecfIcmsSt,
//       if (pafPSt != null) 'PAF_P_ST': pafPSt,
//     });
//   }

//   EcfAliquotassCompanion copyWith(
//       {Value<int>? id,
//       Value<String?>? totalizadorParcial,
//       Value<String?>? ecfIcmsSt,
//       Value<String?>? pafPSt}) {
//     return EcfAliquotassCompanion(
//       id: id ?? this.id,
//       totalizadorParcial: totalizadorParcial ?? this.totalizadorParcial,
//       ecfIcmsSt: ecfIcmsSt ?? this.ecfIcmsSt,
//       pafPSt: pafPSt ?? this.pafPSt,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (totalizadorParcial.present) {
//       map['TOTALIZADOR_PARCIAL'] = Variable<String?>(totalizadorParcial.value);
//     }
//     if (ecfIcmsSt.present) {
//       map['ECF_ICMS_ST'] = Variable<String?>(ecfIcmsSt.value);
//     }
//     if (pafPSt.present) {
//       map['PAF_P_ST'] = Variable<String?>(pafPSt.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('EcfAliquotassCompanion(')
//           ..write('id: $id, ')
//           ..write('totalizadorParcial: $totalizadorParcial, ')
//           ..write('ecfIcmsSt: $ecfIcmsSt, ')
//           ..write('pafPSt: $pafPSt')
//           ..write(')'))
//         .toString();
//   }
// }

// class $EcfAliquotassTable extends EcfAliquotass
//     with TableInfo<$EcfAliquotassTable, EcfAliquotas> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $EcfAliquotassTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _totalizadorParcialMeta =
//       const VerificationMeta('totalizadorParcial');
//   late final GeneratedColumn<String?> totalizadorParcial =
//       GeneratedColumn<String?>(
//           'TOTALIZADOR_PARCIAL', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 10),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _ecfIcmsStMeta = const VerificationMeta('ecfIcmsSt');
//   late final GeneratedColumn<String?> ecfIcmsSt = GeneratedColumn<String?>(
//       'ECF_ICMS_ST', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 4),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _pafPStMeta = const VerificationMeta('pafPSt');
//   late final GeneratedColumn<String?> pafPSt = GeneratedColumn<String?>(
//       'PAF_P_ST', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns =>
//       [id, totalizadorParcial, ecfIcmsSt, pafPSt];
//   @override
//   String get aliasedName => _alias ?? 'ECF_ALIQUOTAS';
//   @override
//   String get actualTableName => 'ECF_ALIQUOTAS';
//   @override
//   VerificationContext validateIntegrity(Insertable<EcfAliquotas> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('TOTALIZADOR_PARCIAL')) {
//       context.handle(
//           _totalizadorParcialMeta,
//           totalizadorParcial.isAcceptableOrUnknown(
//               data['TOTALIZADOR_PARCIAL']!, _totalizadorParcialMeta));
//     }
//     if (data.containsKey('ECF_ICMS_ST')) {
//       context.handle(
//           _ecfIcmsStMeta,
//           ecfIcmsSt.isAcceptableOrUnknown(
//               data['ECF_ICMS_ST']!, _ecfIcmsStMeta));
//     }
//     if (data.containsKey('PAF_P_ST')) {
//       context.handle(_pafPStMeta,
//           pafPSt.isAcceptableOrUnknown(data['PAF_P_ST']!, _pafPStMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   EcfAliquotas map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return EcfAliquotas(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       totalizadorParcial: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}TOTALIZADOR_PARCIAL']),
//       ecfIcmsSt: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ECF_ICMS_ST']),
//       pafPSt: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}PAF_P_ST']),
//     );
//   }

//   @override
//   $EcfAliquotassTable createAlias(String alias) {
//     return $EcfAliquotassTable(_db, alias);
//   }
// }

// class EcfDocumentosEmitidossCompanion
//     extends UpdateCompanion<EcfDocumentosEmitidos> {
//   final Value<int> id;
//   final Value<int?> idPdvMovimento;
//   final Value<DateTime?> dataEmissao;
//   final Value<String?> horaEmissao;
//   final Value<String?> tipo;
//   final Value<int?> coo;
//   const EcfDocumentosEmitidossCompanion({
//     this.id = const Value.absent(),
//     this.idPdvMovimento = const Value.absent(),
//     this.dataEmissao = const Value.absent(),
//     this.horaEmissao = const Value.absent(),
//     this.tipo = const Value.absent(),
//     this.coo = const Value.absent(),
//   });
//   EcfDocumentosEmitidossCompanion.insert({
//     this.id = const Value.absent(),
//     this.idPdvMovimento = const Value.absent(),
//     this.dataEmissao = const Value.absent(),
//     this.horaEmissao = const Value.absent(),
//     this.tipo = const Value.absent(),
//     this.coo = const Value.absent(),
//   });
//   static Insertable<EcfDocumentosEmitidos> custom({
//     Expression<int>? id,
//     Expression<int?>? idPdvMovimento,
//     Expression<DateTime?>? dataEmissao,
//     Expression<String?>? horaEmissao,
//     Expression<String?>? tipo,
//     Expression<int?>? coo,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idPdvMovimento != null) 'ID_PDV_MOVIMENTO': idPdvMovimento,
//       if (dataEmissao != null) 'DATA_EMISSAO': dataEmissao,
//       if (horaEmissao != null) 'HORA_EMISSAO': horaEmissao,
//       if (tipo != null) 'TIPO': tipo,
//       if (coo != null) 'COO': coo,
//     });
//   }

//   EcfDocumentosEmitidossCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idPdvMovimento,
//       Value<DateTime?>? dataEmissao,
//       Value<String?>? horaEmissao,
//       Value<String?>? tipo,
//       Value<int?>? coo}) {
//     return EcfDocumentosEmitidossCompanion(
//       id: id ?? this.id,
//       idPdvMovimento: idPdvMovimento ?? this.idPdvMovimento,
//       dataEmissao: dataEmissao ?? this.dataEmissao,
//       horaEmissao: horaEmissao ?? this.horaEmissao,
//       tipo: tipo ?? this.tipo,
//       coo: coo ?? this.coo,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idPdvMovimento.present) {
//       map['ID_PDV_MOVIMENTO'] = Variable<int?>(idPdvMovimento.value);
//     }
//     if (dataEmissao.present) {
//       map['DATA_EMISSAO'] = Variable<DateTime?>(dataEmissao.value);
//     }
//     if (horaEmissao.present) {
//       map['HORA_EMISSAO'] = Variable<String?>(horaEmissao.value);
//     }
//     if (tipo.present) {
//       map['TIPO'] = Variable<String?>(tipo.value);
//     }
//     if (coo.present) {
//       map['COO'] = Variable<int?>(coo.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('EcfDocumentosEmitidossCompanion(')
//           ..write('id: $id, ')
//           ..write('idPdvMovimento: $idPdvMovimento, ')
//           ..write('dataEmissao: $dataEmissao, ')
//           ..write('horaEmissao: $horaEmissao, ')
//           ..write('tipo: $tipo, ')
//           ..write('coo: $coo')
//           ..write(')'))
//         .toString();
//   }
// }

// class $EcfDocumentosEmitidossTable extends EcfDocumentosEmitidoss
//     with TableInfo<$EcfDocumentosEmitidossTable, EcfDocumentosEmitidos> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $EcfDocumentosEmitidossTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idPdvMovimentoMeta =
//       const VerificationMeta('idPdvMovimento');
//   late final GeneratedColumn<int?> idPdvMovimento = GeneratedColumn<int?>(
//       'ID_PDV_MOVIMENTO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES PDV_MOVIMENTO(ID)');
//   final VerificationMeta _dataEmissaoMeta =
//       const VerificationMeta('dataEmissao');
//   late final GeneratedColumn<DateTime?> dataEmissao =
//       GeneratedColumn<DateTime?>('DATA_EMISSAO', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _horaEmissaoMeta =
//       const VerificationMeta('horaEmissao');
//   late final GeneratedColumn<String?> horaEmissao = GeneratedColumn<String?>(
//       'HORA_EMISSAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _tipoMeta = const VerificationMeta('tipo');
//   late final GeneratedColumn<String?> tipo = GeneratedColumn<String?>(
//       'TIPO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cooMeta = const VerificationMeta('coo');
//   late final GeneratedColumn<int?> coo = GeneratedColumn<int?>(
//       'COO', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns =>
//       [id, idPdvMovimento, dataEmissao, horaEmissao, tipo, coo];
//   @override
//   String get aliasedName => _alias ?? 'ECF_DOCUMENTOS_EMITIDOS';
//   @override
//   String get actualTableName => 'ECF_DOCUMENTOS_EMITIDOS';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<EcfDocumentosEmitidos> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_PDV_MOVIMENTO')) {
//       context.handle(
//           _idPdvMovimentoMeta,
//           idPdvMovimento.isAcceptableOrUnknown(
//               data['ID_PDV_MOVIMENTO']!, _idPdvMovimentoMeta));
//     }
//     if (data.containsKey('DATA_EMISSAO')) {
//       context.handle(
//           _dataEmissaoMeta,
//           dataEmissao.isAcceptableOrUnknown(
//               data['DATA_EMISSAO']!, _dataEmissaoMeta));
//     }
//     if (data.containsKey('HORA_EMISSAO')) {
//       context.handle(
//           _horaEmissaoMeta,
//           horaEmissao.isAcceptableOrUnknown(
//               data['HORA_EMISSAO']!, _horaEmissaoMeta));
//     }
//     if (data.containsKey('TIPO')) {
//       context.handle(
//           _tipoMeta, tipo.isAcceptableOrUnknown(data['TIPO']!, _tipoMeta));
//     }
//     if (data.containsKey('COO')) {
//       context.handle(
//           _cooMeta, coo.isAcceptableOrUnknown(data['COO']!, _cooMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   EcfDocumentosEmitidos map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return EcfDocumentosEmitidos(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idPdvMovimento: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_PDV_MOVIMENTO']),
//       dataEmissao: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_EMISSAO']),
//       horaEmissao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}HORA_EMISSAO']),
//       tipo: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TIPO']),
//       coo: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}COO']),
//     );
//   }

//   @override
//   $EcfDocumentosEmitidossTable createAlias(String alias) {
//     return $EcfDocumentosEmitidossTable(_db, alias);
//   }
// }

// class EcfE3sCompanion extends UpdateCompanion<EcfE3> {
//   final Value<int> id;
//   final Value<String?> serieEcf;
//   final Value<String?> mfAdicional;
//   final Value<String?> tipoEcf;
//   final Value<String?> marcaEcf;
//   final Value<String?> modeloEcf;
//   final Value<DateTime?> dataEstoque;
//   final Value<String?> horaEstoque;
//   final Value<String?> hashRegistro;
//   const EcfE3sCompanion({
//     this.id = const Value.absent(),
//     this.serieEcf = const Value.absent(),
//     this.mfAdicional = const Value.absent(),
//     this.tipoEcf = const Value.absent(),
//     this.marcaEcf = const Value.absent(),
//     this.modeloEcf = const Value.absent(),
//     this.dataEstoque = const Value.absent(),
//     this.horaEstoque = const Value.absent(),
//     this.hashRegistro = const Value.absent(),
//   });
//   EcfE3sCompanion.insert({
//     this.id = const Value.absent(),
//     this.serieEcf = const Value.absent(),
//     this.mfAdicional = const Value.absent(),
//     this.tipoEcf = const Value.absent(),
//     this.marcaEcf = const Value.absent(),
//     this.modeloEcf = const Value.absent(),
//     this.dataEstoque = const Value.absent(),
//     this.horaEstoque = const Value.absent(),
//     this.hashRegistro = const Value.absent(),
//   });
//   static Insertable<EcfE3> custom({
//     Expression<int>? id,
//     Expression<String?>? serieEcf,
//     Expression<String?>? mfAdicional,
//     Expression<String?>? tipoEcf,
//     Expression<String?>? marcaEcf,
//     Expression<String?>? modeloEcf,
//     Expression<DateTime?>? dataEstoque,
//     Expression<String?>? horaEstoque,
//     Expression<String?>? hashRegistro,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (serieEcf != null) 'SERIE_ECF': serieEcf,
//       if (mfAdicional != null) 'MF_ADICIONAL': mfAdicional,
//       if (tipoEcf != null) 'TIPO_ECF': tipoEcf,
//       if (marcaEcf != null) 'MARCA_ECF': marcaEcf,
//       if (modeloEcf != null) 'MODELO_ECF': modeloEcf,
//       if (dataEstoque != null) 'DATA_ESTOQUE': dataEstoque,
//       if (horaEstoque != null) 'HORA_ESTOQUE': horaEstoque,
//       if (hashRegistro != null) 'HASH_REGISTRO': hashRegistro,
//     });
//   }

//   EcfE3sCompanion copyWith(
//       {Value<int>? id,
//       Value<String?>? serieEcf,
//       Value<String?>? mfAdicional,
//       Value<String?>? tipoEcf,
//       Value<String?>? marcaEcf,
//       Value<String?>? modeloEcf,
//       Value<DateTime?>? dataEstoque,
//       Value<String?>? horaEstoque,
//       Value<String?>? hashRegistro}) {
//     return EcfE3sCompanion(
//       id: id ?? this.id,
//       serieEcf: serieEcf ?? this.serieEcf,
//       mfAdicional: mfAdicional ?? this.mfAdicional,
//       tipoEcf: tipoEcf ?? this.tipoEcf,
//       marcaEcf: marcaEcf ?? this.marcaEcf,
//       modeloEcf: modeloEcf ?? this.modeloEcf,
//       dataEstoque: dataEstoque ?? this.dataEstoque,
//       horaEstoque: horaEstoque ?? this.horaEstoque,
//       hashRegistro: hashRegistro ?? this.hashRegistro,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (serieEcf.present) {
//       map['SERIE_ECF'] = Variable<String?>(serieEcf.value);
//     }
//     if (mfAdicional.present) {
//       map['MF_ADICIONAL'] = Variable<String?>(mfAdicional.value);
//     }
//     if (tipoEcf.present) {
//       map['TIPO_ECF'] = Variable<String?>(tipoEcf.value);
//     }
//     if (marcaEcf.present) {
//       map['MARCA_ECF'] = Variable<String?>(marcaEcf.value);
//     }
//     if (modeloEcf.present) {
//       map['MODELO_ECF'] = Variable<String?>(modeloEcf.value);
//     }
//     if (dataEstoque.present) {
//       map['DATA_ESTOQUE'] = Variable<DateTime?>(dataEstoque.value);
//     }
//     if (horaEstoque.present) {
//       map['HORA_ESTOQUE'] = Variable<String?>(horaEstoque.value);
//     }
//     if (hashRegistro.present) {
//       map['HASH_REGISTRO'] = Variable<String?>(hashRegistro.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('EcfE3sCompanion(')
//           ..write('id: $id, ')
//           ..write('serieEcf: $serieEcf, ')
//           ..write('mfAdicional: $mfAdicional, ')
//           ..write('tipoEcf: $tipoEcf, ')
//           ..write('marcaEcf: $marcaEcf, ')
//           ..write('modeloEcf: $modeloEcf, ')
//           ..write('dataEstoque: $dataEstoque, ')
//           ..write('horaEstoque: $horaEstoque, ')
//           ..write('hashRegistro: $hashRegistro')
//           ..write(')'))
//         .toString();
//   }
// }

// class $EcfE3sTable extends EcfE3s with TableInfo<$EcfE3sTable, EcfE3> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $EcfE3sTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _serieEcfMeta = const VerificationMeta('serieEcf');
//   late final GeneratedColumn<String?> serieEcf = GeneratedColumn<String?>(
//       'SERIE_ECF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _mfAdicionalMeta =
//       const VerificationMeta('mfAdicional');
//   late final GeneratedColumn<String?> mfAdicional = GeneratedColumn<String?>(
//       'MF_ADICIONAL', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _tipoEcfMeta = const VerificationMeta('tipoEcf');
//   late final GeneratedColumn<String?> tipoEcf = GeneratedColumn<String?>(
//       'TIPO_ECF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 7),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _marcaEcfMeta = const VerificationMeta('marcaEcf');
//   late final GeneratedColumn<String?> marcaEcf = GeneratedColumn<String?>(
//       'MARCA_ECF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _modeloEcfMeta = const VerificationMeta('modeloEcf');
//   late final GeneratedColumn<String?> modeloEcf = GeneratedColumn<String?>(
//       'MODELO_ECF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _dataEstoqueMeta =
//       const VerificationMeta('dataEstoque');
//   late final GeneratedColumn<DateTime?> dataEstoque =
//       GeneratedColumn<DateTime?>('DATA_ESTOQUE', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _horaEstoqueMeta =
//       const VerificationMeta('horaEstoque');
//   late final GeneratedColumn<String?> horaEstoque = GeneratedColumn<String?>(
//       'HORA_ESTOQUE', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _hashRegistroMeta =
//       const VerificationMeta('hashRegistro');
//   late final GeneratedColumn<String?> hashRegistro = GeneratedColumn<String?>(
//       'HASH_REGISTRO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 32),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         serieEcf,
//         mfAdicional,
//         tipoEcf,
//         marcaEcf,
//         modeloEcf,
//         dataEstoque,
//         horaEstoque,
//         hashRegistro
//       ];
//   @override
//   String get aliasedName => _alias ?? 'ECF_E3';
//   @override
//   String get actualTableName => 'ECF_E3';
//   @override
//   VerificationContext validateIntegrity(Insertable<EcfE3> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('SERIE_ECF')) {
//       context.handle(_serieEcfMeta,
//           serieEcf.isAcceptableOrUnknown(data['SERIE_ECF']!, _serieEcfMeta));
//     }
//     if (data.containsKey('MF_ADICIONAL')) {
//       context.handle(
//           _mfAdicionalMeta,
//           mfAdicional.isAcceptableOrUnknown(
//               data['MF_ADICIONAL']!, _mfAdicionalMeta));
//     }
//     if (data.containsKey('TIPO_ECF')) {
//       context.handle(_tipoEcfMeta,
//           tipoEcf.isAcceptableOrUnknown(data['TIPO_ECF']!, _tipoEcfMeta));
//     }
//     if (data.containsKey('MARCA_ECF')) {
//       context.handle(_marcaEcfMeta,
//           marcaEcf.isAcceptableOrUnknown(data['MARCA_ECF']!, _marcaEcfMeta));
//     }
//     if (data.containsKey('MODELO_ECF')) {
//       context.handle(_modeloEcfMeta,
//           modeloEcf.isAcceptableOrUnknown(data['MODELO_ECF']!, _modeloEcfMeta));
//     }
//     if (data.containsKey('DATA_ESTOQUE')) {
//       context.handle(
//           _dataEstoqueMeta,
//           dataEstoque.isAcceptableOrUnknown(
//               data['DATA_ESTOQUE']!, _dataEstoqueMeta));
//     }
//     if (data.containsKey('HORA_ESTOQUE')) {
//       context.handle(
//           _horaEstoqueMeta,
//           horaEstoque.isAcceptableOrUnknown(
//               data['HORA_ESTOQUE']!, _horaEstoqueMeta));
//     }
//     if (data.containsKey('HASH_REGISTRO')) {
//       context.handle(
//           _hashRegistroMeta,
//           hashRegistro.isAcceptableOrUnknown(
//               data['HASH_REGISTRO']!, _hashRegistroMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   EcfE3 map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return EcfE3(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       serieEcf: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}SERIE_ECF']),
//       mfAdicional: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}MF_ADICIONAL']),
//       tipoEcf: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TIPO_ECF']),
//       marcaEcf: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}MARCA_ECF']),
//       modeloEcf: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}MODELO_ECF']),
//       dataEstoque: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_ESTOQUE']),
//       horaEstoque: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}HORA_ESTOQUE']),
//       hashRegistro: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}HASH_REGISTRO']),
//     );
//   }

//   @override
//   $EcfE3sTable createAlias(String alias) {
//     return $EcfE3sTable(_db, alias);
//   }
// }

// class EcfImpressorasCompanion extends UpdateCompanion<EcfImpressora> {
//   final Value<int> id;
//   final Value<int?> numero;
//   final Value<String?> codigo;
//   final Value<String?> serie;
//   final Value<String?> identificacao;
//   final Value<String?> mc;
//   final Value<String?> md;
//   final Value<String?> vr;
//   final Value<String?> tipo;
//   final Value<String?> marca;
//   final Value<String?> modelo;
//   final Value<String?> modeloAcbr;
//   final Value<String?> modeloDocumentoFiscal;
//   final Value<String?> versao;
//   final Value<String?> le;
//   final Value<String?> lef;
//   final Value<String?> mfd;
//   final Value<String?> lacreNaMfd;
//   final Value<String?> docto;
//   final Value<DateTime?> dataInstalacaoSb;
//   final Value<String?> horaInstalacaoSb;
//   const EcfImpressorasCompanion({
//     this.id = const Value.absent(),
//     this.numero = const Value.absent(),
//     this.codigo = const Value.absent(),
//     this.serie = const Value.absent(),
//     this.identificacao = const Value.absent(),
//     this.mc = const Value.absent(),
//     this.md = const Value.absent(),
//     this.vr = const Value.absent(),
//     this.tipo = const Value.absent(),
//     this.marca = const Value.absent(),
//     this.modelo = const Value.absent(),
//     this.modeloAcbr = const Value.absent(),
//     this.modeloDocumentoFiscal = const Value.absent(),
//     this.versao = const Value.absent(),
//     this.le = const Value.absent(),
//     this.lef = const Value.absent(),
//     this.mfd = const Value.absent(),
//     this.lacreNaMfd = const Value.absent(),
//     this.docto = const Value.absent(),
//     this.dataInstalacaoSb = const Value.absent(),
//     this.horaInstalacaoSb = const Value.absent(),
//   });
//   EcfImpressorasCompanion.insert({
//     this.id = const Value.absent(),
//     this.numero = const Value.absent(),
//     this.codigo = const Value.absent(),
//     this.serie = const Value.absent(),
//     this.identificacao = const Value.absent(),
//     this.mc = const Value.absent(),
//     this.md = const Value.absent(),
//     this.vr = const Value.absent(),
//     this.tipo = const Value.absent(),
//     this.marca = const Value.absent(),
//     this.modelo = const Value.absent(),
//     this.modeloAcbr = const Value.absent(),
//     this.modeloDocumentoFiscal = const Value.absent(),
//     this.versao = const Value.absent(),
//     this.le = const Value.absent(),
//     this.lef = const Value.absent(),
//     this.mfd = const Value.absent(),
//     this.lacreNaMfd = const Value.absent(),
//     this.docto = const Value.absent(),
//     this.dataInstalacaoSb = const Value.absent(),
//     this.horaInstalacaoSb = const Value.absent(),
//   });
//   static Insertable<EcfImpressora> custom({
//     Expression<int>? id,
//     Expression<int?>? numero,
//     Expression<String?>? codigo,
//     Expression<String?>? serie,
//     Expression<String?>? identificacao,
//     Expression<String?>? mc,
//     Expression<String?>? md,
//     Expression<String?>? vr,
//     Expression<String?>? tipo,
//     Expression<String?>? marca,
//     Expression<String?>? modelo,
//     Expression<String?>? modeloAcbr,
//     Expression<String?>? modeloDocumentoFiscal,
//     Expression<String?>? versao,
//     Expression<String?>? le,
//     Expression<String?>? lef,
//     Expression<String?>? mfd,
//     Expression<String?>? lacreNaMfd,
//     Expression<String?>? docto,
//     Expression<DateTime?>? dataInstalacaoSb,
//     Expression<String?>? horaInstalacaoSb,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (numero != null) 'NUMERO': numero,
//       if (codigo != null) 'CODIGO': codigo,
//       if (serie != null) 'SERIE': serie,
//       if (identificacao != null) 'IDENTIFICACAO': identificacao,
//       if (mc != null) 'MC': mc,
//       if (md != null) 'MD': md,
//       if (vr != null) 'VR': vr,
//       if (tipo != null) 'TIPO': tipo,
//       if (marca != null) 'MARCA': marca,
//       if (modelo != null) 'MODELO': modelo,
//       if (modeloAcbr != null) 'MODELO_ACBR': modeloAcbr,
//       if (modeloDocumentoFiscal != null)
//         'MODELO_DOCUMENTO_FISCAL': modeloDocumentoFiscal,
//       if (versao != null) 'VERSAO': versao,
//       if (le != null) 'LE': le,
//       if (lef != null) 'LEF': lef,
//       if (mfd != null) 'MFD': mfd,
//       if (lacreNaMfd != null) 'LACRE_NA_MFD': lacreNaMfd,
//       if (docto != null) 'DOCTO': docto,
//       if (dataInstalacaoSb != null) 'DATA_INSTALACAO_SB': dataInstalacaoSb,
//       if (horaInstalacaoSb != null) 'HORA_INSTALACAO_SB': horaInstalacaoSb,
//     });
//   }

//   EcfImpressorasCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? numero,
//       Value<String?>? codigo,
//       Value<String?>? serie,
//       Value<String?>? identificacao,
//       Value<String?>? mc,
//       Value<String?>? md,
//       Value<String?>? vr,
//       Value<String?>? tipo,
//       Value<String?>? marca,
//       Value<String?>? modelo,
//       Value<String?>? modeloAcbr,
//       Value<String?>? modeloDocumentoFiscal,
//       Value<String?>? versao,
//       Value<String?>? le,
//       Value<String?>? lef,
//       Value<String?>? mfd,
//       Value<String?>? lacreNaMfd,
//       Value<String?>? docto,
//       Value<DateTime?>? dataInstalacaoSb,
//       Value<String?>? horaInstalacaoSb}) {
//     return EcfImpressorasCompanion(
//       id: id ?? this.id,
//       numero: numero ?? this.numero,
//       codigo: codigo ?? this.codigo,
//       serie: serie ?? this.serie,
//       identificacao: identificacao ?? this.identificacao,
//       mc: mc ?? this.mc,
//       md: md ?? this.md,
//       vr: vr ?? this.vr,
//       tipo: tipo ?? this.tipo,
//       marca: marca ?? this.marca,
//       modelo: modelo ?? this.modelo,
//       modeloAcbr: modeloAcbr ?? this.modeloAcbr,
//       modeloDocumentoFiscal:
//           modeloDocumentoFiscal ?? this.modeloDocumentoFiscal,
//       versao: versao ?? this.versao,
//       le: le ?? this.le,
//       lef: lef ?? this.lef,
//       mfd: mfd ?? this.mfd,
//       lacreNaMfd: lacreNaMfd ?? this.lacreNaMfd,
//       docto: docto ?? this.docto,
//       dataInstalacaoSb: dataInstalacaoSb ?? this.dataInstalacaoSb,
//       horaInstalacaoSb: horaInstalacaoSb ?? this.horaInstalacaoSb,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (numero.present) {
//       map['NUMERO'] = Variable<int?>(numero.value);
//     }
//     if (codigo.present) {
//       map['CODIGO'] = Variable<String?>(codigo.value);
//     }
//     if (serie.present) {
//       map['SERIE'] = Variable<String?>(serie.value);
//     }
//     if (identificacao.present) {
//       map['IDENTIFICACAO'] = Variable<String?>(identificacao.value);
//     }
//     if (mc.present) {
//       map['MC'] = Variable<String?>(mc.value);
//     }
//     if (md.present) {
//       map['MD'] = Variable<String?>(md.value);
//     }
//     if (vr.present) {
//       map['VR'] = Variable<String?>(vr.value);
//     }
//     if (tipo.present) {
//       map['TIPO'] = Variable<String?>(tipo.value);
//     }
//     if (marca.present) {
//       map['MARCA'] = Variable<String?>(marca.value);
//     }
//     if (modelo.present) {
//       map['MODELO'] = Variable<String?>(modelo.value);
//     }
//     if (modeloAcbr.present) {
//       map['MODELO_ACBR'] = Variable<String?>(modeloAcbr.value);
//     }
//     if (modeloDocumentoFiscal.present) {
//       map['MODELO_DOCUMENTO_FISCAL'] =
//           Variable<String?>(modeloDocumentoFiscal.value);
//     }
//     if (versao.present) {
//       map['VERSAO'] = Variable<String?>(versao.value);
//     }
//     if (le.present) {
//       map['LE'] = Variable<String?>(le.value);
//     }
//     if (lef.present) {
//       map['LEF'] = Variable<String?>(lef.value);
//     }
//     if (mfd.present) {
//       map['MFD'] = Variable<String?>(mfd.value);
//     }
//     if (lacreNaMfd.present) {
//       map['LACRE_NA_MFD'] = Variable<String?>(lacreNaMfd.value);
//     }
//     if (docto.present) {
//       map['DOCTO'] = Variable<String?>(docto.value);
//     }
//     if (dataInstalacaoSb.present) {
//       map['DATA_INSTALACAO_SB'] = Variable<DateTime?>(dataInstalacaoSb.value);
//     }
//     if (horaInstalacaoSb.present) {
//       map['HORA_INSTALACAO_SB'] = Variable<String?>(horaInstalacaoSb.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('EcfImpressorasCompanion(')
//           ..write('id: $id, ')
//           ..write('numero: $numero, ')
//           ..write('codigo: $codigo, ')
//           ..write('serie: $serie, ')
//           ..write('identificacao: $identificacao, ')
//           ..write('mc: $mc, ')
//           ..write('md: $md, ')
//           ..write('vr: $vr, ')
//           ..write('tipo: $tipo, ')
//           ..write('marca: $marca, ')
//           ..write('modelo: $modelo, ')
//           ..write('modeloAcbr: $modeloAcbr, ')
//           ..write('modeloDocumentoFiscal: $modeloDocumentoFiscal, ')
//           ..write('versao: $versao, ')
//           ..write('le: $le, ')
//           ..write('lef: $lef, ')
//           ..write('mfd: $mfd, ')
//           ..write('lacreNaMfd: $lacreNaMfd, ')
//           ..write('docto: $docto, ')
//           ..write('dataInstalacaoSb: $dataInstalacaoSb, ')
//           ..write('horaInstalacaoSb: $horaInstalacaoSb')
//           ..write(')'))
//         .toString();
//   }
// }

// class $EcfImpressorasTable extends EcfImpressoras
//     with TableInfo<$EcfImpressorasTable, EcfImpressora> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $EcfImpressorasTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _numeroMeta = const VerificationMeta('numero');
//   late final GeneratedColumn<int?> numero = GeneratedColumn<int?>(
//       'NUMERO', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _codigoMeta = const VerificationMeta('codigo');
//   late final GeneratedColumn<String?> codigo = GeneratedColumn<String?>(
//       'CODIGO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 10),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _serieMeta = const VerificationMeta('serie');
//   late final GeneratedColumn<String?> serie = GeneratedColumn<String?>(
//       'SERIE', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 30),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _identificacaoMeta =
//       const VerificationMeta('identificacao');
//   late final GeneratedColumn<String?> identificacao = GeneratedColumn<String?>(
//       'IDENTIFICACAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _mcMeta = const VerificationMeta('mc');
//   late final GeneratedColumn<String?> mc = GeneratedColumn<String?>(
//       'MC', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _mdMeta = const VerificationMeta('md');
//   late final GeneratedColumn<String?> md = GeneratedColumn<String?>(
//       'MD', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _vrMeta = const VerificationMeta('vr');
//   late final GeneratedColumn<String?> vr = GeneratedColumn<String?>(
//       'VR', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _tipoMeta = const VerificationMeta('tipo');
//   late final GeneratedColumn<String?> tipo = GeneratedColumn<String?>(
//       'TIPO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 7),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _marcaMeta = const VerificationMeta('marca');
//   late final GeneratedColumn<String?> marca = GeneratedColumn<String?>(
//       'MARCA', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 30),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _modeloMeta = const VerificationMeta('modelo');
//   late final GeneratedColumn<String?> modelo = GeneratedColumn<String?>(
//       'MODELO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 30),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _modeloAcbrMeta = const VerificationMeta('modeloAcbr');
//   late final GeneratedColumn<String?> modeloAcbr = GeneratedColumn<String?>(
//       'MODELO_ACBR', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 30),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _modeloDocumentoFiscalMeta =
//       const VerificationMeta('modeloDocumentoFiscal');
//   late final GeneratedColumn<String?> modeloDocumentoFiscal =
//       GeneratedColumn<String?>('MODELO_DOCUMENTO_FISCAL', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 2),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _versaoMeta = const VerificationMeta('versao');
//   late final GeneratedColumn<String?> versao = GeneratedColumn<String?>(
//       'VERSAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 30),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _leMeta = const VerificationMeta('le');
//   late final GeneratedColumn<String?> le = GeneratedColumn<String?>(
//       'LE', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _lefMeta = const VerificationMeta('lef');
//   late final GeneratedColumn<String?> lef = GeneratedColumn<String?>(
//       'LEF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _mfdMeta = const VerificationMeta('mfd');
//   late final GeneratedColumn<String?> mfd = GeneratedColumn<String?>(
//       'MFD', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _lacreNaMfdMeta = const VerificationMeta('lacreNaMfd');
//   late final GeneratedColumn<String?> lacreNaMfd = GeneratedColumn<String?>(
//       'LACRE_NA_MFD', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _doctoMeta = const VerificationMeta('docto');
//   late final GeneratedColumn<String?> docto = GeneratedColumn<String?>(
//       'DOCTO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _dataInstalacaoSbMeta =
//       const VerificationMeta('dataInstalacaoSb');
//   late final GeneratedColumn<DateTime?> dataInstalacaoSb =
//       GeneratedColumn<DateTime?>('DATA_INSTALACAO_SB', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _horaInstalacaoSbMeta =
//       const VerificationMeta('horaInstalacaoSb');
//   late final GeneratedColumn<String?> horaInstalacaoSb =
//       GeneratedColumn<String?>('HORA_INSTALACAO_SB', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 8),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         numero,
//         codigo,
//         serie,
//         identificacao,
//         mc,
//         md,
//         vr,
//         tipo,
//         marca,
//         modelo,
//         modeloAcbr,
//         modeloDocumentoFiscal,
//         versao,
//         le,
//         lef,
//         mfd,
//         lacreNaMfd,
//         docto,
//         dataInstalacaoSb,
//         horaInstalacaoSb
//       ];
//   @override
//   String get aliasedName => _alias ?? 'ECF_IMPRESSORA';
//   @override
//   String get actualTableName => 'ECF_IMPRESSORA';
//   @override
//   VerificationContext validateIntegrity(Insertable<EcfImpressora> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('NUMERO')) {
//       context.handle(_numeroMeta,
//           numero.isAcceptableOrUnknown(data['NUMERO']!, _numeroMeta));
//     }
//     if (data.containsKey('CODIGO')) {
//       context.handle(_codigoMeta,
//           codigo.isAcceptableOrUnknown(data['CODIGO']!, _codigoMeta));
//     }
//     if (data.containsKey('SERIE')) {
//       context.handle(
//           _serieMeta, serie.isAcceptableOrUnknown(data['SERIE']!, _serieMeta));
//     }
//     if (data.containsKey('IDENTIFICACAO')) {
//       context.handle(
//           _identificacaoMeta,
//           identificacao.isAcceptableOrUnknown(
//               data['IDENTIFICACAO']!, _identificacaoMeta));
//     }
//     if (data.containsKey('MC')) {
//       context.handle(_mcMeta, mc.isAcceptableOrUnknown(data['MC']!, _mcMeta));
//     }
//     if (data.containsKey('MD')) {
//       context.handle(_mdMeta, md.isAcceptableOrUnknown(data['MD']!, _mdMeta));
//     }
//     if (data.containsKey('VR')) {
//       context.handle(_vrMeta, vr.isAcceptableOrUnknown(data['VR']!, _vrMeta));
//     }
//     if (data.containsKey('TIPO')) {
//       context.handle(
//           _tipoMeta, tipo.isAcceptableOrUnknown(data['TIPO']!, _tipoMeta));
//     }
//     if (data.containsKey('MARCA')) {
//       context.handle(
//           _marcaMeta, marca.isAcceptableOrUnknown(data['MARCA']!, _marcaMeta));
//     }
//     if (data.containsKey('MODELO')) {
//       context.handle(_modeloMeta,
//           modelo.isAcceptableOrUnknown(data['MODELO']!, _modeloMeta));
//     }
//     if (data.containsKey('MODELO_ACBR')) {
//       context.handle(
//           _modeloAcbrMeta,
//           modeloAcbr.isAcceptableOrUnknown(
//               data['MODELO_ACBR']!, _modeloAcbrMeta));
//     }
//     if (data.containsKey('MODELO_DOCUMENTO_FISCAL')) {
//       context.handle(
//           _modeloDocumentoFiscalMeta,
//           modeloDocumentoFiscal.isAcceptableOrUnknown(
//               data['MODELO_DOCUMENTO_FISCAL']!, _modeloDocumentoFiscalMeta));
//     }
//     if (data.containsKey('VERSAO')) {
//       context.handle(_versaoMeta,
//           versao.isAcceptableOrUnknown(data['VERSAO']!, _versaoMeta));
//     }
//     if (data.containsKey('LE')) {
//       context.handle(_leMeta, le.isAcceptableOrUnknown(data['LE']!, _leMeta));
//     }
//     if (data.containsKey('LEF')) {
//       context.handle(
//           _lefMeta, lef.isAcceptableOrUnknown(data['LEF']!, _lefMeta));
//     }
//     if (data.containsKey('MFD')) {
//       context.handle(
//           _mfdMeta, mfd.isAcceptableOrUnknown(data['MFD']!, _mfdMeta));
//     }
//     if (data.containsKey('LACRE_NA_MFD')) {
//       context.handle(
//           _lacreNaMfdMeta,
//           lacreNaMfd.isAcceptableOrUnknown(
//               data['LACRE_NA_MFD']!, _lacreNaMfdMeta));
//     }
//     if (data.containsKey('DOCTO')) {
//       context.handle(
//           _doctoMeta, docto.isAcceptableOrUnknown(data['DOCTO']!, _doctoMeta));
//     }
//     if (data.containsKey('DATA_INSTALACAO_SB')) {
//       context.handle(
//           _dataInstalacaoSbMeta,
//           dataInstalacaoSb.isAcceptableOrUnknown(
//               data['DATA_INSTALACAO_SB']!, _dataInstalacaoSbMeta));
//     }
//     if (data.containsKey('HORA_INSTALACAO_SB')) {
//       context.handle(
//           _horaInstalacaoSbMeta,
//           horaInstalacaoSb.isAcceptableOrUnknown(
//               data['HORA_INSTALACAO_SB']!, _horaInstalacaoSbMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   EcfImpressora map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return EcfImpressora(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       numero: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO']),
//       codigo: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO']),
//       serie: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}SERIE']),
//       identificacao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}IDENTIFICACAO']),
//       mc: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}MC']),
//       md: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}MD']),
//       vr: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VR']),
//       tipo: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TIPO']),
//       marca: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}MARCA']),
//       modelo: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}MODELO']),
//       modeloAcbr: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}MODELO_ACBR']),
//       modeloDocumentoFiscal: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}MODELO_DOCUMENTO_FISCAL']),
//       versao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VERSAO']),
//       le: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}LE']),
//       lef: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}LEF']),
//       mfd: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}MFD']),
//       lacreNaMfd: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}LACRE_NA_MFD']),
//       docto: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DOCTO']),
//       dataInstalacaoSb: const DateTimeType().mapFromDatabaseResponse(
//           data['${effectivePrefix}DATA_INSTALACAO_SB']),
//       horaInstalacaoSb: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}HORA_INSTALACAO_SB']),
//     );
//   }

//   @override
//   $EcfImpressorasTable createAlias(String alias) {
//     return $EcfImpressorasTable(_db, alias);
//   }
// }

// class EcfLogTotaissCompanion extends UpdateCompanion<EcfLogTotais> {
//   final Value<int> id;
//   final Value<int?> tipoPagamento;
//   final Value<int?> produto;
//   final Value<int?> r01;
//   final Value<int?> r02;
//   final Value<int?> r03;
//   final Value<int?> r04;
//   final Value<int?> r05;
//   final Value<int?> r06;
//   final Value<int?> r07;
//   const EcfLogTotaissCompanion({
//     this.id = const Value.absent(),
//     this.tipoPagamento = const Value.absent(),
//     this.produto = const Value.absent(),
//     this.r01 = const Value.absent(),
//     this.r02 = const Value.absent(),
//     this.r03 = const Value.absent(),
//     this.r04 = const Value.absent(),
//     this.r05 = const Value.absent(),
//     this.r06 = const Value.absent(),
//     this.r07 = const Value.absent(),
//   });
//   EcfLogTotaissCompanion.insert({
//     this.id = const Value.absent(),
//     this.tipoPagamento = const Value.absent(),
//     this.produto = const Value.absent(),
//     this.r01 = const Value.absent(),
//     this.r02 = const Value.absent(),
//     this.r03 = const Value.absent(),
//     this.r04 = const Value.absent(),
//     this.r05 = const Value.absent(),
//     this.r06 = const Value.absent(),
//     this.r07 = const Value.absent(),
//   });
//   static Insertable<EcfLogTotais> custom({
//     Expression<int>? id,
//     Expression<int?>? tipoPagamento,
//     Expression<int?>? produto,
//     Expression<int?>? r01,
//     Expression<int?>? r02,
//     Expression<int?>? r03,
//     Expression<int?>? r04,
//     Expression<int?>? r05,
//     Expression<int?>? r06,
//     Expression<int?>? r07,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (tipoPagamento != null) 'TIPO_PAGAMENTO': tipoPagamento,
//       if (produto != null) 'PRODUTO': produto,
//       if (r01 != null) 'R01': r01,
//       if (r02 != null) 'R02': r02,
//       if (r03 != null) 'R03': r03,
//       if (r04 != null) 'R04': r04,
//       if (r05 != null) 'R05': r05,
//       if (r06 != null) 'R06': r06,
//       if (r07 != null) 'R07': r07,
//     });
//   }

//   EcfLogTotaissCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? tipoPagamento,
//       Value<int?>? produto,
//       Value<int?>? r01,
//       Value<int?>? r02,
//       Value<int?>? r03,
//       Value<int?>? r04,
//       Value<int?>? r05,
//       Value<int?>? r06,
//       Value<int?>? r07}) {
//     return EcfLogTotaissCompanion(
//       id: id ?? this.id,
//       tipoPagamento: tipoPagamento ?? this.tipoPagamento,
//       produto: produto ?? this.produto,
//       r01: r01 ?? this.r01,
//       r02: r02 ?? this.r02,
//       r03: r03 ?? this.r03,
//       r04: r04 ?? this.r04,
//       r05: r05 ?? this.r05,
//       r06: r06 ?? this.r06,
//       r07: r07 ?? this.r07,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (tipoPagamento.present) {
//       map['TIPO_PAGAMENTO'] = Variable<int?>(tipoPagamento.value);
//     }
//     if (produto.present) {
//       map['PRODUTO'] = Variable<int?>(produto.value);
//     }
//     if (r01.present) {
//       map['R01'] = Variable<int?>(r01.value);
//     }
//     if (r02.present) {
//       map['R02'] = Variable<int?>(r02.value);
//     }
//     if (r03.present) {
//       map['R03'] = Variable<int?>(r03.value);
//     }
//     if (r04.present) {
//       map['R04'] = Variable<int?>(r04.value);
//     }
//     if (r05.present) {
//       map['R05'] = Variable<int?>(r05.value);
//     }
//     if (r06.present) {
//       map['R06'] = Variable<int?>(r06.value);
//     }
//     if (r07.present) {
//       map['R07'] = Variable<int?>(r07.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('EcfLogTotaissCompanion(')
//           ..write('id: $id, ')
//           ..write('tipoPagamento: $tipoPagamento, ')
//           ..write('produto: $produto, ')
//           ..write('r01: $r01, ')
//           ..write('r02: $r02, ')
//           ..write('r03: $r03, ')
//           ..write('r04: $r04, ')
//           ..write('r05: $r05, ')
//           ..write('r06: $r06, ')
//           ..write('r07: $r07')
//           ..write(')'))
//         .toString();
//   }
// }

// class $EcfLogTotaissTable extends EcfLogTotaiss
//     with TableInfo<$EcfLogTotaissTable, EcfLogTotais> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $EcfLogTotaissTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _tipoPagamentoMeta =
//       const VerificationMeta('tipoPagamento');
//   late final GeneratedColumn<int?> tipoPagamento = GeneratedColumn<int?>(
//       'TIPO_PAGAMENTO', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _produtoMeta = const VerificationMeta('produto');
//   late final GeneratedColumn<int?> produto = GeneratedColumn<int?>(
//       'PRODUTO', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _r01Meta = const VerificationMeta('r01');
//   late final GeneratedColumn<int?> r01 = GeneratedColumn<int?>(
//       'R01', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _r02Meta = const VerificationMeta('r02');
//   late final GeneratedColumn<int?> r02 = GeneratedColumn<int?>(
//       'R02', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _r03Meta = const VerificationMeta('r03');
//   late final GeneratedColumn<int?> r03 = GeneratedColumn<int?>(
//       'R03', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _r04Meta = const VerificationMeta('r04');
//   late final GeneratedColumn<int?> r04 = GeneratedColumn<int?>(
//       'R04', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _r05Meta = const VerificationMeta('r05');
//   late final GeneratedColumn<int?> r05 = GeneratedColumn<int?>(
//       'R05', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _r06Meta = const VerificationMeta('r06');
//   late final GeneratedColumn<int?> r06 = GeneratedColumn<int?>(
//       'R06', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _r07Meta = const VerificationMeta('r07');
//   late final GeneratedColumn<int?> r07 = GeneratedColumn<int?>(
//       'R07', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns =>
//       [id, tipoPagamento, produto, r01, r02, r03, r04, r05, r06, r07];
//   @override
//   String get aliasedName => _alias ?? 'ECF_LOG_TOTAIS';
//   @override
//   String get actualTableName => 'ECF_LOG_TOTAIS';
//   @override
//   VerificationContext validateIntegrity(Insertable<EcfLogTotais> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('TIPO_PAGAMENTO')) {
//       context.handle(
//           _tipoPagamentoMeta,
//           tipoPagamento.isAcceptableOrUnknown(
//               data['TIPO_PAGAMENTO']!, _tipoPagamentoMeta));
//     }
//     if (data.containsKey('PRODUTO')) {
//       context.handle(_produtoMeta,
//           produto.isAcceptableOrUnknown(data['PRODUTO']!, _produtoMeta));
//     }
//     if (data.containsKey('R01')) {
//       context.handle(
//           _r01Meta, r01.isAcceptableOrUnknown(data['R01']!, _r01Meta));
//     }
//     if (data.containsKey('R02')) {
//       context.handle(
//           _r02Meta, r02.isAcceptableOrUnknown(data['R02']!, _r02Meta));
//     }
//     if (data.containsKey('R03')) {
//       context.handle(
//           _r03Meta, r03.isAcceptableOrUnknown(data['R03']!, _r03Meta));
//     }
//     if (data.containsKey('R04')) {
//       context.handle(
//           _r04Meta, r04.isAcceptableOrUnknown(data['R04']!, _r04Meta));
//     }
//     if (data.containsKey('R05')) {
//       context.handle(
//           _r05Meta, r05.isAcceptableOrUnknown(data['R05']!, _r05Meta));
//     }
//     if (data.containsKey('R06')) {
//       context.handle(
//           _r06Meta, r06.isAcceptableOrUnknown(data['R06']!, _r06Meta));
//     }
//     if (data.containsKey('R07')) {
//       context.handle(
//           _r07Meta, r07.isAcceptableOrUnknown(data['R07']!, _r07Meta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   EcfLogTotais map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return EcfLogTotais(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       tipoPagamento: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TIPO_PAGAMENTO']),
//       produto: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}PRODUTO']),
//       r01: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}R01']),
//       r02: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}R02']),
//       r03: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}R03']),
//       r04: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}R04']),
//       r05: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}R05']),
//       r06: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}R06']),
//       r07: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}R07']),
//     );
//   }

//   @override
//   $EcfLogTotaissTable createAlias(String alias) {
//     return $EcfLogTotaissTable(_db, alias);
//   }
// }

// class EcfR01sCompanion extends UpdateCompanion<EcfR01> {
//   final Value<int> id;
//   final Value<String?> serieEcf;
//   final Value<String?> cnpjEmpresa;
//   final Value<String?> cnpjSh;
//   final Value<String?> inscricaoEstadualSh;
//   final Value<String?> inscricaoMunicipalSh;
//   final Value<String?> denominacaoSh;
//   final Value<String?> nomePafEcf;
//   final Value<String?> versaoPafEcf;
//   final Value<String?> md5PafEcf;
//   final Value<DateTime?> dataInicial;
//   final Value<DateTime?> dataFinal;
//   final Value<String?> versaoEr;
//   final Value<String?> numeroLaudoPaf;
//   final Value<String?> razaoSocialSh;
//   final Value<String?> enderecoSh;
//   final Value<String?> numeroSh;
//   final Value<String?> complementoSh;
//   final Value<String?> bairroSh;
//   final Value<String?> cidadeSh;
//   final Value<String?> cepSh;
//   final Value<String?> ufSh;
//   final Value<String?> telefoneSh;
//   final Value<String?> contatoSh;
//   final Value<String?> principalExecutavel;
//   final Value<String?> hashRegistro;
//   const EcfR01sCompanion({
//     this.id = const Value.absent(),
//     this.serieEcf = const Value.absent(),
//     this.cnpjEmpresa = const Value.absent(),
//     this.cnpjSh = const Value.absent(),
//     this.inscricaoEstadualSh = const Value.absent(),
//     this.inscricaoMunicipalSh = const Value.absent(),
//     this.denominacaoSh = const Value.absent(),
//     this.nomePafEcf = const Value.absent(),
//     this.versaoPafEcf = const Value.absent(),
//     this.md5PafEcf = const Value.absent(),
//     this.dataInicial = const Value.absent(),
//     this.dataFinal = const Value.absent(),
//     this.versaoEr = const Value.absent(),
//     this.numeroLaudoPaf = const Value.absent(),
//     this.razaoSocialSh = const Value.absent(),
//     this.enderecoSh = const Value.absent(),
//     this.numeroSh = const Value.absent(),
//     this.complementoSh = const Value.absent(),
//     this.bairroSh = const Value.absent(),
//     this.cidadeSh = const Value.absent(),
//     this.cepSh = const Value.absent(),
//     this.ufSh = const Value.absent(),
//     this.telefoneSh = const Value.absent(),
//     this.contatoSh = const Value.absent(),
//     this.principalExecutavel = const Value.absent(),
//     this.hashRegistro = const Value.absent(),
//   });
//   EcfR01sCompanion.insert({
//     this.id = const Value.absent(),
//     this.serieEcf = const Value.absent(),
//     this.cnpjEmpresa = const Value.absent(),
//     this.cnpjSh = const Value.absent(),
//     this.inscricaoEstadualSh = const Value.absent(),
//     this.inscricaoMunicipalSh = const Value.absent(),
//     this.denominacaoSh = const Value.absent(),
//     this.nomePafEcf = const Value.absent(),
//     this.versaoPafEcf = const Value.absent(),
//     this.md5PafEcf = const Value.absent(),
//     this.dataInicial = const Value.absent(),
//     this.dataFinal = const Value.absent(),
//     this.versaoEr = const Value.absent(),
//     this.numeroLaudoPaf = const Value.absent(),
//     this.razaoSocialSh = const Value.absent(),
//     this.enderecoSh = const Value.absent(),
//     this.numeroSh = const Value.absent(),
//     this.complementoSh = const Value.absent(),
//     this.bairroSh = const Value.absent(),
//     this.cidadeSh = const Value.absent(),
//     this.cepSh = const Value.absent(),
//     this.ufSh = const Value.absent(),
//     this.telefoneSh = const Value.absent(),
//     this.contatoSh = const Value.absent(),
//     this.principalExecutavel = const Value.absent(),
//     this.hashRegistro = const Value.absent(),
//   });
//   static Insertable<EcfR01> custom({
//     Expression<int>? id,
//     Expression<String?>? serieEcf,
//     Expression<String?>? cnpjEmpresa,
//     Expression<String?>? cnpjSh,
//     Expression<String?>? inscricaoEstadualSh,
//     Expression<String?>? inscricaoMunicipalSh,
//     Expression<String?>? denominacaoSh,
//     Expression<String?>? nomePafEcf,
//     Expression<String?>? versaoPafEcf,
//     Expression<String?>? md5PafEcf,
//     Expression<DateTime?>? dataInicial,
//     Expression<DateTime?>? dataFinal,
//     Expression<String?>? versaoEr,
//     Expression<String?>? numeroLaudoPaf,
//     Expression<String?>? razaoSocialSh,
//     Expression<String?>? enderecoSh,
//     Expression<String?>? numeroSh,
//     Expression<String?>? complementoSh,
//     Expression<String?>? bairroSh,
//     Expression<String?>? cidadeSh,
//     Expression<String?>? cepSh,
//     Expression<String?>? ufSh,
//     Expression<String?>? telefoneSh,
//     Expression<String?>? contatoSh,
//     Expression<String?>? principalExecutavel,
//     Expression<String?>? hashRegistro,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (serieEcf != null) 'SERIE_ECF': serieEcf,
//       if (cnpjEmpresa != null) 'CNPJ_EMPRESA': cnpjEmpresa,
//       if (cnpjSh != null) 'CNPJ_SH': cnpjSh,
//       if (inscricaoEstadualSh != null)
//         'INSCRICAO_ESTADUAL_SH': inscricaoEstadualSh,
//       if (inscricaoMunicipalSh != null)
//         'INSCRICAO_MUNICIPAL_SH': inscricaoMunicipalSh,
//       if (denominacaoSh != null) 'DENOMINACAO_SH': denominacaoSh,
//       if (nomePafEcf != null) 'NOME_PAF_ECF': nomePafEcf,
//       if (versaoPafEcf != null) 'VERSAO_PAF_ECF': versaoPafEcf,
//       if (md5PafEcf != null) 'MD5_PAF_ECF': md5PafEcf,
//       if (dataInicial != null) 'DATA_INICIAL': dataInicial,
//       if (dataFinal != null) 'DATA_FINAL': dataFinal,
//       if (versaoEr != null) 'VERSAO_ER': versaoEr,
//       if (numeroLaudoPaf != null) 'NUMERO_LAUDO_PAF': numeroLaudoPaf,
//       if (razaoSocialSh != null) 'RAZAO_SOCIAL_SH': razaoSocialSh,
//       if (enderecoSh != null) 'ENDERECO_SH': enderecoSh,
//       if (numeroSh != null) 'NUMERO_SH': numeroSh,
//       if (complementoSh != null) 'COMPLEMENTO_SH': complementoSh,
//       if (bairroSh != null) 'BAIRRO_SH': bairroSh,
//       if (cidadeSh != null) 'CIDADE_SH': cidadeSh,
//       if (cepSh != null) 'CEP_SH': cepSh,
//       if (ufSh != null) 'UF_SH': ufSh,
//       if (telefoneSh != null) 'TELEFONE_SH': telefoneSh,
//       if (contatoSh != null) 'CONTATO_SH': contatoSh,
//       if (principalExecutavel != null)
//         'PRINCIPAL_EXECUTAVEL': principalExecutavel,
//       if (hashRegistro != null) 'HASH_REGISTRO': hashRegistro,
//     });
//   }

//   EcfR01sCompanion copyWith(
//       {Value<int>? id,
//       Value<String?>? serieEcf,
//       Value<String?>? cnpjEmpresa,
//       Value<String?>? cnpjSh,
//       Value<String?>? inscricaoEstadualSh,
//       Value<String?>? inscricaoMunicipalSh,
//       Value<String?>? denominacaoSh,
//       Value<String?>? nomePafEcf,
//       Value<String?>? versaoPafEcf,
//       Value<String?>? md5PafEcf,
//       Value<DateTime?>? dataInicial,
//       Value<DateTime?>? dataFinal,
//       Value<String?>? versaoEr,
//       Value<String?>? numeroLaudoPaf,
//       Value<String?>? razaoSocialSh,
//       Value<String?>? enderecoSh,
//       Value<String?>? numeroSh,
//       Value<String?>? complementoSh,
//       Value<String?>? bairroSh,
//       Value<String?>? cidadeSh,
//       Value<String?>? cepSh,
//       Value<String?>? ufSh,
//       Value<String?>? telefoneSh,
//       Value<String?>? contatoSh,
//       Value<String?>? principalExecutavel,
//       Value<String?>? hashRegistro}) {
//     return EcfR01sCompanion(
//       id: id ?? this.id,
//       serieEcf: serieEcf ?? this.serieEcf,
//       cnpjEmpresa: cnpjEmpresa ?? this.cnpjEmpresa,
//       cnpjSh: cnpjSh ?? this.cnpjSh,
//       inscricaoEstadualSh: inscricaoEstadualSh ?? this.inscricaoEstadualSh,
//       inscricaoMunicipalSh: inscricaoMunicipalSh ?? this.inscricaoMunicipalSh,
//       denominacaoSh: denominacaoSh ?? this.denominacaoSh,
//       nomePafEcf: nomePafEcf ?? this.nomePafEcf,
//       versaoPafEcf: versaoPafEcf ?? this.versaoPafEcf,
//       md5PafEcf: md5PafEcf ?? this.md5PafEcf,
//       dataInicial: dataInicial ?? this.dataInicial,
//       dataFinal: dataFinal ?? this.dataFinal,
//       versaoEr: versaoEr ?? this.versaoEr,
//       numeroLaudoPaf: numeroLaudoPaf ?? this.numeroLaudoPaf,
//       razaoSocialSh: razaoSocialSh ?? this.razaoSocialSh,
//       enderecoSh: enderecoSh ?? this.enderecoSh,
//       numeroSh: numeroSh ?? this.numeroSh,
//       complementoSh: complementoSh ?? this.complementoSh,
//       bairroSh: bairroSh ?? this.bairroSh,
//       cidadeSh: cidadeSh ?? this.cidadeSh,
//       cepSh: cepSh ?? this.cepSh,
//       ufSh: ufSh ?? this.ufSh,
//       telefoneSh: telefoneSh ?? this.telefoneSh,
//       contatoSh: contatoSh ?? this.contatoSh,
//       principalExecutavel: principalExecutavel ?? this.principalExecutavel,
//       hashRegistro: hashRegistro ?? this.hashRegistro,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (serieEcf.present) {
//       map['SERIE_ECF'] = Variable<String?>(serieEcf.value);
//     }
//     if (cnpjEmpresa.present) {
//       map['CNPJ_EMPRESA'] = Variable<String?>(cnpjEmpresa.value);
//     }
//     if (cnpjSh.present) {
//       map['CNPJ_SH'] = Variable<String?>(cnpjSh.value);
//     }
//     if (inscricaoEstadualSh.present) {
//       map['INSCRICAO_ESTADUAL_SH'] =
//           Variable<String?>(inscricaoEstadualSh.value);
//     }
//     if (inscricaoMunicipalSh.present) {
//       map['INSCRICAO_MUNICIPAL_SH'] =
//           Variable<String?>(inscricaoMunicipalSh.value);
//     }
//     if (denominacaoSh.present) {
//       map['DENOMINACAO_SH'] = Variable<String?>(denominacaoSh.value);
//     }
//     if (nomePafEcf.present) {
//       map['NOME_PAF_ECF'] = Variable<String?>(nomePafEcf.value);
//     }
//     if (versaoPafEcf.present) {
//       map['VERSAO_PAF_ECF'] = Variable<String?>(versaoPafEcf.value);
//     }
//     if (md5PafEcf.present) {
//       map['MD5_PAF_ECF'] = Variable<String?>(md5PafEcf.value);
//     }
//     if (dataInicial.present) {
//       map['DATA_INICIAL'] = Variable<DateTime?>(dataInicial.value);
//     }
//     if (dataFinal.present) {
//       map['DATA_FINAL'] = Variable<DateTime?>(dataFinal.value);
//     }
//     if (versaoEr.present) {
//       map['VERSAO_ER'] = Variable<String?>(versaoEr.value);
//     }
//     if (numeroLaudoPaf.present) {
//       map['NUMERO_LAUDO_PAF'] = Variable<String?>(numeroLaudoPaf.value);
//     }
//     if (razaoSocialSh.present) {
//       map['RAZAO_SOCIAL_SH'] = Variable<String?>(razaoSocialSh.value);
//     }
//     if (enderecoSh.present) {
//       map['ENDERECO_SH'] = Variable<String?>(enderecoSh.value);
//     }
//     if (numeroSh.present) {
//       map['NUMERO_SH'] = Variable<String?>(numeroSh.value);
//     }
//     if (complementoSh.present) {
//       map['COMPLEMENTO_SH'] = Variable<String?>(complementoSh.value);
//     }
//     if (bairroSh.present) {
//       map['BAIRRO_SH'] = Variable<String?>(bairroSh.value);
//     }
//     if (cidadeSh.present) {
//       map['CIDADE_SH'] = Variable<String?>(cidadeSh.value);
//     }
//     if (cepSh.present) {
//       map['CEP_SH'] = Variable<String?>(cepSh.value);
//     }
//     if (ufSh.present) {
//       map['UF_SH'] = Variable<String?>(ufSh.value);
//     }
//     if (telefoneSh.present) {
//       map['TELEFONE_SH'] = Variable<String?>(telefoneSh.value);
//     }
//     if (contatoSh.present) {
//       map['CONTATO_SH'] = Variable<String?>(contatoSh.value);
//     }
//     if (principalExecutavel.present) {
//       map['PRINCIPAL_EXECUTAVEL'] =
//           Variable<String?>(principalExecutavel.value);
//     }
//     if (hashRegistro.present) {
//       map['HASH_REGISTRO'] = Variable<String?>(hashRegistro.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('EcfR01sCompanion(')
//           ..write('id: $id, ')
//           ..write('serieEcf: $serieEcf, ')
//           ..write('cnpjEmpresa: $cnpjEmpresa, ')
//           ..write('cnpjSh: $cnpjSh, ')
//           ..write('inscricaoEstadualSh: $inscricaoEstadualSh, ')
//           ..write('inscricaoMunicipalSh: $inscricaoMunicipalSh, ')
//           ..write('denominacaoSh: $denominacaoSh, ')
//           ..write('nomePafEcf: $nomePafEcf, ')
//           ..write('versaoPafEcf: $versaoPafEcf, ')
//           ..write('md5PafEcf: $md5PafEcf, ')
//           ..write('dataInicial: $dataInicial, ')
//           ..write('dataFinal: $dataFinal, ')
//           ..write('versaoEr: $versaoEr, ')
//           ..write('numeroLaudoPaf: $numeroLaudoPaf, ')
//           ..write('razaoSocialSh: $razaoSocialSh, ')
//           ..write('enderecoSh: $enderecoSh, ')
//           ..write('numeroSh: $numeroSh, ')
//           ..write('complementoSh: $complementoSh, ')
//           ..write('bairroSh: $bairroSh, ')
//           ..write('cidadeSh: $cidadeSh, ')
//           ..write('cepSh: $cepSh, ')
//           ..write('ufSh: $ufSh, ')
//           ..write('telefoneSh: $telefoneSh, ')
//           ..write('contatoSh: $contatoSh, ')
//           ..write('principalExecutavel: $principalExecutavel, ')
//           ..write('hashRegistro: $hashRegistro')
//           ..write(')'))
//         .toString();
//   }
// }

// class $EcfR01sTable extends EcfR01s with TableInfo<$EcfR01sTable, EcfR01> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $EcfR01sTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _serieEcfMeta = const VerificationMeta('serieEcf');
//   late final GeneratedColumn<String?> serieEcf = GeneratedColumn<String?>(
//       'SERIE_ECF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cnpjEmpresaMeta =
//       const VerificationMeta('cnpjEmpresa');
//   late final GeneratedColumn<String?> cnpjEmpresa = GeneratedColumn<String?>(
//       'CNPJ_EMPRESA', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cnpjShMeta = const VerificationMeta('cnpjSh');
//   late final GeneratedColumn<String?> cnpjSh = GeneratedColumn<String?>(
//       'CNPJ_SH', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _inscricaoEstadualShMeta =
//       const VerificationMeta('inscricaoEstadualSh');
//   late final GeneratedColumn<String?> inscricaoEstadualSh =
//       GeneratedColumn<String?>('INSCRICAO_ESTADUAL_SH', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 14),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _inscricaoMunicipalShMeta =
//       const VerificationMeta('inscricaoMunicipalSh');
//   late final GeneratedColumn<String?> inscricaoMunicipalSh =
//       GeneratedColumn<String?>('INSCRICAO_MUNICIPAL_SH', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 14),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _denominacaoShMeta =
//       const VerificationMeta('denominacaoSh');
//   late final GeneratedColumn<String?> denominacaoSh = GeneratedColumn<String?>(
//       'DENOMINACAO_SH', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 40),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _nomePafEcfMeta = const VerificationMeta('nomePafEcf');
//   late final GeneratedColumn<String?> nomePafEcf = GeneratedColumn<String?>(
//       'NOME_PAF_ECF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 40),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _versaoPafEcfMeta =
//       const VerificationMeta('versaoPafEcf');
//   late final GeneratedColumn<String?> versaoPafEcf = GeneratedColumn<String?>(
//       'VERSAO_PAF_ECF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 10),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _md5PafEcfMeta = const VerificationMeta('md5PafEcf');
//   late final GeneratedColumn<String?> md5PafEcf = GeneratedColumn<String?>(
//       'MD5_PAF_ECF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 32),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _dataInicialMeta =
//       const VerificationMeta('dataInicial');
//   late final GeneratedColumn<DateTime?> dataInicial =
//       GeneratedColumn<DateTime?>('DATA_INICIAL', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _dataFinalMeta = const VerificationMeta('dataFinal');
//   late final GeneratedColumn<DateTime?> dataFinal = GeneratedColumn<DateTime?>(
//       'DATA_FINAL', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _versaoErMeta = const VerificationMeta('versaoEr');
//   late final GeneratedColumn<String?> versaoEr = GeneratedColumn<String?>(
//       'VERSAO_ER', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 4),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _numeroLaudoPafMeta =
//       const VerificationMeta('numeroLaudoPaf');
//   late final GeneratedColumn<String?> numeroLaudoPaf = GeneratedColumn<String?>(
//       'NUMERO_LAUDO_PAF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 40),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _razaoSocialShMeta =
//       const VerificationMeta('razaoSocialSh');
//   late final GeneratedColumn<String?> razaoSocialSh = GeneratedColumn<String?>(
//       'RAZAO_SOCIAL_SH', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 40),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _enderecoShMeta = const VerificationMeta('enderecoSh');
//   late final GeneratedColumn<String?> enderecoSh = GeneratedColumn<String?>(
//       'ENDERECO_SH', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 40),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _numeroShMeta = const VerificationMeta('numeroSh');
//   late final GeneratedColumn<String?> numeroSh = GeneratedColumn<String?>(
//       'NUMERO_SH', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 10),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _complementoShMeta =
//       const VerificationMeta('complementoSh');
//   late final GeneratedColumn<String?> complementoSh = GeneratedColumn<String?>(
//       'COMPLEMENTO_SH', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 40),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _bairroShMeta = const VerificationMeta('bairroSh');
//   late final GeneratedColumn<String?> bairroSh = GeneratedColumn<String?>(
//       'BAIRRO_SH', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 40),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cidadeShMeta = const VerificationMeta('cidadeSh');
//   late final GeneratedColumn<String?> cidadeSh = GeneratedColumn<String?>(
//       'CIDADE_SH', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 40),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cepShMeta = const VerificationMeta('cepSh');
//   late final GeneratedColumn<String?> cepSh = GeneratedColumn<String?>(
//       'CEP_SH', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _ufShMeta = const VerificationMeta('ufSh');
//   late final GeneratedColumn<String?> ufSh = GeneratedColumn<String?>(
//       'UF_SH', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _telefoneShMeta = const VerificationMeta('telefoneSh');
//   late final GeneratedColumn<String?> telefoneSh = GeneratedColumn<String?>(
//       'TELEFONE_SH', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 10),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _contatoShMeta = const VerificationMeta('contatoSh');
//   late final GeneratedColumn<String?> contatoSh = GeneratedColumn<String?>(
//       'CONTATO_SH', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _principalExecutavelMeta =
//       const VerificationMeta('principalExecutavel');
//   late final GeneratedColumn<String?> principalExecutavel =
//       GeneratedColumn<String?>('PRINCIPAL_EXECUTAVEL', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 40),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _hashRegistroMeta =
//       const VerificationMeta('hashRegistro');
//   late final GeneratedColumn<String?> hashRegistro = GeneratedColumn<String?>(
//       'HASH_REGISTRO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 32),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         serieEcf,
//         cnpjEmpresa,
//         cnpjSh,
//         inscricaoEstadualSh,
//         inscricaoMunicipalSh,
//         denominacaoSh,
//         nomePafEcf,
//         versaoPafEcf,
//         md5PafEcf,
//         dataInicial,
//         dataFinal,
//         versaoEr,
//         numeroLaudoPaf,
//         razaoSocialSh,
//         enderecoSh,
//         numeroSh,
//         complementoSh,
//         bairroSh,
//         cidadeSh,
//         cepSh,
//         ufSh,
//         telefoneSh,
//         contatoSh,
//         principalExecutavel,
//         hashRegistro
//       ];
//   @override
//   String get aliasedName => _alias ?? 'ECF_R01';
//   @override
//   String get actualTableName => 'ECF_R01';
//   @override
//   VerificationContext validateIntegrity(Insertable<EcfR01> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('SERIE_ECF')) {
//       context.handle(_serieEcfMeta,
//           serieEcf.isAcceptableOrUnknown(data['SERIE_ECF']!, _serieEcfMeta));
//     }
//     if (data.containsKey('CNPJ_EMPRESA')) {
//       context.handle(
//           _cnpjEmpresaMeta,
//           cnpjEmpresa.isAcceptableOrUnknown(
//               data['CNPJ_EMPRESA']!, _cnpjEmpresaMeta));
//     }
//     if (data.containsKey('CNPJ_SH')) {
//       context.handle(_cnpjShMeta,
//           cnpjSh.isAcceptableOrUnknown(data['CNPJ_SH']!, _cnpjShMeta));
//     }
//     if (data.containsKey('INSCRICAO_ESTADUAL_SH')) {
//       context.handle(
//           _inscricaoEstadualShMeta,
//           inscricaoEstadualSh.isAcceptableOrUnknown(
//               data['INSCRICAO_ESTADUAL_SH']!, _inscricaoEstadualShMeta));
//     }
//     if (data.containsKey('INSCRICAO_MUNICIPAL_SH')) {
//       context.handle(
//           _inscricaoMunicipalShMeta,
//           inscricaoMunicipalSh.isAcceptableOrUnknown(
//               data['INSCRICAO_MUNICIPAL_SH']!, _inscricaoMunicipalShMeta));
//     }
//     if (data.containsKey('DENOMINACAO_SH')) {
//       context.handle(
//           _denominacaoShMeta,
//           denominacaoSh.isAcceptableOrUnknown(
//               data['DENOMINACAO_SH']!, _denominacaoShMeta));
//     }
//     if (data.containsKey('NOME_PAF_ECF')) {
//       context.handle(
//           _nomePafEcfMeta,
//           nomePafEcf.isAcceptableOrUnknown(
//               data['NOME_PAF_ECF']!, _nomePafEcfMeta));
//     }
//     if (data.containsKey('VERSAO_PAF_ECF')) {
//       context.handle(
//           _versaoPafEcfMeta,
//           versaoPafEcf.isAcceptableOrUnknown(
//               data['VERSAO_PAF_ECF']!, _versaoPafEcfMeta));
//     }
//     if (data.containsKey('MD5_PAF_ECF')) {
//       context.handle(
//           _md5PafEcfMeta,
//           md5PafEcf.isAcceptableOrUnknown(
//               data['MD5_PAF_ECF']!, _md5PafEcfMeta));
//     }
//     if (data.containsKey('DATA_INICIAL')) {
//       context.handle(
//           _dataInicialMeta,
//           dataInicial.isAcceptableOrUnknown(
//               data['DATA_INICIAL']!, _dataInicialMeta));
//     }
//     if (data.containsKey('DATA_FINAL')) {
//       context.handle(_dataFinalMeta,
//           dataFinal.isAcceptableOrUnknown(data['DATA_FINAL']!, _dataFinalMeta));
//     }
//     if (data.containsKey('VERSAO_ER')) {
//       context.handle(_versaoErMeta,
//           versaoEr.isAcceptableOrUnknown(data['VERSAO_ER']!, _versaoErMeta));
//     }
//     if (data.containsKey('NUMERO_LAUDO_PAF')) {
//       context.handle(
//           _numeroLaudoPafMeta,
//           numeroLaudoPaf.isAcceptableOrUnknown(
//               data['NUMERO_LAUDO_PAF']!, _numeroLaudoPafMeta));
//     }
//     if (data.containsKey('RAZAO_SOCIAL_SH')) {
//       context.handle(
//           _razaoSocialShMeta,
//           razaoSocialSh.isAcceptableOrUnknown(
//               data['RAZAO_SOCIAL_SH']!, _razaoSocialShMeta));
//     }
//     if (data.containsKey('ENDERECO_SH')) {
//       context.handle(
//           _enderecoShMeta,
//           enderecoSh.isAcceptableOrUnknown(
//               data['ENDERECO_SH']!, _enderecoShMeta));
//     }
//     if (data.containsKey('NUMERO_SH')) {
//       context.handle(_numeroShMeta,
//           numeroSh.isAcceptableOrUnknown(data['NUMERO_SH']!, _numeroShMeta));
//     }
//     if (data.containsKey('COMPLEMENTO_SH')) {
//       context.handle(
//           _complementoShMeta,
//           complementoSh.isAcceptableOrUnknown(
//               data['COMPLEMENTO_SH']!, _complementoShMeta));
//     }
//     if (data.containsKey('BAIRRO_SH')) {
//       context.handle(_bairroShMeta,
//           bairroSh.isAcceptableOrUnknown(data['BAIRRO_SH']!, _bairroShMeta));
//     }
//     if (data.containsKey('CIDADE_SH')) {
//       context.handle(_cidadeShMeta,
//           cidadeSh.isAcceptableOrUnknown(data['CIDADE_SH']!, _cidadeShMeta));
//     }
//     if (data.containsKey('CEP_SH')) {
//       context.handle(
//           _cepShMeta, cepSh.isAcceptableOrUnknown(data['CEP_SH']!, _cepShMeta));
//     }
//     if (data.containsKey('UF_SH')) {
//       context.handle(
//           _ufShMeta, ufSh.isAcceptableOrUnknown(data['UF_SH']!, _ufShMeta));
//     }
//     if (data.containsKey('TELEFONE_SH')) {
//       context.handle(
//           _telefoneShMeta,
//           telefoneSh.isAcceptableOrUnknown(
//               data['TELEFONE_SH']!, _telefoneShMeta));
//     }
//     if (data.containsKey('CONTATO_SH')) {
//       context.handle(_contatoShMeta,
//           contatoSh.isAcceptableOrUnknown(data['CONTATO_SH']!, _contatoShMeta));
//     }
//     if (data.containsKey('PRINCIPAL_EXECUTAVEL')) {
//       context.handle(
//           _principalExecutavelMeta,
//           principalExecutavel.isAcceptableOrUnknown(
//               data['PRINCIPAL_EXECUTAVEL']!, _principalExecutavelMeta));
//     }
//     if (data.containsKey('HASH_REGISTRO')) {
//       context.handle(
//           _hashRegistroMeta,
//           hashRegistro.isAcceptableOrUnknown(
//               data['HASH_REGISTRO']!, _hashRegistroMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   EcfR01 map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return EcfR01(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       serieEcf: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}SERIE_ECF']),
//       cnpjEmpresa: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CNPJ_EMPRESA']),
//       cnpjSh: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CNPJ_SH']),
//       inscricaoEstadualSh: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}INSCRICAO_ESTADUAL_SH']),
//       inscricaoMunicipalSh: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}INSCRICAO_MUNICIPAL_SH']),
//       denominacaoSh: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DENOMINACAO_SH']),
//       nomePafEcf: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NOME_PAF_ECF']),
//       versaoPafEcf: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VERSAO_PAF_ECF']),
//       md5PafEcf: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}MD5_PAF_ECF']),
//       dataInicial: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_INICIAL']),
//       dataFinal: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_FINAL']),
//       versaoEr: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VERSAO_ER']),
//       numeroLaudoPaf: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO_LAUDO_PAF']),
//       razaoSocialSh: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}RAZAO_SOCIAL_SH']),
//       enderecoSh: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ENDERECO_SH']),
//       numeroSh: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO_SH']),
//       complementoSh: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}COMPLEMENTO_SH']),
//       bairroSh: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}BAIRRO_SH']),
//       cidadeSh: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CIDADE_SH']),
//       cepSh: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CEP_SH']),
//       ufSh: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}UF_SH']),
//       telefoneSh: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TELEFONE_SH']),
//       contatoSh: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CONTATO_SH']),
//       principalExecutavel: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}PRINCIPAL_EXECUTAVEL']),
//       hashRegistro: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}HASH_REGISTRO']),
//     );
//   }

//   @override
//   $EcfR01sTable createAlias(String alias) {
//     return $EcfR01sTable(_db, alias);
//   }
// }

// class EcfR02sCompanion extends UpdateCompanion<EcfR02> {
//   final Value<int> id;
//   final Value<int?> idPdvOperador;
//   final Value<int?> idEcfImpressora;
//   final Value<int?> idEcfCaixa;
//   final Value<String?> serieEcf;
//   final Value<int?> crz;
//   final Value<int?> coo;
//   final Value<int?> cro;
//   final Value<DateTime?> dataMovimento;
//   final Value<DateTime?> dataEmissao;
//   final Value<String?> horaEmissao;
//   final Value<double?> vendaBruta;
//   final Value<double?> grandeTotal;
//   final Value<String?> hashRegistro;
//   const EcfR02sCompanion({
//     this.id = const Value.absent(),
//     this.idPdvOperador = const Value.absent(),
//     this.idEcfImpressora = const Value.absent(),
//     this.idEcfCaixa = const Value.absent(),
//     this.serieEcf = const Value.absent(),
//     this.crz = const Value.absent(),
//     this.coo = const Value.absent(),
//     this.cro = const Value.absent(),
//     this.dataMovimento = const Value.absent(),
//     this.dataEmissao = const Value.absent(),
//     this.horaEmissao = const Value.absent(),
//     this.vendaBruta = const Value.absent(),
//     this.grandeTotal = const Value.absent(),
//     this.hashRegistro = const Value.absent(),
//   });
//   EcfR02sCompanion.insert({
//     this.id = const Value.absent(),
//     this.idPdvOperador = const Value.absent(),
//     this.idEcfImpressora = const Value.absent(),
//     this.idEcfCaixa = const Value.absent(),
//     this.serieEcf = const Value.absent(),
//     this.crz = const Value.absent(),
//     this.coo = const Value.absent(),
//     this.cro = const Value.absent(),
//     this.dataMovimento = const Value.absent(),
//     this.dataEmissao = const Value.absent(),
//     this.horaEmissao = const Value.absent(),
//     this.vendaBruta = const Value.absent(),
//     this.grandeTotal = const Value.absent(),
//     this.hashRegistro = const Value.absent(),
//   });
//   static Insertable<EcfR02> custom({
//     Expression<int>? id,
//     Expression<int?>? idPdvOperador,
//     Expression<int?>? idEcfImpressora,
//     Expression<int?>? idEcfCaixa,
//     Expression<String?>? serieEcf,
//     Expression<int?>? crz,
//     Expression<int?>? coo,
//     Expression<int?>? cro,
//     Expression<DateTime?>? dataMovimento,
//     Expression<DateTime?>? dataEmissao,
//     Expression<String?>? horaEmissao,
//     Expression<double?>? vendaBruta,
//     Expression<double?>? grandeTotal,
//     Expression<String?>? hashRegistro,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idPdvOperador != null) 'ID_PDV_OPERADOR': idPdvOperador,
//       if (idEcfImpressora != null) 'ID_ECF_IMPRESSORA': idEcfImpressora,
//       if (idEcfCaixa != null) 'ID_ECF_CAIXA': idEcfCaixa,
//       if (serieEcf != null) 'SERIE_ECF': serieEcf,
//       if (crz != null) 'CRZ': crz,
//       if (coo != null) 'COO': coo,
//       if (cro != null) 'CRO': cro,
//       if (dataMovimento != null) 'DATA_MOVIMENTO': dataMovimento,
//       if (dataEmissao != null) 'DATA_EMISSAO': dataEmissao,
//       if (horaEmissao != null) 'HORA_EMISSAO': horaEmissao,
//       if (vendaBruta != null) 'VENDA_BRUTA': vendaBruta,
//       if (grandeTotal != null) 'GRANDE_TOTAL': grandeTotal,
//       if (hashRegistro != null) 'HASH_REGISTRO': hashRegistro,
//     });
//   }

//   EcfR02sCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idPdvOperador,
//       Value<int?>? idEcfImpressora,
//       Value<int?>? idEcfCaixa,
//       Value<String?>? serieEcf,
//       Value<int?>? crz,
//       Value<int?>? coo,
//       Value<int?>? cro,
//       Value<DateTime?>? dataMovimento,
//       Value<DateTime?>? dataEmissao,
//       Value<String?>? horaEmissao,
//       Value<double?>? vendaBruta,
//       Value<double?>? grandeTotal,
//       Value<String?>? hashRegistro}) {
//     return EcfR02sCompanion(
//       id: id ?? this.id,
//       idPdvOperador: idPdvOperador ?? this.idPdvOperador,
//       idEcfImpressora: idEcfImpressora ?? this.idEcfImpressora,
//       idEcfCaixa: idEcfCaixa ?? this.idEcfCaixa,
//       serieEcf: serieEcf ?? this.serieEcf,
//       crz: crz ?? this.crz,
//       coo: coo ?? this.coo,
//       cro: cro ?? this.cro,
//       dataMovimento: dataMovimento ?? this.dataMovimento,
//       dataEmissao: dataEmissao ?? this.dataEmissao,
//       horaEmissao: horaEmissao ?? this.horaEmissao,
//       vendaBruta: vendaBruta ?? this.vendaBruta,
//       grandeTotal: grandeTotal ?? this.grandeTotal,
//       hashRegistro: hashRegistro ?? this.hashRegistro,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idPdvOperador.present) {
//       map['ID_PDV_OPERADOR'] = Variable<int?>(idPdvOperador.value);
//     }
//     if (idEcfImpressora.present) {
//       map['ID_ECF_IMPRESSORA'] = Variable<int?>(idEcfImpressora.value);
//     }
//     if (idEcfCaixa.present) {
//       map['ID_ECF_CAIXA'] = Variable<int?>(idEcfCaixa.value);
//     }
//     if (serieEcf.present) {
//       map['SERIE_ECF'] = Variable<String?>(serieEcf.value);
//     }
//     if (crz.present) {
//       map['CRZ'] = Variable<int?>(crz.value);
//     }
//     if (coo.present) {
//       map['COO'] = Variable<int?>(coo.value);
//     }
//     if (cro.present) {
//       map['CRO'] = Variable<int?>(cro.value);
//     }
//     if (dataMovimento.present) {
//       map['DATA_MOVIMENTO'] = Variable<DateTime?>(dataMovimento.value);
//     }
//     if (dataEmissao.present) {
//       map['DATA_EMISSAO'] = Variable<DateTime?>(dataEmissao.value);
//     }
//     if (horaEmissao.present) {
//       map['HORA_EMISSAO'] = Variable<String?>(horaEmissao.value);
//     }
//     if (vendaBruta.present) {
//       map['VENDA_BRUTA'] = Variable<double?>(vendaBruta.value);
//     }
//     if (grandeTotal.present) {
//       map['GRANDE_TOTAL'] = Variable<double?>(grandeTotal.value);
//     }
//     if (hashRegistro.present) {
//       map['HASH_REGISTRO'] = Variable<String?>(hashRegistro.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('EcfR02sCompanion(')
//           ..write('id: $id, ')
//           ..write('idPdvOperador: $idPdvOperador, ')
//           ..write('idEcfImpressora: $idEcfImpressora, ')
//           ..write('idEcfCaixa: $idEcfCaixa, ')
//           ..write('serieEcf: $serieEcf, ')
//           ..write('crz: $crz, ')
//           ..write('coo: $coo, ')
//           ..write('cro: $cro, ')
//           ..write('dataMovimento: $dataMovimento, ')
//           ..write('dataEmissao: $dataEmissao, ')
//           ..write('horaEmissao: $horaEmissao, ')
//           ..write('vendaBruta: $vendaBruta, ')
//           ..write('grandeTotal: $grandeTotal, ')
//           ..write('hashRegistro: $hashRegistro')
//           ..write(')'))
//         .toString();
//   }
// }

// class $EcfR02sTable extends EcfR02s with TableInfo<$EcfR02sTable, EcfR02> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $EcfR02sTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idPdvOperadorMeta =
//       const VerificationMeta('idPdvOperador');
//   late final GeneratedColumn<int?> idPdvOperador = GeneratedColumn<int?>(
//       'ID_PDV_OPERADOR', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES PDV_OPERADOR(ID)');
//   final VerificationMeta _idEcfImpressoraMeta =
//       const VerificationMeta('idEcfImpressora');
//   late final GeneratedColumn<int?> idEcfImpressora = GeneratedColumn<int?>(
//       'ID_ECF_IMPRESSORA', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES ECF_IMPRESSORA(ID)');
//   final VerificationMeta _idEcfCaixaMeta = const VerificationMeta('idEcfCaixa');
//   late final GeneratedColumn<int?> idEcfCaixa = GeneratedColumn<int?>(
//       'ID_ECF_CAIXA', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES ECF_CAIXA(ID)');
//   final VerificationMeta _serieEcfMeta = const VerificationMeta('serieEcf');
//   late final GeneratedColumn<String?> serieEcf = GeneratedColumn<String?>(
//       'SERIE_ECF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _crzMeta = const VerificationMeta('crz');
//   late final GeneratedColumn<int?> crz = GeneratedColumn<int?>(
//       'CRZ', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _cooMeta = const VerificationMeta('coo');
//   late final GeneratedColumn<int?> coo = GeneratedColumn<int?>(
//       'COO', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _croMeta = const VerificationMeta('cro');
//   late final GeneratedColumn<int?> cro = GeneratedColumn<int?>(
//       'CRO', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _dataMovimentoMeta =
//       const VerificationMeta('dataMovimento');
//   late final GeneratedColumn<DateTime?> dataMovimento =
//       GeneratedColumn<DateTime?>('DATA_MOVIMENTO', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _dataEmissaoMeta =
//       const VerificationMeta('dataEmissao');
//   late final GeneratedColumn<DateTime?> dataEmissao =
//       GeneratedColumn<DateTime?>('DATA_EMISSAO', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _horaEmissaoMeta =
//       const VerificationMeta('horaEmissao');
//   late final GeneratedColumn<String?> horaEmissao = GeneratedColumn<String?>(
//       'HORA_EMISSAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _vendaBrutaMeta = const VerificationMeta('vendaBruta');
//   late final GeneratedColumn<double?> vendaBruta = GeneratedColumn<double?>(
//       'VENDA_BRUTA', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _grandeTotalMeta =
//       const VerificationMeta('grandeTotal');
//   late final GeneratedColumn<double?> grandeTotal = GeneratedColumn<double?>(
//       'GRANDE_TOTAL', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _hashRegistroMeta =
//       const VerificationMeta('hashRegistro');
//   late final GeneratedColumn<String?> hashRegistro = GeneratedColumn<String?>(
//       'HASH_REGISTRO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 32),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idPdvOperador,
//         idEcfImpressora,
//         idEcfCaixa,
//         serieEcf,
//         crz,
//         coo,
//         cro,
//         dataMovimento,
//         dataEmissao,
//         horaEmissao,
//         vendaBruta,
//         grandeTotal,
//         hashRegistro
//       ];
//   @override
//   String get aliasedName => _alias ?? 'ECF_R02';
//   @override
//   String get actualTableName => 'ECF_R02';
//   @override
//   VerificationContext validateIntegrity(Insertable<EcfR02> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_PDV_OPERADOR')) {
//       context.handle(
//           _idPdvOperadorMeta,
//           idPdvOperador.isAcceptableOrUnknown(
//               data['ID_PDV_OPERADOR']!, _idPdvOperadorMeta));
//     }
//     if (data.containsKey('ID_ECF_IMPRESSORA')) {
//       context.handle(
//           _idEcfImpressoraMeta,
//           idEcfImpressora.isAcceptableOrUnknown(
//               data['ID_ECF_IMPRESSORA']!, _idEcfImpressoraMeta));
//     }
//     if (data.containsKey('ID_ECF_CAIXA')) {
//       context.handle(
//           _idEcfCaixaMeta,
//           idEcfCaixa.isAcceptableOrUnknown(
//               data['ID_ECF_CAIXA']!, _idEcfCaixaMeta));
//     }
//     if (data.containsKey('SERIE_ECF')) {
//       context.handle(_serieEcfMeta,
//           serieEcf.isAcceptableOrUnknown(data['SERIE_ECF']!, _serieEcfMeta));
//     }
//     if (data.containsKey('CRZ')) {
//       context.handle(
//           _crzMeta, crz.isAcceptableOrUnknown(data['CRZ']!, _crzMeta));
//     }
//     if (data.containsKey('COO')) {
//       context.handle(
//           _cooMeta, coo.isAcceptableOrUnknown(data['COO']!, _cooMeta));
//     }
//     if (data.containsKey('CRO')) {
//       context.handle(
//           _croMeta, cro.isAcceptableOrUnknown(data['CRO']!, _croMeta));
//     }
//     if (data.containsKey('DATA_MOVIMENTO')) {
//       context.handle(
//           _dataMovimentoMeta,
//           dataMovimento.isAcceptableOrUnknown(
//               data['DATA_MOVIMENTO']!, _dataMovimentoMeta));
//     }
//     if (data.containsKey('DATA_EMISSAO')) {
//       context.handle(
//           _dataEmissaoMeta,
//           dataEmissao.isAcceptableOrUnknown(
//               data['DATA_EMISSAO']!, _dataEmissaoMeta));
//     }
//     if (data.containsKey('HORA_EMISSAO')) {
//       context.handle(
//           _horaEmissaoMeta,
//           horaEmissao.isAcceptableOrUnknown(
//               data['HORA_EMISSAO']!, _horaEmissaoMeta));
//     }
//     if (data.containsKey('VENDA_BRUTA')) {
//       context.handle(
//           _vendaBrutaMeta,
//           vendaBruta.isAcceptableOrUnknown(
//               data['VENDA_BRUTA']!, _vendaBrutaMeta));
//     }
//     if (data.containsKey('GRANDE_TOTAL')) {
//       context.handle(
//           _grandeTotalMeta,
//           grandeTotal.isAcceptableOrUnknown(
//               data['GRANDE_TOTAL']!, _grandeTotalMeta));
//     }
//     if (data.containsKey('HASH_REGISTRO')) {
//       context.handle(
//           _hashRegistroMeta,
//           hashRegistro.isAcceptableOrUnknown(
//               data['HASH_REGISTRO']!, _hashRegistroMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   EcfR02 map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return EcfR02(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idPdvOperador: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_PDV_OPERADOR']),
//       idEcfImpressora: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_ECF_IMPRESSORA']),
//       idEcfCaixa: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_ECF_CAIXA']),
//       serieEcf: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}SERIE_ECF']),
//       crz: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CRZ']),
//       coo: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}COO']),
//       cro: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CRO']),
//       dataMovimento: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_MOVIMENTO']),
//       dataEmissao: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_EMISSAO']),
//       horaEmissao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}HORA_EMISSAO']),
//       vendaBruta: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VENDA_BRUTA']),
//       grandeTotal: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}GRANDE_TOTAL']),
//       hashRegistro: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}HASH_REGISTRO']),
//     );
//   }

//   @override
//   $EcfR02sTable createAlias(String alias) {
//     return $EcfR02sTable(_db, alias);
//   }
// }

// class EcfR03sCompanion extends UpdateCompanion<EcfR03> {
//   final Value<int> id;
//   final Value<int?> idEcfR02;
//   final Value<String?> serieEcf;
//   final Value<String?> totalizadorParcial;
//   final Value<double?> valorAcumulado;
//   final Value<int?> crz;
//   final Value<String?> hashRegistro;
//   const EcfR03sCompanion({
//     this.id = const Value.absent(),
//     this.idEcfR02 = const Value.absent(),
//     this.serieEcf = const Value.absent(),
//     this.totalizadorParcial = const Value.absent(),
//     this.valorAcumulado = const Value.absent(),
//     this.crz = const Value.absent(),
//     this.hashRegistro = const Value.absent(),
//   });
//   EcfR03sCompanion.insert({
//     this.id = const Value.absent(),
//     this.idEcfR02 = const Value.absent(),
//     this.serieEcf = const Value.absent(),
//     this.totalizadorParcial = const Value.absent(),
//     this.valorAcumulado = const Value.absent(),
//     this.crz = const Value.absent(),
//     this.hashRegistro = const Value.absent(),
//   });
//   static Insertable<EcfR03> custom({
//     Expression<int>? id,
//     Expression<int?>? idEcfR02,
//     Expression<String?>? serieEcf,
//     Expression<String?>? totalizadorParcial,
//     Expression<double?>? valorAcumulado,
//     Expression<int?>? crz,
//     Expression<String?>? hashRegistro,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idEcfR02 != null) 'ID_ECF_R02': idEcfR02,
//       if (serieEcf != null) 'SERIE_ECF': serieEcf,
//       if (totalizadorParcial != null) 'TOTALIZADOR_PARCIAL': totalizadorParcial,
//       if (valorAcumulado != null) 'VALOR_ACUMULADO': valorAcumulado,
//       if (crz != null) 'CRZ': crz,
//       if (hashRegistro != null) 'HASH_REGISTRO': hashRegistro,
//     });
//   }

//   EcfR03sCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idEcfR02,
//       Value<String?>? serieEcf,
//       Value<String?>? totalizadorParcial,
//       Value<double?>? valorAcumulado,
//       Value<int?>? crz,
//       Value<String?>? hashRegistro}) {
//     return EcfR03sCompanion(
//       id: id ?? this.id,
//       idEcfR02: idEcfR02 ?? this.idEcfR02,
//       serieEcf: serieEcf ?? this.serieEcf,
//       totalizadorParcial: totalizadorParcial ?? this.totalizadorParcial,
//       valorAcumulado: valorAcumulado ?? this.valorAcumulado,
//       crz: crz ?? this.crz,
//       hashRegistro: hashRegistro ?? this.hashRegistro,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idEcfR02.present) {
//       map['ID_ECF_R02'] = Variable<int?>(idEcfR02.value);
//     }
//     if (serieEcf.present) {
//       map['SERIE_ECF'] = Variable<String?>(serieEcf.value);
//     }
//     if (totalizadorParcial.present) {
//       map['TOTALIZADOR_PARCIAL'] = Variable<String?>(totalizadorParcial.value);
//     }
//     if (valorAcumulado.present) {
//       map['VALOR_ACUMULADO'] = Variable<double?>(valorAcumulado.value);
//     }
//     if (crz.present) {
//       map['CRZ'] = Variable<int?>(crz.value);
//     }
//     if (hashRegistro.present) {
//       map['HASH_REGISTRO'] = Variable<String?>(hashRegistro.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('EcfR03sCompanion(')
//           ..write('id: $id, ')
//           ..write('idEcfR02: $idEcfR02, ')
//           ..write('serieEcf: $serieEcf, ')
//           ..write('totalizadorParcial: $totalizadorParcial, ')
//           ..write('valorAcumulado: $valorAcumulado, ')
//           ..write('crz: $crz, ')
//           ..write('hashRegistro: $hashRegistro')
//           ..write(')'))
//         .toString();
//   }
// }

// class $EcfR03sTable extends EcfR03s with TableInfo<$EcfR03sTable, EcfR03> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $EcfR03sTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idEcfR02Meta = const VerificationMeta('idEcfR02');
//   late final GeneratedColumn<int?> idEcfR02 = GeneratedColumn<int?>(
//       'ID_ECF_R02', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES ECF_R02(ID)');
//   final VerificationMeta _serieEcfMeta = const VerificationMeta('serieEcf');
//   late final GeneratedColumn<String?> serieEcf = GeneratedColumn<String?>(
//       'SERIE_ECF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _totalizadorParcialMeta =
//       const VerificationMeta('totalizadorParcial');
//   late final GeneratedColumn<String?> totalizadorParcial =
//       GeneratedColumn<String?>(
//           'TOTALIZADOR_PARCIAL', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 10),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _valorAcumuladoMeta =
//       const VerificationMeta('valorAcumulado');
//   late final GeneratedColumn<double?> valorAcumulado = GeneratedColumn<double?>(
//       'VALOR_ACUMULADO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _crzMeta = const VerificationMeta('crz');
//   late final GeneratedColumn<int?> crz = GeneratedColumn<int?>(
//       'CRZ', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _hashRegistroMeta =
//       const VerificationMeta('hashRegistro');
//   late final GeneratedColumn<String?> hashRegistro = GeneratedColumn<String?>(
//       'HASH_REGISTRO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 32),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idEcfR02,
//         serieEcf,
//         totalizadorParcial,
//         valorAcumulado,
//         crz,
//         hashRegistro
//       ];
//   @override
//   String get aliasedName => _alias ?? 'ECF_R03';
//   @override
//   String get actualTableName => 'ECF_R03';
//   @override
//   VerificationContext validateIntegrity(Insertable<EcfR03> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_ECF_R02')) {
//       context.handle(_idEcfR02Meta,
//           idEcfR02.isAcceptableOrUnknown(data['ID_ECF_R02']!, _idEcfR02Meta));
//     }
//     if (data.containsKey('SERIE_ECF')) {
//       context.handle(_serieEcfMeta,
//           serieEcf.isAcceptableOrUnknown(data['SERIE_ECF']!, _serieEcfMeta));
//     }
//     if (data.containsKey('TOTALIZADOR_PARCIAL')) {
//       context.handle(
//           _totalizadorParcialMeta,
//           totalizadorParcial.isAcceptableOrUnknown(
//               data['TOTALIZADOR_PARCIAL']!, _totalizadorParcialMeta));
//     }
//     if (data.containsKey('VALOR_ACUMULADO')) {
//       context.handle(
//           _valorAcumuladoMeta,
//           valorAcumulado.isAcceptableOrUnknown(
//               data['VALOR_ACUMULADO']!, _valorAcumuladoMeta));
//     }
//     if (data.containsKey('CRZ')) {
//       context.handle(
//           _crzMeta, crz.isAcceptableOrUnknown(data['CRZ']!, _crzMeta));
//     }
//     if (data.containsKey('HASH_REGISTRO')) {
//       context.handle(
//           _hashRegistroMeta,
//           hashRegistro.isAcceptableOrUnknown(
//               data['HASH_REGISTRO']!, _hashRegistroMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   EcfR03 map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return EcfR03(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idEcfR02: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_ECF_R02']),
//       serieEcf: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}SERIE_ECF']),
//       totalizadorParcial: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}TOTALIZADOR_PARCIAL']),
//       valorAcumulado: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_ACUMULADO']),
//       crz: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CRZ']),
//       hashRegistro: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}HASH_REGISTRO']),
//     );
//   }

//   @override
//   $EcfR03sTable createAlias(String alias) {
//     return $EcfR03sTable(_db, alias);
//   }
// }

// class EcfR06sCompanion extends UpdateCompanion<EcfR06> {
//   final Value<int> id;
//   final Value<int?> idPdvOperador;
//   final Value<int?> idEcfImpressora;
//   final Value<int?> idEcfCaixa;
//   final Value<String?> serieEcf;
//   final Value<int?> coo;
//   final Value<int?> gnf;
//   final Value<int?> grg;
//   final Value<int?> cdc;
//   final Value<String?> denominacao;
//   final Value<DateTime?> dataEmissao;
//   final Value<String?> horaEmissao;
//   final Value<String?> hashRegistro;
//   const EcfR06sCompanion({
//     this.id = const Value.absent(),
//     this.idPdvOperador = const Value.absent(),
//     this.idEcfImpressora = const Value.absent(),
//     this.idEcfCaixa = const Value.absent(),
//     this.serieEcf = const Value.absent(),
//     this.coo = const Value.absent(),
//     this.gnf = const Value.absent(),
//     this.grg = const Value.absent(),
//     this.cdc = const Value.absent(),
//     this.denominacao = const Value.absent(),
//     this.dataEmissao = const Value.absent(),
//     this.horaEmissao = const Value.absent(),
//     this.hashRegistro = const Value.absent(),
//   });
//   EcfR06sCompanion.insert({
//     this.id = const Value.absent(),
//     this.idPdvOperador = const Value.absent(),
//     this.idEcfImpressora = const Value.absent(),
//     this.idEcfCaixa = const Value.absent(),
//     this.serieEcf = const Value.absent(),
//     this.coo = const Value.absent(),
//     this.gnf = const Value.absent(),
//     this.grg = const Value.absent(),
//     this.cdc = const Value.absent(),
//     this.denominacao = const Value.absent(),
//     this.dataEmissao = const Value.absent(),
//     this.horaEmissao = const Value.absent(),
//     this.hashRegistro = const Value.absent(),
//   });
//   static Insertable<EcfR06> custom({
//     Expression<int>? id,
//     Expression<int?>? idPdvOperador,
//     Expression<int?>? idEcfImpressora,
//     Expression<int?>? idEcfCaixa,
//     Expression<String?>? serieEcf,
//     Expression<int?>? coo,
//     Expression<int?>? gnf,
//     Expression<int?>? grg,
//     Expression<int?>? cdc,
//     Expression<String?>? denominacao,
//     Expression<DateTime?>? dataEmissao,
//     Expression<String?>? horaEmissao,
//     Expression<String?>? hashRegistro,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idPdvOperador != null) 'ID_PDV_OPERADOR': idPdvOperador,
//       if (idEcfImpressora != null) 'ID_ECF_IMPRESSORA': idEcfImpressora,
//       if (idEcfCaixa != null) 'ID_ECF_CAIXA': idEcfCaixa,
//       if (serieEcf != null) 'SERIE_ECF': serieEcf,
//       if (coo != null) 'COO': coo,
//       if (gnf != null) 'GNF': gnf,
//       if (grg != null) 'GRG': grg,
//       if (cdc != null) 'CDC': cdc,
//       if (denominacao != null) 'DENOMINACAO': denominacao,
//       if (dataEmissao != null) 'DATA_EMISSAO': dataEmissao,
//       if (horaEmissao != null) 'HORA_EMISSAO': horaEmissao,
//       if (hashRegistro != null) 'HASH_REGISTRO': hashRegistro,
//     });
//   }

//   EcfR06sCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idPdvOperador,
//       Value<int?>? idEcfImpressora,
//       Value<int?>? idEcfCaixa,
//       Value<String?>? serieEcf,
//       Value<int?>? coo,
//       Value<int?>? gnf,
//       Value<int?>? grg,
//       Value<int?>? cdc,
//       Value<String?>? denominacao,
//       Value<DateTime?>? dataEmissao,
//       Value<String?>? horaEmissao,
//       Value<String?>? hashRegistro}) {
//     return EcfR06sCompanion(
//       id: id ?? this.id,
//       idPdvOperador: idPdvOperador ?? this.idPdvOperador,
//       idEcfImpressora: idEcfImpressora ?? this.idEcfImpressora,
//       idEcfCaixa: idEcfCaixa ?? this.idEcfCaixa,
//       serieEcf: serieEcf ?? this.serieEcf,
//       coo: coo ?? this.coo,
//       gnf: gnf ?? this.gnf,
//       grg: grg ?? this.grg,
//       cdc: cdc ?? this.cdc,
//       denominacao: denominacao ?? this.denominacao,
//       dataEmissao: dataEmissao ?? this.dataEmissao,
//       horaEmissao: horaEmissao ?? this.horaEmissao,
//       hashRegistro: hashRegistro ?? this.hashRegistro,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idPdvOperador.present) {
//       map['ID_PDV_OPERADOR'] = Variable<int?>(idPdvOperador.value);
//     }
//     if (idEcfImpressora.present) {
//       map['ID_ECF_IMPRESSORA'] = Variable<int?>(idEcfImpressora.value);
//     }
//     if (idEcfCaixa.present) {
//       map['ID_ECF_CAIXA'] = Variable<int?>(idEcfCaixa.value);
//     }
//     if (serieEcf.present) {
//       map['SERIE_ECF'] = Variable<String?>(serieEcf.value);
//     }
//     if (coo.present) {
//       map['COO'] = Variable<int?>(coo.value);
//     }
//     if (gnf.present) {
//       map['GNF'] = Variable<int?>(gnf.value);
//     }
//     if (grg.present) {
//       map['GRG'] = Variable<int?>(grg.value);
//     }
//     if (cdc.present) {
//       map['CDC'] = Variable<int?>(cdc.value);
//     }
//     if (denominacao.present) {
//       map['DENOMINACAO'] = Variable<String?>(denominacao.value);
//     }
//     if (dataEmissao.present) {
//       map['DATA_EMISSAO'] = Variable<DateTime?>(dataEmissao.value);
//     }
//     if (horaEmissao.present) {
//       map['HORA_EMISSAO'] = Variable<String?>(horaEmissao.value);
//     }
//     if (hashRegistro.present) {
//       map['HASH_REGISTRO'] = Variable<String?>(hashRegistro.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('EcfR06sCompanion(')
//           ..write('id: $id, ')
//           ..write('idPdvOperador: $idPdvOperador, ')
//           ..write('idEcfImpressora: $idEcfImpressora, ')
//           ..write('idEcfCaixa: $idEcfCaixa, ')
//           ..write('serieEcf: $serieEcf, ')
//           ..write('coo: $coo, ')
//           ..write('gnf: $gnf, ')
//           ..write('grg: $grg, ')
//           ..write('cdc: $cdc, ')
//           ..write('denominacao: $denominacao, ')
//           ..write('dataEmissao: $dataEmissao, ')
//           ..write('horaEmissao: $horaEmissao, ')
//           ..write('hashRegistro: $hashRegistro')
//           ..write(')'))
//         .toString();
//   }
// }

// class $EcfR06sTable extends EcfR06s with TableInfo<$EcfR06sTable, EcfR06> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $EcfR06sTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idPdvOperadorMeta =
//       const VerificationMeta('idPdvOperador');
//   late final GeneratedColumn<int?> idPdvOperador = GeneratedColumn<int?>(
//       'ID_PDV_OPERADOR', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES PDV_OPERADOR(ID)');
//   final VerificationMeta _idEcfImpressoraMeta =
//       const VerificationMeta('idEcfImpressora');
//   late final GeneratedColumn<int?> idEcfImpressora = GeneratedColumn<int?>(
//       'ID_ECF_IMPRESSORA', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES ECF_IMPRESSORA(ID)');
//   final VerificationMeta _idEcfCaixaMeta = const VerificationMeta('idEcfCaixa');
//   late final GeneratedColumn<int?> idEcfCaixa = GeneratedColumn<int?>(
//       'ID_ECF_CAIXA', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES ECF_CAIXA(ID)');
//   final VerificationMeta _serieEcfMeta = const VerificationMeta('serieEcf');
//   late final GeneratedColumn<String?> serieEcf = GeneratedColumn<String?>(
//       'SERIE_ECF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cooMeta = const VerificationMeta('coo');
//   late final GeneratedColumn<int?> coo = GeneratedColumn<int?>(
//       'COO', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _gnfMeta = const VerificationMeta('gnf');
//   late final GeneratedColumn<int?> gnf = GeneratedColumn<int?>(
//       'GNF', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _grgMeta = const VerificationMeta('grg');
//   late final GeneratedColumn<int?> grg = GeneratedColumn<int?>(
//       'GRG', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _cdcMeta = const VerificationMeta('cdc');
//   late final GeneratedColumn<int?> cdc = GeneratedColumn<int?>(
//       'CDC', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _denominacaoMeta =
//       const VerificationMeta('denominacao');
//   late final GeneratedColumn<String?> denominacao = GeneratedColumn<String?>(
//       'DENOMINACAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _dataEmissaoMeta =
//       const VerificationMeta('dataEmissao');
//   late final GeneratedColumn<DateTime?> dataEmissao =
//       GeneratedColumn<DateTime?>('DATA_EMISSAO', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _horaEmissaoMeta =
//       const VerificationMeta('horaEmissao');
//   late final GeneratedColumn<String?> horaEmissao = GeneratedColumn<String?>(
//       'HORA_EMISSAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _hashRegistroMeta =
//       const VerificationMeta('hashRegistro');
//   late final GeneratedColumn<String?> hashRegistro = GeneratedColumn<String?>(
//       'HASH_REGISTRO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 32),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idPdvOperador,
//         idEcfImpressora,
//         idEcfCaixa,
//         serieEcf,
//         coo,
//         gnf,
//         grg,
//         cdc,
//         denominacao,
//         dataEmissao,
//         horaEmissao,
//         hashRegistro
//       ];
//   @override
//   String get aliasedName => _alias ?? 'ECF_R06';
//   @override
//   String get actualTableName => 'ECF_R06';
//   @override
//   VerificationContext validateIntegrity(Insertable<EcfR06> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_PDV_OPERADOR')) {
//       context.handle(
//           _idPdvOperadorMeta,
//           idPdvOperador.isAcceptableOrUnknown(
//               data['ID_PDV_OPERADOR']!, _idPdvOperadorMeta));
//     }
//     if (data.containsKey('ID_ECF_IMPRESSORA')) {
//       context.handle(
//           _idEcfImpressoraMeta,
//           idEcfImpressora.isAcceptableOrUnknown(
//               data['ID_ECF_IMPRESSORA']!, _idEcfImpressoraMeta));
//     }
//     if (data.containsKey('ID_ECF_CAIXA')) {
//       context.handle(
//           _idEcfCaixaMeta,
//           idEcfCaixa.isAcceptableOrUnknown(
//               data['ID_ECF_CAIXA']!, _idEcfCaixaMeta));
//     }
//     if (data.containsKey('SERIE_ECF')) {
//       context.handle(_serieEcfMeta,
//           serieEcf.isAcceptableOrUnknown(data['SERIE_ECF']!, _serieEcfMeta));
//     }
//     if (data.containsKey('COO')) {
//       context.handle(
//           _cooMeta, coo.isAcceptableOrUnknown(data['COO']!, _cooMeta));
//     }
//     if (data.containsKey('GNF')) {
//       context.handle(
//           _gnfMeta, gnf.isAcceptableOrUnknown(data['GNF']!, _gnfMeta));
//     }
//     if (data.containsKey('GRG')) {
//       context.handle(
//           _grgMeta, grg.isAcceptableOrUnknown(data['GRG']!, _grgMeta));
//     }
//     if (data.containsKey('CDC')) {
//       context.handle(
//           _cdcMeta, cdc.isAcceptableOrUnknown(data['CDC']!, _cdcMeta));
//     }
//     if (data.containsKey('DENOMINACAO')) {
//       context.handle(
//           _denominacaoMeta,
//           denominacao.isAcceptableOrUnknown(
//               data['DENOMINACAO']!, _denominacaoMeta));
//     }
//     if (data.containsKey('DATA_EMISSAO')) {
//       context.handle(
//           _dataEmissaoMeta,
//           dataEmissao.isAcceptableOrUnknown(
//               data['DATA_EMISSAO']!, _dataEmissaoMeta));
//     }
//     if (data.containsKey('HORA_EMISSAO')) {
//       context.handle(
//           _horaEmissaoMeta,
//           horaEmissao.isAcceptableOrUnknown(
//               data['HORA_EMISSAO']!, _horaEmissaoMeta));
//     }
//     if (data.containsKey('HASH_REGISTRO')) {
//       context.handle(
//           _hashRegistroMeta,
//           hashRegistro.isAcceptableOrUnknown(
//               data['HASH_REGISTRO']!, _hashRegistroMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   EcfR06 map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return EcfR06(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idPdvOperador: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_PDV_OPERADOR']),
//       idEcfImpressora: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_ECF_IMPRESSORA']),
//       idEcfCaixa: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_ECF_CAIXA']),
//       serieEcf: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}SERIE_ECF']),
//       coo: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}COO']),
//       gnf: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}GNF']),
//       grg: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}GRG']),
//       cdc: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CDC']),
//       denominacao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DENOMINACAO']),
//       dataEmissao: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_EMISSAO']),
//       horaEmissao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}HORA_EMISSAO']),
//       hashRegistro: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}HASH_REGISTRO']),
//     );
//   }

//   @override
//   $EcfR06sTable createAlias(String alias) {
//     return $EcfR06sTable(_db, alias);
//   }
// }

// class EcfR07sCompanion extends UpdateCompanion<EcfR07> {
//   final Value<int> id;
//   final Value<int?> idEcfR06;
//   final Value<int?> ccf;
//   final Value<String?> meioPagamento;
//   final Value<double?> valorPagamento;
//   final Value<String?> estorno;
//   final Value<double?> valorEstorno;
//   final Value<String?> hashRegistro;
//   const EcfR07sCompanion({
//     this.id = const Value.absent(),
//     this.idEcfR06 = const Value.absent(),
//     this.ccf = const Value.absent(),
//     this.meioPagamento = const Value.absent(),
//     this.valorPagamento = const Value.absent(),
//     this.estorno = const Value.absent(),
//     this.valorEstorno = const Value.absent(),
//     this.hashRegistro = const Value.absent(),
//   });
//   EcfR07sCompanion.insert({
//     this.id = const Value.absent(),
//     this.idEcfR06 = const Value.absent(),
//     this.ccf = const Value.absent(),
//     this.meioPagamento = const Value.absent(),
//     this.valorPagamento = const Value.absent(),
//     this.estorno = const Value.absent(),
//     this.valorEstorno = const Value.absent(),
//     this.hashRegistro = const Value.absent(),
//   });
//   static Insertable<EcfR07> custom({
//     Expression<int>? id,
//     Expression<int?>? idEcfR06,
//     Expression<int?>? ccf,
//     Expression<String?>? meioPagamento,
//     Expression<double?>? valorPagamento,
//     Expression<String?>? estorno,
//     Expression<double?>? valorEstorno,
//     Expression<String?>? hashRegistro,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idEcfR06 != null) 'ID_ECF_R06': idEcfR06,
//       if (ccf != null) 'CCF': ccf,
//       if (meioPagamento != null) 'MEIO_PAGAMENTO': meioPagamento,
//       if (valorPagamento != null) 'VALOR_PAGAMENTO': valorPagamento,
//       if (estorno != null) 'ESTORNO': estorno,
//       if (valorEstorno != null) 'VALOR_ESTORNO': valorEstorno,
//       if (hashRegistro != null) 'HASH_REGISTRO': hashRegistro,
//     });
//   }

//   EcfR07sCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idEcfR06,
//       Value<int?>? ccf,
//       Value<String?>? meioPagamento,
//       Value<double?>? valorPagamento,
//       Value<String?>? estorno,
//       Value<double?>? valorEstorno,
//       Value<String?>? hashRegistro}) {
//     return EcfR07sCompanion(
//       id: id ?? this.id,
//       idEcfR06: idEcfR06 ?? this.idEcfR06,
//       ccf: ccf ?? this.ccf,
//       meioPagamento: meioPagamento ?? this.meioPagamento,
//       valorPagamento: valorPagamento ?? this.valorPagamento,
//       estorno: estorno ?? this.estorno,
//       valorEstorno: valorEstorno ?? this.valorEstorno,
//       hashRegistro: hashRegistro ?? this.hashRegistro,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idEcfR06.present) {
//       map['ID_ECF_R06'] = Variable<int?>(idEcfR06.value);
//     }
//     if (ccf.present) {
//       map['CCF'] = Variable<int?>(ccf.value);
//     }
//     if (meioPagamento.present) {
//       map['MEIO_PAGAMENTO'] = Variable<String?>(meioPagamento.value);
//     }
//     if (valorPagamento.present) {
//       map['VALOR_PAGAMENTO'] = Variable<double?>(valorPagamento.value);
//     }
//     if (estorno.present) {
//       map['ESTORNO'] = Variable<String?>(estorno.value);
//     }
//     if (valorEstorno.present) {
//       map['VALOR_ESTORNO'] = Variable<double?>(valorEstorno.value);
//     }
//     if (hashRegistro.present) {
//       map['HASH_REGISTRO'] = Variable<String?>(hashRegistro.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('EcfR07sCompanion(')
//           ..write('id: $id, ')
//           ..write('idEcfR06: $idEcfR06, ')
//           ..write('ccf: $ccf, ')
//           ..write('meioPagamento: $meioPagamento, ')
//           ..write('valorPagamento: $valorPagamento, ')
//           ..write('estorno: $estorno, ')
//           ..write('valorEstorno: $valorEstorno, ')
//           ..write('hashRegistro: $hashRegistro')
//           ..write(')'))
//         .toString();
//   }
// }

// class $EcfR07sTable extends EcfR07s with TableInfo<$EcfR07sTable, EcfR07> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $EcfR07sTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idEcfR06Meta = const VerificationMeta('idEcfR06');
//   late final GeneratedColumn<int?> idEcfR06 = GeneratedColumn<int?>(
//       'ID_ECF_R06', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES ECF_R06(ID)');
//   final VerificationMeta _ccfMeta = const VerificationMeta('ccf');
//   late final GeneratedColumn<int?> ccf = GeneratedColumn<int?>(
//       'CCF', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _meioPagamentoMeta =
//       const VerificationMeta('meioPagamento');
//   late final GeneratedColumn<String?> meioPagamento = GeneratedColumn<String?>(
//       'MEIO_PAGAMENTO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _valorPagamentoMeta =
//       const VerificationMeta('valorPagamento');
//   late final GeneratedColumn<double?> valorPagamento = GeneratedColumn<double?>(
//       'VALOR_PAGAMENTO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _estornoMeta = const VerificationMeta('estorno');
//   late final GeneratedColumn<String?> estorno = GeneratedColumn<String?>(
//       'ESTORNO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _valorEstornoMeta =
//       const VerificationMeta('valorEstorno');
//   late final GeneratedColumn<double?> valorEstorno = GeneratedColumn<double?>(
//       'VALOR_ESTORNO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _hashRegistroMeta =
//       const VerificationMeta('hashRegistro');
//   late final GeneratedColumn<String?> hashRegistro = GeneratedColumn<String?>(
//       'HASH_REGISTRO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 32),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idEcfR06,
//         ccf,
//         meioPagamento,
//         valorPagamento,
//         estorno,
//         valorEstorno,
//         hashRegistro
//       ];
//   @override
//   String get aliasedName => _alias ?? 'ECF_R07';
//   @override
//   String get actualTableName => 'ECF_R07';
//   @override
//   VerificationContext validateIntegrity(Insertable<EcfR07> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_ECF_R06')) {
//       context.handle(_idEcfR06Meta,
//           idEcfR06.isAcceptableOrUnknown(data['ID_ECF_R06']!, _idEcfR06Meta));
//     }
//     if (data.containsKey('CCF')) {
//       context.handle(
//           _ccfMeta, ccf.isAcceptableOrUnknown(data['CCF']!, _ccfMeta));
//     }
//     if (data.containsKey('MEIO_PAGAMENTO')) {
//       context.handle(
//           _meioPagamentoMeta,
//           meioPagamento.isAcceptableOrUnknown(
//               data['MEIO_PAGAMENTO']!, _meioPagamentoMeta));
//     }
//     if (data.containsKey('VALOR_PAGAMENTO')) {
//       context.handle(
//           _valorPagamentoMeta,
//           valorPagamento.isAcceptableOrUnknown(
//               data['VALOR_PAGAMENTO']!, _valorPagamentoMeta));
//     }
//     if (data.containsKey('ESTORNO')) {
//       context.handle(_estornoMeta,
//           estorno.isAcceptableOrUnknown(data['ESTORNO']!, _estornoMeta));
//     }
//     if (data.containsKey('VALOR_ESTORNO')) {
//       context.handle(
//           _valorEstornoMeta,
//           valorEstorno.isAcceptableOrUnknown(
//               data['VALOR_ESTORNO']!, _valorEstornoMeta));
//     }
//     if (data.containsKey('HASH_REGISTRO')) {
//       context.handle(
//           _hashRegistroMeta,
//           hashRegistro.isAcceptableOrUnknown(
//               data['HASH_REGISTRO']!, _hashRegistroMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   EcfR07 map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return EcfR07(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idEcfR06: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_ECF_R06']),
//       ccf: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CCF']),
//       meioPagamento: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}MEIO_PAGAMENTO']),
//       valorPagamento: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_PAGAMENTO']),
//       estorno: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ESTORNO']),
//       valorEstorno: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_ESTORNO']),
//       hashRegistro: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}HASH_REGISTRO']),
//     );
//   }

//   @override
//   $EcfR07sTable createAlias(String alias) {
//     return $EcfR07sTable(_db, alias);
//   }
// }

// class EcfRecebimentoNaoFiscalsCompanion
//     extends UpdateCompanion<EcfRecebimentoNaoFiscal> {
//   final Value<int> id;
//   final Value<int?> idPdvMovimento;
//   final Value<DateTime?> dataRecebimento;
//   final Value<String?> descricao;
//   final Value<double?> valor;
//   const EcfRecebimentoNaoFiscalsCompanion({
//     this.id = const Value.absent(),
//     this.idPdvMovimento = const Value.absent(),
//     this.dataRecebimento = const Value.absent(),
//     this.descricao = const Value.absent(),
//     this.valor = const Value.absent(),
//   });
//   EcfRecebimentoNaoFiscalsCompanion.insert({
//     this.id = const Value.absent(),
//     this.idPdvMovimento = const Value.absent(),
//     this.dataRecebimento = const Value.absent(),
//     this.descricao = const Value.absent(),
//     this.valor = const Value.absent(),
//   });
//   static Insertable<EcfRecebimentoNaoFiscal> custom({
//     Expression<int>? id,
//     Expression<int?>? idPdvMovimento,
//     Expression<DateTime?>? dataRecebimento,
//     Expression<String?>? descricao,
//     Expression<double?>? valor,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idPdvMovimento != null) 'ID_PDV_MOVIMENTO': idPdvMovimento,
//       if (dataRecebimento != null) 'DATA_RECEBIMENTO': dataRecebimento,
//       if (descricao != null) 'DESCRICAO': descricao,
//       if (valor != null) 'VALOR': valor,
//     });
//   }

//   EcfRecebimentoNaoFiscalsCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idPdvMovimento,
//       Value<DateTime?>? dataRecebimento,
//       Value<String?>? descricao,
//       Value<double?>? valor}) {
//     return EcfRecebimentoNaoFiscalsCompanion(
//       id: id ?? this.id,
//       idPdvMovimento: idPdvMovimento ?? this.idPdvMovimento,
//       dataRecebimento: dataRecebimento ?? this.dataRecebimento,
//       descricao: descricao ?? this.descricao,
//       valor: valor ?? this.valor,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idPdvMovimento.present) {
//       map['ID_PDV_MOVIMENTO'] = Variable<int?>(idPdvMovimento.value);
//     }
//     if (dataRecebimento.present) {
//       map['DATA_RECEBIMENTO'] = Variable<DateTime?>(dataRecebimento.value);
//     }
//     if (descricao.present) {
//       map['DESCRICAO'] = Variable<String?>(descricao.value);
//     }
//     if (valor.present) {
//       map['VALOR'] = Variable<double?>(valor.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('EcfRecebimentoNaoFiscalsCompanion(')
//           ..write('id: $id, ')
//           ..write('idPdvMovimento: $idPdvMovimento, ')
//           ..write('dataRecebimento: $dataRecebimento, ')
//           ..write('descricao: $descricao, ')
//           ..write('valor: $valor')
//           ..write(')'))
//         .toString();
//   }
// }

// class $EcfRecebimentoNaoFiscalsTable extends EcfRecebimentoNaoFiscals
//     with TableInfo<$EcfRecebimentoNaoFiscalsTable, EcfRecebimentoNaoFiscal> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $EcfRecebimentoNaoFiscalsTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idPdvMovimentoMeta =
//       const VerificationMeta('idPdvMovimento');
//   late final GeneratedColumn<int?> idPdvMovimento = GeneratedColumn<int?>(
//       'ID_PDV_MOVIMENTO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES PDV_MOVIMENTO(ID)');
//   final VerificationMeta _dataRecebimentoMeta =
//       const VerificationMeta('dataRecebimento');
//   late final GeneratedColumn<DateTime?> dataRecebimento =
//       GeneratedColumn<DateTime?>('DATA_RECEBIMENTO', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _descricaoMeta = const VerificationMeta('descricao');
//   late final GeneratedColumn<String?> descricao = GeneratedColumn<String?>(
//       'DESCRICAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 50),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _valorMeta = const VerificationMeta('valor');
//   late final GeneratedColumn<double?> valor = GeneratedColumn<double?>(
//       'VALOR', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns =>
//       [id, idPdvMovimento, dataRecebimento, descricao, valor];
//   @override
//   String get aliasedName => _alias ?? 'ECF_RECEBIMENTO_NAO_FISCAL';
//   @override
//   String get actualTableName => 'ECF_RECEBIMENTO_NAO_FISCAL';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<EcfRecebimentoNaoFiscal> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_PDV_MOVIMENTO')) {
//       context.handle(
//           _idPdvMovimentoMeta,
//           idPdvMovimento.isAcceptableOrUnknown(
//               data['ID_PDV_MOVIMENTO']!, _idPdvMovimentoMeta));
//     }
//     if (data.containsKey('DATA_RECEBIMENTO')) {
//       context.handle(
//           _dataRecebimentoMeta,
//           dataRecebimento.isAcceptableOrUnknown(
//               data['DATA_RECEBIMENTO']!, _dataRecebimentoMeta));
//     }
//     if (data.containsKey('DESCRICAO')) {
//       context.handle(_descricaoMeta,
//           descricao.isAcceptableOrUnknown(data['DESCRICAO']!, _descricaoMeta));
//     }
//     if (data.containsKey('VALOR')) {
//       context.handle(
//           _valorMeta, valor.isAcceptableOrUnknown(data['VALOR']!, _valorMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   EcfRecebimentoNaoFiscal map(Map<String, dynamic> data,
//       {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return EcfRecebimentoNaoFiscal(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idPdvMovimento: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_PDV_MOVIMENTO']),
//       dataRecebimento: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_RECEBIMENTO']),
//       descricao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DESCRICAO']),
//       valor: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR']),
//     );
//   }

//   @override
//   $EcfRecebimentoNaoFiscalsTable createAlias(String alias) {
//     return $EcfRecebimentoNaoFiscalsTable(_db, alias);
//   }
// }

// class EcfRelatorioGerencialsCompanion
//     extends UpdateCompanion<EcfRelatorioGerencial> {
//   final Value<int> id;
//   final Value<int?> idPdvConfiguracao;
//   final Value<int?> x;
//   final Value<int?> meiosPagamento;
//   final Value<int?> davEmitidos;
//   final Value<int?> identificacaoPaf;
//   final Value<int?> parametrosConfiguracao;
//   final Value<int?> outros;
//   const EcfRelatorioGerencialsCompanion({
//     this.id = const Value.absent(),
//     this.idPdvConfiguracao = const Value.absent(),
//     this.x = const Value.absent(),
//     this.meiosPagamento = const Value.absent(),
//     this.davEmitidos = const Value.absent(),
//     this.identificacaoPaf = const Value.absent(),
//     this.parametrosConfiguracao = const Value.absent(),
//     this.outros = const Value.absent(),
//   });
//   EcfRelatorioGerencialsCompanion.insert({
//     this.id = const Value.absent(),
//     this.idPdvConfiguracao = const Value.absent(),
//     this.x = const Value.absent(),
//     this.meiosPagamento = const Value.absent(),
//     this.davEmitidos = const Value.absent(),
//     this.identificacaoPaf = const Value.absent(),
//     this.parametrosConfiguracao = const Value.absent(),
//     this.outros = const Value.absent(),
//   });
//   static Insertable<EcfRelatorioGerencial> custom({
//     Expression<int>? id,
//     Expression<int?>? idPdvConfiguracao,
//     Expression<int?>? x,
//     Expression<int?>? meiosPagamento,
//     Expression<int?>? davEmitidos,
//     Expression<int?>? identificacaoPaf,
//     Expression<int?>? parametrosConfiguracao,
//     Expression<int?>? outros,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idPdvConfiguracao != null) 'ID_PDV_CONFIGURACAO': idPdvConfiguracao,
//       if (x != null) 'X': x,
//       if (meiosPagamento != null) 'MEIOS_PAGAMENTO': meiosPagamento,
//       if (davEmitidos != null) 'DAV_EMITIDOS': davEmitidos,
//       if (identificacaoPaf != null) 'IDENTIFICACAO_PAF': identificacaoPaf,
//       if (parametrosConfiguracao != null)
//         'PARAMETROS_CONFIGURACAO': parametrosConfiguracao,
//       if (outros != null) 'OUTROS': outros,
//     });
//   }

//   EcfRelatorioGerencialsCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idPdvConfiguracao,
//       Value<int?>? x,
//       Value<int?>? meiosPagamento,
//       Value<int?>? davEmitidos,
//       Value<int?>? identificacaoPaf,
//       Value<int?>? parametrosConfiguracao,
//       Value<int?>? outros}) {
//     return EcfRelatorioGerencialsCompanion(
//       id: id ?? this.id,
//       idPdvConfiguracao: idPdvConfiguracao ?? this.idPdvConfiguracao,
//       x: x ?? this.x,
//       meiosPagamento: meiosPagamento ?? this.meiosPagamento,
//       davEmitidos: davEmitidos ?? this.davEmitidos,
//       identificacaoPaf: identificacaoPaf ?? this.identificacaoPaf,
//       parametrosConfiguracao:
//           parametrosConfiguracao ?? this.parametrosConfiguracao,
//       outros: outros ?? this.outros,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idPdvConfiguracao.present) {
//       map['ID_PDV_CONFIGURACAO'] = Variable<int?>(idPdvConfiguracao.value);
//     }
//     if (x.present) {
//       map['X'] = Variable<int?>(x.value);
//     }
//     if (meiosPagamento.present) {
//       map['MEIOS_PAGAMENTO'] = Variable<int?>(meiosPagamento.value);
//     }
//     if (davEmitidos.present) {
//       map['DAV_EMITIDOS'] = Variable<int?>(davEmitidos.value);
//     }
//     if (identificacaoPaf.present) {
//       map['IDENTIFICACAO_PAF'] = Variable<int?>(identificacaoPaf.value);
//     }
//     if (parametrosConfiguracao.present) {
//       map['PARAMETROS_CONFIGURACAO'] =
//           Variable<int?>(parametrosConfiguracao.value);
//     }
//     if (outros.present) {
//       map['OUTROS'] = Variable<int?>(outros.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('EcfRelatorioGerencialsCompanion(')
//           ..write('id: $id, ')
//           ..write('idPdvConfiguracao: $idPdvConfiguracao, ')
//           ..write('x: $x, ')
//           ..write('meiosPagamento: $meiosPagamento, ')
//           ..write('davEmitidos: $davEmitidos, ')
//           ..write('identificacaoPaf: $identificacaoPaf, ')
//           ..write('parametrosConfiguracao: $parametrosConfiguracao, ')
//           ..write('outros: $outros')
//           ..write(')'))
//         .toString();
//   }
// }

// class $EcfRelatorioGerencialsTable extends EcfRelatorioGerencials
//     with TableInfo<$EcfRelatorioGerencialsTable, EcfRelatorioGerencial> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $EcfRelatorioGerencialsTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idPdvConfiguracaoMeta =
//       const VerificationMeta('idPdvConfiguracao');
//   late final GeneratedColumn<int?> idPdvConfiguracao = GeneratedColumn<int?>(
//       'ID_PDV_CONFIGURACAO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES PDV_CONFIGURACAO(ID)');
//   final VerificationMeta _xMeta = const VerificationMeta('x');
//   late final GeneratedColumn<int?> x = GeneratedColumn<int?>(
//       'X', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _meiosPagamentoMeta =
//       const VerificationMeta('meiosPagamento');
//   late final GeneratedColumn<int?> meiosPagamento = GeneratedColumn<int?>(
//       'MEIOS_PAGAMENTO', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _davEmitidosMeta =
//       const VerificationMeta('davEmitidos');
//   late final GeneratedColumn<int?> davEmitidos = GeneratedColumn<int?>(
//       'DAV_EMITIDOS', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _identificacaoPafMeta =
//       const VerificationMeta('identificacaoPaf');
//   late final GeneratedColumn<int?> identificacaoPaf = GeneratedColumn<int?>(
//       'IDENTIFICACAO_PAF', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _parametrosConfiguracaoMeta =
//       const VerificationMeta('parametrosConfiguracao');
//   late final GeneratedColumn<int?> parametrosConfiguracao =
//       GeneratedColumn<int?>('PARAMETROS_CONFIGURACAO', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _outrosMeta = const VerificationMeta('outros');
//   late final GeneratedColumn<int?> outros = GeneratedColumn<int?>(
//       'OUTROS', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idPdvConfiguracao,
//         x,
//         meiosPagamento,
//         davEmitidos,
//         identificacaoPaf,
//         parametrosConfiguracao,
//         outros
//       ];
//   @override
//   String get aliasedName => _alias ?? 'ECF_RELATORIO_GERENCIAL';
//   @override
//   String get actualTableName => 'ECF_RELATORIO_GERENCIAL';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<EcfRelatorioGerencial> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_PDV_CONFIGURACAO')) {
//       context.handle(
//           _idPdvConfiguracaoMeta,
//           idPdvConfiguracao.isAcceptableOrUnknown(
//               data['ID_PDV_CONFIGURACAO']!, _idPdvConfiguracaoMeta));
//     }
//     if (data.containsKey('X')) {
//       context.handle(_xMeta, x.isAcceptableOrUnknown(data['X']!, _xMeta));
//     }
//     if (data.containsKey('MEIOS_PAGAMENTO')) {
//       context.handle(
//           _meiosPagamentoMeta,
//           meiosPagamento.isAcceptableOrUnknown(
//               data['MEIOS_PAGAMENTO']!, _meiosPagamentoMeta));
//     }
//     if (data.containsKey('DAV_EMITIDOS')) {
//       context.handle(
//           _davEmitidosMeta,
//           davEmitidos.isAcceptableOrUnknown(
//               data['DAV_EMITIDOS']!, _davEmitidosMeta));
//     }
//     if (data.containsKey('IDENTIFICACAO_PAF')) {
//       context.handle(
//           _identificacaoPafMeta,
//           identificacaoPaf.isAcceptableOrUnknown(
//               data['IDENTIFICACAO_PAF']!, _identificacaoPafMeta));
//     }
//     if (data.containsKey('PARAMETROS_CONFIGURACAO')) {
//       context.handle(
//           _parametrosConfiguracaoMeta,
//           parametrosConfiguracao.isAcceptableOrUnknown(
//               data['PARAMETROS_CONFIGURACAO']!, _parametrosConfiguracaoMeta));
//     }
//     if (data.containsKey('OUTROS')) {
//       context.handle(_outrosMeta,
//           outros.isAcceptableOrUnknown(data['OUTROS']!, _outrosMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   EcfRelatorioGerencial map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return EcfRelatorioGerencial(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idPdvConfiguracao: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ID_PDV_CONFIGURACAO']),
//       x: const IntType().mapFromDatabaseResponse(data['${effectivePrefix}X']),
//       meiosPagamento: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}MEIOS_PAGAMENTO']),
//       davEmitidos: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DAV_EMITIDOS']),
//       identificacaoPaf: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}IDENTIFICACAO_PAF']),
//       parametrosConfiguracao: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}PARAMETROS_CONFIGURACAO']),
//       outros: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}OUTROS']),
//     );
//   }

//   @override
//   $EcfRelatorioGerencialsTable createAlias(String alias) {
//     return $EcfRelatorioGerencialsTable(_db, alias);
//   }
// }

// class EcfSintegra60AsCompanion extends UpdateCompanion<EcfSintegra60A> {
//   final Value<int> id;
//   final Value<int?> idEcfSintegra60M;
//   final Value<String?> situacaoTributaria;
//   final Value<double?> valor;
//   const EcfSintegra60AsCompanion({
//     this.id = const Value.absent(),
//     this.idEcfSintegra60M = const Value.absent(),
//     this.situacaoTributaria = const Value.absent(),
//     this.valor = const Value.absent(),
//   });
//   EcfSintegra60AsCompanion.insert({
//     this.id = const Value.absent(),
//     this.idEcfSintegra60M = const Value.absent(),
//     this.situacaoTributaria = const Value.absent(),
//     this.valor = const Value.absent(),
//   });
//   static Insertable<EcfSintegra60A> custom({
//     Expression<int>? id,
//     Expression<int?>? idEcfSintegra60M,
//     Expression<String?>? situacaoTributaria,
//     Expression<double?>? valor,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idEcfSintegra60M != null) 'ID_ECF_SINTEGRA_60M': idEcfSintegra60M,
//       if (situacaoTributaria != null) 'SITUACAO_TRIBUTARIA': situacaoTributaria,
//       if (valor != null) 'VALOR': valor,
//     });
//   }

//   EcfSintegra60AsCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idEcfSintegra60M,
//       Value<String?>? situacaoTributaria,
//       Value<double?>? valor}) {
//     return EcfSintegra60AsCompanion(
//       id: id ?? this.id,
//       idEcfSintegra60M: idEcfSintegra60M ?? this.idEcfSintegra60M,
//       situacaoTributaria: situacaoTributaria ?? this.situacaoTributaria,
//       valor: valor ?? this.valor,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idEcfSintegra60M.present) {
//       map['ID_ECF_SINTEGRA_60M'] = Variable<int?>(idEcfSintegra60M.value);
//     }
//     if (situacaoTributaria.present) {
//       map['SITUACAO_TRIBUTARIA'] = Variable<String?>(situacaoTributaria.value);
//     }
//     if (valor.present) {
//       map['VALOR'] = Variable<double?>(valor.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('EcfSintegra60AsCompanion(')
//           ..write('id: $id, ')
//           ..write('idEcfSintegra60M: $idEcfSintegra60M, ')
//           ..write('situacaoTributaria: $situacaoTributaria, ')
//           ..write('valor: $valor')
//           ..write(')'))
//         .toString();
//   }
// }

// class $EcfSintegra60AsTable extends EcfSintegra60As
//     with TableInfo<$EcfSintegra60AsTable, EcfSintegra60A> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $EcfSintegra60AsTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idEcfSintegra60MMeta =
//       const VerificationMeta('idEcfSintegra60M');
//   late final GeneratedColumn<int?> idEcfSintegra60M = GeneratedColumn<int?>(
//       'ID_ECF_SINTEGRA_60M', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES ECF_SINTEGRA_60M(ID)');
//   final VerificationMeta _situacaoTributariaMeta =
//       const VerificationMeta('situacaoTributaria');
//   late final GeneratedColumn<String?> situacaoTributaria =
//       GeneratedColumn<String?>(
//           'SITUACAO_TRIBUTARIA', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 4),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _valorMeta = const VerificationMeta('valor');
//   late final GeneratedColumn<double?> valor = GeneratedColumn<double?>(
//       'VALOR', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns =>
//       [id, idEcfSintegra60M, situacaoTributaria, valor];
//   @override
//   String get aliasedName => _alias ?? 'ECF_SINTEGRA_60A';
//   @override
//   String get actualTableName => 'ECF_SINTEGRA_60A';
//   @override
//   VerificationContext validateIntegrity(Insertable<EcfSintegra60A> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_ECF_SINTEGRA_60M')) {
//       context.handle(
//           _idEcfSintegra60MMeta,
//           idEcfSintegra60M.isAcceptableOrUnknown(
//               data['ID_ECF_SINTEGRA_60M']!, _idEcfSintegra60MMeta));
//     }
//     if (data.containsKey('SITUACAO_TRIBUTARIA')) {
//       context.handle(
//           _situacaoTributariaMeta,
//           situacaoTributaria.isAcceptableOrUnknown(
//               data['SITUACAO_TRIBUTARIA']!, _situacaoTributariaMeta));
//     }
//     if (data.containsKey('VALOR')) {
//       context.handle(
//           _valorMeta, valor.isAcceptableOrUnknown(data['VALOR']!, _valorMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   EcfSintegra60A map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return EcfSintegra60A(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idEcfSintegra60M: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ID_ECF_SINTEGRA_60M']),
//       situacaoTributaria: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}SITUACAO_TRIBUTARIA']),
//       valor: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR']),
//     );
//   }

//   @override
//   $EcfSintegra60AsTable createAlias(String alias) {
//     return $EcfSintegra60AsTable(_db, alias);
//   }
// }

// class EcfSintegra60MsCompanion extends UpdateCompanion<EcfSintegra60M> {
//   final Value<int> id;
//   final Value<DateTime?> dataEmissao;
//   final Value<String?> numeroSerieEcf;
//   final Value<int?> numeroEquipamento;
//   final Value<String?> modeloDocumentoFiscal;
//   final Value<int?> cooInicial;
//   final Value<int?> cooFinal;
//   final Value<int?> crz;
//   final Value<int?> cro;
//   final Value<double?> valorVendaBruta;
//   final Value<double?> valorGrandeTotal;
//   const EcfSintegra60MsCompanion({
//     this.id = const Value.absent(),
//     this.dataEmissao = const Value.absent(),
//     this.numeroSerieEcf = const Value.absent(),
//     this.numeroEquipamento = const Value.absent(),
//     this.modeloDocumentoFiscal = const Value.absent(),
//     this.cooInicial = const Value.absent(),
//     this.cooFinal = const Value.absent(),
//     this.crz = const Value.absent(),
//     this.cro = const Value.absent(),
//     this.valorVendaBruta = const Value.absent(),
//     this.valorGrandeTotal = const Value.absent(),
//   });
//   EcfSintegra60MsCompanion.insert({
//     this.id = const Value.absent(),
//     this.dataEmissao = const Value.absent(),
//     this.numeroSerieEcf = const Value.absent(),
//     this.numeroEquipamento = const Value.absent(),
//     this.modeloDocumentoFiscal = const Value.absent(),
//     this.cooInicial = const Value.absent(),
//     this.cooFinal = const Value.absent(),
//     this.crz = const Value.absent(),
//     this.cro = const Value.absent(),
//     this.valorVendaBruta = const Value.absent(),
//     this.valorGrandeTotal = const Value.absent(),
//   });
//   static Insertable<EcfSintegra60M> custom({
//     Expression<int>? id,
//     Expression<DateTime?>? dataEmissao,
//     Expression<String?>? numeroSerieEcf,
//     Expression<int?>? numeroEquipamento,
//     Expression<String?>? modeloDocumentoFiscal,
//     Expression<int?>? cooInicial,
//     Expression<int?>? cooFinal,
//     Expression<int?>? crz,
//     Expression<int?>? cro,
//     Expression<double?>? valorVendaBruta,
//     Expression<double?>? valorGrandeTotal,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (dataEmissao != null) 'DATA_EMISSAO': dataEmissao,
//       if (numeroSerieEcf != null) 'NUMERO_SERIE_ECF': numeroSerieEcf,
//       if (numeroEquipamento != null) 'NUMERO_EQUIPAMENTO': numeroEquipamento,
//       if (modeloDocumentoFiscal != null)
//         'MODELO_DOCUMENTO_FISCAL': modeloDocumentoFiscal,
//       if (cooInicial != null) 'COO_INICIAL': cooInicial,
//       if (cooFinal != null) 'COO_FINAL': cooFinal,
//       if (crz != null) 'CRZ': crz,
//       if (cro != null) 'CRO': cro,
//       if (valorVendaBruta != null) 'VALOR_VENDA_BRUTA': valorVendaBruta,
//       if (valorGrandeTotal != null) 'VALOR_GRANDE_TOTAL': valorGrandeTotal,
//     });
//   }

//   EcfSintegra60MsCompanion copyWith(
//       {Value<int>? id,
//       Value<DateTime?>? dataEmissao,
//       Value<String?>? numeroSerieEcf,
//       Value<int?>? numeroEquipamento,
//       Value<String?>? modeloDocumentoFiscal,
//       Value<int?>? cooInicial,
//       Value<int?>? cooFinal,
//       Value<int?>? crz,
//       Value<int?>? cro,
//       Value<double?>? valorVendaBruta,
//       Value<double?>? valorGrandeTotal}) {
//     return EcfSintegra60MsCompanion(
//       id: id ?? this.id,
//       dataEmissao: dataEmissao ?? this.dataEmissao,
//       numeroSerieEcf: numeroSerieEcf ?? this.numeroSerieEcf,
//       numeroEquipamento: numeroEquipamento ?? this.numeroEquipamento,
//       modeloDocumentoFiscal:
//           modeloDocumentoFiscal ?? this.modeloDocumentoFiscal,
//       cooInicial: cooInicial ?? this.cooInicial,
//       cooFinal: cooFinal ?? this.cooFinal,
//       crz: crz ?? this.crz,
//       cro: cro ?? this.cro,
//       valorVendaBruta: valorVendaBruta ?? this.valorVendaBruta,
//       valorGrandeTotal: valorGrandeTotal ?? this.valorGrandeTotal,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (dataEmissao.present) {
//       map['DATA_EMISSAO'] = Variable<DateTime?>(dataEmissao.value);
//     }
//     if (numeroSerieEcf.present) {
//       map['NUMERO_SERIE_ECF'] = Variable<String?>(numeroSerieEcf.value);
//     }
//     if (numeroEquipamento.present) {
//       map['NUMERO_EQUIPAMENTO'] = Variable<int?>(numeroEquipamento.value);
//     }
//     if (modeloDocumentoFiscal.present) {
//       map['MODELO_DOCUMENTO_FISCAL'] =
//           Variable<String?>(modeloDocumentoFiscal.value);
//     }
//     if (cooInicial.present) {
//       map['COO_INICIAL'] = Variable<int?>(cooInicial.value);
//     }
//     if (cooFinal.present) {
//       map['COO_FINAL'] = Variable<int?>(cooFinal.value);
//     }
//     if (crz.present) {
//       map['CRZ'] = Variable<int?>(crz.value);
//     }
//     if (cro.present) {
//       map['CRO'] = Variable<int?>(cro.value);
//     }
//     if (valorVendaBruta.present) {
//       map['VALOR_VENDA_BRUTA'] = Variable<double?>(valorVendaBruta.value);
//     }
//     if (valorGrandeTotal.present) {
//       map['VALOR_GRANDE_TOTAL'] = Variable<double?>(valorGrandeTotal.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('EcfSintegra60MsCompanion(')
//           ..write('id: $id, ')
//           ..write('dataEmissao: $dataEmissao, ')
//           ..write('numeroSerieEcf: $numeroSerieEcf, ')
//           ..write('numeroEquipamento: $numeroEquipamento, ')
//           ..write('modeloDocumentoFiscal: $modeloDocumentoFiscal, ')
//           ..write('cooInicial: $cooInicial, ')
//           ..write('cooFinal: $cooFinal, ')
//           ..write('crz: $crz, ')
//           ..write('cro: $cro, ')
//           ..write('valorVendaBruta: $valorVendaBruta, ')
//           ..write('valorGrandeTotal: $valorGrandeTotal')
//           ..write(')'))
//         .toString();
//   }
// }

// class $EcfSintegra60MsTable extends EcfSintegra60Ms
//     with TableInfo<$EcfSintegra60MsTable, EcfSintegra60M> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $EcfSintegra60MsTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _dataEmissaoMeta =
//       const VerificationMeta('dataEmissao');
//   late final GeneratedColumn<DateTime?> dataEmissao =
//       GeneratedColumn<DateTime?>('DATA_EMISSAO', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _numeroSerieEcfMeta =
//       const VerificationMeta('numeroSerieEcf');
//   late final GeneratedColumn<String?> numeroSerieEcf = GeneratedColumn<String?>(
//       'NUMERO_SERIE_ECF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _numeroEquipamentoMeta =
//       const VerificationMeta('numeroEquipamento');
//   late final GeneratedColumn<int?> numeroEquipamento = GeneratedColumn<int?>(
//       'NUMERO_EQUIPAMENTO', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _modeloDocumentoFiscalMeta =
//       const VerificationMeta('modeloDocumentoFiscal');
//   late final GeneratedColumn<String?> modeloDocumentoFiscal =
//       GeneratedColumn<String?>('MODELO_DOCUMENTO_FISCAL', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 2),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _cooInicialMeta = const VerificationMeta('cooInicial');
//   late final GeneratedColumn<int?> cooInicial = GeneratedColumn<int?>(
//       'COO_INICIAL', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _cooFinalMeta = const VerificationMeta('cooFinal');
//   late final GeneratedColumn<int?> cooFinal = GeneratedColumn<int?>(
//       'COO_FINAL', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _crzMeta = const VerificationMeta('crz');
//   late final GeneratedColumn<int?> crz = GeneratedColumn<int?>(
//       'CRZ', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _croMeta = const VerificationMeta('cro');
//   late final GeneratedColumn<int?> cro = GeneratedColumn<int?>(
//       'CRO', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _valorVendaBrutaMeta =
//       const VerificationMeta('valorVendaBruta');
//   late final GeneratedColumn<double?> valorVendaBruta =
//       GeneratedColumn<double?>('VALOR_VENDA_BRUTA', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorGrandeTotalMeta =
//       const VerificationMeta('valorGrandeTotal');
//   late final GeneratedColumn<double?> valorGrandeTotal =
//       GeneratedColumn<double?>('VALOR_GRANDE_TOTAL', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         dataEmissao,
//         numeroSerieEcf,
//         numeroEquipamento,
//         modeloDocumentoFiscal,
//         cooInicial,
//         cooFinal,
//         crz,
//         cro,
//         valorVendaBruta,
//         valorGrandeTotal
//       ];
//   @override
//   String get aliasedName => _alias ?? 'ECF_SINTEGRA_60M';
//   @override
//   String get actualTableName => 'ECF_SINTEGRA_60M';
//   @override
//   VerificationContext validateIntegrity(Insertable<EcfSintegra60M> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('DATA_EMISSAO')) {
//       context.handle(
//           _dataEmissaoMeta,
//           dataEmissao.isAcceptableOrUnknown(
//               data['DATA_EMISSAO']!, _dataEmissaoMeta));
//     }
//     if (data.containsKey('NUMERO_SERIE_ECF')) {
//       context.handle(
//           _numeroSerieEcfMeta,
//           numeroSerieEcf.isAcceptableOrUnknown(
//               data['NUMERO_SERIE_ECF']!, _numeroSerieEcfMeta));
//     }
//     if (data.containsKey('NUMERO_EQUIPAMENTO')) {
//       context.handle(
//           _numeroEquipamentoMeta,
//           numeroEquipamento.isAcceptableOrUnknown(
//               data['NUMERO_EQUIPAMENTO']!, _numeroEquipamentoMeta));
//     }
//     if (data.containsKey('MODELO_DOCUMENTO_FISCAL')) {
//       context.handle(
//           _modeloDocumentoFiscalMeta,
//           modeloDocumentoFiscal.isAcceptableOrUnknown(
//               data['MODELO_DOCUMENTO_FISCAL']!, _modeloDocumentoFiscalMeta));
//     }
//     if (data.containsKey('COO_INICIAL')) {
//       context.handle(
//           _cooInicialMeta,
//           cooInicial.isAcceptableOrUnknown(
//               data['COO_INICIAL']!, _cooInicialMeta));
//     }
//     if (data.containsKey('COO_FINAL')) {
//       context.handle(_cooFinalMeta,
//           cooFinal.isAcceptableOrUnknown(data['COO_FINAL']!, _cooFinalMeta));
//     }
//     if (data.containsKey('CRZ')) {
//       context.handle(
//           _crzMeta, crz.isAcceptableOrUnknown(data['CRZ']!, _crzMeta));
//     }
//     if (data.containsKey('CRO')) {
//       context.handle(
//           _croMeta, cro.isAcceptableOrUnknown(data['CRO']!, _croMeta));
//     }
//     if (data.containsKey('VALOR_VENDA_BRUTA')) {
//       context.handle(
//           _valorVendaBrutaMeta,
//           valorVendaBruta.isAcceptableOrUnknown(
//               data['VALOR_VENDA_BRUTA']!, _valorVendaBrutaMeta));
//     }
//     if (data.containsKey('VALOR_GRANDE_TOTAL')) {
//       context.handle(
//           _valorGrandeTotalMeta,
//           valorGrandeTotal.isAcceptableOrUnknown(
//               data['VALOR_GRANDE_TOTAL']!, _valorGrandeTotalMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   EcfSintegra60M map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return EcfSintegra60M(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       dataEmissao: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_EMISSAO']),
//       numeroSerieEcf: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO_SERIE_ECF']),
//       numeroEquipamento: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}NUMERO_EQUIPAMENTO']),
//       modeloDocumentoFiscal: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}MODELO_DOCUMENTO_FISCAL']),
//       cooInicial: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}COO_INICIAL']),
//       cooFinal: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}COO_FINAL']),
//       crz: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CRZ']),
//       cro: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CRO']),
//       valorVendaBruta: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_VENDA_BRUTA']),
//       valorGrandeTotal: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_GRANDE_TOTAL']),
//     );
//   }

//   @override
//   $EcfSintegra60MsTable createAlias(String alias) {
//     return $EcfSintegra60MsTable(_db, alias);
//   }
// }

// class EmpresasCompanion extends UpdateCompanion<Empresa> {
//   final Value<int> id;
//   final Value<String?> razaoSocial;
//   final Value<String?> nomeFantasia;
//   final Value<String?> cnpj;
//   final Value<String?> inscricaoEstadual;
//   final Value<String?> inscricaoMunicipal;
//   final Value<String?> tipoRegime;
//   final Value<String?> crt;
//   final Value<DateTime?> dataConstituicao;
//   final Value<String?> tipo;
//   final Value<String?> email;
//   final Value<double?> aliquotaPis;
//   final Value<double?> aliquotaCofins;
//   final Value<String?> logradouro;
//   final Value<String?> numero;
//   final Value<String?> complemento;
//   final Value<String?> cep;
//   final Value<String?> bairro;
//   final Value<String?> cidade;
//   final Value<String?> uf;
//   final Value<String?> fone;
//   final Value<String?> contato;
//   final Value<int?> codigoIbgeCidade;
//   final Value<int?> codigoIbgeUf;
//   final Value<Uint8List?> logotipo;
//   final Value<bool?> registrado;
//   final Value<String?> naturezaJuridica;
//   final Value<String?> emailPagamento;
//   final Value<bool?> simei;
//   final Value<DateTime?> dataRegistro;
//   final Value<String?> horaRegistro;
//   const EmpresasCompanion({
//     this.id = const Value.absent(),
//     this.razaoSocial = const Value.absent(),
//     this.nomeFantasia = const Value.absent(),
//     this.cnpj = const Value.absent(),
//     this.inscricaoEstadual = const Value.absent(),
//     this.inscricaoMunicipal = const Value.absent(),
//     this.tipoRegime = const Value.absent(),
//     this.crt = const Value.absent(),
//     this.dataConstituicao = const Value.absent(),
//     this.tipo = const Value.absent(),
//     this.email = const Value.absent(),
//     this.aliquotaPis = const Value.absent(),
//     this.aliquotaCofins = const Value.absent(),
//     this.logradouro = const Value.absent(),
//     this.numero = const Value.absent(),
//     this.complemento = const Value.absent(),
//     this.cep = const Value.absent(),
//     this.bairro = const Value.absent(),
//     this.cidade = const Value.absent(),
//     this.uf = const Value.absent(),
//     this.fone = const Value.absent(),
//     this.contato = const Value.absent(),
//     this.codigoIbgeCidade = const Value.absent(),
//     this.codigoIbgeUf = const Value.absent(),
//     this.logotipo = const Value.absent(),
//     this.registrado = const Value.absent(),
//     this.naturezaJuridica = const Value.absent(),
//     this.emailPagamento = const Value.absent(),
//     this.simei = const Value.absent(),
//     this.dataRegistro = const Value.absent(),
//     this.horaRegistro = const Value.absent(),
//   });
//   EmpresasCompanion.insert({
//     this.id = const Value.absent(),
//     this.razaoSocial = const Value.absent(),
//     this.nomeFantasia = const Value.absent(),
//     this.cnpj = const Value.absent(),
//     this.inscricaoEstadual = const Value.absent(),
//     this.inscricaoMunicipal = const Value.absent(),
//     this.tipoRegime = const Value.absent(),
//     this.crt = const Value.absent(),
//     this.dataConstituicao = const Value.absent(),
//     this.tipo = const Value.absent(),
//     this.email = const Value.absent(),
//     this.aliquotaPis = const Value.absent(),
//     this.aliquotaCofins = const Value.absent(),
//     this.logradouro = const Value.absent(),
//     this.numero = const Value.absent(),
//     this.complemento = const Value.absent(),
//     this.cep = const Value.absent(),
//     this.bairro = const Value.absent(),
//     this.cidade = const Value.absent(),
//     this.uf = const Value.absent(),
//     this.fone = const Value.absent(),
//     this.contato = const Value.absent(),
//     this.codigoIbgeCidade = const Value.absent(),
//     this.codigoIbgeUf = const Value.absent(),
//     this.logotipo = const Value.absent(),
//     this.registrado = const Value.absent(),
//     this.naturezaJuridica = const Value.absent(),
//     this.emailPagamento = const Value.absent(),
//     this.simei = const Value.absent(),
//     this.dataRegistro = const Value.absent(),
//     this.horaRegistro = const Value.absent(),
//   });
//   static Insertable<Empresa> custom({
//     Expression<int>? id,
//     Expression<String?>? razaoSocial,
//     Expression<String?>? nomeFantasia,
//     Expression<String?>? cnpj,
//     Expression<String?>? inscricaoEstadual,
//     Expression<String?>? inscricaoMunicipal,
//     Expression<String?>? tipoRegime,
//     Expression<String?>? crt,
//     Expression<DateTime?>? dataConstituicao,
//     Expression<String?>? tipo,
//     Expression<String?>? email,
//     Expression<double?>? aliquotaPis,
//     Expression<double?>? aliquotaCofins,
//     Expression<String?>? logradouro,
//     Expression<String?>? numero,
//     Expression<String?>? complemento,
//     Expression<String?>? cep,
//     Expression<String?>? bairro,
//     Expression<String?>? cidade,
//     Expression<String?>? uf,
//     Expression<String?>? fone,
//     Expression<String?>? contato,
//     Expression<int?>? codigoIbgeCidade,
//     Expression<int?>? codigoIbgeUf,
//     Expression<Uint8List?>? logotipo,
//     Expression<bool?>? registrado,
//     Expression<String?>? naturezaJuridica,
//     Expression<String?>? emailPagamento,
//     Expression<bool?>? simei,
//     Expression<DateTime?>? dataRegistro,
//     Expression<String?>? horaRegistro,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (razaoSocial != null) 'RAZAO_SOCIAL': razaoSocial,
//       if (nomeFantasia != null) 'NOME_FANTASIA': nomeFantasia,
//       if (cnpj != null) 'CNPJ': cnpj,
//       if (inscricaoEstadual != null) 'INSCRICAO_ESTADUAL': inscricaoEstadual,
//       if (inscricaoMunicipal != null) 'INSCRICAO_MUNICIPAL': inscricaoMunicipal,
//       if (tipoRegime != null) 'TIPO_REGIME': tipoRegime,
//       if (crt != null) 'CRT': crt,
//       if (dataConstituicao != null) 'DATA_CONSTITUICAO': dataConstituicao,
//       if (tipo != null) 'TIPO': tipo,
//       if (email != null) 'EMAIL': email,
//       if (aliquotaPis != null) 'ALIQUOTA_PIS': aliquotaPis,
//       if (aliquotaCofins != null) 'ALIQUOTA_COFINS': aliquotaCofins,
//       if (logradouro != null) 'LOGRADOURO': logradouro,
//       if (numero != null) 'NUMERO': numero,
//       if (complemento != null) 'COMPLEMENTO': complemento,
//       if (cep != null) 'CEP': cep,
//       if (bairro != null) 'BAIRRO': bairro,
//       if (cidade != null) 'CIDADE': cidade,
//       if (uf != null) 'UF': uf,
//       if (fone != null) 'FONE': fone,
//       if (contato != null) 'CONTATO': contato,
//       if (codigoIbgeCidade != null) 'CODIGO_IBGE_CIDADE': codigoIbgeCidade,
//       if (codigoIbgeUf != null) 'CODIGO_IBGE_UF': codigoIbgeUf,
//       if (logotipo != null) 'LOGOTIPO': logotipo,
//       if (registrado != null) 'REGISTRADO': registrado,
//       if (naturezaJuridica != null) 'NATUREZA_JURIDICA': naturezaJuridica,
//       if (emailPagamento != null) 'EMAIL_PAGAMENTO': emailPagamento,
//       if (simei != null) 'SIMEI': simei,
//       if (dataRegistro != null) 'DATA_REGISTRO': dataRegistro,
//       if (horaRegistro != null) 'HORA_REGISTRO': horaRegistro,
//     });
//   }

//   EmpresasCompanion copyWith(
//       {Value<int>? id,
//       Value<String?>? razaoSocial,
//       Value<String?>? nomeFantasia,
//       Value<String?>? cnpj,
//       Value<String?>? inscricaoEstadual,
//       Value<String?>? inscricaoMunicipal,
//       Value<String?>? tipoRegime,
//       Value<String?>? crt,
//       Value<DateTime?>? dataConstituicao,
//       Value<String?>? tipo,
//       Value<String?>? email,
//       Value<double?>? aliquotaPis,
//       Value<double?>? aliquotaCofins,
//       Value<String?>? logradouro,
//       Value<String?>? numero,
//       Value<String?>? complemento,
//       Value<String?>? cep,
//       Value<String?>? bairro,
//       Value<String?>? cidade,
//       Value<String?>? uf,
//       Value<String?>? fone,
//       Value<String?>? contato,
//       Value<int?>? codigoIbgeCidade,
//       Value<int?>? codigoIbgeUf,
//       Value<Uint8List?>? logotipo,
//       Value<bool?>? registrado,
//       Value<String?>? naturezaJuridica,
//       Value<String?>? emailPagamento,
//       Value<bool?>? simei,
//       Value<DateTime?>? dataRegistro,
//       Value<String?>? horaRegistro}) {
//     return EmpresasCompanion(
//       id: id ?? this.id,
//       razaoSocial: razaoSocial ?? this.razaoSocial,
//       nomeFantasia: nomeFantasia ?? this.nomeFantasia,
//       cnpj: cnpj ?? this.cnpj,
//       inscricaoEstadual: inscricaoEstadual ?? this.inscricaoEstadual,
//       inscricaoMunicipal: inscricaoMunicipal ?? this.inscricaoMunicipal,
//       tipoRegime: tipoRegime ?? this.tipoRegime,
//       crt: crt ?? this.crt,
//       dataConstituicao: dataConstituicao ?? this.dataConstituicao,
//       tipo: tipo ?? this.tipo,
//       email: email ?? this.email,
//       aliquotaPis: aliquotaPis ?? this.aliquotaPis,
//       aliquotaCofins: aliquotaCofins ?? this.aliquotaCofins,
//       logradouro: logradouro ?? this.logradouro,
//       numero: numero ?? this.numero,
//       complemento: complemento ?? this.complemento,
//       cep: cep ?? this.cep,
//       bairro: bairro ?? this.bairro,
//       cidade: cidade ?? this.cidade,
//       uf: uf ?? this.uf,
//       fone: fone ?? this.fone,
//       contato: contato ?? this.contato,
//       codigoIbgeCidade: codigoIbgeCidade ?? this.codigoIbgeCidade,
//       codigoIbgeUf: codigoIbgeUf ?? this.codigoIbgeUf,
//       logotipo: logotipo ?? this.logotipo,
//       registrado: registrado ?? this.registrado,
//       naturezaJuridica: naturezaJuridica ?? this.naturezaJuridica,
//       emailPagamento: emailPagamento ?? this.emailPagamento,
//       simei: simei ?? this.simei,
//       dataRegistro: dataRegistro ?? this.dataRegistro,
//       horaRegistro: horaRegistro ?? this.horaRegistro,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (razaoSocial.present) {
//       map['RAZAO_SOCIAL'] = Variable<String?>(razaoSocial.value);
//     }
//     if (nomeFantasia.present) {
//       map['NOME_FANTASIA'] = Variable<String?>(nomeFantasia.value);
//     }
//     if (cnpj.present) {
//       map['CNPJ'] = Variable<String?>(cnpj.value);
//     }
//     if (inscricaoEstadual.present) {
//       map['INSCRICAO_ESTADUAL'] = Variable<String?>(inscricaoEstadual.value);
//     }
//     if (inscricaoMunicipal.present) {
//       map['INSCRICAO_MUNICIPAL'] = Variable<String?>(inscricaoMunicipal.value);
//     }
//     if (tipoRegime.present) {
//       map['TIPO_REGIME'] = Variable<String?>(tipoRegime.value);
//     }
//     if (crt.present) {
//       map['CRT'] = Variable<String?>(crt.value);
//     }
//     if (dataConstituicao.present) {
//       map['DATA_CONSTITUICAO'] = Variable<DateTime?>(dataConstituicao.value);
//     }
//     if (tipo.present) {
//       map['TIPO'] = Variable<String?>(tipo.value);
//     }
//     if (email.present) {
//       map['EMAIL'] = Variable<String?>(email.value);
//     }
//     if (aliquotaPis.present) {
//       map['ALIQUOTA_PIS'] = Variable<double?>(aliquotaPis.value);
//     }
//     if (aliquotaCofins.present) {
//       map['ALIQUOTA_COFINS'] = Variable<double?>(aliquotaCofins.value);
//     }
//     if (logradouro.present) {
//       map['LOGRADOURO'] = Variable<String?>(logradouro.value);
//     }
//     if (numero.present) {
//       map['NUMERO'] = Variable<String?>(numero.value);
//     }
//     if (complemento.present) {
//       map['COMPLEMENTO'] = Variable<String?>(complemento.value);
//     }
//     if (cep.present) {
//       map['CEP'] = Variable<String?>(cep.value);
//     }
//     if (bairro.present) {
//       map['BAIRRO'] = Variable<String?>(bairro.value);
//     }
//     if (cidade.present) {
//       map['CIDADE'] = Variable<String?>(cidade.value);
//     }
//     if (uf.present) {
//       map['UF'] = Variable<String?>(uf.value);
//     }
//     if (fone.present) {
//       map['FONE'] = Variable<String?>(fone.value);
//     }
//     if (contato.present) {
//       map['CONTATO'] = Variable<String?>(contato.value);
//     }
//     if (codigoIbgeCidade.present) {
//       map['CODIGO_IBGE_CIDADE'] = Variable<int?>(codigoIbgeCidade.value);
//     }
//     if (codigoIbgeUf.present) {
//       map['CODIGO_IBGE_UF'] = Variable<int?>(codigoIbgeUf.value);
//     }
//     if (logotipo.present) {
//       map['LOGOTIPO'] = Variable<Uint8List?>(logotipo.value);
//     }
//     if (registrado.present) {
//       map['REGISTRADO'] = Variable<bool?>(registrado.value);
//     }
//     if (naturezaJuridica.present) {
//       map['NATUREZA_JURIDICA'] = Variable<String?>(naturezaJuridica.value);
//     }
//     if (emailPagamento.present) {
//       map['EMAIL_PAGAMENTO'] = Variable<String?>(emailPagamento.value);
//     }
//     if (simei.present) {
//       map['SIMEI'] = Variable<bool?>(simei.value);
//     }
//     if (dataRegistro.present) {
//       map['DATA_REGISTRO'] = Variable<DateTime?>(dataRegistro.value);
//     }
//     if (horaRegistro.present) {
//       map['HORA_REGISTRO'] = Variable<String?>(horaRegistro.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('EmpresasCompanion(')
//           ..write('id: $id, ')
//           ..write('razaoSocial: $razaoSocial, ')
//           ..write('nomeFantasia: $nomeFantasia, ')
//           ..write('cnpj: $cnpj, ')
//           ..write('inscricaoEstadual: $inscricaoEstadual, ')
//           ..write('inscricaoMunicipal: $inscricaoMunicipal, ')
//           ..write('tipoRegime: $tipoRegime, ')
//           ..write('crt: $crt, ')
//           ..write('dataConstituicao: $dataConstituicao, ')
//           ..write('tipo: $tipo, ')
//           ..write('email: $email, ')
//           ..write('aliquotaPis: $aliquotaPis, ')
//           ..write('aliquotaCofins: $aliquotaCofins, ')
//           ..write('logradouro: $logradouro, ')
//           ..write('numero: $numero, ')
//           ..write('complemento: $complemento, ')
//           ..write('cep: $cep, ')
//           ..write('bairro: $bairro, ')
//           ..write('cidade: $cidade, ')
//           ..write('uf: $uf, ')
//           ..write('fone: $fone, ')
//           ..write('contato: $contato, ')
//           ..write('codigoIbgeCidade: $codigoIbgeCidade, ')
//           ..write('codigoIbgeUf: $codigoIbgeUf, ')
//           ..write('logotipo: $logotipo, ')
//           ..write('registrado: $registrado, ')
//           ..write('naturezaJuridica: $naturezaJuridica, ')
//           ..write('emailPagamento: $emailPagamento, ')
//           ..write('simei: $simei, ')
//           ..write('dataRegistro: $dataRegistro, ')
//           ..write('horaRegistro: $horaRegistro')
//           ..write(')'))
//         .toString();
//   }
// }

// class $EmpresasTable extends Empresas with TableInfo<$EmpresasTable, Empresa> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $EmpresasTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _razaoSocialMeta =
//       const VerificationMeta('razaoSocial');
//   late final GeneratedColumn<String?> razaoSocial = GeneratedColumn<String?>(
//       'RAZAO_SOCIAL', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 150),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _nomeFantasiaMeta =
//       const VerificationMeta('nomeFantasia');
//   late final GeneratedColumn<String?> nomeFantasia = GeneratedColumn<String?>(
//       'NOME_FANTASIA', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 150),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cnpjMeta = const VerificationMeta('cnpj');
//   late final GeneratedColumn<String?> cnpj = GeneratedColumn<String?>(
//       'CNPJ', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _inscricaoEstadualMeta =
//       const VerificationMeta('inscricaoEstadual');
//   late final GeneratedColumn<String?> inscricaoEstadual =
//       GeneratedColumn<String?>('INSCRICAO_ESTADUAL', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 30),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _inscricaoMunicipalMeta =
//       const VerificationMeta('inscricaoMunicipal');
//   late final GeneratedColumn<String?> inscricaoMunicipal =
//       GeneratedColumn<String?>(
//           'INSCRICAO_MUNICIPAL', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 30),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _tipoRegimeMeta = const VerificationMeta('tipoRegime');
//   late final GeneratedColumn<String?> tipoRegime = GeneratedColumn<String?>(
//       'TIPO_REGIME', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _crtMeta = const VerificationMeta('crt');
//   late final GeneratedColumn<String?> crt = GeneratedColumn<String?>(
//       'CRT', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _dataConstituicaoMeta =
//       const VerificationMeta('dataConstituicao');
//   late final GeneratedColumn<DateTime?> dataConstituicao =
//       GeneratedColumn<DateTime?>('DATA_CONSTITUICAO', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _tipoMeta = const VerificationMeta('tipo');
//   late final GeneratedColumn<String?> tipo = GeneratedColumn<String?>(
//       'TIPO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _emailMeta = const VerificationMeta('email');
//   late final GeneratedColumn<String?> email = GeneratedColumn<String?>(
//       'EMAIL', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _aliquotaPisMeta =
//       const VerificationMeta('aliquotaPis');
//   late final GeneratedColumn<double?> aliquotaPis = GeneratedColumn<double?>(
//       'ALIQUOTA_PIS', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _aliquotaCofinsMeta =
//       const VerificationMeta('aliquotaCofins');
//   late final GeneratedColumn<double?> aliquotaCofins = GeneratedColumn<double?>(
//       'ALIQUOTA_COFINS', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _logradouroMeta = const VerificationMeta('logradouro');
//   late final GeneratedColumn<String?> logradouro = GeneratedColumn<String?>(
//       'LOGRADOURO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _numeroMeta = const VerificationMeta('numero');
//   late final GeneratedColumn<String?> numero = GeneratedColumn<String?>(
//       'NUMERO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 10),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _complementoMeta =
//       const VerificationMeta('complemento');
//   late final GeneratedColumn<String?> complemento = GeneratedColumn<String?>(
//       'COMPLEMENTO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cepMeta = const VerificationMeta('cep');
//   late final GeneratedColumn<String?> cep = GeneratedColumn<String?>(
//       'CEP', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 9),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _bairroMeta = const VerificationMeta('bairro');
//   late final GeneratedColumn<String?> bairro = GeneratedColumn<String?>(
//       'BAIRRO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cidadeMeta = const VerificationMeta('cidade');
//   late final GeneratedColumn<String?> cidade = GeneratedColumn<String?>(
//       'CIDADE', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _ufMeta = const VerificationMeta('uf');
//   late final GeneratedColumn<String?> uf = GeneratedColumn<String?>(
//       'UF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _foneMeta = const VerificationMeta('fone');
//   late final GeneratedColumn<String?> fone = GeneratedColumn<String?>(
//       'FONE', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 15),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _contatoMeta = const VerificationMeta('contato');
//   late final GeneratedColumn<String?> contato = GeneratedColumn<String?>(
//       'CONTATO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 30),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _codigoIbgeCidadeMeta =
//       const VerificationMeta('codigoIbgeCidade');
//   late final GeneratedColumn<int?> codigoIbgeCidade = GeneratedColumn<int?>(
//       'CODIGO_IBGE_CIDADE', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _codigoIbgeUfMeta =
//       const VerificationMeta('codigoIbgeUf');
//   late final GeneratedColumn<int?> codigoIbgeUf = GeneratedColumn<int?>(
//       'CODIGO_IBGE_UF', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _logotipoMeta = const VerificationMeta('logotipo');
//   late final GeneratedColumn<Uint8List?> logotipo = GeneratedColumn<Uint8List?>(
//       'LOGOTIPO', aliasedName, true,
//       typeName: 'BLOB', requiredDuringInsert: false);
//   final VerificationMeta _registradoMeta = const VerificationMeta('registrado');
//   late final GeneratedColumn<bool?> registrado = GeneratedColumn<bool?>(
//       'REGISTRADO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'CHECK (REGISTRADO IN (0, 1))');
//   final VerificationMeta _naturezaJuridicaMeta =
//       const VerificationMeta('naturezaJuridica');
//   late final GeneratedColumn<String?> naturezaJuridica =
//       GeneratedColumn<String?>('NATUREZA_JURIDICA', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 200),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _emailPagamentoMeta =
//       const VerificationMeta('emailPagamento');
//   late final GeneratedColumn<String?> emailPagamento = GeneratedColumn<String?>(
//       'EMAIL_PAGAMENTO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _simeiMeta = const VerificationMeta('simei');
//   late final GeneratedColumn<bool?> simei = GeneratedColumn<bool?>(
//       'SIMEI', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'CHECK (SIMEI IN (0, 1))');
//   final VerificationMeta _dataRegistroMeta =
//       const VerificationMeta('dataRegistro');
//   late final GeneratedColumn<DateTime?> dataRegistro =
//       GeneratedColumn<DateTime?>('DATA_REGISTRO', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _horaRegistroMeta =
//       const VerificationMeta('horaRegistro');
//   late final GeneratedColumn<String?> horaRegistro = GeneratedColumn<String?>(
//       'HORA_REGISTRO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         razaoSocial,
//         nomeFantasia,
//         cnpj,
//         inscricaoEstadual,
//         inscricaoMunicipal,
//         tipoRegime,
//         crt,
//         dataConstituicao,
//         tipo,
//         email,
//         aliquotaPis,
//         aliquotaCofins,
//         logradouro,
//         numero,
//         complemento,
//         cep,
//         bairro,
//         cidade,
//         uf,
//         fone,
//         contato,
//         codigoIbgeCidade,
//         codigoIbgeUf,
//         logotipo,
//         registrado,
//         naturezaJuridica,
//         emailPagamento,
//         simei,
//         dataRegistro,
//         horaRegistro
//       ];
//   @override
//   String get aliasedName => _alias ?? 'EMPRESA';
//   @override
//   String get actualTableName => 'EMPRESA';
//   @override
//   VerificationContext validateIntegrity(Insertable<Empresa> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('RAZAO_SOCIAL')) {
//       context.handle(
//           _razaoSocialMeta,
//           razaoSocial.isAcceptableOrUnknown(
//               data['RAZAO_SOCIAL']!, _razaoSocialMeta));
//     }
//     if (data.containsKey('NOME_FANTASIA')) {
//       context.handle(
//           _nomeFantasiaMeta,
//           nomeFantasia.isAcceptableOrUnknown(
//               data['NOME_FANTASIA']!, _nomeFantasiaMeta));
//     }
//     if (data.containsKey('CNPJ')) {
//       context.handle(
//           _cnpjMeta, cnpj.isAcceptableOrUnknown(data['CNPJ']!, _cnpjMeta));
//     }
//     if (data.containsKey('INSCRICAO_ESTADUAL')) {
//       context.handle(
//           _inscricaoEstadualMeta,
//           inscricaoEstadual.isAcceptableOrUnknown(
//               data['INSCRICAO_ESTADUAL']!, _inscricaoEstadualMeta));
//     }
//     if (data.containsKey('INSCRICAO_MUNICIPAL')) {
//       context.handle(
//           _inscricaoMunicipalMeta,
//           inscricaoMunicipal.isAcceptableOrUnknown(
//               data['INSCRICAO_MUNICIPAL']!, _inscricaoMunicipalMeta));
//     }
//     if (data.containsKey('TIPO_REGIME')) {
//       context.handle(
//           _tipoRegimeMeta,
//           tipoRegime.isAcceptableOrUnknown(
//               data['TIPO_REGIME']!, _tipoRegimeMeta));
//     }
//     if (data.containsKey('CRT')) {
//       context.handle(
//           _crtMeta, crt.isAcceptableOrUnknown(data['CRT']!, _crtMeta));
//     }
//     if (data.containsKey('DATA_CONSTITUICAO')) {
//       context.handle(
//           _dataConstituicaoMeta,
//           dataConstituicao.isAcceptableOrUnknown(
//               data['DATA_CONSTITUICAO']!, _dataConstituicaoMeta));
//     }
//     if (data.containsKey('TIPO')) {
//       context.handle(
//           _tipoMeta, tipo.isAcceptableOrUnknown(data['TIPO']!, _tipoMeta));
//     }
//     if (data.containsKey('EMAIL')) {
//       context.handle(
//           _emailMeta, email.isAcceptableOrUnknown(data['EMAIL']!, _emailMeta));
//     }
//     if (data.containsKey('ALIQUOTA_PIS')) {
//       context.handle(
//           _aliquotaPisMeta,
//           aliquotaPis.isAcceptableOrUnknown(
//               data['ALIQUOTA_PIS']!, _aliquotaPisMeta));
//     }
//     if (data.containsKey('ALIQUOTA_COFINS')) {
//       context.handle(
//           _aliquotaCofinsMeta,
//           aliquotaCofins.isAcceptableOrUnknown(
//               data['ALIQUOTA_COFINS']!, _aliquotaCofinsMeta));
//     }
//     if (data.containsKey('LOGRADOURO')) {
//       context.handle(
//           _logradouroMeta,
//           logradouro.isAcceptableOrUnknown(
//               data['LOGRADOURO']!, _logradouroMeta));
//     }
//     if (data.containsKey('NUMERO')) {
//       context.handle(_numeroMeta,
//           numero.isAcceptableOrUnknown(data['NUMERO']!, _numeroMeta));
//     }
//     if (data.containsKey('COMPLEMENTO')) {
//       context.handle(
//           _complementoMeta,
//           complemento.isAcceptableOrUnknown(
//               data['COMPLEMENTO']!, _complementoMeta));
//     }
//     if (data.containsKey('CEP')) {
//       context.handle(
//           _cepMeta, cep.isAcceptableOrUnknown(data['CEP']!, _cepMeta));
//     }
//     if (data.containsKey('BAIRRO')) {
//       context.handle(_bairroMeta,
//           bairro.isAcceptableOrUnknown(data['BAIRRO']!, _bairroMeta));
//     }
//     if (data.containsKey('CIDADE')) {
//       context.handle(_cidadeMeta,
//           cidade.isAcceptableOrUnknown(data['CIDADE']!, _cidadeMeta));
//     }
//     if (data.containsKey('UF')) {
//       context.handle(_ufMeta, uf.isAcceptableOrUnknown(data['UF']!, _ufMeta));
//     }
//     if (data.containsKey('FONE')) {
//       context.handle(
//           _foneMeta, fone.isAcceptableOrUnknown(data['FONE']!, _foneMeta));
//     }
//     if (data.containsKey('CONTATO')) {
//       context.handle(_contatoMeta,
//           contato.isAcceptableOrUnknown(data['CONTATO']!, _contatoMeta));
//     }
//     if (data.containsKey('CODIGO_IBGE_CIDADE')) {
//       context.handle(
//           _codigoIbgeCidadeMeta,
//           codigoIbgeCidade.isAcceptableOrUnknown(
//               data['CODIGO_IBGE_CIDADE']!, _codigoIbgeCidadeMeta));
//     }
//     if (data.containsKey('CODIGO_IBGE_UF')) {
//       context.handle(
//           _codigoIbgeUfMeta,
//           codigoIbgeUf.isAcceptableOrUnknown(
//               data['CODIGO_IBGE_UF']!, _codigoIbgeUfMeta));
//     }
//     if (data.containsKey('LOGOTIPO')) {
//       context.handle(_logotipoMeta,
//           logotipo.isAcceptableOrUnknown(data['LOGOTIPO']!, _logotipoMeta));
//     }
//     if (data.containsKey('REGISTRADO')) {
//       context.handle(
//           _registradoMeta,
//           registrado.isAcceptableOrUnknown(
//               data['REGISTRADO']!, _registradoMeta));
//     }
//     if (data.containsKey('NATUREZA_JURIDICA')) {
//       context.handle(
//           _naturezaJuridicaMeta,
//           naturezaJuridica.isAcceptableOrUnknown(
//               data['NATUREZA_JURIDICA']!, _naturezaJuridicaMeta));
//     }
//     if (data.containsKey('EMAIL_PAGAMENTO')) {
//       context.handle(
//           _emailPagamentoMeta,
//           emailPagamento.isAcceptableOrUnknown(
//               data['EMAIL_PAGAMENTO']!, _emailPagamentoMeta));
//     }
//     if (data.containsKey('SIMEI')) {
//       context.handle(
//           _simeiMeta, simei.isAcceptableOrUnknown(data['SIMEI']!, _simeiMeta));
//     }
//     if (data.containsKey('DATA_REGISTRO')) {
//       context.handle(
//           _dataRegistroMeta,
//           dataRegistro.isAcceptableOrUnknown(
//               data['DATA_REGISTRO']!, _dataRegistroMeta));
//     }
//     if (data.containsKey('HORA_REGISTRO')) {
//       context.handle(
//           _horaRegistroMeta,
//           horaRegistro.isAcceptableOrUnknown(
//               data['HORA_REGISTRO']!, _horaRegistroMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   Empresa map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return Empresa(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       razaoSocial: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}RAZAO_SOCIAL']),
//       nomeFantasia: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NOME_FANTASIA']),
//       cnpj: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CNPJ']),
//       inscricaoEstadual: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}INSCRICAO_ESTADUAL']),
//       inscricaoMunicipal: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}INSCRICAO_MUNICIPAL']),
//       tipoRegime: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TIPO_REGIME']),
//       crt: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CRT']),
//       dataConstituicao: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_CONSTITUICAO']),
//       tipo: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TIPO']),
//       email: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}EMAIL']),
//       aliquotaPis: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ALIQUOTA_PIS']),
//       aliquotaCofins: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ALIQUOTA_COFINS']),
//       logradouro: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}LOGRADOURO']),
//       numero: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO']),
//       complemento: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}COMPLEMENTO']),
//       cep: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CEP']),
//       bairro: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}BAIRRO']),
//       cidade: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CIDADE']),
//       uf: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}UF']),
//       fone: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}FONE']),
//       contato: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CONTATO']),
//       codigoIbgeCidade: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}CODIGO_IBGE_CIDADE']),
//       codigoIbgeUf: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO_IBGE_UF']),
//       logotipo: const BlobType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}LOGOTIPO']),
//       registrado: const BoolType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}REGISTRADO']),
//       naturezaJuridica: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NATUREZA_JURIDICA']),
//       emailPagamento: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}EMAIL_PAGAMENTO']),
//       simei: const BoolType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}SIMEI']),
//       dataRegistro: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_REGISTRO']),
//       horaRegistro: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}HORA_REGISTRO']),
//     );
//   }

//   @override
//   $EmpresasTable createAlias(String alias) {
//     return $EmpresasTable(_db, alias);
//   }
// }

// class EmpresaCnaesCompanion extends UpdateCompanion<EmpresaCnae> {
//   final Value<int> id;
//   final Value<String?> codigo;
//   final Value<String?> principal;
//   final Value<String?> descricao;
//   const EmpresaCnaesCompanion({
//     this.id = const Value.absent(),
//     this.codigo = const Value.absent(),
//     this.principal = const Value.absent(),
//     this.descricao = const Value.absent(),
//   });
//   EmpresaCnaesCompanion.insert({
//     this.id = const Value.absent(),
//     this.codigo = const Value.absent(),
//     this.principal = const Value.absent(),
//     this.descricao = const Value.absent(),
//   });
//   static Insertable<EmpresaCnae> custom({
//     Expression<int>? id,
//     Expression<String?>? codigo,
//     Expression<String?>? principal,
//     Expression<String?>? descricao,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (codigo != null) 'CODIGO': codigo,
//       if (principal != null) 'PRINCIPAL': principal,
//       if (descricao != null) 'DESCRICAO': descricao,
//     });
//   }

//   EmpresaCnaesCompanion copyWith(
//       {Value<int>? id,
//       Value<String?>? codigo,
//       Value<String?>? principal,
//       Value<String?>? descricao}) {
//     return EmpresaCnaesCompanion(
//       id: id ?? this.id,
//       codigo: codigo ?? this.codigo,
//       principal: principal ?? this.principal,
//       descricao: descricao ?? this.descricao,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (codigo.present) {
//       map['CODIGO'] = Variable<String?>(codigo.value);
//     }
//     if (principal.present) {
//       map['PRINCIPAL'] = Variable<String?>(principal.value);
//     }
//     if (descricao.present) {
//       map['DESCRICAO'] = Variable<String?>(descricao.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('EmpresaCnaesCompanion(')
//           ..write('id: $id, ')
//           ..write('codigo: $codigo, ')
//           ..write('principal: $principal, ')
//           ..write('descricao: $descricao')
//           ..write(')'))
//         .toString();
//   }
// }

// class $EmpresaCnaesTable extends EmpresaCnaes
//     with TableInfo<$EmpresaCnaesTable, EmpresaCnae> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $EmpresaCnaesTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _codigoMeta = const VerificationMeta('codigo');
//   late final GeneratedColumn<String?> codigo = GeneratedColumn<String?>(
//       'CODIGO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 7),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _principalMeta = const VerificationMeta('principal');
//   late final GeneratedColumn<String?> principal = GeneratedColumn<String?>(
//       'PRINCIPAL', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _descricaoMeta = const VerificationMeta('descricao');
//   late final GeneratedColumn<String?> descricao = GeneratedColumn<String?>(
//       'DESCRICAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [id, codigo, principal, descricao];
//   @override
//   String get aliasedName => _alias ?? 'EMPRESA_CNAE';
//   @override
//   String get actualTableName => 'EMPRESA_CNAE';
//   @override
//   VerificationContext validateIntegrity(Insertable<EmpresaCnae> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('CODIGO')) {
//       context.handle(_codigoMeta,
//           codigo.isAcceptableOrUnknown(data['CODIGO']!, _codigoMeta));
//     }
//     if (data.containsKey('PRINCIPAL')) {
//       context.handle(_principalMeta,
//           principal.isAcceptableOrUnknown(data['PRINCIPAL']!, _principalMeta));
//     }
//     if (data.containsKey('DESCRICAO')) {
//       context.handle(_descricaoMeta,
//           descricao.isAcceptableOrUnknown(data['DESCRICAO']!, _descricaoMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   EmpresaCnae map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return EmpresaCnae(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       codigo: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO']),
//       principal: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}PRINCIPAL']),
//       descricao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DESCRICAO']),
//     );
//   }

//   @override
//   $EmpresaCnaesTable createAlias(String alias) {
//     return $EmpresaCnaesTable(_db, alias);
//   }
// }

// class EmpresaDeliveryPedidosCompanion
//     extends UpdateCompanion<EmpresaDeliveryPedido> {
//   final Value<int> id;
//   final Value<String?> codigoPedidoEmpresa;
//   final Value<String?> conteudoJson;
//   final Value<String?> observacao;
//   final Value<DateTime?> dataSolicitacao;
//   final Value<String?> horaSolicitacao;
//   const EmpresaDeliveryPedidosCompanion({
//     this.id = const Value.absent(),
//     this.codigoPedidoEmpresa = const Value.absent(),
//     this.conteudoJson = const Value.absent(),
//     this.observacao = const Value.absent(),
//     this.dataSolicitacao = const Value.absent(),
//     this.horaSolicitacao = const Value.absent(),
//   });
//   EmpresaDeliveryPedidosCompanion.insert({
//     this.id = const Value.absent(),
//     this.codigoPedidoEmpresa = const Value.absent(),
//     this.conteudoJson = const Value.absent(),
//     this.observacao = const Value.absent(),
//     this.dataSolicitacao = const Value.absent(),
//     this.horaSolicitacao = const Value.absent(),
//   });
//   static Insertable<EmpresaDeliveryPedido> custom({
//     Expression<int>? id,
//     Expression<String?>? codigoPedidoEmpresa,
//     Expression<String?>? conteudoJson,
//     Expression<String?>? observacao,
//     Expression<DateTime?>? dataSolicitacao,
//     Expression<String?>? horaSolicitacao,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (codigoPedidoEmpresa != null)
//         'CODIGO_PEDIDO_EMPRESA': codigoPedidoEmpresa,
//       if (conteudoJson != null) 'CONTEUDO_JSON': conteudoJson,
//       if (observacao != null) 'OBSERVACAO': observacao,
//       if (dataSolicitacao != null) 'DATA_SOLICITACAO': dataSolicitacao,
//       if (horaSolicitacao != null) 'HORA_SOLICITACAO': horaSolicitacao,
//     });
//   }

//   EmpresaDeliveryPedidosCompanion copyWith(
//       {Value<int>? id,
//       Value<String?>? codigoPedidoEmpresa,
//       Value<String?>? conteudoJson,
//       Value<String?>? observacao,
//       Value<DateTime?>? dataSolicitacao,
//       Value<String?>? horaSolicitacao}) {
//     return EmpresaDeliveryPedidosCompanion(
//       id: id ?? this.id,
//       codigoPedidoEmpresa: codigoPedidoEmpresa ?? this.codigoPedidoEmpresa,
//       conteudoJson: conteudoJson ?? this.conteudoJson,
//       observacao: observacao ?? this.observacao,
//       dataSolicitacao: dataSolicitacao ?? this.dataSolicitacao,
//       horaSolicitacao: horaSolicitacao ?? this.horaSolicitacao,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (codigoPedidoEmpresa.present) {
//       map['CODIGO_PEDIDO_EMPRESA'] =
//           Variable<String?>(codigoPedidoEmpresa.value);
//     }
//     if (conteudoJson.present) {
//       map['CONTEUDO_JSON'] = Variable<String?>(conteudoJson.value);
//     }
//     if (observacao.present) {
//       map['OBSERVACAO'] = Variable<String?>(observacao.value);
//     }
//     if (dataSolicitacao.present) {
//       map['DATA_SOLICITACAO'] = Variable<DateTime?>(dataSolicitacao.value);
//     }
//     if (horaSolicitacao.present) {
//       map['HORA_SOLICITACAO'] = Variable<String?>(horaSolicitacao.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('EmpresaDeliveryPedidosCompanion(')
//           ..write('id: $id, ')
//           ..write('codigoPedidoEmpresa: $codigoPedidoEmpresa, ')
//           ..write('conteudoJson: $conteudoJson, ')
//           ..write('observacao: $observacao, ')
//           ..write('dataSolicitacao: $dataSolicitacao, ')
//           ..write('horaSolicitacao: $horaSolicitacao')
//           ..write(')'))
//         .toString();
//   }
// }

// class $EmpresaDeliveryPedidosTable extends EmpresaDeliveryPedidos
//     with TableInfo<$EmpresaDeliveryPedidosTable, EmpresaDeliveryPedido> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $EmpresaDeliveryPedidosTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _codigoPedidoEmpresaMeta =
//       const VerificationMeta('codigoPedidoEmpresa');
//   late final GeneratedColumn<String?> codigoPedidoEmpresa =
//       GeneratedColumn<String?>('CODIGO_PEDIDO_EMPRESA', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 100),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _conteudoJsonMeta =
//       const VerificationMeta('conteudoJson');
//   late final GeneratedColumn<String?> conteudoJson = GeneratedColumn<String?>(
//       'CONTEUDO_JSON', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _observacaoMeta = const VerificationMeta('observacao');
//   late final GeneratedColumn<String?> observacao = GeneratedColumn<String?>(
//       'OBSERVACAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _dataSolicitacaoMeta =
//       const VerificationMeta('dataSolicitacao');
//   late final GeneratedColumn<DateTime?> dataSolicitacao =
//       GeneratedColumn<DateTime?>('DATA_SOLICITACAO', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _horaSolicitacaoMeta =
//       const VerificationMeta('horaSolicitacao');
//   late final GeneratedColumn<String?> horaSolicitacao =
//       GeneratedColumn<String?>('HORA_SOLICITACAO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 8),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         codigoPedidoEmpresa,
//         conteudoJson,
//         observacao,
//         dataSolicitacao,
//         horaSolicitacao
//       ];
//   @override
//   String get aliasedName => _alias ?? 'EMPRESA_DELIVERY_PEDIDO';
//   @override
//   String get actualTableName => 'EMPRESA_DELIVERY_PEDIDO';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<EmpresaDeliveryPedido> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('CODIGO_PEDIDO_EMPRESA')) {
//       context.handle(
//           _codigoPedidoEmpresaMeta,
//           codigoPedidoEmpresa.isAcceptableOrUnknown(
//               data['CODIGO_PEDIDO_EMPRESA']!, _codigoPedidoEmpresaMeta));
//     }
//     if (data.containsKey('CONTEUDO_JSON')) {
//       context.handle(
//           _conteudoJsonMeta,
//           conteudoJson.isAcceptableOrUnknown(
//               data['CONTEUDO_JSON']!, _conteudoJsonMeta));
//     }
//     if (data.containsKey('OBSERVACAO')) {
//       context.handle(
//           _observacaoMeta,
//           observacao.isAcceptableOrUnknown(
//               data['OBSERVACAO']!, _observacaoMeta));
//     }
//     if (data.containsKey('DATA_SOLICITACAO')) {
//       context.handle(
//           _dataSolicitacaoMeta,
//           dataSolicitacao.isAcceptableOrUnknown(
//               data['DATA_SOLICITACAO']!, _dataSolicitacaoMeta));
//     }
//     if (data.containsKey('HORA_SOLICITACAO')) {
//       context.handle(
//           _horaSolicitacaoMeta,
//           horaSolicitacao.isAcceptableOrUnknown(
//               data['HORA_SOLICITACAO']!, _horaSolicitacaoMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   EmpresaDeliveryPedido map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return EmpresaDeliveryPedido(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       codigoPedidoEmpresa: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}CODIGO_PEDIDO_EMPRESA']),
//       conteudoJson: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CONTEUDO_JSON']),
//       observacao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}OBSERVACAO']),
//       dataSolicitacao: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_SOLICITACAO']),
//       horaSolicitacao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}HORA_SOLICITACAO']),
//     );
//   }

//   @override
//   $EmpresaDeliveryPedidosTable createAlias(String alias) {
//     return $EmpresaDeliveryPedidosTable(_db, alias);
//   }
// }

// class EmpresaSegmentosCompanion extends UpdateCompanion<EmpresaSegmento> {
//   final Value<int> id;
//   final Value<String?> codigo;
//   final Value<String?> denominacao;
//   final Value<String?> divisoes;
//   const EmpresaSegmentosCompanion({
//     this.id = const Value.absent(),
//     this.codigo = const Value.absent(),
//     this.denominacao = const Value.absent(),
//     this.divisoes = const Value.absent(),
//   });
//   EmpresaSegmentosCompanion.insert({
//     this.id = const Value.absent(),
//     this.codigo = const Value.absent(),
//     this.denominacao = const Value.absent(),
//     this.divisoes = const Value.absent(),
//   });
//   static Insertable<EmpresaSegmento> custom({
//     Expression<int>? id,
//     Expression<String?>? codigo,
//     Expression<String?>? denominacao,
//     Expression<String?>? divisoes,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (codigo != null) 'CODIGO': codigo,
//       if (denominacao != null) 'DENOMINACAO': denominacao,
//       if (divisoes != null) 'DIVISOES': divisoes,
//     });
//   }

//   EmpresaSegmentosCompanion copyWith(
//       {Value<int>? id,
//       Value<String?>? codigo,
//       Value<String?>? denominacao,
//       Value<String?>? divisoes}) {
//     return EmpresaSegmentosCompanion(
//       id: id ?? this.id,
//       codigo: codigo ?? this.codigo,
//       denominacao: denominacao ?? this.denominacao,
//       divisoes: divisoes ?? this.divisoes,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (codigo.present) {
//       map['CODIGO'] = Variable<String?>(codigo.value);
//     }
//     if (denominacao.present) {
//       map['DENOMINACAO'] = Variable<String?>(denominacao.value);
//     }
//     if (divisoes.present) {
//       map['DIVISOES'] = Variable<String?>(divisoes.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('EmpresaSegmentosCompanion(')
//           ..write('id: $id, ')
//           ..write('codigo: $codigo, ')
//           ..write('denominacao: $denominacao, ')
//           ..write('divisoes: $divisoes')
//           ..write(')'))
//         .toString();
//   }
// }

// class $EmpresaSegmentosTable extends EmpresaSegmentos
//     with TableInfo<$EmpresaSegmentosTable, EmpresaSegmento> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $EmpresaSegmentosTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _codigoMeta = const VerificationMeta('codigo');
//   late final GeneratedColumn<String?> codigo = GeneratedColumn<String?>(
//       'CODIGO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _denominacaoMeta =
//       const VerificationMeta('denominacao');
//   late final GeneratedColumn<String?> denominacao = GeneratedColumn<String?>(
//       'DENOMINACAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _divisoesMeta = const VerificationMeta('divisoes');
//   late final GeneratedColumn<String?> divisoes = GeneratedColumn<String?>(
//       'DIVISOES', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 6),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [id, codigo, denominacao, divisoes];
//   @override
//   String get aliasedName => _alias ?? 'EMPRESA_SEGMENTO';
//   @override
//   String get actualTableName => 'EMPRESA_SEGMENTO';
//   @override
//   VerificationContext validateIntegrity(Insertable<EmpresaSegmento> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('CODIGO')) {
//       context.handle(_codigoMeta,
//           codigo.isAcceptableOrUnknown(data['CODIGO']!, _codigoMeta));
//     }
//     if (data.containsKey('DENOMINACAO')) {
//       context.handle(
//           _denominacaoMeta,
//           denominacao.isAcceptableOrUnknown(
//               data['DENOMINACAO']!, _denominacaoMeta));
//     }
//     if (data.containsKey('DIVISOES')) {
//       context.handle(_divisoesMeta,
//           divisoes.isAcceptableOrUnknown(data['DIVISOES']!, _divisoesMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   EmpresaSegmento map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return EmpresaSegmento(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       codigo: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO']),
//       denominacao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DENOMINACAO']),
//       divisoes: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DIVISOES']),
//     );
//   }

//   @override
//   $EmpresaSegmentosTable createAlias(String alias) {
//     return $EmpresaSegmentosTable(_db, alias);
//   }
// }

// class EntregadorRotasCompanion extends UpdateCompanion<EntregadorRota> {
//   final Value<int> id;
//   final Value<int?> idColaborador;
//   final Value<DateTime?> dataRota;
//   final Value<String?> horaSaida;
//   final Value<int?> estimativaMinutos;
//   final Value<String?> horaPrevistoRetorno;
//   const EntregadorRotasCompanion({
//     this.id = const Value.absent(),
//     this.idColaborador = const Value.absent(),
//     this.dataRota = const Value.absent(),
//     this.horaSaida = const Value.absent(),
//     this.estimativaMinutos = const Value.absent(),
//     this.horaPrevistoRetorno = const Value.absent(),
//   });
//   EntregadorRotasCompanion.insert({
//     this.id = const Value.absent(),
//     this.idColaborador = const Value.absent(),
//     this.dataRota = const Value.absent(),
//     this.horaSaida = const Value.absent(),
//     this.estimativaMinutos = const Value.absent(),
//     this.horaPrevistoRetorno = const Value.absent(),
//   });
//   static Insertable<EntregadorRota> custom({
//     Expression<int>? id,
//     Expression<int?>? idColaborador,
//     Expression<DateTime?>? dataRota,
//     Expression<String?>? horaSaida,
//     Expression<int?>? estimativaMinutos,
//     Expression<String?>? horaPrevistoRetorno,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idColaborador != null) 'ID_COLABORADOR': idColaborador,
//       if (dataRota != null) 'DATA_ROTA': dataRota,
//       if (horaSaida != null) 'HORA_SAIDA': horaSaida,
//       if (estimativaMinutos != null) 'ESTIMATIVA_MINUTOS': estimativaMinutos,
//       if (horaPrevistoRetorno != null)
//         'HORA_PREVISTO_RETORNO': horaPrevistoRetorno,
//     });
//   }

//   EntregadorRotasCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idColaborador,
//       Value<DateTime?>? dataRota,
//       Value<String?>? horaSaida,
//       Value<int?>? estimativaMinutos,
//       Value<String?>? horaPrevistoRetorno}) {
//     return EntregadorRotasCompanion(
//       id: id ?? this.id,
//       idColaborador: idColaborador ?? this.idColaborador,
//       dataRota: dataRota ?? this.dataRota,
//       horaSaida: horaSaida ?? this.horaSaida,
//       estimativaMinutos: estimativaMinutos ?? this.estimativaMinutos,
//       horaPrevistoRetorno: horaPrevistoRetorno ?? this.horaPrevistoRetorno,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idColaborador.present) {
//       map['ID_COLABORADOR'] = Variable<int?>(idColaborador.value);
//     }
//     if (dataRota.present) {
//       map['DATA_ROTA'] = Variable<DateTime?>(dataRota.value);
//     }
//     if (horaSaida.present) {
//       map['HORA_SAIDA'] = Variable<String?>(horaSaida.value);
//     }
//     if (estimativaMinutos.present) {
//       map['ESTIMATIVA_MINUTOS'] = Variable<int?>(estimativaMinutos.value);
//     }
//     if (horaPrevistoRetorno.present) {
//       map['HORA_PREVISTO_RETORNO'] =
//           Variable<String?>(horaPrevistoRetorno.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('EntregadorRotasCompanion(')
//           ..write('id: $id, ')
//           ..write('idColaborador: $idColaborador, ')
//           ..write('dataRota: $dataRota, ')
//           ..write('horaSaida: $horaSaida, ')
//           ..write('estimativaMinutos: $estimativaMinutos, ')
//           ..write('horaPrevistoRetorno: $horaPrevistoRetorno')
//           ..write(')'))
//         .toString();
//   }
// }

// class $EntregadorRotasTable extends EntregadorRotas
//     with TableInfo<$EntregadorRotasTable, EntregadorRota> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $EntregadorRotasTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idColaboradorMeta =
//       const VerificationMeta('idColaborador');
//   late final GeneratedColumn<int?> idColaborador = GeneratedColumn<int?>(
//       'ID_COLABORADOR', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES COLABORADOR(ID)');
//   final VerificationMeta _dataRotaMeta = const VerificationMeta('dataRota');
//   late final GeneratedColumn<DateTime?> dataRota = GeneratedColumn<DateTime?>(
//       'DATA_ROTA', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _horaSaidaMeta = const VerificationMeta('horaSaida');
//   late final GeneratedColumn<String?> horaSaida = GeneratedColumn<String?>(
//       'HORA_SAIDA', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _estimativaMinutosMeta =
//       const VerificationMeta('estimativaMinutos');
//   late final GeneratedColumn<int?> estimativaMinutos = GeneratedColumn<int?>(
//       'ESTIMATIVA_MINUTOS', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _horaPrevistoRetornoMeta =
//       const VerificationMeta('horaPrevistoRetorno');
//   late final GeneratedColumn<String?> horaPrevistoRetorno =
//       GeneratedColumn<String?>('HORA_PREVISTO_RETORNO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 8),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idColaborador,
//         dataRota,
//         horaSaida,
//         estimativaMinutos,
//         horaPrevistoRetorno
//       ];
//   @override
//   String get aliasedName => _alias ?? 'ENTREGADOR_ROTA';
//   @override
//   String get actualTableName => 'ENTREGADOR_ROTA';
//   @override
//   VerificationContext validateIntegrity(Insertable<EntregadorRota> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_COLABORADOR')) {
//       context.handle(
//           _idColaboradorMeta,
//           idColaborador.isAcceptableOrUnknown(
//               data['ID_COLABORADOR']!, _idColaboradorMeta));
//     }
//     if (data.containsKey('DATA_ROTA')) {
//       context.handle(_dataRotaMeta,
//           dataRota.isAcceptableOrUnknown(data['DATA_ROTA']!, _dataRotaMeta));
//     }
//     if (data.containsKey('HORA_SAIDA')) {
//       context.handle(_horaSaidaMeta,
//           horaSaida.isAcceptableOrUnknown(data['HORA_SAIDA']!, _horaSaidaMeta));
//     }
//     if (data.containsKey('ESTIMATIVA_MINUTOS')) {
//       context.handle(
//           _estimativaMinutosMeta,
//           estimativaMinutos.isAcceptableOrUnknown(
//               data['ESTIMATIVA_MINUTOS']!, _estimativaMinutosMeta));
//     }
//     if (data.containsKey('HORA_PREVISTO_RETORNO')) {
//       context.handle(
//           _horaPrevistoRetornoMeta,
//           horaPrevistoRetorno.isAcceptableOrUnknown(
//               data['HORA_PREVISTO_RETORNO']!, _horaPrevistoRetornoMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   EntregadorRota map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return EntregadorRota(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idColaborador: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_COLABORADOR']),
//       dataRota: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_ROTA']),
//       horaSaida: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}HORA_SAIDA']),
//       estimativaMinutos: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ESTIMATIVA_MINUTOS']),
//       horaPrevistoRetorno: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}HORA_PREVISTO_RETORNO']),
//     );
//   }

//   @override
//   $EntregadorRotasTable createAlias(String alias) {
//     return $EntregadorRotasTable(_db, alias);
//   }
// }

// class EntregadorRotaDetalhesCompanion
//     extends UpdateCompanion<EntregadorRotaDetalhe> {
//   final Value<int> id;
//   final Value<int?> idEntregadorRota;
//   final Value<int?> idDelivery;
//   final Value<int?> posicaoNaFila;
//   final Value<int?> latitude;
//   final Value<int?> longitude;
//   const EntregadorRotaDetalhesCompanion({
//     this.id = const Value.absent(),
//     this.idEntregadorRota = const Value.absent(),
//     this.idDelivery = const Value.absent(),
//     this.posicaoNaFila = const Value.absent(),
//     this.latitude = const Value.absent(),
//     this.longitude = const Value.absent(),
//   });
//   EntregadorRotaDetalhesCompanion.insert({
//     this.id = const Value.absent(),
//     this.idEntregadorRota = const Value.absent(),
//     this.idDelivery = const Value.absent(),
//     this.posicaoNaFila = const Value.absent(),
//     this.latitude = const Value.absent(),
//     this.longitude = const Value.absent(),
//   });
//   static Insertable<EntregadorRotaDetalhe> custom({
//     Expression<int>? id,
//     Expression<int?>? idEntregadorRota,
//     Expression<int?>? idDelivery,
//     Expression<int?>? posicaoNaFila,
//     Expression<int?>? latitude,
//     Expression<int?>? longitude,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idEntregadorRota != null) 'ID_ENTREGADOR_ROTA': idEntregadorRota,
//       if (idDelivery != null) 'ID_DELIVERY': idDelivery,
//       if (posicaoNaFila != null) 'POSICAO_NA_FILA': posicaoNaFila,
//       if (latitude != null) 'LATITUDE': latitude,
//       if (longitude != null) 'LONGITUDE': longitude,
//     });
//   }

//   EntregadorRotaDetalhesCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idEntregadorRota,
//       Value<int?>? idDelivery,
//       Value<int?>? posicaoNaFila,
//       Value<int?>? latitude,
//       Value<int?>? longitude}) {
//     return EntregadorRotaDetalhesCompanion(
//       id: id ?? this.id,
//       idEntregadorRota: idEntregadorRota ?? this.idEntregadorRota,
//       idDelivery: idDelivery ?? this.idDelivery,
//       posicaoNaFila: posicaoNaFila ?? this.posicaoNaFila,
//       latitude: latitude ?? this.latitude,
//       longitude: longitude ?? this.longitude,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idEntregadorRota.present) {
//       map['ID_ENTREGADOR_ROTA'] = Variable<int?>(idEntregadorRota.value);
//     }
//     if (idDelivery.present) {
//       map['ID_DELIVERY'] = Variable<int?>(idDelivery.value);
//     }
//     if (posicaoNaFila.present) {
//       map['POSICAO_NA_FILA'] = Variable<int?>(posicaoNaFila.value);
//     }
//     if (latitude.present) {
//       map['LATITUDE'] = Variable<int?>(latitude.value);
//     }
//     if (longitude.present) {
//       map['LONGITUDE'] = Variable<int?>(longitude.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('EntregadorRotaDetalhesCompanion(')
//           ..write('id: $id, ')
//           ..write('idEntregadorRota: $idEntregadorRota, ')
//           ..write('idDelivery: $idDelivery, ')
//           ..write('posicaoNaFila: $posicaoNaFila, ')
//           ..write('latitude: $latitude, ')
//           ..write('longitude: $longitude')
//           ..write(')'))
//         .toString();
//   }
// }

// class $EntregadorRotaDetalhesTable extends EntregadorRotaDetalhes
//     with TableInfo<$EntregadorRotaDetalhesTable, EntregadorRotaDetalhe> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $EntregadorRotaDetalhesTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idEntregadorRotaMeta =
//       const VerificationMeta('idEntregadorRota');
//   late final GeneratedColumn<int?> idEntregadorRota = GeneratedColumn<int?>(
//       'ID_ENTREGADOR_ROTA', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES ENTREGADOR_ROTA(ID)');
//   final VerificationMeta _idDeliveryMeta = const VerificationMeta('idDelivery');
//   late final GeneratedColumn<int?> idDelivery = GeneratedColumn<int?>(
//       'ID_DELIVERY', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES DELIVERY(ID)');
//   final VerificationMeta _posicaoNaFilaMeta =
//       const VerificationMeta('posicaoNaFila');
//   late final GeneratedColumn<int?> posicaoNaFila = GeneratedColumn<int?>(
//       'POSICAO_NA_FILA', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _latitudeMeta = const VerificationMeta('latitude');
//   late final GeneratedColumn<int?> latitude = GeneratedColumn<int?>(
//       'LATITUDE', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _longitudeMeta = const VerificationMeta('longitude');
//   late final GeneratedColumn<int?> longitude = GeneratedColumn<int?>(
//       'LONGITUDE', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns =>
//       [id, idEntregadorRota, idDelivery, posicaoNaFila, latitude, longitude];
//   @override
//   String get aliasedName => _alias ?? 'ENTREGADOR_ROTA_DETALHE';
//   @override
//   String get actualTableName => 'ENTREGADOR_ROTA_DETALHE';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<EntregadorRotaDetalhe> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_ENTREGADOR_ROTA')) {
//       context.handle(
//           _idEntregadorRotaMeta,
//           idEntregadorRota.isAcceptableOrUnknown(
//               data['ID_ENTREGADOR_ROTA']!, _idEntregadorRotaMeta));
//     }
//     if (data.containsKey('ID_DELIVERY')) {
//       context.handle(
//           _idDeliveryMeta,
//           idDelivery.isAcceptableOrUnknown(
//               data['ID_DELIVERY']!, _idDeliveryMeta));
//     }
//     if (data.containsKey('POSICAO_NA_FILA')) {
//       context.handle(
//           _posicaoNaFilaMeta,
//           posicaoNaFila.isAcceptableOrUnknown(
//               data['POSICAO_NA_FILA']!, _posicaoNaFilaMeta));
//     }
//     if (data.containsKey('LATITUDE')) {
//       context.handle(_latitudeMeta,
//           latitude.isAcceptableOrUnknown(data['LATITUDE']!, _latitudeMeta));
//     }
//     if (data.containsKey('LONGITUDE')) {
//       context.handle(_longitudeMeta,
//           longitude.isAcceptableOrUnknown(data['LONGITUDE']!, _longitudeMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   EntregadorRotaDetalhe map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return EntregadorRotaDetalhe(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idEntregadorRota: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ID_ENTREGADOR_ROTA']),
//       idDelivery: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_DELIVERY']),
//       posicaoNaFila: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}POSICAO_NA_FILA']),
//       latitude: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}LATITUDE']),
//       longitude: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}LONGITUDE']),
//     );
//   }

//   @override
//   $EntregadorRotaDetalhesTable createAlias(String alias) {
//     return $EntregadorRotaDetalhesTable(_db, alias);
//   }
// }

// class FidelidadeHistoricosCompanion
//     extends UpdateCompanion<FidelidadeHistorico> {
//   final Value<int> id;
//   final Value<int?> idCliente;
//   final Value<int?> idFidelidadeUtilizado;
//   final Value<DateTime?> dataConsumo;
//   final Value<String?> horaConsumo;
//   final Value<double?> valorConsumo;
//   const FidelidadeHistoricosCompanion({
//     this.id = const Value.absent(),
//     this.idCliente = const Value.absent(),
//     this.idFidelidadeUtilizado = const Value.absent(),
//     this.dataConsumo = const Value.absent(),
//     this.horaConsumo = const Value.absent(),
//     this.valorConsumo = const Value.absent(),
//   });
//   FidelidadeHistoricosCompanion.insert({
//     this.id = const Value.absent(),
//     this.idCliente = const Value.absent(),
//     this.idFidelidadeUtilizado = const Value.absent(),
//     this.dataConsumo = const Value.absent(),
//     this.horaConsumo = const Value.absent(),
//     this.valorConsumo = const Value.absent(),
//   });
//   static Insertable<FidelidadeHistorico> custom({
//     Expression<int>? id,
//     Expression<int?>? idCliente,
//     Expression<int?>? idFidelidadeUtilizado,
//     Expression<DateTime?>? dataConsumo,
//     Expression<String?>? horaConsumo,
//     Expression<double?>? valorConsumo,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idCliente != null) 'ID_CLIENTE': idCliente,
//       if (idFidelidadeUtilizado != null)
//         'ID_FIDELIDADE_UTILIZADO': idFidelidadeUtilizado,
//       if (dataConsumo != null) 'DATA_CONSUMO': dataConsumo,
//       if (horaConsumo != null) 'HORA_CONSUMO': horaConsumo,
//       if (valorConsumo != null) 'VALOR_CONSUMO': valorConsumo,
//     });
//   }

//   FidelidadeHistoricosCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idCliente,
//       Value<int?>? idFidelidadeUtilizado,
//       Value<DateTime?>? dataConsumo,
//       Value<String?>? horaConsumo,
//       Value<double?>? valorConsumo}) {
//     return FidelidadeHistoricosCompanion(
//       id: id ?? this.id,
//       idCliente: idCliente ?? this.idCliente,
//       idFidelidadeUtilizado:
//           idFidelidadeUtilizado ?? this.idFidelidadeUtilizado,
//       dataConsumo: dataConsumo ?? this.dataConsumo,
//       horaConsumo: horaConsumo ?? this.horaConsumo,
//       valorConsumo: valorConsumo ?? this.valorConsumo,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idCliente.present) {
//       map['ID_CLIENTE'] = Variable<int?>(idCliente.value);
//     }
//     if (idFidelidadeUtilizado.present) {
//       map['ID_FIDELIDADE_UTILIZADO'] =
//           Variable<int?>(idFidelidadeUtilizado.value);
//     }
//     if (dataConsumo.present) {
//       map['DATA_CONSUMO'] = Variable<DateTime?>(dataConsumo.value);
//     }
//     if (horaConsumo.present) {
//       map['HORA_CONSUMO'] = Variable<String?>(horaConsumo.value);
//     }
//     if (valorConsumo.present) {
//       map['VALOR_CONSUMO'] = Variable<double?>(valorConsumo.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('FidelidadeHistoricosCompanion(')
//           ..write('id: $id, ')
//           ..write('idCliente: $idCliente, ')
//           ..write('idFidelidadeUtilizado: $idFidelidadeUtilizado, ')
//           ..write('dataConsumo: $dataConsumo, ')
//           ..write('horaConsumo: $horaConsumo, ')
//           ..write('valorConsumo: $valorConsumo')
//           ..write(')'))
//         .toString();
//   }
// }

// class $FidelidadeHistoricosTable extends FidelidadeHistoricos
//     with TableInfo<$FidelidadeHistoricosTable, FidelidadeHistorico> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $FidelidadeHistoricosTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idClienteMeta = const VerificationMeta('idCliente');
//   late final GeneratedColumn<int?> idCliente = GeneratedColumn<int?>(
//       'ID_CLIENTE', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES CLIENTE(ID)');
//   final VerificationMeta _idFidelidadeUtilizadoMeta =
//       const VerificationMeta('idFidelidadeUtilizado');
//   late final GeneratedColumn<int?> idFidelidadeUtilizado =
//       GeneratedColumn<int?>('ID_FIDELIDADE_UTILIZADO', aliasedName, true,
//           typeName: 'INTEGER',
//           requiredDuringInsert: false,
//           $customConstraints: 'NULLABLE REFERENCES FIDELIDADE_UTILIZADO(ID)');
//   final VerificationMeta _dataConsumoMeta =
//       const VerificationMeta('dataConsumo');
//   late final GeneratedColumn<DateTime?> dataConsumo =
//       GeneratedColumn<DateTime?>('DATA_CONSUMO', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _horaConsumoMeta =
//       const VerificationMeta('horaConsumo');
//   late final GeneratedColumn<String?> horaConsumo = GeneratedColumn<String?>(
//       'HORA_CONSUMO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _valorConsumoMeta =
//       const VerificationMeta('valorConsumo');
//   late final GeneratedColumn<double?> valorConsumo = GeneratedColumn<double?>(
//       'VALOR_CONSUMO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idCliente,
//         idFidelidadeUtilizado,
//         dataConsumo,
//         horaConsumo,
//         valorConsumo
//       ];
//   @override
//   String get aliasedName => _alias ?? 'FIDELIDADE_HISTORICO';
//   @override
//   String get actualTableName => 'FIDELIDADE_HISTORICO';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<FidelidadeHistorico> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_CLIENTE')) {
//       context.handle(_idClienteMeta,
//           idCliente.isAcceptableOrUnknown(data['ID_CLIENTE']!, _idClienteMeta));
//     }
//     if (data.containsKey('ID_FIDELIDADE_UTILIZADO')) {
//       context.handle(
//           _idFidelidadeUtilizadoMeta,
//           idFidelidadeUtilizado.isAcceptableOrUnknown(
//               data['ID_FIDELIDADE_UTILIZADO']!, _idFidelidadeUtilizadoMeta));
//     }
//     if (data.containsKey('DATA_CONSUMO')) {
//       context.handle(
//           _dataConsumoMeta,
//           dataConsumo.isAcceptableOrUnknown(
//               data['DATA_CONSUMO']!, _dataConsumoMeta));
//     }
//     if (data.containsKey('HORA_CONSUMO')) {
//       context.handle(
//           _horaConsumoMeta,
//           horaConsumo.isAcceptableOrUnknown(
//               data['HORA_CONSUMO']!, _horaConsumoMeta));
//     }
//     if (data.containsKey('VALOR_CONSUMO')) {
//       context.handle(
//           _valorConsumoMeta,
//           valorConsumo.isAcceptableOrUnknown(
//               data['VALOR_CONSUMO']!, _valorConsumoMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   FidelidadeHistorico map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return FidelidadeHistorico(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idCliente: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_CLIENTE']),
//       idFidelidadeUtilizado: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ID_FIDELIDADE_UTILIZADO']),
//       dataConsumo: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_CONSUMO']),
//       horaConsumo: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}HORA_CONSUMO']),
//       valorConsumo: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_CONSUMO']),
//     );
//   }

//   @override
//   $FidelidadeHistoricosTable createAlias(String alias) {
//     return $FidelidadeHistoricosTable(_db, alias);
//   }
// }

// class FidelidadeUtilizadosCompanion
//     extends UpdateCompanion<FidelidadeUtilizado> {
//   final Value<int> id;
//   final Value<DateTime?> dataUtilizacao;
//   final Value<String?> horaUtilizacao;
//   final Value<double?> valorUtilizado;
//   const FidelidadeUtilizadosCompanion({
//     this.id = const Value.absent(),
//     this.dataUtilizacao = const Value.absent(),
//     this.horaUtilizacao = const Value.absent(),
//     this.valorUtilizado = const Value.absent(),
//   });
//   FidelidadeUtilizadosCompanion.insert({
//     this.id = const Value.absent(),
//     this.dataUtilizacao = const Value.absent(),
//     this.horaUtilizacao = const Value.absent(),
//     this.valorUtilizado = const Value.absent(),
//   });
//   static Insertable<FidelidadeUtilizado> custom({
//     Expression<int>? id,
//     Expression<DateTime?>? dataUtilizacao,
//     Expression<String?>? horaUtilizacao,
//     Expression<double?>? valorUtilizado,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (dataUtilizacao != null) 'DATA_UTILIZACAO': dataUtilizacao,
//       if (horaUtilizacao != null) 'HORA_UTILIZACAO': horaUtilizacao,
//       if (valorUtilizado != null) 'VALOR_UTILIZADO': valorUtilizado,
//     });
//   }

//   FidelidadeUtilizadosCompanion copyWith(
//       {Value<int>? id,
//       Value<DateTime?>? dataUtilizacao,
//       Value<String?>? horaUtilizacao,
//       Value<double?>? valorUtilizado}) {
//     return FidelidadeUtilizadosCompanion(
//       id: id ?? this.id,
//       dataUtilizacao: dataUtilizacao ?? this.dataUtilizacao,
//       horaUtilizacao: horaUtilizacao ?? this.horaUtilizacao,
//       valorUtilizado: valorUtilizado ?? this.valorUtilizado,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (dataUtilizacao.present) {
//       map['DATA_UTILIZACAO'] = Variable<DateTime?>(dataUtilizacao.value);
//     }
//     if (horaUtilizacao.present) {
//       map['HORA_UTILIZACAO'] = Variable<String?>(horaUtilizacao.value);
//     }
//     if (valorUtilizado.present) {
//       map['VALOR_UTILIZADO'] = Variable<double?>(valorUtilizado.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('FidelidadeUtilizadosCompanion(')
//           ..write('id: $id, ')
//           ..write('dataUtilizacao: $dataUtilizacao, ')
//           ..write('horaUtilizacao: $horaUtilizacao, ')
//           ..write('valorUtilizado: $valorUtilizado')
//           ..write(')'))
//         .toString();
//   }
// }

// class $FidelidadeUtilizadosTable extends FidelidadeUtilizados
//     with TableInfo<$FidelidadeUtilizadosTable, FidelidadeUtilizado> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $FidelidadeUtilizadosTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _dataUtilizacaoMeta =
//       const VerificationMeta('dataUtilizacao');
//   late final GeneratedColumn<DateTime?> dataUtilizacao =
//       GeneratedColumn<DateTime?>('DATA_UTILIZACAO', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _horaUtilizacaoMeta =
//       const VerificationMeta('horaUtilizacao');
//   late final GeneratedColumn<String?> horaUtilizacao = GeneratedColumn<String?>(
//       'HORA_UTILIZACAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _valorUtilizadoMeta =
//       const VerificationMeta('valorUtilizado');
//   late final GeneratedColumn<double?> valorUtilizado = GeneratedColumn<double?>(
//       'VALOR_UTILIZADO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns =>
//       [id, dataUtilizacao, horaUtilizacao, valorUtilizado];
//   @override
//   String get aliasedName => _alias ?? 'FIDELIDADE_UTILIZADO';
//   @override
//   String get actualTableName => 'FIDELIDADE_UTILIZADO';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<FidelidadeUtilizado> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('DATA_UTILIZACAO')) {
//       context.handle(
//           _dataUtilizacaoMeta,
//           dataUtilizacao.isAcceptableOrUnknown(
//               data['DATA_UTILIZACAO']!, _dataUtilizacaoMeta));
//     }
//     if (data.containsKey('HORA_UTILIZACAO')) {
//       context.handle(
//           _horaUtilizacaoMeta,
//           horaUtilizacao.isAcceptableOrUnknown(
//               data['HORA_UTILIZACAO']!, _horaUtilizacaoMeta));
//     }
//     if (data.containsKey('VALOR_UTILIZADO')) {
//       context.handle(
//           _valorUtilizadoMeta,
//           valorUtilizado.isAcceptableOrUnknown(
//               data['VALOR_UTILIZADO']!, _valorUtilizadoMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   FidelidadeUtilizado map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return FidelidadeUtilizado(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       dataUtilizacao: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_UTILIZACAO']),
//       horaUtilizacao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}HORA_UTILIZACAO']),
//       valorUtilizado: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_UTILIZADO']),
//     );
//   }

//   @override
//   $FidelidadeUtilizadosTable createAlias(String alias) {
//     return $FidelidadeUtilizadosTable(_db, alias);
//   }
// }

// class FornecedorsCompanion extends UpdateCompanion<Fornecedor> {
//   final Value<int> id;
//   final Value<String?> nome;
//   final Value<String?> fantasia;
//   final Value<String?> email;
//   final Value<String?> url;
//   final Value<String?> cpfCnpj;
//   final Value<String?> rg;
//   final Value<String?> orgaoRg;
//   final Value<DateTime?> dataEmissaoRg;
//   final Value<String?> sexo;
//   final Value<String?> inscricaoEstadual;
//   final Value<String?> inscricaoMunicipal;
//   final Value<String?> tipoPessoa;
//   final Value<DateTime?> dataCadastro;
//   final Value<String?> logradouro;
//   final Value<String?> numero;
//   final Value<String?> complemento;
//   final Value<String?> cep;
//   final Value<String?> bairro;
//   final Value<String?> cidade;
//   final Value<String?> uf;
//   final Value<String?> telefone;
//   final Value<String?> celular;
//   final Value<String?> contato;
//   final Value<int?> codigoIbgeCidade;
//   final Value<int?> codigoIbgeUf;
//   const FornecedorsCompanion({
//     this.id = const Value.absent(),
//     this.nome = const Value.absent(),
//     this.fantasia = const Value.absent(),
//     this.email = const Value.absent(),
//     this.url = const Value.absent(),
//     this.cpfCnpj = const Value.absent(),
//     this.rg = const Value.absent(),
//     this.orgaoRg = const Value.absent(),
//     this.dataEmissaoRg = const Value.absent(),
//     this.sexo = const Value.absent(),
//     this.inscricaoEstadual = const Value.absent(),
//     this.inscricaoMunicipal = const Value.absent(),
//     this.tipoPessoa = const Value.absent(),
//     this.dataCadastro = const Value.absent(),
//     this.logradouro = const Value.absent(),
//     this.numero = const Value.absent(),
//     this.complemento = const Value.absent(),
//     this.cep = const Value.absent(),
//     this.bairro = const Value.absent(),
//     this.cidade = const Value.absent(),
//     this.uf = const Value.absent(),
//     this.telefone = const Value.absent(),
//     this.celular = const Value.absent(),
//     this.contato = const Value.absent(),
//     this.codigoIbgeCidade = const Value.absent(),
//     this.codigoIbgeUf = const Value.absent(),
//   });
//   FornecedorsCompanion.insert({
//     this.id = const Value.absent(),
//     this.nome = const Value.absent(),
//     this.fantasia = const Value.absent(),
//     this.email = const Value.absent(),
//     this.url = const Value.absent(),
//     this.cpfCnpj = const Value.absent(),
//     this.rg = const Value.absent(),
//     this.orgaoRg = const Value.absent(),
//     this.dataEmissaoRg = const Value.absent(),
//     this.sexo = const Value.absent(),
//     this.inscricaoEstadual = const Value.absent(),
//     this.inscricaoMunicipal = const Value.absent(),
//     this.tipoPessoa = const Value.absent(),
//     this.dataCadastro = const Value.absent(),
//     this.logradouro = const Value.absent(),
//     this.numero = const Value.absent(),
//     this.complemento = const Value.absent(),
//     this.cep = const Value.absent(),
//     this.bairro = const Value.absent(),
//     this.cidade = const Value.absent(),
//     this.uf = const Value.absent(),
//     this.telefone = const Value.absent(),
//     this.celular = const Value.absent(),
//     this.contato = const Value.absent(),
//     this.codigoIbgeCidade = const Value.absent(),
//     this.codigoIbgeUf = const Value.absent(),
//   });
//   static Insertable<Fornecedor> custom({
//     Expression<int>? id,
//     Expression<String?>? nome,
//     Expression<String?>? fantasia,
//     Expression<String?>? email,
//     Expression<String?>? url,
//     Expression<String?>? cpfCnpj,
//     Expression<String?>? rg,
//     Expression<String?>? orgaoRg,
//     Expression<DateTime?>? dataEmissaoRg,
//     Expression<String?>? sexo,
//     Expression<String?>? inscricaoEstadual,
//     Expression<String?>? inscricaoMunicipal,
//     Expression<String?>? tipoPessoa,
//     Expression<DateTime?>? dataCadastro,
//     Expression<String?>? logradouro,
//     Expression<String?>? numero,
//     Expression<String?>? complemento,
//     Expression<String?>? cep,
//     Expression<String?>? bairro,
//     Expression<String?>? cidade,
//     Expression<String?>? uf,
//     Expression<String?>? telefone,
//     Expression<String?>? celular,
//     Expression<String?>? contato,
//     Expression<int?>? codigoIbgeCidade,
//     Expression<int?>? codigoIbgeUf,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (nome != null) 'NOME': nome,
//       if (fantasia != null) 'FANTASIA': fantasia,
//       if (email != null) 'EMAIL': email,
//       if (url != null) 'URL': url,
//       if (cpfCnpj != null) 'CPF_CNPJ': cpfCnpj,
//       if (rg != null) 'RG': rg,
//       if (orgaoRg != null) 'ORGAO_RG': orgaoRg,
//       if (dataEmissaoRg != null) 'DATA_EMISSAO_RG': dataEmissaoRg,
//       if (sexo != null) 'SEXO': sexo,
//       if (inscricaoEstadual != null) 'INSCRICAO_ESTADUAL': inscricaoEstadual,
//       if (inscricaoMunicipal != null) 'INSCRICAO_MUNICIPAL': inscricaoMunicipal,
//       if (tipoPessoa != null) 'TIPO_PESSOA': tipoPessoa,
//       if (dataCadastro != null) 'DATA_CADASTRO': dataCadastro,
//       if (logradouro != null) 'LOGRADOURO': logradouro,
//       if (numero != null) 'NUMERO': numero,
//       if (complemento != null) 'COMPLEMENTO': complemento,
//       if (cep != null) 'CEP': cep,
//       if (bairro != null) 'BAIRRO': bairro,
//       if (cidade != null) 'CIDADE': cidade,
//       if (uf != null) 'UF': uf,
//       if (telefone != null) 'TELEFONE': telefone,
//       if (celular != null) 'CELULAR': celular,
//       if (contato != null) 'CONTATO': contato,
//       if (codigoIbgeCidade != null) 'CODIGO_IBGE_CIDADE': codigoIbgeCidade,
//       if (codigoIbgeUf != null) 'CODIGO_IBGE_UF': codigoIbgeUf,
//     });
//   }

//   FornecedorsCompanion copyWith(
//       {Value<int>? id,
//       Value<String?>? nome,
//       Value<String?>? fantasia,
//       Value<String?>? email,
//       Value<String?>? url,
//       Value<String?>? cpfCnpj,
//       Value<String?>? rg,
//       Value<String?>? orgaoRg,
//       Value<DateTime?>? dataEmissaoRg,
//       Value<String?>? sexo,
//       Value<String?>? inscricaoEstadual,
//       Value<String?>? inscricaoMunicipal,
//       Value<String?>? tipoPessoa,
//       Value<DateTime?>? dataCadastro,
//       Value<String?>? logradouro,
//       Value<String?>? numero,
//       Value<String?>? complemento,
//       Value<String?>? cep,
//       Value<String?>? bairro,
//       Value<String?>? cidade,
//       Value<String?>? uf,
//       Value<String?>? telefone,
//       Value<String?>? celular,
//       Value<String?>? contato,
//       Value<int?>? codigoIbgeCidade,
//       Value<int?>? codigoIbgeUf}) {
//     return FornecedorsCompanion(
//       id: id ?? this.id,
//       nome: nome ?? this.nome,
//       fantasia: fantasia ?? this.fantasia,
//       email: email ?? this.email,
//       url: url ?? this.url,
//       cpfCnpj: cpfCnpj ?? this.cpfCnpj,
//       rg: rg ?? this.rg,
//       orgaoRg: orgaoRg ?? this.orgaoRg,
//       dataEmissaoRg: dataEmissaoRg ?? this.dataEmissaoRg,
//       sexo: sexo ?? this.sexo,
//       inscricaoEstadual: inscricaoEstadual ?? this.inscricaoEstadual,
//       inscricaoMunicipal: inscricaoMunicipal ?? this.inscricaoMunicipal,
//       tipoPessoa: tipoPessoa ?? this.tipoPessoa,
//       dataCadastro: dataCadastro ?? this.dataCadastro,
//       logradouro: logradouro ?? this.logradouro,
//       numero: numero ?? this.numero,
//       complemento: complemento ?? this.complemento,
//       cep: cep ?? this.cep,
//       bairro: bairro ?? this.bairro,
//       cidade: cidade ?? this.cidade,
//       uf: uf ?? this.uf,
//       telefone: telefone ?? this.telefone,
//       celular: celular ?? this.celular,
//       contato: contato ?? this.contato,
//       codigoIbgeCidade: codigoIbgeCidade ?? this.codigoIbgeCidade,
//       codigoIbgeUf: codigoIbgeUf ?? this.codigoIbgeUf,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (nome.present) {
//       map['NOME'] = Variable<String?>(nome.value);
//     }
//     if (fantasia.present) {
//       map['FANTASIA'] = Variable<String?>(fantasia.value);
//     }
//     if (email.present) {
//       map['EMAIL'] = Variable<String?>(email.value);
//     }
//     if (url.present) {
//       map['URL'] = Variable<String?>(url.value);
//     }
//     if (cpfCnpj.present) {
//       map['CPF_CNPJ'] = Variable<String?>(cpfCnpj.value);
//     }
//     if (rg.present) {
//       map['RG'] = Variable<String?>(rg.value);
//     }
//     if (orgaoRg.present) {
//       map['ORGAO_RG'] = Variable<String?>(orgaoRg.value);
//     }
//     if (dataEmissaoRg.present) {
//       map['DATA_EMISSAO_RG'] = Variable<DateTime?>(dataEmissaoRg.value);
//     }
//     if (sexo.present) {
//       map['SEXO'] = Variable<String?>(sexo.value);
//     }
//     if (inscricaoEstadual.present) {
//       map['INSCRICAO_ESTADUAL'] = Variable<String?>(inscricaoEstadual.value);
//     }
//     if (inscricaoMunicipal.present) {
//       map['INSCRICAO_MUNICIPAL'] = Variable<String?>(inscricaoMunicipal.value);
//     }
//     if (tipoPessoa.present) {
//       map['TIPO_PESSOA'] = Variable<String?>(tipoPessoa.value);
//     }
//     if (dataCadastro.present) {
//       map['DATA_CADASTRO'] = Variable<DateTime?>(dataCadastro.value);
//     }
//     if (logradouro.present) {
//       map['LOGRADOURO'] = Variable<String?>(logradouro.value);
//     }
//     if (numero.present) {
//       map['NUMERO'] = Variable<String?>(numero.value);
//     }
//     if (complemento.present) {
//       map['COMPLEMENTO'] = Variable<String?>(complemento.value);
//     }
//     if (cep.present) {
//       map['CEP'] = Variable<String?>(cep.value);
//     }
//     if (bairro.present) {
//       map['BAIRRO'] = Variable<String?>(bairro.value);
//     }
//     if (cidade.present) {
//       map['CIDADE'] = Variable<String?>(cidade.value);
//     }
//     if (uf.present) {
//       map['UF'] = Variable<String?>(uf.value);
//     }
//     if (telefone.present) {
//       map['TELEFONE'] = Variable<String?>(telefone.value);
//     }
//     if (celular.present) {
//       map['CELULAR'] = Variable<String?>(celular.value);
//     }
//     if (contato.present) {
//       map['CONTATO'] = Variable<String?>(contato.value);
//     }
//     if (codigoIbgeCidade.present) {
//       map['CODIGO_IBGE_CIDADE'] = Variable<int?>(codigoIbgeCidade.value);
//     }
//     if (codigoIbgeUf.present) {
//       map['CODIGO_IBGE_UF'] = Variable<int?>(codigoIbgeUf.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('FornecedorsCompanion(')
//           ..write('id: $id, ')
//           ..write('nome: $nome, ')
//           ..write('fantasia: $fantasia, ')
//           ..write('email: $email, ')
//           ..write('url: $url, ')
//           ..write('cpfCnpj: $cpfCnpj, ')
//           ..write('rg: $rg, ')
//           ..write('orgaoRg: $orgaoRg, ')
//           ..write('dataEmissaoRg: $dataEmissaoRg, ')
//           ..write('sexo: $sexo, ')
//           ..write('inscricaoEstadual: $inscricaoEstadual, ')
//           ..write('inscricaoMunicipal: $inscricaoMunicipal, ')
//           ..write('tipoPessoa: $tipoPessoa, ')
//           ..write('dataCadastro: $dataCadastro, ')
//           ..write('logradouro: $logradouro, ')
//           ..write('numero: $numero, ')
//           ..write('complemento: $complemento, ')
//           ..write('cep: $cep, ')
//           ..write('bairro: $bairro, ')
//           ..write('cidade: $cidade, ')
//           ..write('uf: $uf, ')
//           ..write('telefone: $telefone, ')
//           ..write('celular: $celular, ')
//           ..write('contato: $contato, ')
//           ..write('codigoIbgeCidade: $codigoIbgeCidade, ')
//           ..write('codigoIbgeUf: $codigoIbgeUf')
//           ..write(')'))
//         .toString();
//   }
// }

// class $FornecedorsTable extends Fornecedors
//     with TableInfo<$FornecedorsTable, Fornecedor> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $FornecedorsTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _nomeMeta = const VerificationMeta('nome');
//   late final GeneratedColumn<String?> nome = GeneratedColumn<String?>(
//       'NOME', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 150),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _fantasiaMeta = const VerificationMeta('fantasia');
//   late final GeneratedColumn<String?> fantasia = GeneratedColumn<String?>(
//       'FANTASIA', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 150),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _emailMeta = const VerificationMeta('email');
//   late final GeneratedColumn<String?> email = GeneratedColumn<String?>(
//       'EMAIL', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _urlMeta = const VerificationMeta('url');
//   late final GeneratedColumn<String?> url = GeneratedColumn<String?>(
//       'URL', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cpfCnpjMeta = const VerificationMeta('cpfCnpj');
//   late final GeneratedColumn<String?> cpfCnpj = GeneratedColumn<String?>(
//       'CPF_CNPJ', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _rgMeta = const VerificationMeta('rg');
//   late final GeneratedColumn<String?> rg = GeneratedColumn<String?>(
//       'RG', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _orgaoRgMeta = const VerificationMeta('orgaoRg');
//   late final GeneratedColumn<String?> orgaoRg = GeneratedColumn<String?>(
//       'ORGAO_RG', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _dataEmissaoRgMeta =
//       const VerificationMeta('dataEmissaoRg');
//   late final GeneratedColumn<DateTime?> dataEmissaoRg =
//       GeneratedColumn<DateTime?>('DATA_EMISSAO_RG', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _sexoMeta = const VerificationMeta('sexo');
//   late final GeneratedColumn<String?> sexo = GeneratedColumn<String?>(
//       'SEXO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _inscricaoEstadualMeta =
//       const VerificationMeta('inscricaoEstadual');
//   late final GeneratedColumn<String?> inscricaoEstadual =
//       GeneratedColumn<String?>('INSCRICAO_ESTADUAL', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 30),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _inscricaoMunicipalMeta =
//       const VerificationMeta('inscricaoMunicipal');
//   late final GeneratedColumn<String?> inscricaoMunicipal =
//       GeneratedColumn<String?>(
//           'INSCRICAO_MUNICIPAL', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 30),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _tipoPessoaMeta = const VerificationMeta('tipoPessoa');
//   late final GeneratedColumn<String?> tipoPessoa = GeneratedColumn<String?>(
//       'TIPO_PESSOA', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _dataCadastroMeta =
//       const VerificationMeta('dataCadastro');
//   late final GeneratedColumn<DateTime?> dataCadastro =
//       GeneratedColumn<DateTime?>('DATA_CADASTRO', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _logradouroMeta = const VerificationMeta('logradouro');
//   late final GeneratedColumn<String?> logradouro = GeneratedColumn<String?>(
//       'LOGRADOURO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _numeroMeta = const VerificationMeta('numero');
//   late final GeneratedColumn<String?> numero = GeneratedColumn<String?>(
//       'NUMERO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 10),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _complementoMeta =
//       const VerificationMeta('complemento');
//   late final GeneratedColumn<String?> complemento = GeneratedColumn<String?>(
//       'COMPLEMENTO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cepMeta = const VerificationMeta('cep');
//   late final GeneratedColumn<String?> cep = GeneratedColumn<String?>(
//       'CEP', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _bairroMeta = const VerificationMeta('bairro');
//   late final GeneratedColumn<String?> bairro = GeneratedColumn<String?>(
//       'BAIRRO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cidadeMeta = const VerificationMeta('cidade');
//   late final GeneratedColumn<String?> cidade = GeneratedColumn<String?>(
//       'CIDADE', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _ufMeta = const VerificationMeta('uf');
//   late final GeneratedColumn<String?> uf = GeneratedColumn<String?>(
//       'UF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _telefoneMeta = const VerificationMeta('telefone');
//   late final GeneratedColumn<String?> telefone = GeneratedColumn<String?>(
//       'TELEFONE', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 15),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _celularMeta = const VerificationMeta('celular');
//   late final GeneratedColumn<String?> celular = GeneratedColumn<String?>(
//       'CELULAR', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 15),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _contatoMeta = const VerificationMeta('contato');
//   late final GeneratedColumn<String?> contato = GeneratedColumn<String?>(
//       'CONTATO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 50),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _codigoIbgeCidadeMeta =
//       const VerificationMeta('codigoIbgeCidade');
//   late final GeneratedColumn<int?> codigoIbgeCidade = GeneratedColumn<int?>(
//       'CODIGO_IBGE_CIDADE', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _codigoIbgeUfMeta =
//       const VerificationMeta('codigoIbgeUf');
//   late final GeneratedColumn<int?> codigoIbgeUf = GeneratedColumn<int?>(
//       'CODIGO_IBGE_UF', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         nome,
//         fantasia,
//         email,
//         url,
//         cpfCnpj,
//         rg,
//         orgaoRg,
//         dataEmissaoRg,
//         sexo,
//         inscricaoEstadual,
//         inscricaoMunicipal,
//         tipoPessoa,
//         dataCadastro,
//         logradouro,
//         numero,
//         complemento,
//         cep,
//         bairro,
//         cidade,
//         uf,
//         telefone,
//         celular,
//         contato,
//         codigoIbgeCidade,
//         codigoIbgeUf
//       ];
//   @override
//   String get aliasedName => _alias ?? 'FORNECEDOR';
//   @override
//   String get actualTableName => 'FORNECEDOR';
//   @override
//   VerificationContext validateIntegrity(Insertable<Fornecedor> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('NOME')) {
//       context.handle(
//           _nomeMeta, nome.isAcceptableOrUnknown(data['NOME']!, _nomeMeta));
//     }
//     if (data.containsKey('FANTASIA')) {
//       context.handle(_fantasiaMeta,
//           fantasia.isAcceptableOrUnknown(data['FANTASIA']!, _fantasiaMeta));
//     }
//     if (data.containsKey('EMAIL')) {
//       context.handle(
//           _emailMeta, email.isAcceptableOrUnknown(data['EMAIL']!, _emailMeta));
//     }
//     if (data.containsKey('URL')) {
//       context.handle(
//           _urlMeta, url.isAcceptableOrUnknown(data['URL']!, _urlMeta));
//     }
//     if (data.containsKey('CPF_CNPJ')) {
//       context.handle(_cpfCnpjMeta,
//           cpfCnpj.isAcceptableOrUnknown(data['CPF_CNPJ']!, _cpfCnpjMeta));
//     }
//     if (data.containsKey('RG')) {
//       context.handle(_rgMeta, rg.isAcceptableOrUnknown(data['RG']!, _rgMeta));
//     }
//     if (data.containsKey('ORGAO_RG')) {
//       context.handle(_orgaoRgMeta,
//           orgaoRg.isAcceptableOrUnknown(data['ORGAO_RG']!, _orgaoRgMeta));
//     }
//     if (data.containsKey('DATA_EMISSAO_RG')) {
//       context.handle(
//           _dataEmissaoRgMeta,
//           dataEmissaoRg.isAcceptableOrUnknown(
//               data['DATA_EMISSAO_RG']!, _dataEmissaoRgMeta));
//     }
//     if (data.containsKey('SEXO')) {
//       context.handle(
//           _sexoMeta, sexo.isAcceptableOrUnknown(data['SEXO']!, _sexoMeta));
//     }
//     if (data.containsKey('INSCRICAO_ESTADUAL')) {
//       context.handle(
//           _inscricaoEstadualMeta,
//           inscricaoEstadual.isAcceptableOrUnknown(
//               data['INSCRICAO_ESTADUAL']!, _inscricaoEstadualMeta));
//     }
//     if (data.containsKey('INSCRICAO_MUNICIPAL')) {
//       context.handle(
//           _inscricaoMunicipalMeta,
//           inscricaoMunicipal.isAcceptableOrUnknown(
//               data['INSCRICAO_MUNICIPAL']!, _inscricaoMunicipalMeta));
//     }
//     if (data.containsKey('TIPO_PESSOA')) {
//       context.handle(
//           _tipoPessoaMeta,
//           tipoPessoa.isAcceptableOrUnknown(
//               data['TIPO_PESSOA']!, _tipoPessoaMeta));
//     }
//     if (data.containsKey('DATA_CADASTRO')) {
//       context.handle(
//           _dataCadastroMeta,
//           dataCadastro.isAcceptableOrUnknown(
//               data['DATA_CADASTRO']!, _dataCadastroMeta));
//     }
//     if (data.containsKey('LOGRADOURO')) {
//       context.handle(
//           _logradouroMeta,
//           logradouro.isAcceptableOrUnknown(
//               data['LOGRADOURO']!, _logradouroMeta));
//     }
//     if (data.containsKey('NUMERO')) {
//       context.handle(_numeroMeta,
//           numero.isAcceptableOrUnknown(data['NUMERO']!, _numeroMeta));
//     }
//     if (data.containsKey('COMPLEMENTO')) {
//       context.handle(
//           _complementoMeta,
//           complemento.isAcceptableOrUnknown(
//               data['COMPLEMENTO']!, _complementoMeta));
//     }
//     if (data.containsKey('CEP')) {
//       context.handle(
//           _cepMeta, cep.isAcceptableOrUnknown(data['CEP']!, _cepMeta));
//     }
//     if (data.containsKey('BAIRRO')) {
//       context.handle(_bairroMeta,
//           bairro.isAcceptableOrUnknown(data['BAIRRO']!, _bairroMeta));
//     }
//     if (data.containsKey('CIDADE')) {
//       context.handle(_cidadeMeta,
//           cidade.isAcceptableOrUnknown(data['CIDADE']!, _cidadeMeta));
//     }
//     if (data.containsKey('UF')) {
//       context.handle(_ufMeta, uf.isAcceptableOrUnknown(data['UF']!, _ufMeta));
//     }
//     if (data.containsKey('TELEFONE')) {
//       context.handle(_telefoneMeta,
//           telefone.isAcceptableOrUnknown(data['TELEFONE']!, _telefoneMeta));
//     }
//     if (data.containsKey('CELULAR')) {
//       context.handle(_celularMeta,
//           celular.isAcceptableOrUnknown(data['CELULAR']!, _celularMeta));
//     }
//     if (data.containsKey('CONTATO')) {
//       context.handle(_contatoMeta,
//           contato.isAcceptableOrUnknown(data['CONTATO']!, _contatoMeta));
//     }
//     if (data.containsKey('CODIGO_IBGE_CIDADE')) {
//       context.handle(
//           _codigoIbgeCidadeMeta,
//           codigoIbgeCidade.isAcceptableOrUnknown(
//               data['CODIGO_IBGE_CIDADE']!, _codigoIbgeCidadeMeta));
//     }
//     if (data.containsKey('CODIGO_IBGE_UF')) {
//       context.handle(
//           _codigoIbgeUfMeta,
//           codigoIbgeUf.isAcceptableOrUnknown(
//               data['CODIGO_IBGE_UF']!, _codigoIbgeUfMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   Fornecedor map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return Fornecedor(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       nome: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NOME']),
//       fantasia: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}FANTASIA']),
//       email: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}EMAIL']),
//       url: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}URL']),
//       cpfCnpj: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CPF_CNPJ']),
//       rg: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}RG']),
//       orgaoRg: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ORGAO_RG']),
//       dataEmissaoRg: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_EMISSAO_RG']),
//       sexo: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}SEXO']),
//       inscricaoEstadual: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}INSCRICAO_ESTADUAL']),
//       inscricaoMunicipal: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}INSCRICAO_MUNICIPAL']),
//       tipoPessoa: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TIPO_PESSOA']),
//       dataCadastro: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_CADASTRO']),
//       logradouro: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}LOGRADOURO']),
//       numero: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO']),
//       complemento: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}COMPLEMENTO']),
//       cep: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CEP']),
//       bairro: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}BAIRRO']),
//       cidade: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CIDADE']),
//       uf: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}UF']),
//       telefone: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TELEFONE']),
//       celular: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CELULAR']),
//       contato: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CONTATO']),
//       codigoIbgeCidade: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}CODIGO_IBGE_CIDADE']),
//       codigoIbgeUf: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO_IBGE_UF']),
//     );
//   }

//   @override
//   $FornecedorsTable createAlias(String alias) {
//     return $FornecedorsTable(_db, alias);
//   }
// }

// class IbptsCompanion extends UpdateCompanion<Ibpt> {
//   final Value<int> id;
//   final Value<String?> ncm;
//   final Value<String?> ex;
//   final Value<String?> tipo;
//   final Value<String?> descricao;
//   final Value<double?> nacionalFederal;
//   final Value<double?> importadosFederal;
//   final Value<double?> estadual;
//   final Value<double?> municipal;
//   final Value<DateTime?> vigenciaInicio;
//   final Value<DateTime?> vigenciaFim;
//   final Value<String?> chave;
//   final Value<String?> versao;
//   final Value<String?> fonte;
//   const IbptsCompanion({
//     this.id = const Value.absent(),
//     this.ncm = const Value.absent(),
//     this.ex = const Value.absent(),
//     this.tipo = const Value.absent(),
//     this.descricao = const Value.absent(),
//     this.nacionalFederal = const Value.absent(),
//     this.importadosFederal = const Value.absent(),
//     this.estadual = const Value.absent(),
//     this.municipal = const Value.absent(),
//     this.vigenciaInicio = const Value.absent(),
//     this.vigenciaFim = const Value.absent(),
//     this.chave = const Value.absent(),
//     this.versao = const Value.absent(),
//     this.fonte = const Value.absent(),
//   });
//   IbptsCompanion.insert({
//     this.id = const Value.absent(),
//     this.ncm = const Value.absent(),
//     this.ex = const Value.absent(),
//     this.tipo = const Value.absent(),
//     this.descricao = const Value.absent(),
//     this.nacionalFederal = const Value.absent(),
//     this.importadosFederal = const Value.absent(),
//     this.estadual = const Value.absent(),
//     this.municipal = const Value.absent(),
//     this.vigenciaInicio = const Value.absent(),
//     this.vigenciaFim = const Value.absent(),
//     this.chave = const Value.absent(),
//     this.versao = const Value.absent(),
//     this.fonte = const Value.absent(),
//   });
//   static Insertable<Ibpt> custom({
//     Expression<int>? id,
//     Expression<String?>? ncm,
//     Expression<String?>? ex,
//     Expression<String?>? tipo,
//     Expression<String?>? descricao,
//     Expression<double?>? nacionalFederal,
//     Expression<double?>? importadosFederal,
//     Expression<double?>? estadual,
//     Expression<double?>? municipal,
//     Expression<DateTime?>? vigenciaInicio,
//     Expression<DateTime?>? vigenciaFim,
//     Expression<String?>? chave,
//     Expression<String?>? versao,
//     Expression<String?>? fonte,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (ncm != null) 'NCM': ncm,
//       if (ex != null) 'EX': ex,
//       if (tipo != null) 'TIPO': tipo,
//       if (descricao != null) 'DESCRICAO': descricao,
//       if (nacionalFederal != null) 'NACIONAL_FEDERAL': nacionalFederal,
//       if (importadosFederal != null) 'IMPORTADOS_FEDERAL': importadosFederal,
//       if (estadual != null) 'ESTADUAL': estadual,
//       if (municipal != null) 'MUNICIPAL': municipal,
//       if (vigenciaInicio != null) 'VIGENCIA_INICIO': vigenciaInicio,
//       if (vigenciaFim != null) 'VIGENCIA_FIM': vigenciaFim,
//       if (chave != null) 'CHAVE': chave,
//       if (versao != null) 'VERSAO': versao,
//       if (fonte != null) 'FONTE': fonte,
//     });
//   }

//   IbptsCompanion copyWith(
//       {Value<int>? id,
//       Value<String?>? ncm,
//       Value<String?>? ex,
//       Value<String?>? tipo,
//       Value<String?>? descricao,
//       Value<double?>? nacionalFederal,
//       Value<double?>? importadosFederal,
//       Value<double?>? estadual,
//       Value<double?>? municipal,
//       Value<DateTime?>? vigenciaInicio,
//       Value<DateTime?>? vigenciaFim,
//       Value<String?>? chave,
//       Value<String?>? versao,
//       Value<String?>? fonte}) {
//     return IbptsCompanion(
//       id: id ?? this.id,
//       ncm: ncm ?? this.ncm,
//       ex: ex ?? this.ex,
//       tipo: tipo ?? this.tipo,
//       descricao: descricao ?? this.descricao,
//       nacionalFederal: nacionalFederal ?? this.nacionalFederal,
//       importadosFederal: importadosFederal ?? this.importadosFederal,
//       estadual: estadual ?? this.estadual,
//       municipal: municipal ?? this.municipal,
//       vigenciaInicio: vigenciaInicio ?? this.vigenciaInicio,
//       vigenciaFim: vigenciaFim ?? this.vigenciaFim,
//       chave: chave ?? this.chave,
//       versao: versao ?? this.versao,
//       fonte: fonte ?? this.fonte,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (ncm.present) {
//       map['NCM'] = Variable<String?>(ncm.value);
//     }
//     if (ex.present) {
//       map['EX'] = Variable<String?>(ex.value);
//     }
//     if (tipo.present) {
//       map['TIPO'] = Variable<String?>(tipo.value);
//     }
//     if (descricao.present) {
//       map['DESCRICAO'] = Variable<String?>(descricao.value);
//     }
//     if (nacionalFederal.present) {
//       map['NACIONAL_FEDERAL'] = Variable<double?>(nacionalFederal.value);
//     }
//     if (importadosFederal.present) {
//       map['IMPORTADOS_FEDERAL'] = Variable<double?>(importadosFederal.value);
//     }
//     if (estadual.present) {
//       map['ESTADUAL'] = Variable<double?>(estadual.value);
//     }
//     if (municipal.present) {
//       map['MUNICIPAL'] = Variable<double?>(municipal.value);
//     }
//     if (vigenciaInicio.present) {
//       map['VIGENCIA_INICIO'] = Variable<DateTime?>(vigenciaInicio.value);
//     }
//     if (vigenciaFim.present) {
//       map['VIGENCIA_FIM'] = Variable<DateTime?>(vigenciaFim.value);
//     }
//     if (chave.present) {
//       map['CHAVE'] = Variable<String?>(chave.value);
//     }
//     if (versao.present) {
//       map['VERSAO'] = Variable<String?>(versao.value);
//     }
//     if (fonte.present) {
//       map['FONTE'] = Variable<String?>(fonte.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('IbptsCompanion(')
//           ..write('id: $id, ')
//           ..write('ncm: $ncm, ')
//           ..write('ex: $ex, ')
//           ..write('tipo: $tipo, ')
//           ..write('descricao: $descricao, ')
//           ..write('nacionalFederal: $nacionalFederal, ')
//           ..write('importadosFederal: $importadosFederal, ')
//           ..write('estadual: $estadual, ')
//           ..write('municipal: $municipal, ')
//           ..write('vigenciaInicio: $vigenciaInicio, ')
//           ..write('vigenciaFim: $vigenciaFim, ')
//           ..write('chave: $chave, ')
//           ..write('versao: $versao, ')
//           ..write('fonte: $fonte')
//           ..write(')'))
//         .toString();
//   }
// }

// class $IbptsTable extends Ibpts with TableInfo<$IbptsTable, Ibpt> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $IbptsTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _ncmMeta = const VerificationMeta('ncm');
//   late final GeneratedColumn<String?> ncm = GeneratedColumn<String?>(
//       'NCM', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _exMeta = const VerificationMeta('ex');
//   late final GeneratedColumn<String?> ex = GeneratedColumn<String?>(
//       'EX', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _tipoMeta = const VerificationMeta('tipo');
//   late final GeneratedColumn<String?> tipo = GeneratedColumn<String?>(
//       'TIPO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _descricaoMeta = const VerificationMeta('descricao');
//   late final GeneratedColumn<String?> descricao = GeneratedColumn<String?>(
//       'DESCRICAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _nacionalFederalMeta =
//       const VerificationMeta('nacionalFederal');
//   late final GeneratedColumn<double?> nacionalFederal =
//       GeneratedColumn<double?>('NACIONAL_FEDERAL', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _importadosFederalMeta =
//       const VerificationMeta('importadosFederal');
//   late final GeneratedColumn<double?> importadosFederal =
//       GeneratedColumn<double?>('IMPORTADOS_FEDERAL', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _estadualMeta = const VerificationMeta('estadual');
//   late final GeneratedColumn<double?> estadual = GeneratedColumn<double?>(
//       'ESTADUAL', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _municipalMeta = const VerificationMeta('municipal');
//   late final GeneratedColumn<double?> municipal = GeneratedColumn<double?>(
//       'MUNICIPAL', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _vigenciaInicioMeta =
//       const VerificationMeta('vigenciaInicio');
//   late final GeneratedColumn<DateTime?> vigenciaInicio =
//       GeneratedColumn<DateTime?>('VIGENCIA_INICIO', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _vigenciaFimMeta =
//       const VerificationMeta('vigenciaFim');
//   late final GeneratedColumn<DateTime?> vigenciaFim =
//       GeneratedColumn<DateTime?>('VIGENCIA_FIM', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _chaveMeta = const VerificationMeta('chave');
//   late final GeneratedColumn<String?> chave = GeneratedColumn<String?>(
//       'CHAVE', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 6),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _versaoMeta = const VerificationMeta('versao');
//   late final GeneratedColumn<String?> versao = GeneratedColumn<String?>(
//       'VERSAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 6),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _fonteMeta = const VerificationMeta('fonte');
//   late final GeneratedColumn<String?> fonte = GeneratedColumn<String?>(
//       'FONTE', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 34),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         ncm,
//         ex,
//         tipo,
//         descricao,
//         nacionalFederal,
//         importadosFederal,
//         estadual,
//         municipal,
//         vigenciaInicio,
//         vigenciaFim,
//         chave,
//         versao,
//         fonte
//       ];
//   @override
//   String get aliasedName => _alias ?? 'IBPT';
//   @override
//   String get actualTableName => 'IBPT';
//   @override
//   VerificationContext validateIntegrity(Insertable<Ibpt> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('NCM')) {
//       context.handle(
//           _ncmMeta, ncm.isAcceptableOrUnknown(data['NCM']!, _ncmMeta));
//     }
//     if (data.containsKey('EX')) {
//       context.handle(_exMeta, ex.isAcceptableOrUnknown(data['EX']!, _exMeta));
//     }
//     if (data.containsKey('TIPO')) {
//       context.handle(
//           _tipoMeta, tipo.isAcceptableOrUnknown(data['TIPO']!, _tipoMeta));
//     }
//     if (data.containsKey('DESCRICAO')) {
//       context.handle(_descricaoMeta,
//           descricao.isAcceptableOrUnknown(data['DESCRICAO']!, _descricaoMeta));
//     }
//     if (data.containsKey('NACIONAL_FEDERAL')) {
//       context.handle(
//           _nacionalFederalMeta,
//           nacionalFederal.isAcceptableOrUnknown(
//               data['NACIONAL_FEDERAL']!, _nacionalFederalMeta));
//     }
//     if (data.containsKey('IMPORTADOS_FEDERAL')) {
//       context.handle(
//           _importadosFederalMeta,
//           importadosFederal.isAcceptableOrUnknown(
//               data['IMPORTADOS_FEDERAL']!, _importadosFederalMeta));
//     }
//     if (data.containsKey('ESTADUAL')) {
//       context.handle(_estadualMeta,
//           estadual.isAcceptableOrUnknown(data['ESTADUAL']!, _estadualMeta));
//     }
//     if (data.containsKey('MUNICIPAL')) {
//       context.handle(_municipalMeta,
//           municipal.isAcceptableOrUnknown(data['MUNICIPAL']!, _municipalMeta));
//     }
//     if (data.containsKey('VIGENCIA_INICIO')) {
//       context.handle(
//           _vigenciaInicioMeta,
//           vigenciaInicio.isAcceptableOrUnknown(
//               data['VIGENCIA_INICIO']!, _vigenciaInicioMeta));
//     }
//     if (data.containsKey('VIGENCIA_FIM')) {
//       context.handle(
//           _vigenciaFimMeta,
//           vigenciaFim.isAcceptableOrUnknown(
//               data['VIGENCIA_FIM']!, _vigenciaFimMeta));
//     }
//     if (data.containsKey('CHAVE')) {
//       context.handle(
//           _chaveMeta, chave.isAcceptableOrUnknown(data['CHAVE']!, _chaveMeta));
//     }
//     if (data.containsKey('VERSAO')) {
//       context.handle(_versaoMeta,
//           versao.isAcceptableOrUnknown(data['VERSAO']!, _versaoMeta));
//     }
//     if (data.containsKey('FONTE')) {
//       context.handle(
//           _fonteMeta, fonte.isAcceptableOrUnknown(data['FONTE']!, _fonteMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   Ibpt map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return Ibpt(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       ncm: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NCM']),
//       ex: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}EX']),
//       tipo: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TIPO']),
//       descricao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DESCRICAO']),
//       nacionalFederal: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NACIONAL_FEDERAL']),
//       importadosFederal: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}IMPORTADOS_FEDERAL']),
//       estadual: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ESTADUAL']),
//       municipal: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}MUNICIPAL']),
//       vigenciaInicio: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VIGENCIA_INICIO']),
//       vigenciaFim: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VIGENCIA_FIM']),
//       chave: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CHAVE']),
//       versao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VERSAO']),
//       fonte: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}FONTE']),
//     );
//   }

//   @override
//   $IbptsTable createAlias(String alias) {
//     return $IbptsTable(_db, alias);
//   }
// }

// class LogImportacaosCompanion extends UpdateCompanion<LogImportacao> {
//   final Value<int> id;
//   final Value<DateTime?> dataImportacao;
//   final Value<String?> horaImportacao;
//   final Value<String?> erro;
//   final Value<String?> registro;
//   const LogImportacaosCompanion({
//     this.id = const Value.absent(),
//     this.dataImportacao = const Value.absent(),
//     this.horaImportacao = const Value.absent(),
//     this.erro = const Value.absent(),
//     this.registro = const Value.absent(),
//   });
//   LogImportacaosCompanion.insert({
//     this.id = const Value.absent(),
//     this.dataImportacao = const Value.absent(),
//     this.horaImportacao = const Value.absent(),
//     this.erro = const Value.absent(),
//     this.registro = const Value.absent(),
//   });
//   static Insertable<LogImportacao> custom({
//     Expression<int>? id,
//     Expression<DateTime?>? dataImportacao,
//     Expression<String?>? horaImportacao,
//     Expression<String?>? erro,
//     Expression<String?>? registro,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (dataImportacao != null) 'DATA_IMPORTACAO': dataImportacao,
//       if (horaImportacao != null) 'HORA_IMPORTACAO': horaImportacao,
//       if (erro != null) 'ERRO': erro,
//       if (registro != null) 'REGISTRO': registro,
//     });
//   }

//   LogImportacaosCompanion copyWith(
//       {Value<int>? id,
//       Value<DateTime?>? dataImportacao,
//       Value<String?>? horaImportacao,
//       Value<String?>? erro,
//       Value<String?>? registro}) {
//     return LogImportacaosCompanion(
//       id: id ?? this.id,
//       dataImportacao: dataImportacao ?? this.dataImportacao,
//       horaImportacao: horaImportacao ?? this.horaImportacao,
//       erro: erro ?? this.erro,
//       registro: registro ?? this.registro,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (dataImportacao.present) {
//       map['DATA_IMPORTACAO'] = Variable<DateTime?>(dataImportacao.value);
//     }
//     if (horaImportacao.present) {
//       map['HORA_IMPORTACAO'] = Variable<String?>(horaImportacao.value);
//     }
//     if (erro.present) {
//       map['ERRO'] = Variable<String?>(erro.value);
//     }
//     if (registro.present) {
//       map['REGISTRO'] = Variable<String?>(registro.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('LogImportacaosCompanion(')
//           ..write('id: $id, ')
//           ..write('dataImportacao: $dataImportacao, ')
//           ..write('horaImportacao: $horaImportacao, ')
//           ..write('erro: $erro, ')
//           ..write('registro: $registro')
//           ..write(')'))
//         .toString();
//   }
// }

// class $LogImportacaosTable extends LogImportacaos
//     with TableInfo<$LogImportacaosTable, LogImportacao> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $LogImportacaosTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _dataImportacaoMeta =
//       const VerificationMeta('dataImportacao');
//   late final GeneratedColumn<DateTime?> dataImportacao =
//       GeneratedColumn<DateTime?>('DATA_IMPORTACAO', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _horaImportacaoMeta =
//       const VerificationMeta('horaImportacao');
//   late final GeneratedColumn<String?> horaImportacao = GeneratedColumn<String?>(
//       'HORA_IMPORTACAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _erroMeta = const VerificationMeta('erro');
//   late final GeneratedColumn<String?> erro = GeneratedColumn<String?>(
//       'ERRO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _registroMeta = const VerificationMeta('registro');
//   late final GeneratedColumn<String?> registro = GeneratedColumn<String?>(
//       'REGISTRO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns =>
//       [id, dataImportacao, horaImportacao, erro, registro];
//   @override
//   String get aliasedName => _alias ?? 'LOG_IMPORTACAO';
//   @override
//   String get actualTableName => 'LOG_IMPORTACAO';
//   @override
//   VerificationContext validateIntegrity(Insertable<LogImportacao> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('DATA_IMPORTACAO')) {
//       context.handle(
//           _dataImportacaoMeta,
//           dataImportacao.isAcceptableOrUnknown(
//               data['DATA_IMPORTACAO']!, _dataImportacaoMeta));
//     }
//     if (data.containsKey('HORA_IMPORTACAO')) {
//       context.handle(
//           _horaImportacaoMeta,
//           horaImportacao.isAcceptableOrUnknown(
//               data['HORA_IMPORTACAO']!, _horaImportacaoMeta));
//     }
//     if (data.containsKey('ERRO')) {
//       context.handle(
//           _erroMeta, erro.isAcceptableOrUnknown(data['ERRO']!, _erroMeta));
//     }
//     if (data.containsKey('REGISTRO')) {
//       context.handle(_registroMeta,
//           registro.isAcceptableOrUnknown(data['REGISTRO']!, _registroMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   LogImportacao map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return LogImportacao(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       dataImportacao: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_IMPORTACAO']),
//       horaImportacao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}HORA_IMPORTACAO']),
//       erro: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ERRO']),
//       registro: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}REGISTRO']),
//     );
//   }

//   @override
//   $LogImportacaosTable createAlias(String alias) {
//     return $LogImportacaosTable(_db, alias);
//   }
// }

// class MesasCompanion extends UpdateCompanion<Mesa> {
//   final Value<int> id;
//   final Value<String?> numero;
//   final Value<int?> quantidadeCadeiras;
//   final Value<int?> quantidadeCadeirasCrianca;
//   final Value<String?> disponivel;
//   final Value<String?> observacao;
//   const MesasCompanion({
//     this.id = const Value.absent(),
//     this.numero = const Value.absent(),
//     this.quantidadeCadeiras = const Value.absent(),
//     this.quantidadeCadeirasCrianca = const Value.absent(),
//     this.disponivel = const Value.absent(),
//     this.observacao = const Value.absent(),
//   });
//   MesasCompanion.insert({
//     this.id = const Value.absent(),
//     this.numero = const Value.absent(),
//     this.quantidadeCadeiras = const Value.absent(),
//     this.quantidadeCadeirasCrianca = const Value.absent(),
//     this.disponivel = const Value.absent(),
//     this.observacao = const Value.absent(),
//   });
//   static Insertable<Mesa> custom({
//     Expression<int>? id,
//     Expression<String?>? numero,
//     Expression<int?>? quantidadeCadeiras,
//     Expression<int?>? quantidadeCadeirasCrianca,
//     Expression<String?>? disponivel,
//     Expression<String?>? observacao,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (numero != null) 'NUMERO': numero,
//       if (quantidadeCadeiras != null) 'QUANTIDADE_CADEIRAS': quantidadeCadeiras,
//       if (quantidadeCadeirasCrianca != null)
//         'QUANTIDADE_CADEIRAS_CRIANCA': quantidadeCadeirasCrianca,
//       if (disponivel != null) 'DISPONIVEL': disponivel,
//       if (observacao != null) 'OBSERVACAO': observacao,
//     });
//   }

//   MesasCompanion copyWith(
//       {Value<int>? id,
//       Value<String?>? numero,
//       Value<int?>? quantidadeCadeiras,
//       Value<int?>? quantidadeCadeirasCrianca,
//       Value<String?>? disponivel,
//       Value<String?>? observacao}) {
//     return MesasCompanion(
//       id: id ?? this.id,
//       numero: numero ?? this.numero,
//       quantidadeCadeiras: quantidadeCadeiras ?? this.quantidadeCadeiras,
//       quantidadeCadeirasCrianca:
//           quantidadeCadeirasCrianca ?? this.quantidadeCadeirasCrianca,
//       disponivel: disponivel ?? this.disponivel,
//       observacao: observacao ?? this.observacao,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (numero.present) {
//       map['NUMERO'] = Variable<String?>(numero.value);
//     }
//     if (quantidadeCadeiras.present) {
//       map['QUANTIDADE_CADEIRAS'] = Variable<int?>(quantidadeCadeiras.value);
//     }
//     if (quantidadeCadeirasCrianca.present) {
//       map['QUANTIDADE_CADEIRAS_CRIANCA'] =
//           Variable<int?>(quantidadeCadeirasCrianca.value);
//     }
//     if (disponivel.present) {
//       map['DISPONIVEL'] = Variable<String?>(disponivel.value);
//     }
//     if (observacao.present) {
//       map['OBSERVACAO'] = Variable<String?>(observacao.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('MesasCompanion(')
//           ..write('id: $id, ')
//           ..write('numero: $numero, ')
//           ..write('quantidadeCadeiras: $quantidadeCadeiras, ')
//           ..write('quantidadeCadeirasCrianca: $quantidadeCadeirasCrianca, ')
//           ..write('disponivel: $disponivel, ')
//           ..write('observacao: $observacao')
//           ..write(')'))
//         .toString();
//   }
// }

// class $MesasTable extends Mesas with TableInfo<$MesasTable, Mesa> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $MesasTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _numeroMeta = const VerificationMeta('numero');
//   late final GeneratedColumn<String?> numero = GeneratedColumn<String?>(
//       'NUMERO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 10),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _quantidadeCadeirasMeta =
//       const VerificationMeta('quantidadeCadeiras');
//   late final GeneratedColumn<int?> quantidadeCadeiras = GeneratedColumn<int?>(
//       'QUANTIDADE_CADEIRAS', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _quantidadeCadeirasCriancaMeta =
//       const VerificationMeta('quantidadeCadeirasCrianca');
//   late final GeneratedColumn<int?> quantidadeCadeirasCrianca =
//       GeneratedColumn<int?>('QUANTIDADE_CADEIRAS_CRIANCA', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _disponivelMeta = const VerificationMeta('disponivel');
//   late final GeneratedColumn<String?> disponivel = GeneratedColumn<String?>(
//       'DISPONIVEL', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _observacaoMeta = const VerificationMeta('observacao');
//   late final GeneratedColumn<String?> observacao = GeneratedColumn<String?>(
//       'OBSERVACAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         numero,
//         quantidadeCadeiras,
//         quantidadeCadeirasCrianca,
//         disponivel,
//         observacao
//       ];
//   @override
//   String get aliasedName => _alias ?? 'MESA';
//   @override
//   String get actualTableName => 'MESA';
//   @override
//   VerificationContext validateIntegrity(Insertable<Mesa> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('NUMERO')) {
//       context.handle(_numeroMeta,
//           numero.isAcceptableOrUnknown(data['NUMERO']!, _numeroMeta));
//     }
//     if (data.containsKey('QUANTIDADE_CADEIRAS')) {
//       context.handle(
//           _quantidadeCadeirasMeta,
//           quantidadeCadeiras.isAcceptableOrUnknown(
//               data['QUANTIDADE_CADEIRAS']!, _quantidadeCadeirasMeta));
//     }
//     if (data.containsKey('QUANTIDADE_CADEIRAS_CRIANCA')) {
//       context.handle(
//           _quantidadeCadeirasCriancaMeta,
//           quantidadeCadeirasCrianca.isAcceptableOrUnknown(
//               data['QUANTIDADE_CADEIRAS_CRIANCA']!,
//               _quantidadeCadeirasCriancaMeta));
//     }
//     if (data.containsKey('DISPONIVEL')) {
//       context.handle(
//           _disponivelMeta,
//           disponivel.isAcceptableOrUnknown(
//               data['DISPONIVEL']!, _disponivelMeta));
//     }
//     if (data.containsKey('OBSERVACAO')) {
//       context.handle(
//           _observacaoMeta,
//           observacao.isAcceptableOrUnknown(
//               data['OBSERVACAO']!, _observacaoMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   Mesa map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return Mesa(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       numero: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO']),
//       quantidadeCadeiras: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}QUANTIDADE_CADEIRAS']),
//       quantidadeCadeirasCrianca: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}QUANTIDADE_CADEIRAS_CRIANCA']),
//       disponivel: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DISPONIVEL']),
//       observacao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}OBSERVACAO']),
//     );
//   }

//   @override
//   $MesasTable createAlias(String alias) {
//     return $MesasTable(_db, alias);
//   }
// }

// class NfcePlanoPagamentosCompanion extends UpdateCompanion<NfcePlanoPagamento> {
//   final Value<int> id;
//   final Value<DateTime?> dataSolicitacao;
//   final Value<DateTime?> dataPagamento;
//   final Value<String?> tipoPlano;
//   final Value<double?> valor;
//   final Value<String?> statusPagamento;
//   final Value<String?> codigoTransacao;
//   final Value<String?> metodoPagamento;
//   final Value<String?> codigoTipoPagamento;
//   final Value<DateTime?> dataPlanoExpira;
//   final Value<String?> hashRegistro;
//   const NfcePlanoPagamentosCompanion({
//     this.id = const Value.absent(),
//     this.dataSolicitacao = const Value.absent(),
//     this.dataPagamento = const Value.absent(),
//     this.tipoPlano = const Value.absent(),
//     this.valor = const Value.absent(),
//     this.statusPagamento = const Value.absent(),
//     this.codigoTransacao = const Value.absent(),
//     this.metodoPagamento = const Value.absent(),
//     this.codigoTipoPagamento = const Value.absent(),
//     this.dataPlanoExpira = const Value.absent(),
//     this.hashRegistro = const Value.absent(),
//   });
//   NfcePlanoPagamentosCompanion.insert({
//     this.id = const Value.absent(),
//     this.dataSolicitacao = const Value.absent(),
//     this.dataPagamento = const Value.absent(),
//     this.tipoPlano = const Value.absent(),
//     this.valor = const Value.absent(),
//     this.statusPagamento = const Value.absent(),
//     this.codigoTransacao = const Value.absent(),
//     this.metodoPagamento = const Value.absent(),
//     this.codigoTipoPagamento = const Value.absent(),
//     this.dataPlanoExpira = const Value.absent(),
//     this.hashRegistro = const Value.absent(),
//   });
//   static Insertable<NfcePlanoPagamento> custom({
//     Expression<int>? id,
//     Expression<DateTime?>? dataSolicitacao,
//     Expression<DateTime?>? dataPagamento,
//     Expression<String?>? tipoPlano,
//     Expression<double?>? valor,
//     Expression<String?>? statusPagamento,
//     Expression<String?>? codigoTransacao,
//     Expression<String?>? metodoPagamento,
//     Expression<String?>? codigoTipoPagamento,
//     Expression<DateTime?>? dataPlanoExpira,
//     Expression<String?>? hashRegistro,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (dataSolicitacao != null) 'DATA_SOLICITACAO': dataSolicitacao,
//       if (dataPagamento != null) 'DATA_PAGAMENTO': dataPagamento,
//       if (tipoPlano != null) 'TIPO_PLANO': tipoPlano,
//       if (valor != null) 'VALOR': valor,
//       if (statusPagamento != null) 'STATUS_PAGAMENTO': statusPagamento,
//       if (codigoTransacao != null) 'CODIGO_TRANSACAO': codigoTransacao,
//       if (metodoPagamento != null) 'METODO_PAGAMENTO': metodoPagamento,
//       if (codigoTipoPagamento != null)
//         'CODIGO_TIPO_PAGAMENTO': codigoTipoPagamento,
//       if (dataPlanoExpira != null) 'DATA_PLANO_EXPIRA': dataPlanoExpira,
//       if (hashRegistro != null) 'HASH_REGISTRO': hashRegistro,
//     });
//   }

//   NfcePlanoPagamentosCompanion copyWith(
//       {Value<int>? id,
//       Value<DateTime?>? dataSolicitacao,
//       Value<DateTime?>? dataPagamento,
//       Value<String?>? tipoPlano,
//       Value<double?>? valor,
//       Value<String?>? statusPagamento,
//       Value<String?>? codigoTransacao,
//       Value<String?>? metodoPagamento,
//       Value<String?>? codigoTipoPagamento,
//       Value<DateTime?>? dataPlanoExpira,
//       Value<String?>? hashRegistro}) {
//     return NfcePlanoPagamentosCompanion(
//       id: id ?? this.id,
//       dataSolicitacao: dataSolicitacao ?? this.dataSolicitacao,
//       dataPagamento: dataPagamento ?? this.dataPagamento,
//       tipoPlano: tipoPlano ?? this.tipoPlano,
//       valor: valor ?? this.valor,
//       statusPagamento: statusPagamento ?? this.statusPagamento,
//       codigoTransacao: codigoTransacao ?? this.codigoTransacao,
//       metodoPagamento: metodoPagamento ?? this.metodoPagamento,
//       codigoTipoPagamento: codigoTipoPagamento ?? this.codigoTipoPagamento,
//       dataPlanoExpira: dataPlanoExpira ?? this.dataPlanoExpira,
//       hashRegistro: hashRegistro ?? this.hashRegistro,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (dataSolicitacao.present) {
//       map['DATA_SOLICITACAO'] = Variable<DateTime?>(dataSolicitacao.value);
//     }
//     if (dataPagamento.present) {
//       map['DATA_PAGAMENTO'] = Variable<DateTime?>(dataPagamento.value);
//     }
//     if (tipoPlano.present) {
//       map['TIPO_PLANO'] = Variable<String?>(tipoPlano.value);
//     }
//     if (valor.present) {
//       map['VALOR'] = Variable<double?>(valor.value);
//     }
//     if (statusPagamento.present) {
//       map['STATUS_PAGAMENTO'] = Variable<String?>(statusPagamento.value);
//     }
//     if (codigoTransacao.present) {
//       map['CODIGO_TRANSACAO'] = Variable<String?>(codigoTransacao.value);
//     }
//     if (metodoPagamento.present) {
//       map['METODO_PAGAMENTO'] = Variable<String?>(metodoPagamento.value);
//     }
//     if (codigoTipoPagamento.present) {
//       map['CODIGO_TIPO_PAGAMENTO'] =
//           Variable<String?>(codigoTipoPagamento.value);
//     }
//     if (dataPlanoExpira.present) {
//       map['DATA_PLANO_EXPIRA'] = Variable<DateTime?>(dataPlanoExpira.value);
//     }
//     if (hashRegistro.present) {
//       map['HASH_REGISTRO'] = Variable<String?>(hashRegistro.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfcePlanoPagamentosCompanion(')
//           ..write('id: $id, ')
//           ..write('dataSolicitacao: $dataSolicitacao, ')
//           ..write('dataPagamento: $dataPagamento, ')
//           ..write('tipoPlano: $tipoPlano, ')
//           ..write('valor: $valor, ')
//           ..write('statusPagamento: $statusPagamento, ')
//           ..write('codigoTransacao: $codigoTransacao, ')
//           ..write('metodoPagamento: $metodoPagamento, ')
//           ..write('codigoTipoPagamento: $codigoTipoPagamento, ')
//           ..write('dataPlanoExpira: $dataPlanoExpira, ')
//           ..write('hashRegistro: $hashRegistro')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfcePlanoPagamentosTable extends NfcePlanoPagamentos
//     with TableInfo<$NfcePlanoPagamentosTable, NfcePlanoPagamento> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfcePlanoPagamentosTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _dataSolicitacaoMeta =
//       const VerificationMeta('dataSolicitacao');
//   late final GeneratedColumn<DateTime?> dataSolicitacao =
//       GeneratedColumn<DateTime?>('DATA_SOLICITACAO', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _dataPagamentoMeta =
//       const VerificationMeta('dataPagamento');
//   late final GeneratedColumn<DateTime?> dataPagamento =
//       GeneratedColumn<DateTime?>('DATA_PAGAMENTO', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _tipoPlanoMeta = const VerificationMeta('tipoPlano');
//   late final GeneratedColumn<String?> tipoPlano = GeneratedColumn<String?>(
//       'TIPO_PLANO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _valorMeta = const VerificationMeta('valor');
//   late final GeneratedColumn<double?> valor = GeneratedColumn<double?>(
//       'VALOR', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _statusPagamentoMeta =
//       const VerificationMeta('statusPagamento');
//   late final GeneratedColumn<String?> statusPagamento =
//       GeneratedColumn<String?>('STATUS_PAGAMENTO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _codigoTransacaoMeta =
//       const VerificationMeta('codigoTransacao');
//   late final GeneratedColumn<String?> codigoTransacao =
//       GeneratedColumn<String?>('CODIGO_TRANSACAO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 100),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _metodoPagamentoMeta =
//       const VerificationMeta('metodoPagamento');
//   late final GeneratedColumn<String?> metodoPagamento =
//       GeneratedColumn<String?>('METODO_PAGAMENTO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _codigoTipoPagamentoMeta =
//       const VerificationMeta('codigoTipoPagamento');
//   late final GeneratedColumn<String?> codigoTipoPagamento =
//       GeneratedColumn<String?>('CODIGO_TIPO_PAGAMENTO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 3),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _dataPlanoExpiraMeta =
//       const VerificationMeta('dataPlanoExpira');
//   late final GeneratedColumn<DateTime?> dataPlanoExpira =
//       GeneratedColumn<DateTime?>('DATA_PLANO_EXPIRA', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _hashRegistroMeta =
//       const VerificationMeta('hashRegistro');
//   late final GeneratedColumn<String?> hashRegistro = GeneratedColumn<String?>(
//       'HASH_REGISTRO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         dataSolicitacao,
//         dataPagamento,
//         tipoPlano,
//         valor,
//         statusPagamento,
//         codigoTransacao,
//         metodoPagamento,
//         codigoTipoPagamento,
//         dataPlanoExpira,
//         hashRegistro
//       ];
//   @override
//   String get aliasedName => _alias ?? 'NFCE_PLANO_PAGAMENTO';
//   @override
//   String get actualTableName => 'NFCE_PLANO_PAGAMENTO';
//   @override
//   VerificationContext validateIntegrity(Insertable<NfcePlanoPagamento> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('DATA_SOLICITACAO')) {
//       context.handle(
//           _dataSolicitacaoMeta,
//           dataSolicitacao.isAcceptableOrUnknown(
//               data['DATA_SOLICITACAO']!, _dataSolicitacaoMeta));
//     }
//     if (data.containsKey('DATA_PAGAMENTO')) {
//       context.handle(
//           _dataPagamentoMeta,
//           dataPagamento.isAcceptableOrUnknown(
//               data['DATA_PAGAMENTO']!, _dataPagamentoMeta));
//     }
//     if (data.containsKey('TIPO_PLANO')) {
//       context.handle(_tipoPlanoMeta,
//           tipoPlano.isAcceptableOrUnknown(data['TIPO_PLANO']!, _tipoPlanoMeta));
//     }
//     if (data.containsKey('VALOR')) {
//       context.handle(
//           _valorMeta, valor.isAcceptableOrUnknown(data['VALOR']!, _valorMeta));
//     }
//     if (data.containsKey('STATUS_PAGAMENTO')) {
//       context.handle(
//           _statusPagamentoMeta,
//           statusPagamento.isAcceptableOrUnknown(
//               data['STATUS_PAGAMENTO']!, _statusPagamentoMeta));
//     }
//     if (data.containsKey('CODIGO_TRANSACAO')) {
//       context.handle(
//           _codigoTransacaoMeta,
//           codigoTransacao.isAcceptableOrUnknown(
//               data['CODIGO_TRANSACAO']!, _codigoTransacaoMeta));
//     }
//     if (data.containsKey('METODO_PAGAMENTO')) {
//       context.handle(
//           _metodoPagamentoMeta,
//           metodoPagamento.isAcceptableOrUnknown(
//               data['METODO_PAGAMENTO']!, _metodoPagamentoMeta));
//     }
//     if (data.containsKey('CODIGO_TIPO_PAGAMENTO')) {
//       context.handle(
//           _codigoTipoPagamentoMeta,
//           codigoTipoPagamento.isAcceptableOrUnknown(
//               data['CODIGO_TIPO_PAGAMENTO']!, _codigoTipoPagamentoMeta));
//     }
//     if (data.containsKey('DATA_PLANO_EXPIRA')) {
//       context.handle(
//           _dataPlanoExpiraMeta,
//           dataPlanoExpira.isAcceptableOrUnknown(
//               data['DATA_PLANO_EXPIRA']!, _dataPlanoExpiraMeta));
//     }
//     if (data.containsKey('HASH_REGISTRO')) {
//       context.handle(
//           _hashRegistroMeta,
//           hashRegistro.isAcceptableOrUnknown(
//               data['HASH_REGISTRO']!, _hashRegistroMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfcePlanoPagamento map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfcePlanoPagamento(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       dataSolicitacao: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_SOLICITACAO']),
//       dataPagamento: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_PAGAMENTO']),
//       tipoPlano: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TIPO_PLANO']),
//       valor: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR']),
//       statusPagamento: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}STATUS_PAGAMENTO']),
//       codigoTransacao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO_TRANSACAO']),
//       metodoPagamento: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}METODO_PAGAMENTO']),
//       codigoTipoPagamento: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}CODIGO_TIPO_PAGAMENTO']),
//       dataPlanoExpira: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_PLANO_EXPIRA']),
//       hashRegistro: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}HASH_REGISTRO']),
//     );
//   }

//   @override
//   $NfcePlanoPagamentosTable createAlias(String alias) {
//     return $NfcePlanoPagamentosTable(_db, alias);
//   }
// }

// class NfeAcessoXmlsCompanion extends UpdateCompanion<NfeAcessoXml> {
//   final Value<int> id;
//   final Value<int?> idNfeCabecalho;
//   final Value<String?> cnpj;
//   final Value<String?> cpf;
//   const NfeAcessoXmlsCompanion({
//     this.id = const Value.absent(),
//     this.idNfeCabecalho = const Value.absent(),
//     this.cnpj = const Value.absent(),
//     this.cpf = const Value.absent(),
//   });
//   NfeAcessoXmlsCompanion.insert({
//     this.id = const Value.absent(),
//     this.idNfeCabecalho = const Value.absent(),
//     this.cnpj = const Value.absent(),
//     this.cpf = const Value.absent(),
//   });
//   static Insertable<NfeAcessoXml> custom({
//     Expression<int>? id,
//     Expression<int?>? idNfeCabecalho,
//     Expression<String?>? cnpj,
//     Expression<String?>? cpf,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idNfeCabecalho != null) 'ID_NFE_CABECALHO': idNfeCabecalho,
//       if (cnpj != null) 'CNPJ': cnpj,
//       if (cpf != null) 'CPF': cpf,
//     });
//   }

//   NfeAcessoXmlsCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idNfeCabecalho,
//       Value<String?>? cnpj,
//       Value<String?>? cpf}) {
//     return NfeAcessoXmlsCompanion(
//       id: id ?? this.id,
//       idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
//       cnpj: cnpj ?? this.cnpj,
//       cpf: cpf ?? this.cpf,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idNfeCabecalho.present) {
//       map['ID_NFE_CABECALHO'] = Variable<int?>(idNfeCabecalho.value);
//     }
//     if (cnpj.present) {
//       map['CNPJ'] = Variable<String?>(cnpj.value);
//     }
//     if (cpf.present) {
//       map['CPF'] = Variable<String?>(cpf.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeAcessoXmlsCompanion(')
//           ..write('id: $id, ')
//           ..write('idNfeCabecalho: $idNfeCabecalho, ')
//           ..write('cnpj: $cnpj, ')
//           ..write('cpf: $cpf')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeAcessoXmlsTable extends NfeAcessoXmls
//     with TableInfo<$NfeAcessoXmlsTable, NfeAcessoXml> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeAcessoXmlsTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idNfeCabecalhoMeta =
//       const VerificationMeta('idNfeCabecalho');
//   late final GeneratedColumn<int?> idNfeCabecalho = GeneratedColumn<int?>(
//       'ID_NFE_CABECALHO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES NFE_CABECALHO(ID)');
//   final VerificationMeta _cnpjMeta = const VerificationMeta('cnpj');
//   late final GeneratedColumn<String?> cnpj = GeneratedColumn<String?>(
//       'CNPJ', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cpfMeta = const VerificationMeta('cpf');
//   late final GeneratedColumn<String?> cpf = GeneratedColumn<String?>(
//       'CPF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 11),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [id, idNfeCabecalho, cnpj, cpf];
//   @override
//   String get aliasedName => _alias ?? 'NFE_ACESSO_XML';
//   @override
//   String get actualTableName => 'NFE_ACESSO_XML';
//   @override
//   VerificationContext validateIntegrity(Insertable<NfeAcessoXml> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_NFE_CABECALHO')) {
//       context.handle(
//           _idNfeCabecalhoMeta,
//           idNfeCabecalho.isAcceptableOrUnknown(
//               data['ID_NFE_CABECALHO']!, _idNfeCabecalhoMeta));
//     }
//     if (data.containsKey('CNPJ')) {
//       context.handle(
//           _cnpjMeta, cnpj.isAcceptableOrUnknown(data['CNPJ']!, _cnpjMeta));
//     }
//     if (data.containsKey('CPF')) {
//       context.handle(
//           _cpfMeta, cpf.isAcceptableOrUnknown(data['CPF']!, _cpfMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeAcessoXml map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeAcessoXml(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idNfeCabecalho: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_NFE_CABECALHO']),
//       cnpj: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CNPJ']),
//       cpf: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CPF']),
//     );
//   }

//   @override
//   $NfeAcessoXmlsTable createAlias(String alias) {
//     return $NfeAcessoXmlsTable(_db, alias);
//   }
// }

// class NfeCabecalhosCompanion extends UpdateCompanion<NfeCabecalho> {
//   final Value<int> id;
//   final Value<int?> idTributOperacaoFiscal;
//   final Value<int?> ufEmitente;
//   final Value<String?> codigoNumerico;
//   final Value<String?> naturezaOperacao;
//   final Value<String?> codigoModelo;
//   final Value<String?> serie;
//   final Value<String?> numero;
//   final Value<DateTime?> dataHoraEmissao;
//   final Value<DateTime?> dataHoraEntradaSaida;
//   final Value<String?> tipoOperacao;
//   final Value<String?> localDestino;
//   final Value<int?> codigoMunicipio;
//   final Value<String?> formatoImpressaoDanfe;
//   final Value<String?> tipoEmissao;
//   final Value<String?> chaveAcesso;
//   final Value<String?> digitoChaveAcesso;
//   final Value<String?> ambiente;
//   final Value<String?> finalidadeEmissao;
//   final Value<String?> consumidorOperacao;
//   final Value<String?> consumidorPresenca;
//   final Value<String?> processoEmissao;
//   final Value<String?> versaoProcessoEmissao;
//   final Value<DateTime?> dataEntradaContingencia;
//   final Value<String?> justificativaContingencia;
//   final Value<double?> baseCalculoIcms;
//   final Value<double?> valorIcms;
//   final Value<double?> valorIcmsDesonerado;
//   final Value<double?> totalIcmsFcpUfDestino;
//   final Value<double?> totalIcmsInterestadualUfDestino;
//   final Value<double?> totalIcmsInterestadualUfRemetente;
//   final Value<double?> valorTotalFcp;
//   final Value<double?> baseCalculoIcmsSt;
//   final Value<double?> valorIcmsSt;
//   final Value<double?> valorTotalFcpSt;
//   final Value<double?> valorTotalFcpStRetido;
//   final Value<double?> valorTotalProdutos;
//   final Value<double?> valorFrete;
//   final Value<double?> valorSeguro;
//   final Value<double?> valorDesconto;
//   final Value<double?> valorImpostoImportacao;
//   final Value<double?> valorIpi;
//   final Value<double?> valorIpiDevolvido;
//   final Value<double?> valorPis;
//   final Value<double?> valorCofins;
//   final Value<double?> valorDespesasAcessorias;
//   final Value<double?> valorTotal;
//   final Value<double?> valorTotalTributos;
//   final Value<double?> valorServicos;
//   final Value<double?> baseCalculoIssqn;
//   final Value<double?> valorIssqn;
//   final Value<double?> valorPisIssqn;
//   final Value<double?> valorCofinsIssqn;
//   final Value<DateTime?> dataPrestacaoServico;
//   final Value<double?> valorDeducaoIssqn;
//   final Value<double?> outrasRetencoesIssqn;
//   final Value<double?> descontoIncondicionadoIssqn;
//   final Value<double?> descontoCondicionadoIssqn;
//   final Value<double?> totalRetencaoIssqn;
//   final Value<String?> regimeEspecialTributacao;
//   final Value<double?> valorRetidoPis;
//   final Value<double?> valorRetidoCofins;
//   final Value<double?> valorRetidoCsll;
//   final Value<double?> baseCalculoIrrf;
//   final Value<double?> valorRetidoIrrf;
//   final Value<double?> baseCalculoPrevidencia;
//   final Value<double?> valorRetidoPrevidencia;
//   final Value<String?> informacoesAddFisco;
//   final Value<String?> informacoesAddContribuinte;
//   final Value<String?> comexUfEmbarque;
//   final Value<String?> comexLocalEmbarque;
//   final Value<String?> comexLocalDespacho;
//   final Value<String?> compraNotaEmpenho;
//   final Value<String?> compraPedido;
//   final Value<String?> compraContrato;
//   final Value<String?> qrcode;
//   final Value<String?> urlChave;
//   final Value<String?> statusNota;
//   final Value<int?> idPdvVendaCabecalho;
//   const NfeCabecalhosCompanion({
//     this.id = const Value.absent(),
//     this.idTributOperacaoFiscal = const Value.absent(),
//     this.ufEmitente = const Value.absent(),
//     this.codigoNumerico = const Value.absent(),
//     this.naturezaOperacao = const Value.absent(),
//     this.codigoModelo = const Value.absent(),
//     this.serie = const Value.absent(),
//     this.numero = const Value.absent(),
//     this.dataHoraEmissao = const Value.absent(),
//     this.dataHoraEntradaSaida = const Value.absent(),
//     this.tipoOperacao = const Value.absent(),
//     this.localDestino = const Value.absent(),
//     this.codigoMunicipio = const Value.absent(),
//     this.formatoImpressaoDanfe = const Value.absent(),
//     this.tipoEmissao = const Value.absent(),
//     this.chaveAcesso = const Value.absent(),
//     this.digitoChaveAcesso = const Value.absent(),
//     this.ambiente = const Value.absent(),
//     this.finalidadeEmissao = const Value.absent(),
//     this.consumidorOperacao = const Value.absent(),
//     this.consumidorPresenca = const Value.absent(),
//     this.processoEmissao = const Value.absent(),
//     this.versaoProcessoEmissao = const Value.absent(),
//     this.dataEntradaContingencia = const Value.absent(),
//     this.justificativaContingencia = const Value.absent(),
//     this.baseCalculoIcms = const Value.absent(),
//     this.valorIcms = const Value.absent(),
//     this.valorIcmsDesonerado = const Value.absent(),
//     this.totalIcmsFcpUfDestino = const Value.absent(),
//     this.totalIcmsInterestadualUfDestino = const Value.absent(),
//     this.totalIcmsInterestadualUfRemetente = const Value.absent(),
//     this.valorTotalFcp = const Value.absent(),
//     this.baseCalculoIcmsSt = const Value.absent(),
//     this.valorIcmsSt = const Value.absent(),
//     this.valorTotalFcpSt = const Value.absent(),
//     this.valorTotalFcpStRetido = const Value.absent(),
//     this.valorTotalProdutos = const Value.absent(),
//     this.valorFrete = const Value.absent(),
//     this.valorSeguro = const Value.absent(),
//     this.valorDesconto = const Value.absent(),
//     this.valorImpostoImportacao = const Value.absent(),
//     this.valorIpi = const Value.absent(),
//     this.valorIpiDevolvido = const Value.absent(),
//     this.valorPis = const Value.absent(),
//     this.valorCofins = const Value.absent(),
//     this.valorDespesasAcessorias = const Value.absent(),
//     this.valorTotal = const Value.absent(),
//     this.valorTotalTributos = const Value.absent(),
//     this.valorServicos = const Value.absent(),
//     this.baseCalculoIssqn = const Value.absent(),
//     this.valorIssqn = const Value.absent(),
//     this.valorPisIssqn = const Value.absent(),
//     this.valorCofinsIssqn = const Value.absent(),
//     this.dataPrestacaoServico = const Value.absent(),
//     this.valorDeducaoIssqn = const Value.absent(),
//     this.outrasRetencoesIssqn = const Value.absent(),
//     this.descontoIncondicionadoIssqn = const Value.absent(),
//     this.descontoCondicionadoIssqn = const Value.absent(),
//     this.totalRetencaoIssqn = const Value.absent(),
//     this.regimeEspecialTributacao = const Value.absent(),
//     this.valorRetidoPis = const Value.absent(),
//     this.valorRetidoCofins = const Value.absent(),
//     this.valorRetidoCsll = const Value.absent(),
//     this.baseCalculoIrrf = const Value.absent(),
//     this.valorRetidoIrrf = const Value.absent(),
//     this.baseCalculoPrevidencia = const Value.absent(),
//     this.valorRetidoPrevidencia = const Value.absent(),
//     this.informacoesAddFisco = const Value.absent(),
//     this.informacoesAddContribuinte = const Value.absent(),
//     this.comexUfEmbarque = const Value.absent(),
//     this.comexLocalEmbarque = const Value.absent(),
//     this.comexLocalDespacho = const Value.absent(),
//     this.compraNotaEmpenho = const Value.absent(),
//     this.compraPedido = const Value.absent(),
//     this.compraContrato = const Value.absent(),
//     this.qrcode = const Value.absent(),
//     this.urlChave = const Value.absent(),
//     this.statusNota = const Value.absent(),
//     this.idPdvVendaCabecalho = const Value.absent(),
//   });
//   NfeCabecalhosCompanion.insert({
//     this.id = const Value.absent(),
//     this.idTributOperacaoFiscal = const Value.absent(),
//     this.ufEmitente = const Value.absent(),
//     this.codigoNumerico = const Value.absent(),
//     this.naturezaOperacao = const Value.absent(),
//     this.codigoModelo = const Value.absent(),
//     this.serie = const Value.absent(),
//     this.numero = const Value.absent(),
//     this.dataHoraEmissao = const Value.absent(),
//     this.dataHoraEntradaSaida = const Value.absent(),
//     this.tipoOperacao = const Value.absent(),
//     this.localDestino = const Value.absent(),
//     this.codigoMunicipio = const Value.absent(),
//     this.formatoImpressaoDanfe = const Value.absent(),
//     this.tipoEmissao = const Value.absent(),
//     this.chaveAcesso = const Value.absent(),
//     this.digitoChaveAcesso = const Value.absent(),
//     this.ambiente = const Value.absent(),
//     this.finalidadeEmissao = const Value.absent(),
//     this.consumidorOperacao = const Value.absent(),
//     this.consumidorPresenca = const Value.absent(),
//     this.processoEmissao = const Value.absent(),
//     this.versaoProcessoEmissao = const Value.absent(),
//     this.dataEntradaContingencia = const Value.absent(),
//     this.justificativaContingencia = const Value.absent(),
//     this.baseCalculoIcms = const Value.absent(),
//     this.valorIcms = const Value.absent(),
//     this.valorIcmsDesonerado = const Value.absent(),
//     this.totalIcmsFcpUfDestino = const Value.absent(),
//     this.totalIcmsInterestadualUfDestino = const Value.absent(),
//     this.totalIcmsInterestadualUfRemetente = const Value.absent(),
//     this.valorTotalFcp = const Value.absent(),
//     this.baseCalculoIcmsSt = const Value.absent(),
//     this.valorIcmsSt = const Value.absent(),
//     this.valorTotalFcpSt = const Value.absent(),
//     this.valorTotalFcpStRetido = const Value.absent(),
//     this.valorTotalProdutos = const Value.absent(),
//     this.valorFrete = const Value.absent(),
//     this.valorSeguro = const Value.absent(),
//     this.valorDesconto = const Value.absent(),
//     this.valorImpostoImportacao = const Value.absent(),
//     this.valorIpi = const Value.absent(),
//     this.valorIpiDevolvido = const Value.absent(),
//     this.valorPis = const Value.absent(),
//     this.valorCofins = const Value.absent(),
//     this.valorDespesasAcessorias = const Value.absent(),
//     this.valorTotal = const Value.absent(),
//     this.valorTotalTributos = const Value.absent(),
//     this.valorServicos = const Value.absent(),
//     this.baseCalculoIssqn = const Value.absent(),
//     this.valorIssqn = const Value.absent(),
//     this.valorPisIssqn = const Value.absent(),
//     this.valorCofinsIssqn = const Value.absent(),
//     this.dataPrestacaoServico = const Value.absent(),
//     this.valorDeducaoIssqn = const Value.absent(),
//     this.outrasRetencoesIssqn = const Value.absent(),
//     this.descontoIncondicionadoIssqn = const Value.absent(),
//     this.descontoCondicionadoIssqn = const Value.absent(),
//     this.totalRetencaoIssqn = const Value.absent(),
//     this.regimeEspecialTributacao = const Value.absent(),
//     this.valorRetidoPis = const Value.absent(),
//     this.valorRetidoCofins = const Value.absent(),
//     this.valorRetidoCsll = const Value.absent(),
//     this.baseCalculoIrrf = const Value.absent(),
//     this.valorRetidoIrrf = const Value.absent(),
//     this.baseCalculoPrevidencia = const Value.absent(),
//     this.valorRetidoPrevidencia = const Value.absent(),
//     this.informacoesAddFisco = const Value.absent(),
//     this.informacoesAddContribuinte = const Value.absent(),
//     this.comexUfEmbarque = const Value.absent(),
//     this.comexLocalEmbarque = const Value.absent(),
//     this.comexLocalDespacho = const Value.absent(),
//     this.compraNotaEmpenho = const Value.absent(),
//     this.compraPedido = const Value.absent(),
//     this.compraContrato = const Value.absent(),
//     this.qrcode = const Value.absent(),
//     this.urlChave = const Value.absent(),
//     this.statusNota = const Value.absent(),
//     this.idPdvVendaCabecalho = const Value.absent(),
//   });
//   static Insertable<NfeCabecalho> custom({
//     Expression<int>? id,
//     Expression<int?>? idTributOperacaoFiscal,
//     Expression<int?>? ufEmitente,
//     Expression<String?>? codigoNumerico,
//     Expression<String?>? naturezaOperacao,
//     Expression<String?>? codigoModelo,
//     Expression<String?>? serie,
//     Expression<String?>? numero,
//     Expression<DateTime?>? dataHoraEmissao,
//     Expression<DateTime?>? dataHoraEntradaSaida,
//     Expression<String?>? tipoOperacao,
//     Expression<String?>? localDestino,
//     Expression<int?>? codigoMunicipio,
//     Expression<String?>? formatoImpressaoDanfe,
//     Expression<String?>? tipoEmissao,
//     Expression<String?>? chaveAcesso,
//     Expression<String?>? digitoChaveAcesso,
//     Expression<String?>? ambiente,
//     Expression<String?>? finalidadeEmissao,
//     Expression<String?>? consumidorOperacao,
//     Expression<String?>? consumidorPresenca,
//     Expression<String?>? processoEmissao,
//     Expression<String?>? versaoProcessoEmissao,
//     Expression<DateTime?>? dataEntradaContingencia,
//     Expression<String?>? justificativaContingencia,
//     Expression<double?>? baseCalculoIcms,
//     Expression<double?>? valorIcms,
//     Expression<double?>? valorIcmsDesonerado,
//     Expression<double?>? totalIcmsFcpUfDestino,
//     Expression<double?>? totalIcmsInterestadualUfDestino,
//     Expression<double?>? totalIcmsInterestadualUfRemetente,
//     Expression<double?>? valorTotalFcp,
//     Expression<double?>? baseCalculoIcmsSt,
//     Expression<double?>? valorIcmsSt,
//     Expression<double?>? valorTotalFcpSt,
//     Expression<double?>? valorTotalFcpStRetido,
//     Expression<double?>? valorTotalProdutos,
//     Expression<double?>? valorFrete,
//     Expression<double?>? valorSeguro,
//     Expression<double?>? valorDesconto,
//     Expression<double?>? valorImpostoImportacao,
//     Expression<double?>? valorIpi,
//     Expression<double?>? valorIpiDevolvido,
//     Expression<double?>? valorPis,
//     Expression<double?>? valorCofins,
//     Expression<double?>? valorDespesasAcessorias,
//     Expression<double?>? valorTotal,
//     Expression<double?>? valorTotalTributos,
//     Expression<double?>? valorServicos,
//     Expression<double?>? baseCalculoIssqn,
//     Expression<double?>? valorIssqn,
//     Expression<double?>? valorPisIssqn,
//     Expression<double?>? valorCofinsIssqn,
//     Expression<DateTime?>? dataPrestacaoServico,
//     Expression<double?>? valorDeducaoIssqn,
//     Expression<double?>? outrasRetencoesIssqn,
//     Expression<double?>? descontoIncondicionadoIssqn,
//     Expression<double?>? descontoCondicionadoIssqn,
//     Expression<double?>? totalRetencaoIssqn,
//     Expression<String?>? regimeEspecialTributacao,
//     Expression<double?>? valorRetidoPis,
//     Expression<double?>? valorRetidoCofins,
//     Expression<double?>? valorRetidoCsll,
//     Expression<double?>? baseCalculoIrrf,
//     Expression<double?>? valorRetidoIrrf,
//     Expression<double?>? baseCalculoPrevidencia,
//     Expression<double?>? valorRetidoPrevidencia,
//     Expression<String?>? informacoesAddFisco,
//     Expression<String?>? informacoesAddContribuinte,
//     Expression<String?>? comexUfEmbarque,
//     Expression<String?>? comexLocalEmbarque,
//     Expression<String?>? comexLocalDespacho,
//     Expression<String?>? compraNotaEmpenho,
//     Expression<String?>? compraPedido,
//     Expression<String?>? compraContrato,
//     Expression<String?>? qrcode,
//     Expression<String?>? urlChave,
//     Expression<String?>? statusNota,
//     Expression<int?>? idPdvVendaCabecalho,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idTributOperacaoFiscal != null)
//         'ID_TRIBUT_OPERACAO_FISCAL': idTributOperacaoFiscal,
//       if (ufEmitente != null) 'UF_EMITENTE': ufEmitente,
//       if (codigoNumerico != null) 'CODIGO_NUMERICO': codigoNumerico,
//       if (naturezaOperacao != null) 'NATUREZA_OPERACAO': naturezaOperacao,
//       if (codigoModelo != null) 'CODIGO_MODELO': codigoModelo,
//       if (serie != null) 'SERIE': serie,
//       if (numero != null) 'NUMERO': numero,
//       if (dataHoraEmissao != null) 'DATA_HORA_EMISSAO': dataHoraEmissao,
//       if (dataHoraEntradaSaida != null)
//         'DATA_HORA_ENTRADA_SAIDA': dataHoraEntradaSaida,
//       if (tipoOperacao != null) 'TIPO_OPERACAO': tipoOperacao,
//       if (localDestino != null) 'LOCAL_DESTINO': localDestino,
//       if (codigoMunicipio != null) 'CODIGO_MUNICIPIO': codigoMunicipio,
//       if (formatoImpressaoDanfe != null)
//         'FORMATO_IMPRESSAO_DANFE': formatoImpressaoDanfe,
//       if (tipoEmissao != null) 'TIPO_EMISSAO': tipoEmissao,
//       if (chaveAcesso != null) 'CHAVE_ACESSO': chaveAcesso,
//       if (digitoChaveAcesso != null) 'DIGITO_CHAVE_ACESSO': digitoChaveAcesso,
//       if (ambiente != null) 'AMBIENTE': ambiente,
//       if (finalidadeEmissao != null) 'FINALIDADE_EMISSAO': finalidadeEmissao,
//       if (consumidorOperacao != null) 'CONSUMIDOR_OPERACAO': consumidorOperacao,
//       if (consumidorPresenca != null) 'CONSUMIDOR_PRESENCA': consumidorPresenca,
//       if (processoEmissao != null) 'PROCESSO_EMISSAO': processoEmissao,
//       if (versaoProcessoEmissao != null)
//         'VERSAO_PROCESSO_EMISSAO': versaoProcessoEmissao,
//       if (dataEntradaContingencia != null)
//         'DATA_ENTRADA_CONTINGENCIA': dataEntradaContingencia,
//       if (justificativaContingencia != null)
//         'JUSTIFICATIVA_CONTINGENCIA': justificativaContingencia,
//       if (baseCalculoIcms != null) 'BASE_CALCULO_ICMS': baseCalculoIcms,
//       if (valorIcms != null) 'VALOR_ICMS': valorIcms,
//       if (valorIcmsDesonerado != null)
//         'VALOR_ICMS_DESONERADO': valorIcmsDesonerado,
//       if (totalIcmsFcpUfDestino != null)
//         'TOTAL_ICMS_FCP_UF_DESTINO': totalIcmsFcpUfDestino,
//       if (totalIcmsInterestadualUfDestino != null)
//         'TOTAL_ICMS_INTERESTADUAL_UF_DESTINO': totalIcmsInterestadualUfDestino,
//       if (totalIcmsInterestadualUfRemetente != null)
//         'TOTAL_ICMS_INTERESTADUAL_UF_REMETENTE':
//             totalIcmsInterestadualUfRemetente,
//       if (valorTotalFcp != null) 'VALOR_TOTAL_FCP': valorTotalFcp,
//       if (baseCalculoIcmsSt != null) 'BASE_CALCULO_ICMS_ST': baseCalculoIcmsSt,
//       if (valorIcmsSt != null) 'VALOR_ICMS_ST': valorIcmsSt,
//       if (valorTotalFcpSt != null) 'VALOR_TOTAL_FCP_ST': valorTotalFcpSt,
//       if (valorTotalFcpStRetido != null)
//         'VALOR_TOTAL_FCP_ST_RETIDO': valorTotalFcpStRetido,
//       if (valorTotalProdutos != null)
//         'VALOR_TOTAL_PRODUTOS': valorTotalProdutos,
//       if (valorFrete != null) 'VALOR_FRETE': valorFrete,
//       if (valorSeguro != null) 'VALOR_SEGURO': valorSeguro,
//       if (valorDesconto != null) 'VALOR_DESCONTO': valorDesconto,
//       if (valorImpostoImportacao != null)
//         'VALOR_IMPOSTO_IMPORTACAO': valorImpostoImportacao,
//       if (valorIpi != null) 'VALOR_IPI': valorIpi,
//       if (valorIpiDevolvido != null) 'VALOR_IPI_DEVOLVIDO': valorIpiDevolvido,
//       if (valorPis != null) 'VALOR_PIS': valorPis,
//       if (valorCofins != null) 'VALOR_COFINS': valorCofins,
//       if (valorDespesasAcessorias != null)
//         'VALOR_DESPESAS_ACESSORIAS': valorDespesasAcessorias,
//       if (valorTotal != null) 'VALOR_TOTAL': valorTotal,
//       if (valorTotalTributos != null)
//         'VALOR_TOTAL_TRIBUTOS': valorTotalTributos,
//       if (valorServicos != null) 'VALOR_SERVICOS': valorServicos,
//       if (baseCalculoIssqn != null) 'BASE_CALCULO_ISSQN': baseCalculoIssqn,
//       if (valorIssqn != null) 'VALOR_ISSQN': valorIssqn,
//       if (valorPisIssqn != null) 'VALOR_PIS_ISSQN': valorPisIssqn,
//       if (valorCofinsIssqn != null) 'VALOR_COFINS_ISSQN': valorCofinsIssqn,
//       if (dataPrestacaoServico != null)
//         'DATA_PRESTACAO_SERVICO': dataPrestacaoServico,
//       if (valorDeducaoIssqn != null) 'VALOR_DEDUCAO_ISSQN': valorDeducaoIssqn,
//       if (outrasRetencoesIssqn != null)
//         'OUTRAS_RETENCOES_ISSQN': outrasRetencoesIssqn,
//       if (descontoIncondicionadoIssqn != null)
//         'DESCONTO_INCONDICIONADO_ISSQN': descontoIncondicionadoIssqn,
//       if (descontoCondicionadoIssqn != null)
//         'DESCONTO_CONDICIONADO_ISSQN': descontoCondicionadoIssqn,
//       if (totalRetencaoIssqn != null)
//         'TOTAL_RETENCAO_ISSQN': totalRetencaoIssqn,
//       if (regimeEspecialTributacao != null)
//         'REGIME_ESPECIAL_TRIBUTACAO': regimeEspecialTributacao,
//       if (valorRetidoPis != null) 'VALOR_RETIDO_PIS': valorRetidoPis,
//       if (valorRetidoCofins != null) 'VALOR_RETIDO_COFINS': valorRetidoCofins,
//       if (valorRetidoCsll != null) 'VALOR_RETIDO_CSLL': valorRetidoCsll,
//       if (baseCalculoIrrf != null) 'BASE_CALCULO_IRRF': baseCalculoIrrf,
//       if (valorRetidoIrrf != null) 'VALOR_RETIDO_IRRF': valorRetidoIrrf,
//       if (baseCalculoPrevidencia != null)
//         'BASE_CALCULO_PREVIDENCIA': baseCalculoPrevidencia,
//       if (valorRetidoPrevidencia != null)
//         'VALOR_RETIDO_PREVIDENCIA': valorRetidoPrevidencia,
//       if (informacoesAddFisco != null)
//         'INFORMACOES_ADD_FISCO': informacoesAddFisco,
//       if (informacoesAddContribuinte != null)
//         'INFORMACOES_ADD_CONTRIBUINTE': informacoesAddContribuinte,
//       if (comexUfEmbarque != null) 'COMEX_UF_EMBARQUE': comexUfEmbarque,
//       if (comexLocalEmbarque != null)
//         'COMEX_LOCAL_EMBARQUE': comexLocalEmbarque,
//       if (comexLocalDespacho != null)
//         'COMEX_LOCAL_DESPACHO': comexLocalDespacho,
//       if (compraNotaEmpenho != null) 'COMPRA_NOTA_EMPENHO': compraNotaEmpenho,
//       if (compraPedido != null) 'COMPRA_PEDIDO': compraPedido,
//       if (compraContrato != null) 'COMPRA_CONTRATO': compraContrato,
//       if (qrcode != null) 'QRCODE': qrcode,
//       if (urlChave != null) 'URL_CHAVE': urlChave,
//       if (statusNota != null) 'STATUS_NOTA': statusNota,
//       if (idPdvVendaCabecalho != null)
//         'ID_PDV_VENDA_CABECALHO': idPdvVendaCabecalho,
//     });
//   }

//   NfeCabecalhosCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idTributOperacaoFiscal,
//       Value<int?>? ufEmitente,
//       Value<String?>? codigoNumerico,
//       Value<String?>? naturezaOperacao,
//       Value<String?>? codigoModelo,
//       Value<String?>? serie,
//       Value<String?>? numero,
//       Value<DateTime?>? dataHoraEmissao,
//       Value<DateTime?>? dataHoraEntradaSaida,
//       Value<String?>? tipoOperacao,
//       Value<String?>? localDestino,
//       Value<int?>? codigoMunicipio,
//       Value<String?>? formatoImpressaoDanfe,
//       Value<String?>? tipoEmissao,
//       Value<String?>? chaveAcesso,
//       Value<String?>? digitoChaveAcesso,
//       Value<String?>? ambiente,
//       Value<String?>? finalidadeEmissao,
//       Value<String?>? consumidorOperacao,
//       Value<String?>? consumidorPresenca,
//       Value<String?>? processoEmissao,
//       Value<String?>? versaoProcessoEmissao,
//       Value<DateTime?>? dataEntradaContingencia,
//       Value<String?>? justificativaContingencia,
//       Value<double?>? baseCalculoIcms,
//       Value<double?>? valorIcms,
//       Value<double?>? valorIcmsDesonerado,
//       Value<double?>? totalIcmsFcpUfDestino,
//       Value<double?>? totalIcmsInterestadualUfDestino,
//       Value<double?>? totalIcmsInterestadualUfRemetente,
//       Value<double?>? valorTotalFcp,
//       Value<double?>? baseCalculoIcmsSt,
//       Value<double?>? valorIcmsSt,
//       Value<double?>? valorTotalFcpSt,
//       Value<double?>? valorTotalFcpStRetido,
//       Value<double?>? valorTotalProdutos,
//       Value<double?>? valorFrete,
//       Value<double?>? valorSeguro,
//       Value<double?>? valorDesconto,
//       Value<double?>? valorImpostoImportacao,
//       Value<double?>? valorIpi,
//       Value<double?>? valorIpiDevolvido,
//       Value<double?>? valorPis,
//       Value<double?>? valorCofins,
//       Value<double?>? valorDespesasAcessorias,
//       Value<double?>? valorTotal,
//       Value<double?>? valorTotalTributos,
//       Value<double?>? valorServicos,
//       Value<double?>? baseCalculoIssqn,
//       Value<double?>? valorIssqn,
//       Value<double?>? valorPisIssqn,
//       Value<double?>? valorCofinsIssqn,
//       Value<DateTime?>? dataPrestacaoServico,
//       Value<double?>? valorDeducaoIssqn,
//       Value<double?>? outrasRetencoesIssqn,
//       Value<double?>? descontoIncondicionadoIssqn,
//       Value<double?>? descontoCondicionadoIssqn,
//       Value<double?>? totalRetencaoIssqn,
//       Value<String?>? regimeEspecialTributacao,
//       Value<double?>? valorRetidoPis,
//       Value<double?>? valorRetidoCofins,
//       Value<double?>? valorRetidoCsll,
//       Value<double?>? baseCalculoIrrf,
//       Value<double?>? valorRetidoIrrf,
//       Value<double?>? baseCalculoPrevidencia,
//       Value<double?>? valorRetidoPrevidencia,
//       Value<String?>? informacoesAddFisco,
//       Value<String?>? informacoesAddContribuinte,
//       Value<String?>? comexUfEmbarque,
//       Value<String?>? comexLocalEmbarque,
//       Value<String?>? comexLocalDespacho,
//       Value<String?>? compraNotaEmpenho,
//       Value<String?>? compraPedido,
//       Value<String?>? compraContrato,
//       Value<String?>? qrcode,
//       Value<String?>? urlChave,
//       Value<String?>? statusNota,
//       Value<int?>? idPdvVendaCabecalho}) {
//     return NfeCabecalhosCompanion(
//       id: id ?? this.id,
//       idTributOperacaoFiscal:
//           idTributOperacaoFiscal ?? this.idTributOperacaoFiscal,
//       ufEmitente: ufEmitente ?? this.ufEmitente,
//       codigoNumerico: codigoNumerico ?? this.codigoNumerico,
//       naturezaOperacao: naturezaOperacao ?? this.naturezaOperacao,
//       codigoModelo: codigoModelo ?? this.codigoModelo,
//       serie: serie ?? this.serie,
//       numero: numero ?? this.numero,
//       dataHoraEmissao: dataHoraEmissao ?? this.dataHoraEmissao,
//       dataHoraEntradaSaida: dataHoraEntradaSaida ?? this.dataHoraEntradaSaida,
//       tipoOperacao: tipoOperacao ?? this.tipoOperacao,
//       localDestino: localDestino ?? this.localDestino,
//       codigoMunicipio: codigoMunicipio ?? this.codigoMunicipio,
//       formatoImpressaoDanfe:
//           formatoImpressaoDanfe ?? this.formatoImpressaoDanfe,
//       tipoEmissao: tipoEmissao ?? this.tipoEmissao,
//       chaveAcesso: chaveAcesso ?? this.chaveAcesso,
//       digitoChaveAcesso: digitoChaveAcesso ?? this.digitoChaveAcesso,
//       ambiente: ambiente ?? this.ambiente,
//       finalidadeEmissao: finalidadeEmissao ?? this.finalidadeEmissao,
//       consumidorOperacao: consumidorOperacao ?? this.consumidorOperacao,
//       consumidorPresenca: consumidorPresenca ?? this.consumidorPresenca,
//       processoEmissao: processoEmissao ?? this.processoEmissao,
//       versaoProcessoEmissao:
//           versaoProcessoEmissao ?? this.versaoProcessoEmissao,
//       dataEntradaContingencia:
//           dataEntradaContingencia ?? this.dataEntradaContingencia,
//       justificativaContingencia:
//           justificativaContingencia ?? this.justificativaContingencia,
//       baseCalculoIcms: baseCalculoIcms ?? this.baseCalculoIcms,
//       valorIcms: valorIcms ?? this.valorIcms,
//       valorIcmsDesonerado: valorIcmsDesonerado ?? this.valorIcmsDesonerado,
//       totalIcmsFcpUfDestino:
//           totalIcmsFcpUfDestino ?? this.totalIcmsFcpUfDestino,
//       totalIcmsInterestadualUfDestino: totalIcmsInterestadualUfDestino ??
//           this.totalIcmsInterestadualUfDestino,
//       totalIcmsInterestadualUfRemetente: totalIcmsInterestadualUfRemetente ??
//           this.totalIcmsInterestadualUfRemetente,
//       valorTotalFcp: valorTotalFcp ?? this.valorTotalFcp,
//       baseCalculoIcmsSt: baseCalculoIcmsSt ?? this.baseCalculoIcmsSt,
//       valorIcmsSt: valorIcmsSt ?? this.valorIcmsSt,
//       valorTotalFcpSt: valorTotalFcpSt ?? this.valorTotalFcpSt,
//       valorTotalFcpStRetido:
//           valorTotalFcpStRetido ?? this.valorTotalFcpStRetido,
//       valorTotalProdutos: valorTotalProdutos ?? this.valorTotalProdutos,
//       valorFrete: valorFrete ?? this.valorFrete,
//       valorSeguro: valorSeguro ?? this.valorSeguro,
//       valorDesconto: valorDesconto ?? this.valorDesconto,
//       valorImpostoImportacao:
//           valorImpostoImportacao ?? this.valorImpostoImportacao,
//       valorIpi: valorIpi ?? this.valorIpi,
//       valorIpiDevolvido: valorIpiDevolvido ?? this.valorIpiDevolvido,
//       valorPis: valorPis ?? this.valorPis,
//       valorCofins: valorCofins ?? this.valorCofins,
//       valorDespesasAcessorias:
//           valorDespesasAcessorias ?? this.valorDespesasAcessorias,
//       valorTotal: valorTotal ?? this.valorTotal,
//       valorTotalTributos: valorTotalTributos ?? this.valorTotalTributos,
//       valorServicos: valorServicos ?? this.valorServicos,
//       baseCalculoIssqn: baseCalculoIssqn ?? this.baseCalculoIssqn,
//       valorIssqn: valorIssqn ?? this.valorIssqn,
//       valorPisIssqn: valorPisIssqn ?? this.valorPisIssqn,
//       valorCofinsIssqn: valorCofinsIssqn ?? this.valorCofinsIssqn,
//       dataPrestacaoServico: dataPrestacaoServico ?? this.dataPrestacaoServico,
//       valorDeducaoIssqn: valorDeducaoIssqn ?? this.valorDeducaoIssqn,
//       outrasRetencoesIssqn: outrasRetencoesIssqn ?? this.outrasRetencoesIssqn,
//       descontoIncondicionadoIssqn:
//           descontoIncondicionadoIssqn ?? this.descontoIncondicionadoIssqn,
//       descontoCondicionadoIssqn:
//           descontoCondicionadoIssqn ?? this.descontoCondicionadoIssqn,
//       totalRetencaoIssqn: totalRetencaoIssqn ?? this.totalRetencaoIssqn,
//       regimeEspecialTributacao:
//           regimeEspecialTributacao ?? this.regimeEspecialTributacao,
//       valorRetidoPis: valorRetidoPis ?? this.valorRetidoPis,
//       valorRetidoCofins: valorRetidoCofins ?? this.valorRetidoCofins,
//       valorRetidoCsll: valorRetidoCsll ?? this.valorRetidoCsll,
//       baseCalculoIrrf: baseCalculoIrrf ?? this.baseCalculoIrrf,
//       valorRetidoIrrf: valorRetidoIrrf ?? this.valorRetidoIrrf,
//       baseCalculoPrevidencia:
//           baseCalculoPrevidencia ?? this.baseCalculoPrevidencia,
//       valorRetidoPrevidencia:
//           valorRetidoPrevidencia ?? this.valorRetidoPrevidencia,
//       informacoesAddFisco: informacoesAddFisco ?? this.informacoesAddFisco,
//       informacoesAddContribuinte:
//           informacoesAddContribuinte ?? this.informacoesAddContribuinte,
//       comexUfEmbarque: comexUfEmbarque ?? this.comexUfEmbarque,
//       comexLocalEmbarque: comexLocalEmbarque ?? this.comexLocalEmbarque,
//       comexLocalDespacho: comexLocalDespacho ?? this.comexLocalDespacho,
//       compraNotaEmpenho: compraNotaEmpenho ?? this.compraNotaEmpenho,
//       compraPedido: compraPedido ?? this.compraPedido,
//       compraContrato: compraContrato ?? this.compraContrato,
//       qrcode: qrcode ?? this.qrcode,
//       urlChave: urlChave ?? this.urlChave,
//       statusNota: statusNota ?? this.statusNota,
//       idPdvVendaCabecalho: idPdvVendaCabecalho ?? this.idPdvVendaCabecalho,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idTributOperacaoFiscal.present) {
//       map['ID_TRIBUT_OPERACAO_FISCAL'] =
//           Variable<int?>(idTributOperacaoFiscal.value);
//     }
//     if (ufEmitente.present) {
//       map['UF_EMITENTE'] = Variable<int?>(ufEmitente.value);
//     }
//     if (codigoNumerico.present) {
//       map['CODIGO_NUMERICO'] = Variable<String?>(codigoNumerico.value);
//     }
//     if (naturezaOperacao.present) {
//       map['NATUREZA_OPERACAO'] = Variable<String?>(naturezaOperacao.value);
//     }
//     if (codigoModelo.present) {
//       map['CODIGO_MODELO'] = Variable<String?>(codigoModelo.value);
//     }
//     if (serie.present) {
//       map['SERIE'] = Variable<String?>(serie.value);
//     }
//     if (numero.present) {
//       map['NUMERO'] = Variable<String?>(numero.value);
//     }
//     if (dataHoraEmissao.present) {
//       map['DATA_HORA_EMISSAO'] = Variable<DateTime?>(dataHoraEmissao.value);
//     }
//     if (dataHoraEntradaSaida.present) {
//       map['DATA_HORA_ENTRADA_SAIDA'] =
//           Variable<DateTime?>(dataHoraEntradaSaida.value);
//     }
//     if (tipoOperacao.present) {
//       map['TIPO_OPERACAO'] = Variable<String?>(tipoOperacao.value);
//     }
//     if (localDestino.present) {
//       map['LOCAL_DESTINO'] = Variable<String?>(localDestino.value);
//     }
//     if (codigoMunicipio.present) {
//       map['CODIGO_MUNICIPIO'] = Variable<int?>(codigoMunicipio.value);
//     }
//     if (formatoImpressaoDanfe.present) {
//       map['FORMATO_IMPRESSAO_DANFE'] =
//           Variable<String?>(formatoImpressaoDanfe.value);
//     }
//     if (tipoEmissao.present) {
//       map['TIPO_EMISSAO'] = Variable<String?>(tipoEmissao.value);
//     }
//     if (chaveAcesso.present) {
//       map['CHAVE_ACESSO'] = Variable<String?>(chaveAcesso.value);
//     }
//     if (digitoChaveAcesso.present) {
//       map['DIGITO_CHAVE_ACESSO'] = Variable<String?>(digitoChaveAcesso.value);
//     }
//     if (ambiente.present) {
//       map['AMBIENTE'] = Variable<String?>(ambiente.value);
//     }
//     if (finalidadeEmissao.present) {
//       map['FINALIDADE_EMISSAO'] = Variable<String?>(finalidadeEmissao.value);
//     }
//     if (consumidorOperacao.present) {
//       map['CONSUMIDOR_OPERACAO'] = Variable<String?>(consumidorOperacao.value);
//     }
//     if (consumidorPresenca.present) {
//       map['CONSUMIDOR_PRESENCA'] = Variable<String?>(consumidorPresenca.value);
//     }
//     if (processoEmissao.present) {
//       map['PROCESSO_EMISSAO'] = Variable<String?>(processoEmissao.value);
//     }
//     if (versaoProcessoEmissao.present) {
//       map['VERSAO_PROCESSO_EMISSAO'] =
//           Variable<String?>(versaoProcessoEmissao.value);
//     }
//     if (dataEntradaContingencia.present) {
//       map['DATA_ENTRADA_CONTINGENCIA'] =
//           Variable<DateTime?>(dataEntradaContingencia.value);
//     }
//     if (justificativaContingencia.present) {
//       map['JUSTIFICATIVA_CONTINGENCIA'] =
//           Variable<String?>(justificativaContingencia.value);
//     }
//     if (baseCalculoIcms.present) {
//       map['BASE_CALCULO_ICMS'] = Variable<double?>(baseCalculoIcms.value);
//     }
//     if (valorIcms.present) {
//       map['VALOR_ICMS'] = Variable<double?>(valorIcms.value);
//     }
//     if (valorIcmsDesonerado.present) {
//       map['VALOR_ICMS_DESONERADO'] =
//           Variable<double?>(valorIcmsDesonerado.value);
//     }
//     if (totalIcmsFcpUfDestino.present) {
//       map['TOTAL_ICMS_FCP_UF_DESTINO'] =
//           Variable<double?>(totalIcmsFcpUfDestino.value);
//     }
//     if (totalIcmsInterestadualUfDestino.present) {
//       map['TOTAL_ICMS_INTERESTADUAL_UF_DESTINO'] =
//           Variable<double?>(totalIcmsInterestadualUfDestino.value);
//     }
//     if (totalIcmsInterestadualUfRemetente.present) {
//       map['TOTAL_ICMS_INTERESTADUAL_UF_REMETENTE'] =
//           Variable<double?>(totalIcmsInterestadualUfRemetente.value);
//     }
//     if (valorTotalFcp.present) {
//       map['VALOR_TOTAL_FCP'] = Variable<double?>(valorTotalFcp.value);
//     }
//     if (baseCalculoIcmsSt.present) {
//       map['BASE_CALCULO_ICMS_ST'] = Variable<double?>(baseCalculoIcmsSt.value);
//     }
//     if (valorIcmsSt.present) {
//       map['VALOR_ICMS_ST'] = Variable<double?>(valorIcmsSt.value);
//     }
//     if (valorTotalFcpSt.present) {
//       map['VALOR_TOTAL_FCP_ST'] = Variable<double?>(valorTotalFcpSt.value);
//     }
//     if (valorTotalFcpStRetido.present) {
//       map['VALOR_TOTAL_FCP_ST_RETIDO'] =
//           Variable<double?>(valorTotalFcpStRetido.value);
//     }
//     if (valorTotalProdutos.present) {
//       map['VALOR_TOTAL_PRODUTOS'] = Variable<double?>(valorTotalProdutos.value);
//     }
//     if (valorFrete.present) {
//       map['VALOR_FRETE'] = Variable<double?>(valorFrete.value);
//     }
//     if (valorSeguro.present) {
//       map['VALOR_SEGURO'] = Variable<double?>(valorSeguro.value);
//     }
//     if (valorDesconto.present) {
//       map['VALOR_DESCONTO'] = Variable<double?>(valorDesconto.value);
//     }
//     if (valorImpostoImportacao.present) {
//       map['VALOR_IMPOSTO_IMPORTACAO'] =
//           Variable<double?>(valorImpostoImportacao.value);
//     }
//     if (valorIpi.present) {
//       map['VALOR_IPI'] = Variable<double?>(valorIpi.value);
//     }
//     if (valorIpiDevolvido.present) {
//       map['VALOR_IPI_DEVOLVIDO'] = Variable<double?>(valorIpiDevolvido.value);
//     }
//     if (valorPis.present) {
//       map['VALOR_PIS'] = Variable<double?>(valorPis.value);
//     }
//     if (valorCofins.present) {
//       map['VALOR_COFINS'] = Variable<double?>(valorCofins.value);
//     }
//     if (valorDespesasAcessorias.present) {
//       map['VALOR_DESPESAS_ACESSORIAS'] =
//           Variable<double?>(valorDespesasAcessorias.value);
//     }
//     if (valorTotal.present) {
//       map['VALOR_TOTAL'] = Variable<double?>(valorTotal.value);
//     }
//     if (valorTotalTributos.present) {
//       map['VALOR_TOTAL_TRIBUTOS'] = Variable<double?>(valorTotalTributos.value);
//     }
//     if (valorServicos.present) {
//       map['VALOR_SERVICOS'] = Variable<double?>(valorServicos.value);
//     }
//     if (baseCalculoIssqn.present) {
//       map['BASE_CALCULO_ISSQN'] = Variable<double?>(baseCalculoIssqn.value);
//     }
//     if (valorIssqn.present) {
//       map['VALOR_ISSQN'] = Variable<double?>(valorIssqn.value);
//     }
//     if (valorPisIssqn.present) {
//       map['VALOR_PIS_ISSQN'] = Variable<double?>(valorPisIssqn.value);
//     }
//     if (valorCofinsIssqn.present) {
//       map['VALOR_COFINS_ISSQN'] = Variable<double?>(valorCofinsIssqn.value);
//     }
//     if (dataPrestacaoServico.present) {
//       map['DATA_PRESTACAO_SERVICO'] =
//           Variable<DateTime?>(dataPrestacaoServico.value);
//     }
//     if (valorDeducaoIssqn.present) {
//       map['VALOR_DEDUCAO_ISSQN'] = Variable<double?>(valorDeducaoIssqn.value);
//     }
//     if (outrasRetencoesIssqn.present) {
//       map['OUTRAS_RETENCOES_ISSQN'] =
//           Variable<double?>(outrasRetencoesIssqn.value);
//     }
//     if (descontoIncondicionadoIssqn.present) {
//       map['DESCONTO_INCONDICIONADO_ISSQN'] =
//           Variable<double?>(descontoIncondicionadoIssqn.value);
//     }
//     if (descontoCondicionadoIssqn.present) {
//       map['DESCONTO_CONDICIONADO_ISSQN'] =
//           Variable<double?>(descontoCondicionadoIssqn.value);
//     }
//     if (totalRetencaoIssqn.present) {
//       map['TOTAL_RETENCAO_ISSQN'] = Variable<double?>(totalRetencaoIssqn.value);
//     }
//     if (regimeEspecialTributacao.present) {
//       map['REGIME_ESPECIAL_TRIBUTACAO'] =
//           Variable<String?>(regimeEspecialTributacao.value);
//     }
//     if (valorRetidoPis.present) {
//       map['VALOR_RETIDO_PIS'] = Variable<double?>(valorRetidoPis.value);
//     }
//     if (valorRetidoCofins.present) {
//       map['VALOR_RETIDO_COFINS'] = Variable<double?>(valorRetidoCofins.value);
//     }
//     if (valorRetidoCsll.present) {
//       map['VALOR_RETIDO_CSLL'] = Variable<double?>(valorRetidoCsll.value);
//     }
//     if (baseCalculoIrrf.present) {
//       map['BASE_CALCULO_IRRF'] = Variable<double?>(baseCalculoIrrf.value);
//     }
//     if (valorRetidoIrrf.present) {
//       map['VALOR_RETIDO_IRRF'] = Variable<double?>(valorRetidoIrrf.value);
//     }
//     if (baseCalculoPrevidencia.present) {
//       map['BASE_CALCULO_PREVIDENCIA'] =
//           Variable<double?>(baseCalculoPrevidencia.value);
//     }
//     if (valorRetidoPrevidencia.present) {
//       map['VALOR_RETIDO_PREVIDENCIA'] =
//           Variable<double?>(valorRetidoPrevidencia.value);
//     }
//     if (informacoesAddFisco.present) {
//       map['INFORMACOES_ADD_FISCO'] =
//           Variable<String?>(informacoesAddFisco.value);
//     }
//     if (informacoesAddContribuinte.present) {
//       map['INFORMACOES_ADD_CONTRIBUINTE'] =
//           Variable<String?>(informacoesAddContribuinte.value);
//     }
//     if (comexUfEmbarque.present) {
//       map['COMEX_UF_EMBARQUE'] = Variable<String?>(comexUfEmbarque.value);
//     }
//     if (comexLocalEmbarque.present) {
//       map['COMEX_LOCAL_EMBARQUE'] = Variable<String?>(comexLocalEmbarque.value);
//     }
//     if (comexLocalDespacho.present) {
//       map['COMEX_LOCAL_DESPACHO'] = Variable<String?>(comexLocalDespacho.value);
//     }
//     if (compraNotaEmpenho.present) {
//       map['COMPRA_NOTA_EMPENHO'] = Variable<String?>(compraNotaEmpenho.value);
//     }
//     if (compraPedido.present) {
//       map['COMPRA_PEDIDO'] = Variable<String?>(compraPedido.value);
//     }
//     if (compraContrato.present) {
//       map['COMPRA_CONTRATO'] = Variable<String?>(compraContrato.value);
//     }
//     if (qrcode.present) {
//       map['QRCODE'] = Variable<String?>(qrcode.value);
//     }
//     if (urlChave.present) {
//       map['URL_CHAVE'] = Variable<String?>(urlChave.value);
//     }
//     if (statusNota.present) {
//       map['STATUS_NOTA'] = Variable<String?>(statusNota.value);
//     }
//     if (idPdvVendaCabecalho.present) {
//       map['ID_PDV_VENDA_CABECALHO'] = Variable<int?>(idPdvVendaCabecalho.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeCabecalhosCompanion(')
//           ..write('id: $id, ')
//           ..write('idTributOperacaoFiscal: $idTributOperacaoFiscal, ')
//           ..write('ufEmitente: $ufEmitente, ')
//           ..write('codigoNumerico: $codigoNumerico, ')
//           ..write('naturezaOperacao: $naturezaOperacao, ')
//           ..write('codigoModelo: $codigoModelo, ')
//           ..write('serie: $serie, ')
//           ..write('numero: $numero, ')
//           ..write('dataHoraEmissao: $dataHoraEmissao, ')
//           ..write('dataHoraEntradaSaida: $dataHoraEntradaSaida, ')
//           ..write('tipoOperacao: $tipoOperacao, ')
//           ..write('localDestino: $localDestino, ')
//           ..write('codigoMunicipio: $codigoMunicipio, ')
//           ..write('formatoImpressaoDanfe: $formatoImpressaoDanfe, ')
//           ..write('tipoEmissao: $tipoEmissao, ')
//           ..write('chaveAcesso: $chaveAcesso, ')
//           ..write('digitoChaveAcesso: $digitoChaveAcesso, ')
//           ..write('ambiente: $ambiente, ')
//           ..write('finalidadeEmissao: $finalidadeEmissao, ')
//           ..write('consumidorOperacao: $consumidorOperacao, ')
//           ..write('consumidorPresenca: $consumidorPresenca, ')
//           ..write('processoEmissao: $processoEmissao, ')
//           ..write('versaoProcessoEmissao: $versaoProcessoEmissao, ')
//           ..write('dataEntradaContingencia: $dataEntradaContingencia, ')
//           ..write('justificativaContingencia: $justificativaContingencia, ')
//           ..write('baseCalculoIcms: $baseCalculoIcms, ')
//           ..write('valorIcms: $valorIcms, ')
//           ..write('valorIcmsDesonerado: $valorIcmsDesonerado, ')
//           ..write('totalIcmsFcpUfDestino: $totalIcmsFcpUfDestino, ')
//           ..write(
//               'totalIcmsInterestadualUfDestino: $totalIcmsInterestadualUfDestino, ')
//           ..write(
//               'totalIcmsInterestadualUfRemetente: $totalIcmsInterestadualUfRemetente, ')
//           ..write('valorTotalFcp: $valorTotalFcp, ')
//           ..write('baseCalculoIcmsSt: $baseCalculoIcmsSt, ')
//           ..write('valorIcmsSt: $valorIcmsSt, ')
//           ..write('valorTotalFcpSt: $valorTotalFcpSt, ')
//           ..write('valorTotalFcpStRetido: $valorTotalFcpStRetido, ')
//           ..write('valorTotalProdutos: $valorTotalProdutos, ')
//           ..write('valorFrete: $valorFrete, ')
//           ..write('valorSeguro: $valorSeguro, ')
//           ..write('valorDesconto: $valorDesconto, ')
//           ..write('valorImpostoImportacao: $valorImpostoImportacao, ')
//           ..write('valorIpi: $valorIpi, ')
//           ..write('valorIpiDevolvido: $valorIpiDevolvido, ')
//           ..write('valorPis: $valorPis, ')
//           ..write('valorCofins: $valorCofins, ')
//           ..write('valorDespesasAcessorias: $valorDespesasAcessorias, ')
//           ..write('valorTotal: $valorTotal, ')
//           ..write('valorTotalTributos: $valorTotalTributos, ')
//           ..write('valorServicos: $valorServicos, ')
//           ..write('baseCalculoIssqn: $baseCalculoIssqn, ')
//           ..write('valorIssqn: $valorIssqn, ')
//           ..write('valorPisIssqn: $valorPisIssqn, ')
//           ..write('valorCofinsIssqn: $valorCofinsIssqn, ')
//           ..write('dataPrestacaoServico: $dataPrestacaoServico, ')
//           ..write('valorDeducaoIssqn: $valorDeducaoIssqn, ')
//           ..write('outrasRetencoesIssqn: $outrasRetencoesIssqn, ')
//           ..write('descontoIncondicionadoIssqn: $descontoIncondicionadoIssqn, ')
//           ..write('descontoCondicionadoIssqn: $descontoCondicionadoIssqn, ')
//           ..write('totalRetencaoIssqn: $totalRetencaoIssqn, ')
//           ..write('regimeEspecialTributacao: $regimeEspecialTributacao, ')
//           ..write('valorRetidoPis: $valorRetidoPis, ')
//           ..write('valorRetidoCofins: $valorRetidoCofins, ')
//           ..write('valorRetidoCsll: $valorRetidoCsll, ')
//           ..write('baseCalculoIrrf: $baseCalculoIrrf, ')
//           ..write('valorRetidoIrrf: $valorRetidoIrrf, ')
//           ..write('baseCalculoPrevidencia: $baseCalculoPrevidencia, ')
//           ..write('valorRetidoPrevidencia: $valorRetidoPrevidencia, ')
//           ..write('informacoesAddFisco: $informacoesAddFisco, ')
//           ..write('informacoesAddContribuinte: $informacoesAddContribuinte, ')
//           ..write('comexUfEmbarque: $comexUfEmbarque, ')
//           ..write('comexLocalEmbarque: $comexLocalEmbarque, ')
//           ..write('comexLocalDespacho: $comexLocalDespacho, ')
//           ..write('compraNotaEmpenho: $compraNotaEmpenho, ')
//           ..write('compraPedido: $compraPedido, ')
//           ..write('compraContrato: $compraContrato, ')
//           ..write('qrcode: $qrcode, ')
//           ..write('urlChave: $urlChave, ')
//           ..write('statusNota: $statusNota, ')
//           ..write('idPdvVendaCabecalho: $idPdvVendaCabecalho')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeCabecalhosTable extends NfeCabecalhos
//     with TableInfo<$NfeCabecalhosTable, NfeCabecalho> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeCabecalhosTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idTributOperacaoFiscalMeta =
//       const VerificationMeta('idTributOperacaoFiscal');
//   late final GeneratedColumn<int?> idTributOperacaoFiscal =
//       GeneratedColumn<int?>('ID_TRIBUT_OPERACAO_FISCAL', aliasedName, true,
//           typeName: 'INTEGER',
//           requiredDuringInsert: false,
//           $customConstraints: 'NULLABLE REFERENCES TRIBUT_OPERACAO_FISCAL(ID)');
//   final VerificationMeta _ufEmitenteMeta = const VerificationMeta('ufEmitente');
//   late final GeneratedColumn<int?> ufEmitente = GeneratedColumn<int?>(
//       'UF_EMITENTE', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _codigoNumericoMeta =
//       const VerificationMeta('codigoNumerico');
//   late final GeneratedColumn<String?> codigoNumerico = GeneratedColumn<String?>(
//       'CODIGO_NUMERICO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _naturezaOperacaoMeta =
//       const VerificationMeta('naturezaOperacao');
//   late final GeneratedColumn<String?> naturezaOperacao =
//       GeneratedColumn<String?>('NATUREZA_OPERACAO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 60),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _codigoModeloMeta =
//       const VerificationMeta('codigoModelo');
//   late final GeneratedColumn<String?> codigoModelo = GeneratedColumn<String?>(
//       'CODIGO_MODELO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _serieMeta = const VerificationMeta('serie');
//   late final GeneratedColumn<String?> serie = GeneratedColumn<String?>(
//       'SERIE', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 3),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _numeroMeta = const VerificationMeta('numero');
//   late final GeneratedColumn<String?> numero = GeneratedColumn<String?>(
//       'NUMERO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 9),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _dataHoraEmissaoMeta =
//       const VerificationMeta('dataHoraEmissao');
//   late final GeneratedColumn<DateTime?> dataHoraEmissao =
//       GeneratedColumn<DateTime?>('DATA_HORA_EMISSAO', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _dataHoraEntradaSaidaMeta =
//       const VerificationMeta('dataHoraEntradaSaida');
//   late final GeneratedColumn<DateTime?> dataHoraEntradaSaida =
//       GeneratedColumn<DateTime?>('DATA_HORA_ENTRADA_SAIDA', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _tipoOperacaoMeta =
//       const VerificationMeta('tipoOperacao');
//   late final GeneratedColumn<String?> tipoOperacao = GeneratedColumn<String?>(
//       'TIPO_OPERACAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _localDestinoMeta =
//       const VerificationMeta('localDestino');
//   late final GeneratedColumn<String?> localDestino = GeneratedColumn<String?>(
//       'LOCAL_DESTINO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _codigoMunicipioMeta =
//       const VerificationMeta('codigoMunicipio');
//   late final GeneratedColumn<int?> codigoMunicipio = GeneratedColumn<int?>(
//       'CODIGO_MUNICIPIO', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _formatoImpressaoDanfeMeta =
//       const VerificationMeta('formatoImpressaoDanfe');
//   late final GeneratedColumn<String?> formatoImpressaoDanfe =
//       GeneratedColumn<String?>('FORMATO_IMPRESSAO_DANFE', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _tipoEmissaoMeta =
//       const VerificationMeta('tipoEmissao');
//   late final GeneratedColumn<String?> tipoEmissao = GeneratedColumn<String?>(
//       'TIPO_EMISSAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _chaveAcessoMeta =
//       const VerificationMeta('chaveAcesso');
//   late final GeneratedColumn<String?> chaveAcesso = GeneratedColumn<String?>(
//       'CHAVE_ACESSO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 44),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _digitoChaveAcessoMeta =
//       const VerificationMeta('digitoChaveAcesso');
//   late final GeneratedColumn<String?> digitoChaveAcesso =
//       GeneratedColumn<String?>('DIGITO_CHAVE_ACESSO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _ambienteMeta = const VerificationMeta('ambiente');
//   late final GeneratedColumn<String?> ambiente = GeneratedColumn<String?>(
//       'AMBIENTE', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _finalidadeEmissaoMeta =
//       const VerificationMeta('finalidadeEmissao');
//   late final GeneratedColumn<String?> finalidadeEmissao =
//       GeneratedColumn<String?>('FINALIDADE_EMISSAO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _consumidorOperacaoMeta =
//       const VerificationMeta('consumidorOperacao');
//   late final GeneratedColumn<String?> consumidorOperacao =
//       GeneratedColumn<String?>(
//           'CONSUMIDOR_OPERACAO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _consumidorPresencaMeta =
//       const VerificationMeta('consumidorPresenca');
//   late final GeneratedColumn<String?> consumidorPresenca =
//       GeneratedColumn<String?>(
//           'CONSUMIDOR_PRESENCA', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _processoEmissaoMeta =
//       const VerificationMeta('processoEmissao');
//   late final GeneratedColumn<String?> processoEmissao =
//       GeneratedColumn<String?>('PROCESSO_EMISSAO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _versaoProcessoEmissaoMeta =
//       const VerificationMeta('versaoProcessoEmissao');
//   late final GeneratedColumn<String?> versaoProcessoEmissao =
//       GeneratedColumn<String?>('VERSAO_PROCESSO_EMISSAO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 20),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _dataEntradaContingenciaMeta =
//       const VerificationMeta('dataEntradaContingencia');
//   late final GeneratedColumn<DateTime?> dataEntradaContingencia =
//       GeneratedColumn<DateTime?>('DATA_ENTRADA_CONTINGENCIA', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _justificativaContingenciaMeta =
//       const VerificationMeta('justificativaContingencia');
//   late final GeneratedColumn<String?> justificativaContingencia =
//       GeneratedColumn<String?>('JUSTIFICATIVA_CONTINGENCIA', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 255),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _baseCalculoIcmsMeta =
//       const VerificationMeta('baseCalculoIcms');
//   late final GeneratedColumn<double?> baseCalculoIcms =
//       GeneratedColumn<double?>('BASE_CALCULO_ICMS', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorIcmsMeta = const VerificationMeta('valorIcms');
//   late final GeneratedColumn<double?> valorIcms = GeneratedColumn<double?>(
//       'VALOR_ICMS', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorIcmsDesoneradoMeta =
//       const VerificationMeta('valorIcmsDesonerado');
//   late final GeneratedColumn<double?> valorIcmsDesonerado =
//       GeneratedColumn<double?>('VALOR_ICMS_DESONERADO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _totalIcmsFcpUfDestinoMeta =
//       const VerificationMeta('totalIcmsFcpUfDestino');
//   late final GeneratedColumn<double?> totalIcmsFcpUfDestino =
//       GeneratedColumn<double?>('TOTAL_ICMS_FCP_UF_DESTINO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _totalIcmsInterestadualUfDestinoMeta =
//       const VerificationMeta('totalIcmsInterestadualUfDestino');
//   late final GeneratedColumn<double?> totalIcmsInterestadualUfDestino =
//       GeneratedColumn<double?>(
//           'TOTAL_ICMS_INTERESTADUAL_UF_DESTINO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _totalIcmsInterestadualUfRemetenteMeta =
//       const VerificationMeta('totalIcmsInterestadualUfRemetente');
//   late final GeneratedColumn<double?> totalIcmsInterestadualUfRemetente =
//       GeneratedColumn<double?>(
//           'TOTAL_ICMS_INTERESTADUAL_UF_REMETENTE', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorTotalFcpMeta =
//       const VerificationMeta('valorTotalFcp');
//   late final GeneratedColumn<double?> valorTotalFcp = GeneratedColumn<double?>(
//       'VALOR_TOTAL_FCP', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _baseCalculoIcmsStMeta =
//       const VerificationMeta('baseCalculoIcmsSt');
//   late final GeneratedColumn<double?> baseCalculoIcmsSt =
//       GeneratedColumn<double?>('BASE_CALCULO_ICMS_ST', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorIcmsStMeta =
//       const VerificationMeta('valorIcmsSt');
//   late final GeneratedColumn<double?> valorIcmsSt = GeneratedColumn<double?>(
//       'VALOR_ICMS_ST', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorTotalFcpStMeta =
//       const VerificationMeta('valorTotalFcpSt');
//   late final GeneratedColumn<double?> valorTotalFcpSt =
//       GeneratedColumn<double?>('VALOR_TOTAL_FCP_ST', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorTotalFcpStRetidoMeta =
//       const VerificationMeta('valorTotalFcpStRetido');
//   late final GeneratedColumn<double?> valorTotalFcpStRetido =
//       GeneratedColumn<double?>('VALOR_TOTAL_FCP_ST_RETIDO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorTotalProdutosMeta =
//       const VerificationMeta('valorTotalProdutos');
//   late final GeneratedColumn<double?> valorTotalProdutos =
//       GeneratedColumn<double?>('VALOR_TOTAL_PRODUTOS', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorFreteMeta = const VerificationMeta('valorFrete');
//   late final GeneratedColumn<double?> valorFrete = GeneratedColumn<double?>(
//       'VALOR_FRETE', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorSeguroMeta =
//       const VerificationMeta('valorSeguro');
//   late final GeneratedColumn<double?> valorSeguro = GeneratedColumn<double?>(
//       'VALOR_SEGURO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorDescontoMeta =
//       const VerificationMeta('valorDesconto');
//   late final GeneratedColumn<double?> valorDesconto = GeneratedColumn<double?>(
//       'VALOR_DESCONTO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorImpostoImportacaoMeta =
//       const VerificationMeta('valorImpostoImportacao');
//   late final GeneratedColumn<double?> valorImpostoImportacao =
//       GeneratedColumn<double?>('VALOR_IMPOSTO_IMPORTACAO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorIpiMeta = const VerificationMeta('valorIpi');
//   late final GeneratedColumn<double?> valorIpi = GeneratedColumn<double?>(
//       'VALOR_IPI', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorIpiDevolvidoMeta =
//       const VerificationMeta('valorIpiDevolvido');
//   late final GeneratedColumn<double?> valorIpiDevolvido =
//       GeneratedColumn<double?>('VALOR_IPI_DEVOLVIDO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorPisMeta = const VerificationMeta('valorPis');
//   late final GeneratedColumn<double?> valorPis = GeneratedColumn<double?>(
//       'VALOR_PIS', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorCofinsMeta =
//       const VerificationMeta('valorCofins');
//   late final GeneratedColumn<double?> valorCofins = GeneratedColumn<double?>(
//       'VALOR_COFINS', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorDespesasAcessoriasMeta =
//       const VerificationMeta('valorDespesasAcessorias');
//   late final GeneratedColumn<double?> valorDespesasAcessorias =
//       GeneratedColumn<double?>('VALOR_DESPESAS_ACESSORIAS', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorTotalMeta = const VerificationMeta('valorTotal');
//   late final GeneratedColumn<double?> valorTotal = GeneratedColumn<double?>(
//       'VALOR_TOTAL', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorTotalTributosMeta =
//       const VerificationMeta('valorTotalTributos');
//   late final GeneratedColumn<double?> valorTotalTributos =
//       GeneratedColumn<double?>('VALOR_TOTAL_TRIBUTOS', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorServicosMeta =
//       const VerificationMeta('valorServicos');
//   late final GeneratedColumn<double?> valorServicos = GeneratedColumn<double?>(
//       'VALOR_SERVICOS', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _baseCalculoIssqnMeta =
//       const VerificationMeta('baseCalculoIssqn');
//   late final GeneratedColumn<double?> baseCalculoIssqn =
//       GeneratedColumn<double?>('BASE_CALCULO_ISSQN', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorIssqnMeta = const VerificationMeta('valorIssqn');
//   late final GeneratedColumn<double?> valorIssqn = GeneratedColumn<double?>(
//       'VALOR_ISSQN', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorPisIssqnMeta =
//       const VerificationMeta('valorPisIssqn');
//   late final GeneratedColumn<double?> valorPisIssqn = GeneratedColumn<double?>(
//       'VALOR_PIS_ISSQN', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorCofinsIssqnMeta =
//       const VerificationMeta('valorCofinsIssqn');
//   late final GeneratedColumn<double?> valorCofinsIssqn =
//       GeneratedColumn<double?>('VALOR_COFINS_ISSQN', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _dataPrestacaoServicoMeta =
//       const VerificationMeta('dataPrestacaoServico');
//   late final GeneratedColumn<DateTime?> dataPrestacaoServico =
//       GeneratedColumn<DateTime?>('DATA_PRESTACAO_SERVICO', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _valorDeducaoIssqnMeta =
//       const VerificationMeta('valorDeducaoIssqn');
//   late final GeneratedColumn<double?> valorDeducaoIssqn =
//       GeneratedColumn<double?>('VALOR_DEDUCAO_ISSQN', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _outrasRetencoesIssqnMeta =
//       const VerificationMeta('outrasRetencoesIssqn');
//   late final GeneratedColumn<double?> outrasRetencoesIssqn =
//       GeneratedColumn<double?>('OUTRAS_RETENCOES_ISSQN', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _descontoIncondicionadoIssqnMeta =
//       const VerificationMeta('descontoIncondicionadoIssqn');
//   late final GeneratedColumn<double?> descontoIncondicionadoIssqn =
//       GeneratedColumn<double?>(
//           'DESCONTO_INCONDICIONADO_ISSQN', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _descontoCondicionadoIssqnMeta =
//       const VerificationMeta('descontoCondicionadoIssqn');
//   late final GeneratedColumn<double?> descontoCondicionadoIssqn =
//       GeneratedColumn<double?>('DESCONTO_CONDICIONADO_ISSQN', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _totalRetencaoIssqnMeta =
//       const VerificationMeta('totalRetencaoIssqn');
//   late final GeneratedColumn<double?> totalRetencaoIssqn =
//       GeneratedColumn<double?>('TOTAL_RETENCAO_ISSQN', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _regimeEspecialTributacaoMeta =
//       const VerificationMeta('regimeEspecialTributacao');
//   late final GeneratedColumn<String?> regimeEspecialTributacao =
//       GeneratedColumn<String?>('REGIME_ESPECIAL_TRIBUTACAO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _valorRetidoPisMeta =
//       const VerificationMeta('valorRetidoPis');
//   late final GeneratedColumn<double?> valorRetidoPis = GeneratedColumn<double?>(
//       'VALOR_RETIDO_PIS', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorRetidoCofinsMeta =
//       const VerificationMeta('valorRetidoCofins');
//   late final GeneratedColumn<double?> valorRetidoCofins =
//       GeneratedColumn<double?>('VALOR_RETIDO_COFINS', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorRetidoCsllMeta =
//       const VerificationMeta('valorRetidoCsll');
//   late final GeneratedColumn<double?> valorRetidoCsll =
//       GeneratedColumn<double?>('VALOR_RETIDO_CSLL', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _baseCalculoIrrfMeta =
//       const VerificationMeta('baseCalculoIrrf');
//   late final GeneratedColumn<double?> baseCalculoIrrf =
//       GeneratedColumn<double?>('BASE_CALCULO_IRRF', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorRetidoIrrfMeta =
//       const VerificationMeta('valorRetidoIrrf');
//   late final GeneratedColumn<double?> valorRetidoIrrf =
//       GeneratedColumn<double?>('VALOR_RETIDO_IRRF', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _baseCalculoPrevidenciaMeta =
//       const VerificationMeta('baseCalculoPrevidencia');
//   late final GeneratedColumn<double?> baseCalculoPrevidencia =
//       GeneratedColumn<double?>('BASE_CALCULO_PREVIDENCIA', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorRetidoPrevidenciaMeta =
//       const VerificationMeta('valorRetidoPrevidencia');
//   late final GeneratedColumn<double?> valorRetidoPrevidencia =
//       GeneratedColumn<double?>('VALOR_RETIDO_PREVIDENCIA', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _informacoesAddFiscoMeta =
//       const VerificationMeta('informacoesAddFisco');
//   late final GeneratedColumn<String?> informacoesAddFisco =
//       GeneratedColumn<String?>('INFORMACOES_ADD_FISCO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 250),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _informacoesAddContribuinteMeta =
//       const VerificationMeta('informacoesAddContribuinte');
//   late final GeneratedColumn<String?> informacoesAddContribuinte =
//       GeneratedColumn<String?>(
//           'INFORMACOES_ADD_CONTRIBUINTE', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 250),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _comexUfEmbarqueMeta =
//       const VerificationMeta('comexUfEmbarque');
//   late final GeneratedColumn<String?> comexUfEmbarque =
//       GeneratedColumn<String?>('COMEX_UF_EMBARQUE', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 2),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _comexLocalEmbarqueMeta =
//       const VerificationMeta('comexLocalEmbarque');
//   late final GeneratedColumn<String?> comexLocalEmbarque =
//       GeneratedColumn<String?>(
//           'COMEX_LOCAL_EMBARQUE', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 60),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _comexLocalDespachoMeta =
//       const VerificationMeta('comexLocalDespacho');
//   late final GeneratedColumn<String?> comexLocalDespacho =
//       GeneratedColumn<String?>(
//           'COMEX_LOCAL_DESPACHO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 60),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _compraNotaEmpenhoMeta =
//       const VerificationMeta('compraNotaEmpenho');
//   late final GeneratedColumn<String?> compraNotaEmpenho =
//       GeneratedColumn<String?>('COMPRA_NOTA_EMPENHO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 22),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _compraPedidoMeta =
//       const VerificationMeta('compraPedido');
//   late final GeneratedColumn<String?> compraPedido = GeneratedColumn<String?>(
//       'COMPRA_PEDIDO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _compraContratoMeta =
//       const VerificationMeta('compraContrato');
//   late final GeneratedColumn<String?> compraContrato = GeneratedColumn<String?>(
//       'COMPRA_CONTRATO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _qrcodeMeta = const VerificationMeta('qrcode');
//   late final GeneratedColumn<String?> qrcode = GeneratedColumn<String?>(
//       'QRCODE', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _urlChaveMeta = const VerificationMeta('urlChave');
//   late final GeneratedColumn<String?> urlChave = GeneratedColumn<String?>(
//       'URL_CHAVE', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 85),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _statusNotaMeta = const VerificationMeta('statusNota');
//   late final GeneratedColumn<String?> statusNota = GeneratedColumn<String?>(
//       'STATUS_NOTA', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _idPdvVendaCabecalhoMeta =
//       const VerificationMeta('idPdvVendaCabecalho');
//   late final GeneratedColumn<int?> idPdvVendaCabecalho = GeneratedColumn<int?>(
//       'ID_PDV_VENDA_CABECALHO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES PDV_VENDA_CABECALHO(ID)');
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idTributOperacaoFiscal,
//         ufEmitente,
//         codigoNumerico,
//         naturezaOperacao,
//         codigoModelo,
//         serie,
//         numero,
//         dataHoraEmissao,
//         dataHoraEntradaSaida,
//         tipoOperacao,
//         localDestino,
//         codigoMunicipio,
//         formatoImpressaoDanfe,
//         tipoEmissao,
//         chaveAcesso,
//         digitoChaveAcesso,
//         ambiente,
//         finalidadeEmissao,
//         consumidorOperacao,
//         consumidorPresenca,
//         processoEmissao,
//         versaoProcessoEmissao,
//         dataEntradaContingencia,
//         justificativaContingencia,
//         baseCalculoIcms,
//         valorIcms,
//         valorIcmsDesonerado,
//         totalIcmsFcpUfDestino,
//         totalIcmsInterestadualUfDestino,
//         totalIcmsInterestadualUfRemetente,
//         valorTotalFcp,
//         baseCalculoIcmsSt,
//         valorIcmsSt,
//         valorTotalFcpSt,
//         valorTotalFcpStRetido,
//         valorTotalProdutos,
//         valorFrete,
//         valorSeguro,
//         valorDesconto,
//         valorImpostoImportacao,
//         valorIpi,
//         valorIpiDevolvido,
//         valorPis,
//         valorCofins,
//         valorDespesasAcessorias,
//         valorTotal,
//         valorTotalTributos,
//         valorServicos,
//         baseCalculoIssqn,
//         valorIssqn,
//         valorPisIssqn,
//         valorCofinsIssqn,
//         dataPrestacaoServico,
//         valorDeducaoIssqn,
//         outrasRetencoesIssqn,
//         descontoIncondicionadoIssqn,
//         descontoCondicionadoIssqn,
//         totalRetencaoIssqn,
//         regimeEspecialTributacao,
//         valorRetidoPis,
//         valorRetidoCofins,
//         valorRetidoCsll,
//         baseCalculoIrrf,
//         valorRetidoIrrf,
//         baseCalculoPrevidencia,
//         valorRetidoPrevidencia,
//         informacoesAddFisco,
//         informacoesAddContribuinte,
//         comexUfEmbarque,
//         comexLocalEmbarque,
//         comexLocalDespacho,
//         compraNotaEmpenho,
//         compraPedido,
//         compraContrato,
//         qrcode,
//         urlChave,
//         statusNota,
//         idPdvVendaCabecalho
//       ];
//   @override
//   String get aliasedName => _alias ?? 'NFE_CABECALHO';
//   @override
//   String get actualTableName => 'NFE_CABECALHO';
//   @override
//   VerificationContext validateIntegrity(Insertable<NfeCabecalho> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_TRIBUT_OPERACAO_FISCAL')) {
//       context.handle(
//           _idTributOperacaoFiscalMeta,
//           idTributOperacaoFiscal.isAcceptableOrUnknown(
//               data['ID_TRIBUT_OPERACAO_FISCAL']!, _idTributOperacaoFiscalMeta));
//     }
//     if (data.containsKey('UF_EMITENTE')) {
//       context.handle(
//           _ufEmitenteMeta,
//           ufEmitente.isAcceptableOrUnknown(
//               data['UF_EMITENTE']!, _ufEmitenteMeta));
//     }
//     if (data.containsKey('CODIGO_NUMERICO')) {
//       context.handle(
//           _codigoNumericoMeta,
//           codigoNumerico.isAcceptableOrUnknown(
//               data['CODIGO_NUMERICO']!, _codigoNumericoMeta));
//     }
//     if (data.containsKey('NATUREZA_OPERACAO')) {
//       context.handle(
//           _naturezaOperacaoMeta,
//           naturezaOperacao.isAcceptableOrUnknown(
//               data['NATUREZA_OPERACAO']!, _naturezaOperacaoMeta));
//     }
//     if (data.containsKey('CODIGO_MODELO')) {
//       context.handle(
//           _codigoModeloMeta,
//           codigoModelo.isAcceptableOrUnknown(
//               data['CODIGO_MODELO']!, _codigoModeloMeta));
//     }
//     if (data.containsKey('SERIE')) {
//       context.handle(
//           _serieMeta, serie.isAcceptableOrUnknown(data['SERIE']!, _serieMeta));
//     }
//     if (data.containsKey('NUMERO')) {
//       context.handle(_numeroMeta,
//           numero.isAcceptableOrUnknown(data['NUMERO']!, _numeroMeta));
//     }
//     if (data.containsKey('DATA_HORA_EMISSAO')) {
//       context.handle(
//           _dataHoraEmissaoMeta,
//           dataHoraEmissao.isAcceptableOrUnknown(
//               data['DATA_HORA_EMISSAO']!, _dataHoraEmissaoMeta));
//     }
//     if (data.containsKey('DATA_HORA_ENTRADA_SAIDA')) {
//       context.handle(
//           _dataHoraEntradaSaidaMeta,
//           dataHoraEntradaSaida.isAcceptableOrUnknown(
//               data['DATA_HORA_ENTRADA_SAIDA']!, _dataHoraEntradaSaidaMeta));
//     }
//     if (data.containsKey('TIPO_OPERACAO')) {
//       context.handle(
//           _tipoOperacaoMeta,
//           tipoOperacao.isAcceptableOrUnknown(
//               data['TIPO_OPERACAO']!, _tipoOperacaoMeta));
//     }
//     if (data.containsKey('LOCAL_DESTINO')) {
//       context.handle(
//           _localDestinoMeta,
//           localDestino.isAcceptableOrUnknown(
//               data['LOCAL_DESTINO']!, _localDestinoMeta));
//     }
//     if (data.containsKey('CODIGO_MUNICIPIO')) {
//       context.handle(
//           _codigoMunicipioMeta,
//           codigoMunicipio.isAcceptableOrUnknown(
//               data['CODIGO_MUNICIPIO']!, _codigoMunicipioMeta));
//     }
//     if (data.containsKey('FORMATO_IMPRESSAO_DANFE')) {
//       context.handle(
//           _formatoImpressaoDanfeMeta,
//           formatoImpressaoDanfe.isAcceptableOrUnknown(
//               data['FORMATO_IMPRESSAO_DANFE']!, _formatoImpressaoDanfeMeta));
//     }
//     if (data.containsKey('TIPO_EMISSAO')) {
//       context.handle(
//           _tipoEmissaoMeta,
//           tipoEmissao.isAcceptableOrUnknown(
//               data['TIPO_EMISSAO']!, _tipoEmissaoMeta));
//     }
//     if (data.containsKey('CHAVE_ACESSO')) {
//       context.handle(
//           _chaveAcessoMeta,
//           chaveAcesso.isAcceptableOrUnknown(
//               data['CHAVE_ACESSO']!, _chaveAcessoMeta));
//     }
//     if (data.containsKey('DIGITO_CHAVE_ACESSO')) {
//       context.handle(
//           _digitoChaveAcessoMeta,
//           digitoChaveAcesso.isAcceptableOrUnknown(
//               data['DIGITO_CHAVE_ACESSO']!, _digitoChaveAcessoMeta));
//     }
//     if (data.containsKey('AMBIENTE')) {
//       context.handle(_ambienteMeta,
//           ambiente.isAcceptableOrUnknown(data['AMBIENTE']!, _ambienteMeta));
//     }
//     if (data.containsKey('FINALIDADE_EMISSAO')) {
//       context.handle(
//           _finalidadeEmissaoMeta,
//           finalidadeEmissao.isAcceptableOrUnknown(
//               data['FINALIDADE_EMISSAO']!, _finalidadeEmissaoMeta));
//     }
//     if (data.containsKey('CONSUMIDOR_OPERACAO')) {
//       context.handle(
//           _consumidorOperacaoMeta,
//           consumidorOperacao.isAcceptableOrUnknown(
//               data['CONSUMIDOR_OPERACAO']!, _consumidorOperacaoMeta));
//     }
//     if (data.containsKey('CONSUMIDOR_PRESENCA')) {
//       context.handle(
//           _consumidorPresencaMeta,
//           consumidorPresenca.isAcceptableOrUnknown(
//               data['CONSUMIDOR_PRESENCA']!, _consumidorPresencaMeta));
//     }
//     if (data.containsKey('PROCESSO_EMISSAO')) {
//       context.handle(
//           _processoEmissaoMeta,
//           processoEmissao.isAcceptableOrUnknown(
//               data['PROCESSO_EMISSAO']!, _processoEmissaoMeta));
//     }
//     if (data.containsKey('VERSAO_PROCESSO_EMISSAO')) {
//       context.handle(
//           _versaoProcessoEmissaoMeta,
//           versaoProcessoEmissao.isAcceptableOrUnknown(
//               data['VERSAO_PROCESSO_EMISSAO']!, _versaoProcessoEmissaoMeta));
//     }
//     if (data.containsKey('DATA_ENTRADA_CONTINGENCIA')) {
//       context.handle(
//           _dataEntradaContingenciaMeta,
//           dataEntradaContingencia.isAcceptableOrUnknown(
//               data['DATA_ENTRADA_CONTINGENCIA']!,
//               _dataEntradaContingenciaMeta));
//     }
//     if (data.containsKey('JUSTIFICATIVA_CONTINGENCIA')) {
//       context.handle(
//           _justificativaContingenciaMeta,
//           justificativaContingencia.isAcceptableOrUnknown(
//               data['JUSTIFICATIVA_CONTINGENCIA']!,
//               _justificativaContingenciaMeta));
//     }
//     if (data.containsKey('BASE_CALCULO_ICMS')) {
//       context.handle(
//           _baseCalculoIcmsMeta,
//           baseCalculoIcms.isAcceptableOrUnknown(
//               data['BASE_CALCULO_ICMS']!, _baseCalculoIcmsMeta));
//     }
//     if (data.containsKey('VALOR_ICMS')) {
//       context.handle(_valorIcmsMeta,
//           valorIcms.isAcceptableOrUnknown(data['VALOR_ICMS']!, _valorIcmsMeta));
//     }
//     if (data.containsKey('VALOR_ICMS_DESONERADO')) {
//       context.handle(
//           _valorIcmsDesoneradoMeta,
//           valorIcmsDesonerado.isAcceptableOrUnknown(
//               data['VALOR_ICMS_DESONERADO']!, _valorIcmsDesoneradoMeta));
//     }
//     if (data.containsKey('TOTAL_ICMS_FCP_UF_DESTINO')) {
//       context.handle(
//           _totalIcmsFcpUfDestinoMeta,
//           totalIcmsFcpUfDestino.isAcceptableOrUnknown(
//               data['TOTAL_ICMS_FCP_UF_DESTINO']!, _totalIcmsFcpUfDestinoMeta));
//     }
//     if (data.containsKey('TOTAL_ICMS_INTERESTADUAL_UF_DESTINO')) {
//       context.handle(
//           _totalIcmsInterestadualUfDestinoMeta,
//           totalIcmsInterestadualUfDestino.isAcceptableOrUnknown(
//               data['TOTAL_ICMS_INTERESTADUAL_UF_DESTINO']!,
//               _totalIcmsInterestadualUfDestinoMeta));
//     }
//     if (data.containsKey('TOTAL_ICMS_INTERESTADUAL_UF_REMETENTE')) {
//       context.handle(
//           _totalIcmsInterestadualUfRemetenteMeta,
//           totalIcmsInterestadualUfRemetente.isAcceptableOrUnknown(
//               data['TOTAL_ICMS_INTERESTADUAL_UF_REMETENTE']!,
//               _totalIcmsInterestadualUfRemetenteMeta));
//     }
//     if (data.containsKey('VALOR_TOTAL_FCP')) {
//       context.handle(
//           _valorTotalFcpMeta,
//           valorTotalFcp.isAcceptableOrUnknown(
//               data['VALOR_TOTAL_FCP']!, _valorTotalFcpMeta));
//     }
//     if (data.containsKey('BASE_CALCULO_ICMS_ST')) {
//       context.handle(
//           _baseCalculoIcmsStMeta,
//           baseCalculoIcmsSt.isAcceptableOrUnknown(
//               data['BASE_CALCULO_ICMS_ST']!, _baseCalculoIcmsStMeta));
//     }
//     if (data.containsKey('VALOR_ICMS_ST')) {
//       context.handle(
//           _valorIcmsStMeta,
//           valorIcmsSt.isAcceptableOrUnknown(
//               data['VALOR_ICMS_ST']!, _valorIcmsStMeta));
//     }
//     if (data.containsKey('VALOR_TOTAL_FCP_ST')) {
//       context.handle(
//           _valorTotalFcpStMeta,
//           valorTotalFcpSt.isAcceptableOrUnknown(
//               data['VALOR_TOTAL_FCP_ST']!, _valorTotalFcpStMeta));
//     }
//     if (data.containsKey('VALOR_TOTAL_FCP_ST_RETIDO')) {
//       context.handle(
//           _valorTotalFcpStRetidoMeta,
//           valorTotalFcpStRetido.isAcceptableOrUnknown(
//               data['VALOR_TOTAL_FCP_ST_RETIDO']!, _valorTotalFcpStRetidoMeta));
//     }
//     if (data.containsKey('VALOR_TOTAL_PRODUTOS')) {
//       context.handle(
//           _valorTotalProdutosMeta,
//           valorTotalProdutos.isAcceptableOrUnknown(
//               data['VALOR_TOTAL_PRODUTOS']!, _valorTotalProdutosMeta));
//     }
//     if (data.containsKey('VALOR_FRETE')) {
//       context.handle(
//           _valorFreteMeta,
//           valorFrete.isAcceptableOrUnknown(
//               data['VALOR_FRETE']!, _valorFreteMeta));
//     }
//     if (data.containsKey('VALOR_SEGURO')) {
//       context.handle(
//           _valorSeguroMeta,
//           valorSeguro.isAcceptableOrUnknown(
//               data['VALOR_SEGURO']!, _valorSeguroMeta));
//     }
//     if (data.containsKey('VALOR_DESCONTO')) {
//       context.handle(
//           _valorDescontoMeta,
//           valorDesconto.isAcceptableOrUnknown(
//               data['VALOR_DESCONTO']!, _valorDescontoMeta));
//     }
//     if (data.containsKey('VALOR_IMPOSTO_IMPORTACAO')) {
//       context.handle(
//           _valorImpostoImportacaoMeta,
//           valorImpostoImportacao.isAcceptableOrUnknown(
//               data['VALOR_IMPOSTO_IMPORTACAO']!, _valorImpostoImportacaoMeta));
//     }
//     if (data.containsKey('VALOR_IPI')) {
//       context.handle(_valorIpiMeta,
//           valorIpi.isAcceptableOrUnknown(data['VALOR_IPI']!, _valorIpiMeta));
//     }
//     if (data.containsKey('VALOR_IPI_DEVOLVIDO')) {
//       context.handle(
//           _valorIpiDevolvidoMeta,
//           valorIpiDevolvido.isAcceptableOrUnknown(
//               data['VALOR_IPI_DEVOLVIDO']!, _valorIpiDevolvidoMeta));
//     }
//     if (data.containsKey('VALOR_PIS')) {
//       context.handle(_valorPisMeta,
//           valorPis.isAcceptableOrUnknown(data['VALOR_PIS']!, _valorPisMeta));
//     }
//     if (data.containsKey('VALOR_COFINS')) {
//       context.handle(
//           _valorCofinsMeta,
//           valorCofins.isAcceptableOrUnknown(
//               data['VALOR_COFINS']!, _valorCofinsMeta));
//     }
//     if (data.containsKey('VALOR_DESPESAS_ACESSORIAS')) {
//       context.handle(
//           _valorDespesasAcessoriasMeta,
//           valorDespesasAcessorias.isAcceptableOrUnknown(
//               data['VALOR_DESPESAS_ACESSORIAS']!,
//               _valorDespesasAcessoriasMeta));
//     }
//     if (data.containsKey('VALOR_TOTAL')) {
//       context.handle(
//           _valorTotalMeta,
//           valorTotal.isAcceptableOrUnknown(
//               data['VALOR_TOTAL']!, _valorTotalMeta));
//     }
//     if (data.containsKey('VALOR_TOTAL_TRIBUTOS')) {
//       context.handle(
//           _valorTotalTributosMeta,
//           valorTotalTributos.isAcceptableOrUnknown(
//               data['VALOR_TOTAL_TRIBUTOS']!, _valorTotalTributosMeta));
//     }
//     if (data.containsKey('VALOR_SERVICOS')) {
//       context.handle(
//           _valorServicosMeta,
//           valorServicos.isAcceptableOrUnknown(
//               data['VALOR_SERVICOS']!, _valorServicosMeta));
//     }
//     if (data.containsKey('BASE_CALCULO_ISSQN')) {
//       context.handle(
//           _baseCalculoIssqnMeta,
//           baseCalculoIssqn.isAcceptableOrUnknown(
//               data['BASE_CALCULO_ISSQN']!, _baseCalculoIssqnMeta));
//     }
//     if (data.containsKey('VALOR_ISSQN')) {
//       context.handle(
//           _valorIssqnMeta,
//           valorIssqn.isAcceptableOrUnknown(
//               data['VALOR_ISSQN']!, _valorIssqnMeta));
//     }
//     if (data.containsKey('VALOR_PIS_ISSQN')) {
//       context.handle(
//           _valorPisIssqnMeta,
//           valorPisIssqn.isAcceptableOrUnknown(
//               data['VALOR_PIS_ISSQN']!, _valorPisIssqnMeta));
//     }
//     if (data.containsKey('VALOR_COFINS_ISSQN')) {
//       context.handle(
//           _valorCofinsIssqnMeta,
//           valorCofinsIssqn.isAcceptableOrUnknown(
//               data['VALOR_COFINS_ISSQN']!, _valorCofinsIssqnMeta));
//     }
//     if (data.containsKey('DATA_PRESTACAO_SERVICO')) {
//       context.handle(
//           _dataPrestacaoServicoMeta,
//           dataPrestacaoServico.isAcceptableOrUnknown(
//               data['DATA_PRESTACAO_SERVICO']!, _dataPrestacaoServicoMeta));
//     }
//     if (data.containsKey('VALOR_DEDUCAO_ISSQN')) {
//       context.handle(
//           _valorDeducaoIssqnMeta,
//           valorDeducaoIssqn.isAcceptableOrUnknown(
//               data['VALOR_DEDUCAO_ISSQN']!, _valorDeducaoIssqnMeta));
//     }
//     if (data.containsKey('OUTRAS_RETENCOES_ISSQN')) {
//       context.handle(
//           _outrasRetencoesIssqnMeta,
//           outrasRetencoesIssqn.isAcceptableOrUnknown(
//               data['OUTRAS_RETENCOES_ISSQN']!, _outrasRetencoesIssqnMeta));
//     }
//     if (data.containsKey('DESCONTO_INCONDICIONADO_ISSQN')) {
//       context.handle(
//           _descontoIncondicionadoIssqnMeta,
//           descontoIncondicionadoIssqn.isAcceptableOrUnknown(
//               data['DESCONTO_INCONDICIONADO_ISSQN']!,
//               _descontoIncondicionadoIssqnMeta));
//     }
//     if (data.containsKey('DESCONTO_CONDICIONADO_ISSQN')) {
//       context.handle(
//           _descontoCondicionadoIssqnMeta,
//           descontoCondicionadoIssqn.isAcceptableOrUnknown(
//               data['DESCONTO_CONDICIONADO_ISSQN']!,
//               _descontoCondicionadoIssqnMeta));
//     }
//     if (data.containsKey('TOTAL_RETENCAO_ISSQN')) {
//       context.handle(
//           _totalRetencaoIssqnMeta,
//           totalRetencaoIssqn.isAcceptableOrUnknown(
//               data['TOTAL_RETENCAO_ISSQN']!, _totalRetencaoIssqnMeta));
//     }
//     if (data.containsKey('REGIME_ESPECIAL_TRIBUTACAO')) {
//       context.handle(
//           _regimeEspecialTributacaoMeta,
//           regimeEspecialTributacao.isAcceptableOrUnknown(
//               data['REGIME_ESPECIAL_TRIBUTACAO']!,
//               _regimeEspecialTributacaoMeta));
//     }
//     if (data.containsKey('VALOR_RETIDO_PIS')) {
//       context.handle(
//           _valorRetidoPisMeta,
//           valorRetidoPis.isAcceptableOrUnknown(
//               data['VALOR_RETIDO_PIS']!, _valorRetidoPisMeta));
//     }
//     if (data.containsKey('VALOR_RETIDO_COFINS')) {
//       context.handle(
//           _valorRetidoCofinsMeta,
//           valorRetidoCofins.isAcceptableOrUnknown(
//               data['VALOR_RETIDO_COFINS']!, _valorRetidoCofinsMeta));
//     }
//     if (data.containsKey('VALOR_RETIDO_CSLL')) {
//       context.handle(
//           _valorRetidoCsllMeta,
//           valorRetidoCsll.isAcceptableOrUnknown(
//               data['VALOR_RETIDO_CSLL']!, _valorRetidoCsllMeta));
//     }
//     if (data.containsKey('BASE_CALCULO_IRRF')) {
//       context.handle(
//           _baseCalculoIrrfMeta,
//           baseCalculoIrrf.isAcceptableOrUnknown(
//               data['BASE_CALCULO_IRRF']!, _baseCalculoIrrfMeta));
//     }
//     if (data.containsKey('VALOR_RETIDO_IRRF')) {
//       context.handle(
//           _valorRetidoIrrfMeta,
//           valorRetidoIrrf.isAcceptableOrUnknown(
//               data['VALOR_RETIDO_IRRF']!, _valorRetidoIrrfMeta));
//     }
//     if (data.containsKey('BASE_CALCULO_PREVIDENCIA')) {
//       context.handle(
//           _baseCalculoPrevidenciaMeta,
//           baseCalculoPrevidencia.isAcceptableOrUnknown(
//               data['BASE_CALCULO_PREVIDENCIA']!, _baseCalculoPrevidenciaMeta));
//     }
//     if (data.containsKey('VALOR_RETIDO_PREVIDENCIA')) {
//       context.handle(
//           _valorRetidoPrevidenciaMeta,
//           valorRetidoPrevidencia.isAcceptableOrUnknown(
//               data['VALOR_RETIDO_PREVIDENCIA']!, _valorRetidoPrevidenciaMeta));
//     }
//     if (data.containsKey('INFORMACOES_ADD_FISCO')) {
//       context.handle(
//           _informacoesAddFiscoMeta,
//           informacoesAddFisco.isAcceptableOrUnknown(
//               data['INFORMACOES_ADD_FISCO']!, _informacoesAddFiscoMeta));
//     }
//     if (data.containsKey('INFORMACOES_ADD_CONTRIBUINTE')) {
//       context.handle(
//           _informacoesAddContribuinteMeta,
//           informacoesAddContribuinte.isAcceptableOrUnknown(
//               data['INFORMACOES_ADD_CONTRIBUINTE']!,
//               _informacoesAddContribuinteMeta));
//     }
//     if (data.containsKey('COMEX_UF_EMBARQUE')) {
//       context.handle(
//           _comexUfEmbarqueMeta,
//           comexUfEmbarque.isAcceptableOrUnknown(
//               data['COMEX_UF_EMBARQUE']!, _comexUfEmbarqueMeta));
//     }
//     if (data.containsKey('COMEX_LOCAL_EMBARQUE')) {
//       context.handle(
//           _comexLocalEmbarqueMeta,
//           comexLocalEmbarque.isAcceptableOrUnknown(
//               data['COMEX_LOCAL_EMBARQUE']!, _comexLocalEmbarqueMeta));
//     }
//     if (data.containsKey('COMEX_LOCAL_DESPACHO')) {
//       context.handle(
//           _comexLocalDespachoMeta,
//           comexLocalDespacho.isAcceptableOrUnknown(
//               data['COMEX_LOCAL_DESPACHO']!, _comexLocalDespachoMeta));
//     }
//     if (data.containsKey('COMPRA_NOTA_EMPENHO')) {
//       context.handle(
//           _compraNotaEmpenhoMeta,
//           compraNotaEmpenho.isAcceptableOrUnknown(
//               data['COMPRA_NOTA_EMPENHO']!, _compraNotaEmpenhoMeta));
//     }
//     if (data.containsKey('COMPRA_PEDIDO')) {
//       context.handle(
//           _compraPedidoMeta,
//           compraPedido.isAcceptableOrUnknown(
//               data['COMPRA_PEDIDO']!, _compraPedidoMeta));
//     }
//     if (data.containsKey('COMPRA_CONTRATO')) {
//       context.handle(
//           _compraContratoMeta,
//           compraContrato.isAcceptableOrUnknown(
//               data['COMPRA_CONTRATO']!, _compraContratoMeta));
//     }
//     if (data.containsKey('QRCODE')) {
//       context.handle(_qrcodeMeta,
//           qrcode.isAcceptableOrUnknown(data['QRCODE']!, _qrcodeMeta));
//     }
//     if (data.containsKey('URL_CHAVE')) {
//       context.handle(_urlChaveMeta,
//           urlChave.isAcceptableOrUnknown(data['URL_CHAVE']!, _urlChaveMeta));
//     }
//     if (data.containsKey('STATUS_NOTA')) {
//       context.handle(
//           _statusNotaMeta,
//           statusNota.isAcceptableOrUnknown(
//               data['STATUS_NOTA']!, _statusNotaMeta));
//     }
//     if (data.containsKey('ID_PDV_VENDA_CABECALHO')) {
//       context.handle(
//           _idPdvVendaCabecalhoMeta,
//           idPdvVendaCabecalho.isAcceptableOrUnknown(
//               data['ID_PDV_VENDA_CABECALHO']!, _idPdvVendaCabecalhoMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeCabecalho map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeCabecalho(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idTributOperacaoFiscal: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ID_TRIBUT_OPERACAO_FISCAL']),
//       ufEmitente: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}UF_EMITENTE']),
//       codigoNumerico: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO_NUMERICO']),
//       naturezaOperacao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NATUREZA_OPERACAO']),
//       codigoModelo: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO_MODELO']),
//       serie: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}SERIE']),
//       numero: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO']),
//       dataHoraEmissao: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_HORA_EMISSAO']),
//       dataHoraEntradaSaida: const DateTimeType().mapFromDatabaseResponse(
//           data['${effectivePrefix}DATA_HORA_ENTRADA_SAIDA']),
//       tipoOperacao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TIPO_OPERACAO']),
//       localDestino: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}LOCAL_DESTINO']),
//       codigoMunicipio: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO_MUNICIPIO']),
//       formatoImpressaoDanfe: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}FORMATO_IMPRESSAO_DANFE']),
//       tipoEmissao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TIPO_EMISSAO']),
//       chaveAcesso: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CHAVE_ACESSO']),
//       digitoChaveAcesso: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}DIGITO_CHAVE_ACESSO']),
//       ambiente: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}AMBIENTE']),
//       finalidadeEmissao: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}FINALIDADE_EMISSAO']),
//       consumidorOperacao: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}CONSUMIDOR_OPERACAO']),
//       consumidorPresenca: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}CONSUMIDOR_PRESENCA']),
//       processoEmissao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}PROCESSO_EMISSAO']),
//       versaoProcessoEmissao: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VERSAO_PROCESSO_EMISSAO']),
//       dataEntradaContingencia: const DateTimeType().mapFromDatabaseResponse(
//           data['${effectivePrefix}DATA_ENTRADA_CONTINGENCIA']),
//       justificativaContingencia: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}JUSTIFICATIVA_CONTINGENCIA']),
//       baseCalculoIcms: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}BASE_CALCULO_ICMS']),
//       valorIcms: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_ICMS']),
//       valorIcmsDesonerado: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_ICMS_DESONERADO']),
//       totalIcmsFcpUfDestino: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}TOTAL_ICMS_FCP_UF_DESTINO']),
//       totalIcmsInterestadualUfDestino: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}TOTAL_ICMS_INTERESTADUAL_UF_DESTINO']),
//       totalIcmsInterestadualUfRemetente: const RealType()
//           .mapFromDatabaseResponse(
//               data['${effectivePrefix}TOTAL_ICMS_INTERESTADUAL_UF_REMETENTE']),
//       valorTotalFcp: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_TOTAL_FCP']),
//       baseCalculoIcmsSt: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}BASE_CALCULO_ICMS_ST']),
//       valorIcmsSt: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_ICMS_ST']),
//       valorTotalFcpSt: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_TOTAL_FCP_ST']),
//       valorTotalFcpStRetido: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_TOTAL_FCP_ST_RETIDO']),
//       valorTotalProdutos: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_TOTAL_PRODUTOS']),
//       valorFrete: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_FRETE']),
//       valorSeguro: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_SEGURO']),
//       valorDesconto: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_DESCONTO']),
//       valorImpostoImportacao: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_IMPOSTO_IMPORTACAO']),
//       valorIpi: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_IPI']),
//       valorIpiDevolvido: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_IPI_DEVOLVIDO']),
//       valorPis: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_PIS']),
//       valorCofins: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_COFINS']),
//       valorDespesasAcessorias: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_DESPESAS_ACESSORIAS']),
//       valorTotal: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_TOTAL']),
//       valorTotalTributos: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_TOTAL_TRIBUTOS']),
//       valorServicos: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_SERVICOS']),
//       baseCalculoIssqn: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}BASE_CALCULO_ISSQN']),
//       valorIssqn: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_ISSQN']),
//       valorPisIssqn: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_PIS_ISSQN']),
//       valorCofinsIssqn: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_COFINS_ISSQN']),
//       dataPrestacaoServico: const DateTimeType().mapFromDatabaseResponse(
//           data['${effectivePrefix}DATA_PRESTACAO_SERVICO']),
//       valorDeducaoIssqn: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_DEDUCAO_ISSQN']),
//       outrasRetencoesIssqn: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}OUTRAS_RETENCOES_ISSQN']),
//       descontoIncondicionadoIssqn: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}DESCONTO_INCONDICIONADO_ISSQN']),
//       descontoCondicionadoIssqn: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}DESCONTO_CONDICIONADO_ISSQN']),
//       totalRetencaoIssqn: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}TOTAL_RETENCAO_ISSQN']),
//       regimeEspecialTributacao: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}REGIME_ESPECIAL_TRIBUTACAO']),
//       valorRetidoPis: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_RETIDO_PIS']),
//       valorRetidoCofins: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_RETIDO_COFINS']),
//       valorRetidoCsll: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_RETIDO_CSLL']),
//       baseCalculoIrrf: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}BASE_CALCULO_IRRF']),
//       valorRetidoIrrf: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_RETIDO_IRRF']),
//       baseCalculoPrevidencia: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}BASE_CALCULO_PREVIDENCIA']),
//       valorRetidoPrevidencia: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_RETIDO_PREVIDENCIA']),
//       informacoesAddFisco: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}INFORMACOES_ADD_FISCO']),
//       informacoesAddContribuinte: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}INFORMACOES_ADD_CONTRIBUINTE']),
//       comexUfEmbarque: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}COMEX_UF_EMBARQUE']),
//       comexLocalEmbarque: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}COMEX_LOCAL_EMBARQUE']),
//       comexLocalDespacho: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}COMEX_LOCAL_DESPACHO']),
//       compraNotaEmpenho: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}COMPRA_NOTA_EMPENHO']),
//       compraPedido: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}COMPRA_PEDIDO']),
//       compraContrato: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}COMPRA_CONTRATO']),
//       qrcode: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}QRCODE']),
//       urlChave: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}URL_CHAVE']),
//       statusNota: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}STATUS_NOTA']),
//       idPdvVendaCabecalho: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ID_PDV_VENDA_CABECALHO']),
//     );
//   }

//   @override
//   $NfeCabecalhosTable createAlias(String alias) {
//     return $NfeCabecalhosTable(_db, alias);
//   }
// }

// class NfeCanasCompanion extends UpdateCompanion<NfeCana> {
//   final Value<int> id;
//   final Value<int?> idNfeCabecalho;
//   final Value<String?> safra;
//   final Value<String?> mesAnoReferencia;
//   const NfeCanasCompanion({
//     this.id = const Value.absent(),
//     this.idNfeCabecalho = const Value.absent(),
//     this.safra = const Value.absent(),
//     this.mesAnoReferencia = const Value.absent(),
//   });
//   NfeCanasCompanion.insert({
//     this.id = const Value.absent(),
//     this.idNfeCabecalho = const Value.absent(),
//     this.safra = const Value.absent(),
//     this.mesAnoReferencia = const Value.absent(),
//   });
//   static Insertable<NfeCana> custom({
//     Expression<int>? id,
//     Expression<int?>? idNfeCabecalho,
//     Expression<String?>? safra,
//     Expression<String?>? mesAnoReferencia,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idNfeCabecalho != null) 'ID_NFE_CABECALHO': idNfeCabecalho,
//       if (safra != null) 'SAFRA': safra,
//       if (mesAnoReferencia != null) 'MES_ANO_REFERENCIA': mesAnoReferencia,
//     });
//   }

//   NfeCanasCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idNfeCabecalho,
//       Value<String?>? safra,
//       Value<String?>? mesAnoReferencia}) {
//     return NfeCanasCompanion(
//       id: id ?? this.id,
//       idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
//       safra: safra ?? this.safra,
//       mesAnoReferencia: mesAnoReferencia ?? this.mesAnoReferencia,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idNfeCabecalho.present) {
//       map['ID_NFE_CABECALHO'] = Variable<int?>(idNfeCabecalho.value);
//     }
//     if (safra.present) {
//       map['SAFRA'] = Variable<String?>(safra.value);
//     }
//     if (mesAnoReferencia.present) {
//       map['MES_ANO_REFERENCIA'] = Variable<String?>(mesAnoReferencia.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeCanasCompanion(')
//           ..write('id: $id, ')
//           ..write('idNfeCabecalho: $idNfeCabecalho, ')
//           ..write('safra: $safra, ')
//           ..write('mesAnoReferencia: $mesAnoReferencia')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeCanasTable extends NfeCanas with TableInfo<$NfeCanasTable, NfeCana> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeCanasTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idNfeCabecalhoMeta =
//       const VerificationMeta('idNfeCabecalho');
//   late final GeneratedColumn<int?> idNfeCabecalho = GeneratedColumn<int?>(
//       'ID_NFE_CABECALHO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES NFE_CABECALHO(ID)');
//   final VerificationMeta _safraMeta = const VerificationMeta('safra');
//   late final GeneratedColumn<String?> safra = GeneratedColumn<String?>(
//       'SAFRA', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 9),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _mesAnoReferenciaMeta =
//       const VerificationMeta('mesAnoReferencia');
//   late final GeneratedColumn<String?> mesAnoReferencia =
//       GeneratedColumn<String?>('MES_ANO_REFERENCIA', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 7),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns =>
//       [id, idNfeCabecalho, safra, mesAnoReferencia];
//   @override
//   String get aliasedName => _alias ?? 'NFE_CANA';
//   @override
//   String get actualTableName => 'NFE_CANA';
//   @override
//   VerificationContext validateIntegrity(Insertable<NfeCana> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_NFE_CABECALHO')) {
//       context.handle(
//           _idNfeCabecalhoMeta,
//           idNfeCabecalho.isAcceptableOrUnknown(
//               data['ID_NFE_CABECALHO']!, _idNfeCabecalhoMeta));
//     }
//     if (data.containsKey('SAFRA')) {
//       context.handle(
//           _safraMeta, safra.isAcceptableOrUnknown(data['SAFRA']!, _safraMeta));
//     }
//     if (data.containsKey('MES_ANO_REFERENCIA')) {
//       context.handle(
//           _mesAnoReferenciaMeta,
//           mesAnoReferencia.isAcceptableOrUnknown(
//               data['MES_ANO_REFERENCIA']!, _mesAnoReferenciaMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeCana map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeCana(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idNfeCabecalho: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_NFE_CABECALHO']),
//       safra: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}SAFRA']),
//       mesAnoReferencia: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}MES_ANO_REFERENCIA']),
//     );
//   }

//   @override
//   $NfeCanasTable createAlias(String alias) {
//     return $NfeCanasTable(_db, alias);
//   }
// }

// class NfeCanaDeducoesSafrasCompanion
//     extends UpdateCompanion<NfeCanaDeducoesSafra> {
//   final Value<int> id;
//   final Value<int?> idNfeCana;
//   final Value<String?> decricao;
//   final Value<double?> valorDeducao;
//   final Value<double?> valorFornecimento;
//   final Value<double?> valorTotalDeducao;
//   final Value<double?> valorLiquidoFornecimento;
//   const NfeCanaDeducoesSafrasCompanion({
//     this.id = const Value.absent(),
//     this.idNfeCana = const Value.absent(),
//     this.decricao = const Value.absent(),
//     this.valorDeducao = const Value.absent(),
//     this.valorFornecimento = const Value.absent(),
//     this.valorTotalDeducao = const Value.absent(),
//     this.valorLiquidoFornecimento = const Value.absent(),
//   });
//   NfeCanaDeducoesSafrasCompanion.insert({
//     this.id = const Value.absent(),
//     this.idNfeCana = const Value.absent(),
//     this.decricao = const Value.absent(),
//     this.valorDeducao = const Value.absent(),
//     this.valorFornecimento = const Value.absent(),
//     this.valorTotalDeducao = const Value.absent(),
//     this.valorLiquidoFornecimento = const Value.absent(),
//   });
//   static Insertable<NfeCanaDeducoesSafra> custom({
//     Expression<int>? id,
//     Expression<int?>? idNfeCana,
//     Expression<String?>? decricao,
//     Expression<double?>? valorDeducao,
//     Expression<double?>? valorFornecimento,
//     Expression<double?>? valorTotalDeducao,
//     Expression<double?>? valorLiquidoFornecimento,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idNfeCana != null) 'ID_NFE_CANA': idNfeCana,
//       if (decricao != null) 'DECRICAO': decricao,
//       if (valorDeducao != null) 'VALOR_DEDUCAO': valorDeducao,
//       if (valorFornecimento != null) 'VALOR_FORNECIMENTO': valorFornecimento,
//       if (valorTotalDeducao != null) 'VALOR_TOTAL_DEDUCAO': valorTotalDeducao,
//       if (valorLiquidoFornecimento != null)
//         'VALOR_LIQUIDO_FORNECIMENTO': valorLiquidoFornecimento,
//     });
//   }

//   NfeCanaDeducoesSafrasCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idNfeCana,
//       Value<String?>? decricao,
//       Value<double?>? valorDeducao,
//       Value<double?>? valorFornecimento,
//       Value<double?>? valorTotalDeducao,
//       Value<double?>? valorLiquidoFornecimento}) {
//     return NfeCanaDeducoesSafrasCompanion(
//       id: id ?? this.id,
//       idNfeCana: idNfeCana ?? this.idNfeCana,
//       decricao: decricao ?? this.decricao,
//       valorDeducao: valorDeducao ?? this.valorDeducao,
//       valorFornecimento: valorFornecimento ?? this.valorFornecimento,
//       valorTotalDeducao: valorTotalDeducao ?? this.valorTotalDeducao,
//       valorLiquidoFornecimento:
//           valorLiquidoFornecimento ?? this.valorLiquidoFornecimento,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idNfeCana.present) {
//       map['ID_NFE_CANA'] = Variable<int?>(idNfeCana.value);
//     }
//     if (decricao.present) {
//       map['DECRICAO'] = Variable<String?>(decricao.value);
//     }
//     if (valorDeducao.present) {
//       map['VALOR_DEDUCAO'] = Variable<double?>(valorDeducao.value);
//     }
//     if (valorFornecimento.present) {
//       map['VALOR_FORNECIMENTO'] = Variable<double?>(valorFornecimento.value);
//     }
//     if (valorTotalDeducao.present) {
//       map['VALOR_TOTAL_DEDUCAO'] = Variable<double?>(valorTotalDeducao.value);
//     }
//     if (valorLiquidoFornecimento.present) {
//       map['VALOR_LIQUIDO_FORNECIMENTO'] =
//           Variable<double?>(valorLiquidoFornecimento.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeCanaDeducoesSafrasCompanion(')
//           ..write('id: $id, ')
//           ..write('idNfeCana: $idNfeCana, ')
//           ..write('decricao: $decricao, ')
//           ..write('valorDeducao: $valorDeducao, ')
//           ..write('valorFornecimento: $valorFornecimento, ')
//           ..write('valorTotalDeducao: $valorTotalDeducao, ')
//           ..write('valorLiquidoFornecimento: $valorLiquidoFornecimento')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeCanaDeducoesSafrasTable extends NfeCanaDeducoesSafras
//     with TableInfo<$NfeCanaDeducoesSafrasTable, NfeCanaDeducoesSafra> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeCanaDeducoesSafrasTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idNfeCanaMeta = const VerificationMeta('idNfeCana');
//   late final GeneratedColumn<int?> idNfeCana = GeneratedColumn<int?>(
//       'ID_NFE_CANA', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES NFE_CANA(ID)');
//   final VerificationMeta _decricaoMeta = const VerificationMeta('decricao');
//   late final GeneratedColumn<String?> decricao = GeneratedColumn<String?>(
//       'DECRICAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _valorDeducaoMeta =
//       const VerificationMeta('valorDeducao');
//   late final GeneratedColumn<double?> valorDeducao = GeneratedColumn<double?>(
//       'VALOR_DEDUCAO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorFornecimentoMeta =
//       const VerificationMeta('valorFornecimento');
//   late final GeneratedColumn<double?> valorFornecimento =
//       GeneratedColumn<double?>('VALOR_FORNECIMENTO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorTotalDeducaoMeta =
//       const VerificationMeta('valorTotalDeducao');
//   late final GeneratedColumn<double?> valorTotalDeducao =
//       GeneratedColumn<double?>('VALOR_TOTAL_DEDUCAO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorLiquidoFornecimentoMeta =
//       const VerificationMeta('valorLiquidoFornecimento');
//   late final GeneratedColumn<double?> valorLiquidoFornecimento =
//       GeneratedColumn<double?>('VALOR_LIQUIDO_FORNECIMENTO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idNfeCana,
//         decricao,
//         valorDeducao,
//         valorFornecimento,
//         valorTotalDeducao,
//         valorLiquidoFornecimento
//       ];
//   @override
//   String get aliasedName => _alias ?? 'NFE_CANA_DEDUCOES_SAFRA';
//   @override
//   String get actualTableName => 'NFE_CANA_DEDUCOES_SAFRA';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<NfeCanaDeducoesSafra> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_NFE_CANA')) {
//       context.handle(
//           _idNfeCanaMeta,
//           idNfeCana.isAcceptableOrUnknown(
//               data['ID_NFE_CANA']!, _idNfeCanaMeta));
//     }
//     if (data.containsKey('DECRICAO')) {
//       context.handle(_decricaoMeta,
//           decricao.isAcceptableOrUnknown(data['DECRICAO']!, _decricaoMeta));
//     }
//     if (data.containsKey('VALOR_DEDUCAO')) {
//       context.handle(
//           _valorDeducaoMeta,
//           valorDeducao.isAcceptableOrUnknown(
//               data['VALOR_DEDUCAO']!, _valorDeducaoMeta));
//     }
//     if (data.containsKey('VALOR_FORNECIMENTO')) {
//       context.handle(
//           _valorFornecimentoMeta,
//           valorFornecimento.isAcceptableOrUnknown(
//               data['VALOR_FORNECIMENTO']!, _valorFornecimentoMeta));
//     }
//     if (data.containsKey('VALOR_TOTAL_DEDUCAO')) {
//       context.handle(
//           _valorTotalDeducaoMeta,
//           valorTotalDeducao.isAcceptableOrUnknown(
//               data['VALOR_TOTAL_DEDUCAO']!, _valorTotalDeducaoMeta));
//     }
//     if (data.containsKey('VALOR_LIQUIDO_FORNECIMENTO')) {
//       context.handle(
//           _valorLiquidoFornecimentoMeta,
//           valorLiquidoFornecimento.isAcceptableOrUnknown(
//               data['VALOR_LIQUIDO_FORNECIMENTO']!,
//               _valorLiquidoFornecimentoMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeCanaDeducoesSafra map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeCanaDeducoesSafra(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idNfeCana: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_NFE_CANA']),
//       decricao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DECRICAO']),
//       valorDeducao: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_DEDUCAO']),
//       valorFornecimento: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_FORNECIMENTO']),
//       valorTotalDeducao: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_TOTAL_DEDUCAO']),
//       valorLiquidoFornecimento: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_LIQUIDO_FORNECIMENTO']),
//     );
//   }

//   @override
//   $NfeCanaDeducoesSafrasTable createAlias(String alias) {
//     return $NfeCanaDeducoesSafrasTable(_db, alias);
//   }
// }

// class NfeCanaFornecimentoDiariosCompanion
//     extends UpdateCompanion<NfeCanaFornecimentoDiario> {
//   final Value<int> id;
//   final Value<int?> idNfeCana;
//   final Value<String?> dia;
//   final Value<double?> quantidade;
//   final Value<double?> quantidadeTotalMes;
//   final Value<double?> quantidadeTotalAnterior;
//   final Value<double?> quantidadeTotalGeral;
//   const NfeCanaFornecimentoDiariosCompanion({
//     this.id = const Value.absent(),
//     this.idNfeCana = const Value.absent(),
//     this.dia = const Value.absent(),
//     this.quantidade = const Value.absent(),
//     this.quantidadeTotalMes = const Value.absent(),
//     this.quantidadeTotalAnterior = const Value.absent(),
//     this.quantidadeTotalGeral = const Value.absent(),
//   });
//   NfeCanaFornecimentoDiariosCompanion.insert({
//     this.id = const Value.absent(),
//     this.idNfeCana = const Value.absent(),
//     this.dia = const Value.absent(),
//     this.quantidade = const Value.absent(),
//     this.quantidadeTotalMes = const Value.absent(),
//     this.quantidadeTotalAnterior = const Value.absent(),
//     this.quantidadeTotalGeral = const Value.absent(),
//   });
//   static Insertable<NfeCanaFornecimentoDiario> custom({
//     Expression<int>? id,
//     Expression<int?>? idNfeCana,
//     Expression<String?>? dia,
//     Expression<double?>? quantidade,
//     Expression<double?>? quantidadeTotalMes,
//     Expression<double?>? quantidadeTotalAnterior,
//     Expression<double?>? quantidadeTotalGeral,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idNfeCana != null) 'ID_NFE_CANA': idNfeCana,
//       if (dia != null) 'DIA': dia,
//       if (quantidade != null) 'QUANTIDADE': quantidade,
//       if (quantidadeTotalMes != null)
//         'QUANTIDADE_TOTAL_MES': quantidadeTotalMes,
//       if (quantidadeTotalAnterior != null)
//         'QUANTIDADE_TOTAL_ANTERIOR': quantidadeTotalAnterior,
//       if (quantidadeTotalGeral != null)
//         'QUANTIDADE_TOTAL_GERAL': quantidadeTotalGeral,
//     });
//   }

//   NfeCanaFornecimentoDiariosCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idNfeCana,
//       Value<String?>? dia,
//       Value<double?>? quantidade,
//       Value<double?>? quantidadeTotalMes,
//       Value<double?>? quantidadeTotalAnterior,
//       Value<double?>? quantidadeTotalGeral}) {
//     return NfeCanaFornecimentoDiariosCompanion(
//       id: id ?? this.id,
//       idNfeCana: idNfeCana ?? this.idNfeCana,
//       dia: dia ?? this.dia,
//       quantidade: quantidade ?? this.quantidade,
//       quantidadeTotalMes: quantidadeTotalMes ?? this.quantidadeTotalMes,
//       quantidadeTotalAnterior:
//           quantidadeTotalAnterior ?? this.quantidadeTotalAnterior,
//       quantidadeTotalGeral: quantidadeTotalGeral ?? this.quantidadeTotalGeral,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idNfeCana.present) {
//       map['ID_NFE_CANA'] = Variable<int?>(idNfeCana.value);
//     }
//     if (dia.present) {
//       map['DIA'] = Variable<String?>(dia.value);
//     }
//     if (quantidade.present) {
//       map['QUANTIDADE'] = Variable<double?>(quantidade.value);
//     }
//     if (quantidadeTotalMes.present) {
//       map['QUANTIDADE_TOTAL_MES'] = Variable<double?>(quantidadeTotalMes.value);
//     }
//     if (quantidadeTotalAnterior.present) {
//       map['QUANTIDADE_TOTAL_ANTERIOR'] =
//           Variable<double?>(quantidadeTotalAnterior.value);
//     }
//     if (quantidadeTotalGeral.present) {
//       map['QUANTIDADE_TOTAL_GERAL'] =
//           Variable<double?>(quantidadeTotalGeral.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeCanaFornecimentoDiariosCompanion(')
//           ..write('id: $id, ')
//           ..write('idNfeCana: $idNfeCana, ')
//           ..write('dia: $dia, ')
//           ..write('quantidade: $quantidade, ')
//           ..write('quantidadeTotalMes: $quantidadeTotalMes, ')
//           ..write('quantidadeTotalAnterior: $quantidadeTotalAnterior, ')
//           ..write('quantidadeTotalGeral: $quantidadeTotalGeral')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeCanaFornecimentoDiariosTable extends NfeCanaFornecimentoDiarios
//     with
//         TableInfo<$NfeCanaFornecimentoDiariosTable, NfeCanaFornecimentoDiario> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeCanaFornecimentoDiariosTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idNfeCanaMeta = const VerificationMeta('idNfeCana');
//   late final GeneratedColumn<int?> idNfeCana = GeneratedColumn<int?>(
//       'ID_NFE_CANA', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES NFE_CANA(ID)');
//   final VerificationMeta _diaMeta = const VerificationMeta('dia');
//   late final GeneratedColumn<String?> dia = GeneratedColumn<String?>(
//       'DIA', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _quantidadeMeta = const VerificationMeta('quantidade');
//   late final GeneratedColumn<double?> quantidade = GeneratedColumn<double?>(
//       'QUANTIDADE', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _quantidadeTotalMesMeta =
//       const VerificationMeta('quantidadeTotalMes');
//   late final GeneratedColumn<double?> quantidadeTotalMes =
//       GeneratedColumn<double?>('QUANTIDADE_TOTAL_MES', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _quantidadeTotalAnteriorMeta =
//       const VerificationMeta('quantidadeTotalAnterior');
//   late final GeneratedColumn<double?> quantidadeTotalAnterior =
//       GeneratedColumn<double?>('QUANTIDADE_TOTAL_ANTERIOR', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _quantidadeTotalGeralMeta =
//       const VerificationMeta('quantidadeTotalGeral');
//   late final GeneratedColumn<double?> quantidadeTotalGeral =
//       GeneratedColumn<double?>('QUANTIDADE_TOTAL_GERAL', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idNfeCana,
//         dia,
//         quantidade,
//         quantidadeTotalMes,
//         quantidadeTotalAnterior,
//         quantidadeTotalGeral
//       ];
//   @override
//   String get aliasedName => _alias ?? 'NFE_CANA_FORNECIMENTO_DIARIO';
//   @override
//   String get actualTableName => 'NFE_CANA_FORNECIMENTO_DIARIO';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<NfeCanaFornecimentoDiario> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_NFE_CANA')) {
//       context.handle(
//           _idNfeCanaMeta,
//           idNfeCana.isAcceptableOrUnknown(
//               data['ID_NFE_CANA']!, _idNfeCanaMeta));
//     }
//     if (data.containsKey('DIA')) {
//       context.handle(
//           _diaMeta, dia.isAcceptableOrUnknown(data['DIA']!, _diaMeta));
//     }
//     if (data.containsKey('QUANTIDADE')) {
//       context.handle(
//           _quantidadeMeta,
//           quantidade.isAcceptableOrUnknown(
//               data['QUANTIDADE']!, _quantidadeMeta));
//     }
//     if (data.containsKey('QUANTIDADE_TOTAL_MES')) {
//       context.handle(
//           _quantidadeTotalMesMeta,
//           quantidadeTotalMes.isAcceptableOrUnknown(
//               data['QUANTIDADE_TOTAL_MES']!, _quantidadeTotalMesMeta));
//     }
//     if (data.containsKey('QUANTIDADE_TOTAL_ANTERIOR')) {
//       context.handle(
//           _quantidadeTotalAnteriorMeta,
//           quantidadeTotalAnterior.isAcceptableOrUnknown(
//               data['QUANTIDADE_TOTAL_ANTERIOR']!,
//               _quantidadeTotalAnteriorMeta));
//     }
//     if (data.containsKey('QUANTIDADE_TOTAL_GERAL')) {
//       context.handle(
//           _quantidadeTotalGeralMeta,
//           quantidadeTotalGeral.isAcceptableOrUnknown(
//               data['QUANTIDADE_TOTAL_GERAL']!, _quantidadeTotalGeralMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeCanaFornecimentoDiario map(Map<String, dynamic> data,
//       {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeCanaFornecimentoDiario(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idNfeCana: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_NFE_CANA']),
//       dia: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DIA']),
//       quantidade: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}QUANTIDADE']),
//       quantidadeTotalMes: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}QUANTIDADE_TOTAL_MES']),
//       quantidadeTotalAnterior: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}QUANTIDADE_TOTAL_ANTERIOR']),
//       quantidadeTotalGeral: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}QUANTIDADE_TOTAL_GERAL']),
//     );
//   }

//   @override
//   $NfeCanaFornecimentoDiariosTable createAlias(String alias) {
//     return $NfeCanaFornecimentoDiariosTable(_db, alias);
//   }
// }

// class NfeConfiguracaosCompanion extends UpdateCompanion<NfeConfiguracao> {
//   final Value<int> id;
//   final Value<String?> certificadoDigitalSerie;
//   final Value<String?> certificadoDigitalCaminho;
//   final Value<String?> certificadoDigitalSenha;
//   final Value<int?> tipoEmissao;
//   final Value<int?> formatoImpressaoDanfe;
//   final Value<int?> processoEmissao;
//   final Value<String?> versaoProcessoEmissao;
//   final Value<String?> caminhoLogomarca;
//   final Value<String?> salvarXml;
//   final Value<String?> caminhoSalvarXml;
//   final Value<String?> caminhoSchemas;
//   final Value<String?> caminhoArquivoDanfe;
//   final Value<String?> caminhoSalvarPdf;
//   final Value<String?> webserviceUf;
//   final Value<int?> webserviceAmbiente;
//   final Value<String?> webserviceProxyHost;
//   final Value<int?> webserviceProxyPorta;
//   final Value<String?> webserviceProxyUsuario;
//   final Value<String?> webserviceProxySenha;
//   final Value<String?> webserviceVisualizar;
//   final Value<String?> emailServidorSmtp;
//   final Value<int?> emailPorta;
//   final Value<String?> emailUsuario;
//   final Value<String?> emailSenha;
//   final Value<String?> emailAssunto;
//   final Value<String?> emailAutenticaSsl;
//   final Value<String?> emailTexto;
//   final Value<String?> nfceIdCsc;
//   final Value<String?> nfceCsc;
//   final Value<String?> nfceModeloImpressao;
//   final Value<String?> nfceImprimirItensUmaLinha;
//   final Value<String?> nfceImprimirDescontoPorItem;
//   final Value<String?> nfceImprimirQrcodeLateral;
//   final Value<String?> nfceImprimirGtin;
//   final Value<String?> nfceImprimirNomeFantasia;
//   final Value<String?> nfceImpressaoTributos;
//   final Value<double?> nfceMargemSuperior;
//   final Value<double?> nfceMargemInferior;
//   final Value<double?> nfceMargemDireita;
//   final Value<double?> nfceMargemEsquerda;
//   final Value<int?> nfceResolucaoImpressao;
//   final Value<String?> respTecCnpj;
//   final Value<String?> respTecContato;
//   final Value<String?> respTecEmail;
//   final Value<String?> respTecFone;
//   final Value<String?> respTecIdCsrt;
//   final Value<String?> respTecHashCsrt;
//   final Value<int?> nfceTamanhoFonteItem;
//   const NfeConfiguracaosCompanion({
//     this.id = const Value.absent(),
//     this.certificadoDigitalSerie = const Value.absent(),
//     this.certificadoDigitalCaminho = const Value.absent(),
//     this.certificadoDigitalSenha = const Value.absent(),
//     this.tipoEmissao = const Value.absent(),
//     this.formatoImpressaoDanfe = const Value.absent(),
//     this.processoEmissao = const Value.absent(),
//     this.versaoProcessoEmissao = const Value.absent(),
//     this.caminhoLogomarca = const Value.absent(),
//     this.salvarXml = const Value.absent(),
//     this.caminhoSalvarXml = const Value.absent(),
//     this.caminhoSchemas = const Value.absent(),
//     this.caminhoArquivoDanfe = const Value.absent(),
//     this.caminhoSalvarPdf = const Value.absent(),
//     this.webserviceUf = const Value.absent(),
//     this.webserviceAmbiente = const Value.absent(),
//     this.webserviceProxyHost = const Value.absent(),
//     this.webserviceProxyPorta = const Value.absent(),
//     this.webserviceProxyUsuario = const Value.absent(),
//     this.webserviceProxySenha = const Value.absent(),
//     this.webserviceVisualizar = const Value.absent(),
//     this.emailServidorSmtp = const Value.absent(),
//     this.emailPorta = const Value.absent(),
//     this.emailUsuario = const Value.absent(),
//     this.emailSenha = const Value.absent(),
//     this.emailAssunto = const Value.absent(),
//     this.emailAutenticaSsl = const Value.absent(),
//     this.emailTexto = const Value.absent(),
//     this.nfceIdCsc = const Value.absent(),
//     this.nfceCsc = const Value.absent(),
//     this.nfceModeloImpressao = const Value.absent(),
//     this.nfceImprimirItensUmaLinha = const Value.absent(),
//     this.nfceImprimirDescontoPorItem = const Value.absent(),
//     this.nfceImprimirQrcodeLateral = const Value.absent(),
//     this.nfceImprimirGtin = const Value.absent(),
//     this.nfceImprimirNomeFantasia = const Value.absent(),
//     this.nfceImpressaoTributos = const Value.absent(),
//     this.nfceMargemSuperior = const Value.absent(),
//     this.nfceMargemInferior = const Value.absent(),
//     this.nfceMargemDireita = const Value.absent(),
//     this.nfceMargemEsquerda = const Value.absent(),
//     this.nfceResolucaoImpressao = const Value.absent(),
//     this.respTecCnpj = const Value.absent(),
//     this.respTecContato = const Value.absent(),
//     this.respTecEmail = const Value.absent(),
//     this.respTecFone = const Value.absent(),
//     this.respTecIdCsrt = const Value.absent(),
//     this.respTecHashCsrt = const Value.absent(),
//     this.nfceTamanhoFonteItem = const Value.absent(),
//   });
//   NfeConfiguracaosCompanion.insert({
//     this.id = const Value.absent(),
//     this.certificadoDigitalSerie = const Value.absent(),
//     this.certificadoDigitalCaminho = const Value.absent(),
//     this.certificadoDigitalSenha = const Value.absent(),
//     this.tipoEmissao = const Value.absent(),
//     this.formatoImpressaoDanfe = const Value.absent(),
//     this.processoEmissao = const Value.absent(),
//     this.versaoProcessoEmissao = const Value.absent(),
//     this.caminhoLogomarca = const Value.absent(),
//     this.salvarXml = const Value.absent(),
//     this.caminhoSalvarXml = const Value.absent(),
//     this.caminhoSchemas = const Value.absent(),
//     this.caminhoArquivoDanfe = const Value.absent(),
//     this.caminhoSalvarPdf = const Value.absent(),
//     this.webserviceUf = const Value.absent(),
//     this.webserviceAmbiente = const Value.absent(),
//     this.webserviceProxyHost = const Value.absent(),
//     this.webserviceProxyPorta = const Value.absent(),
//     this.webserviceProxyUsuario = const Value.absent(),
//     this.webserviceProxySenha = const Value.absent(),
//     this.webserviceVisualizar = const Value.absent(),
//     this.emailServidorSmtp = const Value.absent(),
//     this.emailPorta = const Value.absent(),
//     this.emailUsuario = const Value.absent(),
//     this.emailSenha = const Value.absent(),
//     this.emailAssunto = const Value.absent(),
//     this.emailAutenticaSsl = const Value.absent(),
//     this.emailTexto = const Value.absent(),
//     this.nfceIdCsc = const Value.absent(),
//     this.nfceCsc = const Value.absent(),
//     this.nfceModeloImpressao = const Value.absent(),
//     this.nfceImprimirItensUmaLinha = const Value.absent(),
//     this.nfceImprimirDescontoPorItem = const Value.absent(),
//     this.nfceImprimirQrcodeLateral = const Value.absent(),
//     this.nfceImprimirGtin = const Value.absent(),
//     this.nfceImprimirNomeFantasia = const Value.absent(),
//     this.nfceImpressaoTributos = const Value.absent(),
//     this.nfceMargemSuperior = const Value.absent(),
//     this.nfceMargemInferior = const Value.absent(),
//     this.nfceMargemDireita = const Value.absent(),
//     this.nfceMargemEsquerda = const Value.absent(),
//     this.nfceResolucaoImpressao = const Value.absent(),
//     this.respTecCnpj = const Value.absent(),
//     this.respTecContato = const Value.absent(),
//     this.respTecEmail = const Value.absent(),
//     this.respTecFone = const Value.absent(),
//     this.respTecIdCsrt = const Value.absent(),
//     this.respTecHashCsrt = const Value.absent(),
//     this.nfceTamanhoFonteItem = const Value.absent(),
//   });
//   static Insertable<NfeConfiguracao> custom({
//     Expression<int>? id,
//     Expression<String?>? certificadoDigitalSerie,
//     Expression<String?>? certificadoDigitalCaminho,
//     Expression<String?>? certificadoDigitalSenha,
//     Expression<int?>? tipoEmissao,
//     Expression<int?>? formatoImpressaoDanfe,
//     Expression<int?>? processoEmissao,
//     Expression<String?>? versaoProcessoEmissao,
//     Expression<String?>? caminhoLogomarca,
//     Expression<String?>? salvarXml,
//     Expression<String?>? caminhoSalvarXml,
//     Expression<String?>? caminhoSchemas,
//     Expression<String?>? caminhoArquivoDanfe,
//     Expression<String?>? caminhoSalvarPdf,
//     Expression<String?>? webserviceUf,
//     Expression<int?>? webserviceAmbiente,
//     Expression<String?>? webserviceProxyHost,
//     Expression<int?>? webserviceProxyPorta,
//     Expression<String?>? webserviceProxyUsuario,
//     Expression<String?>? webserviceProxySenha,
//     Expression<String?>? webserviceVisualizar,
//     Expression<String?>? emailServidorSmtp,
//     Expression<int?>? emailPorta,
//     Expression<String?>? emailUsuario,
//     Expression<String?>? emailSenha,
//     Expression<String?>? emailAssunto,
//     Expression<String?>? emailAutenticaSsl,
//     Expression<String?>? emailTexto,
//     Expression<String?>? nfceIdCsc,
//     Expression<String?>? nfceCsc,
//     Expression<String?>? nfceModeloImpressao,
//     Expression<String?>? nfceImprimirItensUmaLinha,
//     Expression<String?>? nfceImprimirDescontoPorItem,
//     Expression<String?>? nfceImprimirQrcodeLateral,
//     Expression<String?>? nfceImprimirGtin,
//     Expression<String?>? nfceImprimirNomeFantasia,
//     Expression<String?>? nfceImpressaoTributos,
//     Expression<double?>? nfceMargemSuperior,
//     Expression<double?>? nfceMargemInferior,
//     Expression<double?>? nfceMargemDireita,
//     Expression<double?>? nfceMargemEsquerda,
//     Expression<int?>? nfceResolucaoImpressao,
//     Expression<String?>? respTecCnpj,
//     Expression<String?>? respTecContato,
//     Expression<String?>? respTecEmail,
//     Expression<String?>? respTecFone,
//     Expression<String?>? respTecIdCsrt,
//     Expression<String?>? respTecHashCsrt,
//     Expression<int?>? nfceTamanhoFonteItem,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (certificadoDigitalSerie != null)
//         'CERTIFICADO_DIGITAL_SERIE': certificadoDigitalSerie,
//       if (certificadoDigitalCaminho != null)
//         'CERTIFICADO_DIGITAL_CAMINHO': certificadoDigitalCaminho,
//       if (certificadoDigitalSenha != null)
//         'CERTIFICADO_DIGITAL_SENHA': certificadoDigitalSenha,
//       if (tipoEmissao != null) 'TIPO_EMISSAO': tipoEmissao,
//       if (formatoImpressaoDanfe != null)
//         'FORMATO_IMPRESSAO_DANFE': formatoImpressaoDanfe,
//       if (processoEmissao != null) 'PROCESSO_EMISSAO': processoEmissao,
//       if (versaoProcessoEmissao != null)
//         'VERSAO_PROCESSO_EMISSAO': versaoProcessoEmissao,
//       if (caminhoLogomarca != null) 'CAMINHO_LOGOMARCA': caminhoLogomarca,
//       if (salvarXml != null) 'SALVAR_XML': salvarXml,
//       if (caminhoSalvarXml != null) 'CAMINHO_SALVAR_XML': caminhoSalvarXml,
//       if (caminhoSchemas != null) 'CAMINHO_SCHEMAS': caminhoSchemas,
//       if (caminhoArquivoDanfe != null)
//         'CAMINHO_ARQUIVO_DANFE': caminhoArquivoDanfe,
//       if (caminhoSalvarPdf != null) 'CAMINHO_SALVAR_PDF': caminhoSalvarPdf,
//       if (webserviceUf != null) 'WEBSERVICE_UF': webserviceUf,
//       if (webserviceAmbiente != null) 'WEBSERVICE_AMBIENTE': webserviceAmbiente,
//       if (webserviceProxyHost != null)
//         'WEBSERVICE_PROXY_HOST': webserviceProxyHost,
//       if (webserviceProxyPorta != null)
//         'WEBSERVICE_PROXY_PORTA': webserviceProxyPorta,
//       if (webserviceProxyUsuario != null)
//         'WEBSERVICE_PROXY_USUARIO': webserviceProxyUsuario,
//       if (webserviceProxySenha != null)
//         'WEBSERVICE_PROXY_SENHA': webserviceProxySenha,
//       if (webserviceVisualizar != null)
//         'WEBSERVICE_VISUALIZAR': webserviceVisualizar,
//       if (emailServidorSmtp != null) 'EMAIL_SERVIDOR_SMTP': emailServidorSmtp,
//       if (emailPorta != null) 'EMAIL_PORTA': emailPorta,
//       if (emailUsuario != null) 'EMAIL_USUARIO': emailUsuario,
//       if (emailSenha != null) 'EMAIL_SENHA': emailSenha,
//       if (emailAssunto != null) 'EMAIL_ASSUNTO': emailAssunto,
//       if (emailAutenticaSsl != null) 'EMAIL_AUTENTICA_SSL': emailAutenticaSsl,
//       if (emailTexto != null) 'EMAIL_TEXTO': emailTexto,
//       if (nfceIdCsc != null) 'NFCE_ID_CSC': nfceIdCsc,
//       if (nfceCsc != null) 'NFCE_CSC': nfceCsc,
//       if (nfceModeloImpressao != null)
//         'NFCE_MODELO_IMPRESSAO': nfceModeloImpressao,
//       if (nfceImprimirItensUmaLinha != null)
//         'NFCE_IMPRIMIR_ITENS_UMA_LINHA': nfceImprimirItensUmaLinha,
//       if (nfceImprimirDescontoPorItem != null)
//         'NFCE_IMPRIMIR_DESCONTO_POR_ITEM': nfceImprimirDescontoPorItem,
//       if (nfceImprimirQrcodeLateral != null)
//         'NFCE_IMPRIMIR_QRCODE_LATERAL': nfceImprimirQrcodeLateral,
//       if (nfceImprimirGtin != null) 'NFCE_IMPRIMIR_GTIN': nfceImprimirGtin,
//       if (nfceImprimirNomeFantasia != null)
//         'NFCE_IMPRIMIR_NOME_FANTASIA': nfceImprimirNomeFantasia,
//       if (nfceImpressaoTributos != null)
//         'NFCE_IMPRESSAO_TRIBUTOS': nfceImpressaoTributos,
//       if (nfceMargemSuperior != null)
//         'NFCE_MARGEM_SUPERIOR': nfceMargemSuperior,
//       if (nfceMargemInferior != null)
//         'NFCE_MARGEM_INFERIOR': nfceMargemInferior,
//       if (nfceMargemDireita != null) 'NFCE_MARGEM_DIREITA': nfceMargemDireita,
//       if (nfceMargemEsquerda != null)
//         'NFCE_MARGEM_ESQUERDA': nfceMargemEsquerda,
//       if (nfceResolucaoImpressao != null)
//         'NFCE_RESOLUCAO_IMPRESSAO': nfceResolucaoImpressao,
//       if (respTecCnpj != null) 'RESP_TEC_CNPJ': respTecCnpj,
//       if (respTecContato != null) 'RESP_TEC_CONTATO': respTecContato,
//       if (respTecEmail != null) 'RESP_TEC_EMAIL': respTecEmail,
//       if (respTecFone != null) 'RESP_TEC_FONE': respTecFone,
//       if (respTecIdCsrt != null) 'RESP_TEC_ID_CSRT': respTecIdCsrt,
//       if (respTecHashCsrt != null) 'RESP_TEC_HASH_CSRT': respTecHashCsrt,
//       if (nfceTamanhoFonteItem != null)
//         'NFCE_TAMANHO_FONTE_ITEM': nfceTamanhoFonteItem,
//     });
//   }

//   NfeConfiguracaosCompanion copyWith(
//       {Value<int>? id,
//       Value<String?>? certificadoDigitalSerie,
//       Value<String?>? certificadoDigitalCaminho,
//       Value<String?>? certificadoDigitalSenha,
//       Value<int?>? tipoEmissao,
//       Value<int?>? formatoImpressaoDanfe,
//       Value<int?>? processoEmissao,
//       Value<String?>? versaoProcessoEmissao,
//       Value<String?>? caminhoLogomarca,
//       Value<String?>? salvarXml,
//       Value<String?>? caminhoSalvarXml,
//       Value<String?>? caminhoSchemas,
//       Value<String?>? caminhoArquivoDanfe,
//       Value<String?>? caminhoSalvarPdf,
//       Value<String?>? webserviceUf,
//       Value<int?>? webserviceAmbiente,
//       Value<String?>? webserviceProxyHost,
//       Value<int?>? webserviceProxyPorta,
//       Value<String?>? webserviceProxyUsuario,
//       Value<String?>? webserviceProxySenha,
//       Value<String?>? webserviceVisualizar,
//       Value<String?>? emailServidorSmtp,
//       Value<int?>? emailPorta,
//       Value<String?>? emailUsuario,
//       Value<String?>? emailSenha,
//       Value<String?>? emailAssunto,
//       Value<String?>? emailAutenticaSsl,
//       Value<String?>? emailTexto,
//       Value<String?>? nfceIdCsc,
//       Value<String?>? nfceCsc,
//       Value<String?>? nfceModeloImpressao,
//       Value<String?>? nfceImprimirItensUmaLinha,
//       Value<String?>? nfceImprimirDescontoPorItem,
//       Value<String?>? nfceImprimirQrcodeLateral,
//       Value<String?>? nfceImprimirGtin,
//       Value<String?>? nfceImprimirNomeFantasia,
//       Value<String?>? nfceImpressaoTributos,
//       Value<double?>? nfceMargemSuperior,
//       Value<double?>? nfceMargemInferior,
//       Value<double?>? nfceMargemDireita,
//       Value<double?>? nfceMargemEsquerda,
//       Value<int?>? nfceResolucaoImpressao,
//       Value<String?>? respTecCnpj,
//       Value<String?>? respTecContato,
//       Value<String?>? respTecEmail,
//       Value<String?>? respTecFone,
//       Value<String?>? respTecIdCsrt,
//       Value<String?>? respTecHashCsrt,
//       Value<int?>? nfceTamanhoFonteItem}) {
//     return NfeConfiguracaosCompanion(
//       id: id ?? this.id,
//       certificadoDigitalSerie:
//           certificadoDigitalSerie ?? this.certificadoDigitalSerie,
//       certificadoDigitalCaminho:
//           certificadoDigitalCaminho ?? this.certificadoDigitalCaminho,
//       certificadoDigitalSenha:
//           certificadoDigitalSenha ?? this.certificadoDigitalSenha,
//       tipoEmissao: tipoEmissao ?? this.tipoEmissao,
//       formatoImpressaoDanfe:
//           formatoImpressaoDanfe ?? this.formatoImpressaoDanfe,
//       processoEmissao: processoEmissao ?? this.processoEmissao,
//       versaoProcessoEmissao:
//           versaoProcessoEmissao ?? this.versaoProcessoEmissao,
//       caminhoLogomarca: caminhoLogomarca ?? this.caminhoLogomarca,
//       salvarXml: salvarXml ?? this.salvarXml,
//       caminhoSalvarXml: caminhoSalvarXml ?? this.caminhoSalvarXml,
//       caminhoSchemas: caminhoSchemas ?? this.caminhoSchemas,
//       caminhoArquivoDanfe: caminhoArquivoDanfe ?? this.caminhoArquivoDanfe,
//       caminhoSalvarPdf: caminhoSalvarPdf ?? this.caminhoSalvarPdf,
//       webserviceUf: webserviceUf ?? this.webserviceUf,
//       webserviceAmbiente: webserviceAmbiente ?? this.webserviceAmbiente,
//       webserviceProxyHost: webserviceProxyHost ?? this.webserviceProxyHost,
//       webserviceProxyPorta: webserviceProxyPorta ?? this.webserviceProxyPorta,
//       webserviceProxyUsuario:
//           webserviceProxyUsuario ?? this.webserviceProxyUsuario,
//       webserviceProxySenha: webserviceProxySenha ?? this.webserviceProxySenha,
//       webserviceVisualizar: webserviceVisualizar ?? this.webserviceVisualizar,
//       emailServidorSmtp: emailServidorSmtp ?? this.emailServidorSmtp,
//       emailPorta: emailPorta ?? this.emailPorta,
//       emailUsuario: emailUsuario ?? this.emailUsuario,
//       emailSenha: emailSenha ?? this.emailSenha,
//       emailAssunto: emailAssunto ?? this.emailAssunto,
//       emailAutenticaSsl: emailAutenticaSsl ?? this.emailAutenticaSsl,
//       emailTexto: emailTexto ?? this.emailTexto,
//       nfceIdCsc: nfceIdCsc ?? this.nfceIdCsc,
//       nfceCsc: nfceCsc ?? this.nfceCsc,
//       nfceModeloImpressao: nfceModeloImpressao ?? this.nfceModeloImpressao,
//       nfceImprimirItensUmaLinha:
//           nfceImprimirItensUmaLinha ?? this.nfceImprimirItensUmaLinha,
//       nfceImprimirDescontoPorItem:
//           nfceImprimirDescontoPorItem ?? this.nfceImprimirDescontoPorItem,
//       nfceImprimirQrcodeLateral:
//           nfceImprimirQrcodeLateral ?? this.nfceImprimirQrcodeLateral,
//       nfceImprimirGtin: nfceImprimirGtin ?? this.nfceImprimirGtin,
//       nfceImprimirNomeFantasia:
//           nfceImprimirNomeFantasia ?? this.nfceImprimirNomeFantasia,
//       nfceImpressaoTributos:
//           nfceImpressaoTributos ?? this.nfceImpressaoTributos,
//       nfceMargemSuperior: nfceMargemSuperior ?? this.nfceMargemSuperior,
//       nfceMargemInferior: nfceMargemInferior ?? this.nfceMargemInferior,
//       nfceMargemDireita: nfceMargemDireita ?? this.nfceMargemDireita,
//       nfceMargemEsquerda: nfceMargemEsquerda ?? this.nfceMargemEsquerda,
//       nfceResolucaoImpressao:
//           nfceResolucaoImpressao ?? this.nfceResolucaoImpressao,
//       respTecCnpj: respTecCnpj ?? this.respTecCnpj,
//       respTecContato: respTecContato ?? this.respTecContato,
//       respTecEmail: respTecEmail ?? this.respTecEmail,
//       respTecFone: respTecFone ?? this.respTecFone,
//       respTecIdCsrt: respTecIdCsrt ?? this.respTecIdCsrt,
//       respTecHashCsrt: respTecHashCsrt ?? this.respTecHashCsrt,
//       nfceTamanhoFonteItem: nfceTamanhoFonteItem ?? this.nfceTamanhoFonteItem,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (certificadoDigitalSerie.present) {
//       map['CERTIFICADO_DIGITAL_SERIE'] =
//           Variable<String?>(certificadoDigitalSerie.value);
//     }
//     if (certificadoDigitalCaminho.present) {
//       map['CERTIFICADO_DIGITAL_CAMINHO'] =
//           Variable<String?>(certificadoDigitalCaminho.value);
//     }
//     if (certificadoDigitalSenha.present) {
//       map['CERTIFICADO_DIGITAL_SENHA'] =
//           Variable<String?>(certificadoDigitalSenha.value);
//     }
//     if (tipoEmissao.present) {
//       map['TIPO_EMISSAO'] = Variable<int?>(tipoEmissao.value);
//     }
//     if (formatoImpressaoDanfe.present) {
//       map['FORMATO_IMPRESSAO_DANFE'] =
//           Variable<int?>(formatoImpressaoDanfe.value);
//     }
//     if (processoEmissao.present) {
//       map['PROCESSO_EMISSAO'] = Variable<int?>(processoEmissao.value);
//     }
//     if (versaoProcessoEmissao.present) {
//       map['VERSAO_PROCESSO_EMISSAO'] =
//           Variable<String?>(versaoProcessoEmissao.value);
//     }
//     if (caminhoLogomarca.present) {
//       map['CAMINHO_LOGOMARCA'] = Variable<String?>(caminhoLogomarca.value);
//     }
//     if (salvarXml.present) {
//       map['SALVAR_XML'] = Variable<String?>(salvarXml.value);
//     }
//     if (caminhoSalvarXml.present) {
//       map['CAMINHO_SALVAR_XML'] = Variable<String?>(caminhoSalvarXml.value);
//     }
//     if (caminhoSchemas.present) {
//       map['CAMINHO_SCHEMAS'] = Variable<String?>(caminhoSchemas.value);
//     }
//     if (caminhoArquivoDanfe.present) {
//       map['CAMINHO_ARQUIVO_DANFE'] =
//           Variable<String?>(caminhoArquivoDanfe.value);
//     }
//     if (caminhoSalvarPdf.present) {
//       map['CAMINHO_SALVAR_PDF'] = Variable<String?>(caminhoSalvarPdf.value);
//     }
//     if (webserviceUf.present) {
//       map['WEBSERVICE_UF'] = Variable<String?>(webserviceUf.value);
//     }
//     if (webserviceAmbiente.present) {
//       map['WEBSERVICE_AMBIENTE'] = Variable<int?>(webserviceAmbiente.value);
//     }
//     if (webserviceProxyHost.present) {
//       map['WEBSERVICE_PROXY_HOST'] =
//           Variable<String?>(webserviceProxyHost.value);
//     }
//     if (webserviceProxyPorta.present) {
//       map['WEBSERVICE_PROXY_PORTA'] =
//           Variable<int?>(webserviceProxyPorta.value);
//     }
//     if (webserviceProxyUsuario.present) {
//       map['WEBSERVICE_PROXY_USUARIO'] =
//           Variable<String?>(webserviceProxyUsuario.value);
//     }
//     if (webserviceProxySenha.present) {
//       map['WEBSERVICE_PROXY_SENHA'] =
//           Variable<String?>(webserviceProxySenha.value);
//     }
//     if (webserviceVisualizar.present) {
//       map['WEBSERVICE_VISUALIZAR'] =
//           Variable<String?>(webserviceVisualizar.value);
//     }
//     if (emailServidorSmtp.present) {
//       map['EMAIL_SERVIDOR_SMTP'] = Variable<String?>(emailServidorSmtp.value);
//     }
//     if (emailPorta.present) {
//       map['EMAIL_PORTA'] = Variable<int?>(emailPorta.value);
//     }
//     if (emailUsuario.present) {
//       map['EMAIL_USUARIO'] = Variable<String?>(emailUsuario.value);
//     }
//     if (emailSenha.present) {
//       map['EMAIL_SENHA'] = Variable<String?>(emailSenha.value);
//     }
//     if (emailAssunto.present) {
//       map['EMAIL_ASSUNTO'] = Variable<String?>(emailAssunto.value);
//     }
//     if (emailAutenticaSsl.present) {
//       map['EMAIL_AUTENTICA_SSL'] = Variable<String?>(emailAutenticaSsl.value);
//     }
//     if (emailTexto.present) {
//       map['EMAIL_TEXTO'] = Variable<String?>(emailTexto.value);
//     }
//     if (nfceIdCsc.present) {
//       map['NFCE_ID_CSC'] = Variable<String?>(nfceIdCsc.value);
//     }
//     if (nfceCsc.present) {
//       map['NFCE_CSC'] = Variable<String?>(nfceCsc.value);
//     }
//     if (nfceModeloImpressao.present) {
//       map['NFCE_MODELO_IMPRESSAO'] =
//           Variable<String?>(nfceModeloImpressao.value);
//     }
//     if (nfceImprimirItensUmaLinha.present) {
//       map['NFCE_IMPRIMIR_ITENS_UMA_LINHA'] =
//           Variable<String?>(nfceImprimirItensUmaLinha.value);
//     }
//     if (nfceImprimirDescontoPorItem.present) {
//       map['NFCE_IMPRIMIR_DESCONTO_POR_ITEM'] =
//           Variable<String?>(nfceImprimirDescontoPorItem.value);
//     }
//     if (nfceImprimirQrcodeLateral.present) {
//       map['NFCE_IMPRIMIR_QRCODE_LATERAL'] =
//           Variable<String?>(nfceImprimirQrcodeLateral.value);
//     }
//     if (nfceImprimirGtin.present) {
//       map['NFCE_IMPRIMIR_GTIN'] = Variable<String?>(nfceImprimirGtin.value);
//     }
//     if (nfceImprimirNomeFantasia.present) {
//       map['NFCE_IMPRIMIR_NOME_FANTASIA'] =
//           Variable<String?>(nfceImprimirNomeFantasia.value);
//     }
//     if (nfceImpressaoTributos.present) {
//       map['NFCE_IMPRESSAO_TRIBUTOS'] =
//           Variable<String?>(nfceImpressaoTributos.value);
//     }
//     if (nfceMargemSuperior.present) {
//       map['NFCE_MARGEM_SUPERIOR'] = Variable<double?>(nfceMargemSuperior.value);
//     }
//     if (nfceMargemInferior.present) {
//       map['NFCE_MARGEM_INFERIOR'] = Variable<double?>(nfceMargemInferior.value);
//     }
//     if (nfceMargemDireita.present) {
//       map['NFCE_MARGEM_DIREITA'] = Variable<double?>(nfceMargemDireita.value);
//     }
//     if (nfceMargemEsquerda.present) {
//       map['NFCE_MARGEM_ESQUERDA'] = Variable<double?>(nfceMargemEsquerda.value);
//     }
//     if (nfceResolucaoImpressao.present) {
//       map['NFCE_RESOLUCAO_IMPRESSAO'] =
//           Variable<int?>(nfceResolucaoImpressao.value);
//     }
//     if (respTecCnpj.present) {
//       map['RESP_TEC_CNPJ'] = Variable<String?>(respTecCnpj.value);
//     }
//     if (respTecContato.present) {
//       map['RESP_TEC_CONTATO'] = Variable<String?>(respTecContato.value);
//     }
//     if (respTecEmail.present) {
//       map['RESP_TEC_EMAIL'] = Variable<String?>(respTecEmail.value);
//     }
//     if (respTecFone.present) {
//       map['RESP_TEC_FONE'] = Variable<String?>(respTecFone.value);
//     }
//     if (respTecIdCsrt.present) {
//       map['RESP_TEC_ID_CSRT'] = Variable<String?>(respTecIdCsrt.value);
//     }
//     if (respTecHashCsrt.present) {
//       map['RESP_TEC_HASH_CSRT'] = Variable<String?>(respTecHashCsrt.value);
//     }
//     if (nfceTamanhoFonteItem.present) {
//       map['NFCE_TAMANHO_FONTE_ITEM'] =
//           Variable<int?>(nfceTamanhoFonteItem.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeConfiguracaosCompanion(')
//           ..write('id: $id, ')
//           ..write('certificadoDigitalSerie: $certificadoDigitalSerie, ')
//           ..write('certificadoDigitalCaminho: $certificadoDigitalCaminho, ')
//           ..write('certificadoDigitalSenha: $certificadoDigitalSenha, ')
//           ..write('tipoEmissao: $tipoEmissao, ')
//           ..write('formatoImpressaoDanfe: $formatoImpressaoDanfe, ')
//           ..write('processoEmissao: $processoEmissao, ')
//           ..write('versaoProcessoEmissao: $versaoProcessoEmissao, ')
//           ..write('caminhoLogomarca: $caminhoLogomarca, ')
//           ..write('salvarXml: $salvarXml, ')
//           ..write('caminhoSalvarXml: $caminhoSalvarXml, ')
//           ..write('caminhoSchemas: $caminhoSchemas, ')
//           ..write('caminhoArquivoDanfe: $caminhoArquivoDanfe, ')
//           ..write('caminhoSalvarPdf: $caminhoSalvarPdf, ')
//           ..write('webserviceUf: $webserviceUf, ')
//           ..write('webserviceAmbiente: $webserviceAmbiente, ')
//           ..write('webserviceProxyHost: $webserviceProxyHost, ')
//           ..write('webserviceProxyPorta: $webserviceProxyPorta, ')
//           ..write('webserviceProxyUsuario: $webserviceProxyUsuario, ')
//           ..write('webserviceProxySenha: $webserviceProxySenha, ')
//           ..write('webserviceVisualizar: $webserviceVisualizar, ')
//           ..write('emailServidorSmtp: $emailServidorSmtp, ')
//           ..write('emailPorta: $emailPorta, ')
//           ..write('emailUsuario: $emailUsuario, ')
//           ..write('emailSenha: $emailSenha, ')
//           ..write('emailAssunto: $emailAssunto, ')
//           ..write('emailAutenticaSsl: $emailAutenticaSsl, ')
//           ..write('emailTexto: $emailTexto, ')
//           ..write('nfceIdCsc: $nfceIdCsc, ')
//           ..write('nfceCsc: $nfceCsc, ')
//           ..write('nfceModeloImpressao: $nfceModeloImpressao, ')
//           ..write('nfceImprimirItensUmaLinha: $nfceImprimirItensUmaLinha, ')
//           ..write('nfceImprimirDescontoPorItem: $nfceImprimirDescontoPorItem, ')
//           ..write('nfceImprimirQrcodeLateral: $nfceImprimirQrcodeLateral, ')
//           ..write('nfceImprimirGtin: $nfceImprimirGtin, ')
//           ..write('nfceImprimirNomeFantasia: $nfceImprimirNomeFantasia, ')
//           ..write('nfceImpressaoTributos: $nfceImpressaoTributos, ')
//           ..write('nfceMargemSuperior: $nfceMargemSuperior, ')
//           ..write('nfceMargemInferior: $nfceMargemInferior, ')
//           ..write('nfceMargemDireita: $nfceMargemDireita, ')
//           ..write('nfceMargemEsquerda: $nfceMargemEsquerda, ')
//           ..write('nfceResolucaoImpressao: $nfceResolucaoImpressao, ')
//           ..write('respTecCnpj: $respTecCnpj, ')
//           ..write('respTecContato: $respTecContato, ')
//           ..write('respTecEmail: $respTecEmail, ')
//           ..write('respTecFone: $respTecFone, ')
//           ..write('respTecIdCsrt: $respTecIdCsrt, ')
//           ..write('respTecHashCsrt: $respTecHashCsrt, ')
//           ..write('nfceTamanhoFonteItem: $nfceTamanhoFonteItem')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeConfiguracaosTable extends NfeConfiguracaos
//     with TableInfo<$NfeConfiguracaosTable, NfeConfiguracao> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeConfiguracaosTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _certificadoDigitalSerieMeta =
//       const VerificationMeta('certificadoDigitalSerie');
//   late final GeneratedColumn<String?> certificadoDigitalSerie =
//       GeneratedColumn<String?>('CERTIFICADO_DIGITAL_SERIE', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 100),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _certificadoDigitalCaminhoMeta =
//       const VerificationMeta('certificadoDigitalCaminho');
//   late final GeneratedColumn<String?> certificadoDigitalCaminho =
//       GeneratedColumn<String?>('CERTIFICADO_DIGITAL_CAMINHO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 250),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _certificadoDigitalSenhaMeta =
//       const VerificationMeta('certificadoDigitalSenha');
//   late final GeneratedColumn<String?> certificadoDigitalSenha =
//       GeneratedColumn<String?>('CERTIFICADO_DIGITAL_SENHA', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 100),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _tipoEmissaoMeta =
//       const VerificationMeta('tipoEmissao');
//   late final GeneratedColumn<int?> tipoEmissao = GeneratedColumn<int?>(
//       'TIPO_EMISSAO', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _formatoImpressaoDanfeMeta =
//       const VerificationMeta('formatoImpressaoDanfe');
//   late final GeneratedColumn<int?> formatoImpressaoDanfe =
//       GeneratedColumn<int?>('FORMATO_IMPRESSAO_DANFE', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _processoEmissaoMeta =
//       const VerificationMeta('processoEmissao');
//   late final GeneratedColumn<int?> processoEmissao = GeneratedColumn<int?>(
//       'PROCESSO_EMISSAO', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _versaoProcessoEmissaoMeta =
//       const VerificationMeta('versaoProcessoEmissao');
//   late final GeneratedColumn<String?> versaoProcessoEmissao =
//       GeneratedColumn<String?>('VERSAO_PROCESSO_EMISSAO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 20),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _caminhoLogomarcaMeta =
//       const VerificationMeta('caminhoLogomarca');
//   late final GeneratedColumn<String?> caminhoLogomarca =
//       GeneratedColumn<String?>('CAMINHO_LOGOMARCA', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 250),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _salvarXmlMeta = const VerificationMeta('salvarXml');
//   late final GeneratedColumn<String?> salvarXml = GeneratedColumn<String?>(
//       'SALVAR_XML', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _caminhoSalvarXmlMeta =
//       const VerificationMeta('caminhoSalvarXml');
//   late final GeneratedColumn<String?> caminhoSalvarXml =
//       GeneratedColumn<String?>('CAMINHO_SALVAR_XML', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 250),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _caminhoSchemasMeta =
//       const VerificationMeta('caminhoSchemas');
//   late final GeneratedColumn<String?> caminhoSchemas = GeneratedColumn<String?>(
//       'CAMINHO_SCHEMAS', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _caminhoArquivoDanfeMeta =
//       const VerificationMeta('caminhoArquivoDanfe');
//   late final GeneratedColumn<String?> caminhoArquivoDanfe =
//       GeneratedColumn<String?>('CAMINHO_ARQUIVO_DANFE', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 250),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _caminhoSalvarPdfMeta =
//       const VerificationMeta('caminhoSalvarPdf');
//   late final GeneratedColumn<String?> caminhoSalvarPdf =
//       GeneratedColumn<String?>('CAMINHO_SALVAR_PDF', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 250),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _webserviceUfMeta =
//       const VerificationMeta('webserviceUf');
//   late final GeneratedColumn<String?> webserviceUf = GeneratedColumn<String?>(
//       'WEBSERVICE_UF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _webserviceAmbienteMeta =
//       const VerificationMeta('webserviceAmbiente');
//   late final GeneratedColumn<int?> webserviceAmbiente = GeneratedColumn<int?>(
//       'WEBSERVICE_AMBIENTE', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _webserviceProxyHostMeta =
//       const VerificationMeta('webserviceProxyHost');
//   late final GeneratedColumn<String?> webserviceProxyHost =
//       GeneratedColumn<String?>('WEBSERVICE_PROXY_HOST', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 100),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _webserviceProxyPortaMeta =
//       const VerificationMeta('webserviceProxyPorta');
//   late final GeneratedColumn<int?> webserviceProxyPorta = GeneratedColumn<int?>(
//       'WEBSERVICE_PROXY_PORTA', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _webserviceProxyUsuarioMeta =
//       const VerificationMeta('webserviceProxyUsuario');
//   late final GeneratedColumn<String?> webserviceProxyUsuario =
//       GeneratedColumn<String?>('WEBSERVICE_PROXY_USUARIO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 100),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _webserviceProxySenhaMeta =
//       const VerificationMeta('webserviceProxySenha');
//   late final GeneratedColumn<String?> webserviceProxySenha =
//       GeneratedColumn<String?>('WEBSERVICE_PROXY_SENHA', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 100),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _webserviceVisualizarMeta =
//       const VerificationMeta('webserviceVisualizar');
//   late final GeneratedColumn<String?> webserviceVisualizar =
//       GeneratedColumn<String?>('WEBSERVICE_VISUALIZAR', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _emailServidorSmtpMeta =
//       const VerificationMeta('emailServidorSmtp');
//   late final GeneratedColumn<String?> emailServidorSmtp =
//       GeneratedColumn<String?>('EMAIL_SERVIDOR_SMTP', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 100),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _emailPortaMeta = const VerificationMeta('emailPorta');
//   late final GeneratedColumn<int?> emailPorta = GeneratedColumn<int?>(
//       'EMAIL_PORTA', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _emailUsuarioMeta =
//       const VerificationMeta('emailUsuario');
//   late final GeneratedColumn<String?> emailUsuario = GeneratedColumn<String?>(
//       'EMAIL_USUARIO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _emailSenhaMeta = const VerificationMeta('emailSenha');
//   late final GeneratedColumn<String?> emailSenha = GeneratedColumn<String?>(
//       'EMAIL_SENHA', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _emailAssuntoMeta =
//       const VerificationMeta('emailAssunto');
//   late final GeneratedColumn<String?> emailAssunto = GeneratedColumn<String?>(
//       'EMAIL_ASSUNTO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _emailAutenticaSslMeta =
//       const VerificationMeta('emailAutenticaSsl');
//   late final GeneratedColumn<String?> emailAutenticaSsl =
//       GeneratedColumn<String?>('EMAIL_AUTENTICA_SSL', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _emailTextoMeta = const VerificationMeta('emailTexto');
//   late final GeneratedColumn<String?> emailTexto = GeneratedColumn<String?>(
//       'EMAIL_TEXTO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _nfceIdCscMeta = const VerificationMeta('nfceIdCsc');
//   late final GeneratedColumn<String?> nfceIdCsc = GeneratedColumn<String?>(
//       'NFCE_ID_CSC', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 6),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _nfceCscMeta = const VerificationMeta('nfceCsc');
//   late final GeneratedColumn<String?> nfceCsc = GeneratedColumn<String?>(
//       'NFCE_CSC', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _nfceModeloImpressaoMeta =
//       const VerificationMeta('nfceModeloImpressao');
//   late final GeneratedColumn<String?> nfceModeloImpressao =
//       GeneratedColumn<String?>('NFCE_MODELO_IMPRESSAO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 2),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _nfceImprimirItensUmaLinhaMeta =
//       const VerificationMeta('nfceImprimirItensUmaLinha');
//   late final GeneratedColumn<String?> nfceImprimirItensUmaLinha =
//       GeneratedColumn<String?>(
//           'NFCE_IMPRIMIR_ITENS_UMA_LINHA', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _nfceImprimirDescontoPorItemMeta =
//       const VerificationMeta('nfceImprimirDescontoPorItem');
//   late final GeneratedColumn<String?> nfceImprimirDescontoPorItem =
//       GeneratedColumn<String?>(
//           'NFCE_IMPRIMIR_DESCONTO_POR_ITEM', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _nfceImprimirQrcodeLateralMeta =
//       const VerificationMeta('nfceImprimirQrcodeLateral');
//   late final GeneratedColumn<String?> nfceImprimirQrcodeLateral =
//       GeneratedColumn<String?>(
//           'NFCE_IMPRIMIR_QRCODE_LATERAL', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _nfceImprimirGtinMeta =
//       const VerificationMeta('nfceImprimirGtin');
//   late final GeneratedColumn<String?> nfceImprimirGtin =
//       GeneratedColumn<String?>('NFCE_IMPRIMIR_GTIN', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _nfceImprimirNomeFantasiaMeta =
//       const VerificationMeta('nfceImprimirNomeFantasia');
//   late final GeneratedColumn<String?> nfceImprimirNomeFantasia =
//       GeneratedColumn<String?>('NFCE_IMPRIMIR_NOME_FANTASIA', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _nfceImpressaoTributosMeta =
//       const VerificationMeta('nfceImpressaoTributos');
//   late final GeneratedColumn<String?> nfceImpressaoTributos =
//       GeneratedColumn<String?>('NFCE_IMPRESSAO_TRIBUTOS', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _nfceMargemSuperiorMeta =
//       const VerificationMeta('nfceMargemSuperior');
//   late final GeneratedColumn<double?> nfceMargemSuperior =
//       GeneratedColumn<double?>('NFCE_MARGEM_SUPERIOR', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _nfceMargemInferiorMeta =
//       const VerificationMeta('nfceMargemInferior');
//   late final GeneratedColumn<double?> nfceMargemInferior =
//       GeneratedColumn<double?>('NFCE_MARGEM_INFERIOR', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _nfceMargemDireitaMeta =
//       const VerificationMeta('nfceMargemDireita');
//   late final GeneratedColumn<double?> nfceMargemDireita =
//       GeneratedColumn<double?>('NFCE_MARGEM_DIREITA', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _nfceMargemEsquerdaMeta =
//       const VerificationMeta('nfceMargemEsquerda');
//   late final GeneratedColumn<double?> nfceMargemEsquerda =
//       GeneratedColumn<double?>('NFCE_MARGEM_ESQUERDA', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _nfceResolucaoImpressaoMeta =
//       const VerificationMeta('nfceResolucaoImpressao');
//   late final GeneratedColumn<int?> nfceResolucaoImpressao =
//       GeneratedColumn<int?>('NFCE_RESOLUCAO_IMPRESSAO', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _respTecCnpjMeta =
//       const VerificationMeta('respTecCnpj');
//   late final GeneratedColumn<String?> respTecCnpj = GeneratedColumn<String?>(
//       'RESP_TEC_CNPJ', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _respTecContatoMeta =
//       const VerificationMeta('respTecContato');
//   late final GeneratedColumn<String?> respTecContato = GeneratedColumn<String?>(
//       'RESP_TEC_CONTATO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _respTecEmailMeta =
//       const VerificationMeta('respTecEmail');
//   late final GeneratedColumn<String?> respTecEmail = GeneratedColumn<String?>(
//       'RESP_TEC_EMAIL', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _respTecFoneMeta =
//       const VerificationMeta('respTecFone');
//   late final GeneratedColumn<String?> respTecFone = GeneratedColumn<String?>(
//       'RESP_TEC_FONE', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 15),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _respTecIdCsrtMeta =
//       const VerificationMeta('respTecIdCsrt');
//   late final GeneratedColumn<String?> respTecIdCsrt = GeneratedColumn<String?>(
//       'RESP_TEC_ID_CSRT', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _respTecHashCsrtMeta =
//       const VerificationMeta('respTecHashCsrt');
//   late final GeneratedColumn<String?> respTecHashCsrt =
//       GeneratedColumn<String?>('RESP_TEC_HASH_CSRT', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 28),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _nfceTamanhoFonteItemMeta =
//       const VerificationMeta('nfceTamanhoFonteItem');
//   late final GeneratedColumn<int?> nfceTamanhoFonteItem = GeneratedColumn<int?>(
//       'NFCE_TAMANHO_FONTE_ITEM', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         certificadoDigitalSerie,
//         certificadoDigitalCaminho,
//         certificadoDigitalSenha,
//         tipoEmissao,
//         formatoImpressaoDanfe,
//         processoEmissao,
//         versaoProcessoEmissao,
//         caminhoLogomarca,
//         salvarXml,
//         caminhoSalvarXml,
//         caminhoSchemas,
//         caminhoArquivoDanfe,
//         caminhoSalvarPdf,
//         webserviceUf,
//         webserviceAmbiente,
//         webserviceProxyHost,
//         webserviceProxyPorta,
//         webserviceProxyUsuario,
//         webserviceProxySenha,
//         webserviceVisualizar,
//         emailServidorSmtp,
//         emailPorta,
//         emailUsuario,
//         emailSenha,
//         emailAssunto,
//         emailAutenticaSsl,
//         emailTexto,
//         nfceIdCsc,
//         nfceCsc,
//         nfceModeloImpressao,
//         nfceImprimirItensUmaLinha,
//         nfceImprimirDescontoPorItem,
//         nfceImprimirQrcodeLateral,
//         nfceImprimirGtin,
//         nfceImprimirNomeFantasia,
//         nfceImpressaoTributos,
//         nfceMargemSuperior,
//         nfceMargemInferior,
//         nfceMargemDireita,
//         nfceMargemEsquerda,
//         nfceResolucaoImpressao,
//         respTecCnpj,
//         respTecContato,
//         respTecEmail,
//         respTecFone,
//         respTecIdCsrt,
//         respTecHashCsrt,
//         nfceTamanhoFonteItem
//       ];
//   @override
//   String get aliasedName => _alias ?? 'NFE_CONFIGURACAO';
//   @override
//   String get actualTableName => 'NFE_CONFIGURACAO';
//   @override
//   VerificationContext validateIntegrity(Insertable<NfeConfiguracao> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('CERTIFICADO_DIGITAL_SERIE')) {
//       context.handle(
//           _certificadoDigitalSerieMeta,
//           certificadoDigitalSerie.isAcceptableOrUnknown(
//               data['CERTIFICADO_DIGITAL_SERIE']!,
//               _certificadoDigitalSerieMeta));
//     }
//     if (data.containsKey('CERTIFICADO_DIGITAL_CAMINHO')) {
//       context.handle(
//           _certificadoDigitalCaminhoMeta,
//           certificadoDigitalCaminho.isAcceptableOrUnknown(
//               data['CERTIFICADO_DIGITAL_CAMINHO']!,
//               _certificadoDigitalCaminhoMeta));
//     }
//     if (data.containsKey('CERTIFICADO_DIGITAL_SENHA')) {
//       context.handle(
//           _certificadoDigitalSenhaMeta,
//           certificadoDigitalSenha.isAcceptableOrUnknown(
//               data['CERTIFICADO_DIGITAL_SENHA']!,
//               _certificadoDigitalSenhaMeta));
//     }
//     if (data.containsKey('TIPO_EMISSAO')) {
//       context.handle(
//           _tipoEmissaoMeta,
//           tipoEmissao.isAcceptableOrUnknown(
//               data['TIPO_EMISSAO']!, _tipoEmissaoMeta));
//     }
//     if (data.containsKey('FORMATO_IMPRESSAO_DANFE')) {
//       context.handle(
//           _formatoImpressaoDanfeMeta,
//           formatoImpressaoDanfe.isAcceptableOrUnknown(
//               data['FORMATO_IMPRESSAO_DANFE']!, _formatoImpressaoDanfeMeta));
//     }
//     if (data.containsKey('PROCESSO_EMISSAO')) {
//       context.handle(
//           _processoEmissaoMeta,
//           processoEmissao.isAcceptableOrUnknown(
//               data['PROCESSO_EMISSAO']!, _processoEmissaoMeta));
//     }
//     if (data.containsKey('VERSAO_PROCESSO_EMISSAO')) {
//       context.handle(
//           _versaoProcessoEmissaoMeta,
//           versaoProcessoEmissao.isAcceptableOrUnknown(
//               data['VERSAO_PROCESSO_EMISSAO']!, _versaoProcessoEmissaoMeta));
//     }
//     if (data.containsKey('CAMINHO_LOGOMARCA')) {
//       context.handle(
//           _caminhoLogomarcaMeta,
//           caminhoLogomarca.isAcceptableOrUnknown(
//               data['CAMINHO_LOGOMARCA']!, _caminhoLogomarcaMeta));
//     }
//     if (data.containsKey('SALVAR_XML')) {
//       context.handle(_salvarXmlMeta,
//           salvarXml.isAcceptableOrUnknown(data['SALVAR_XML']!, _salvarXmlMeta));
//     }
//     if (data.containsKey('CAMINHO_SALVAR_XML')) {
//       context.handle(
//           _caminhoSalvarXmlMeta,
//           caminhoSalvarXml.isAcceptableOrUnknown(
//               data['CAMINHO_SALVAR_XML']!, _caminhoSalvarXmlMeta));
//     }
//     if (data.containsKey('CAMINHO_SCHEMAS')) {
//       context.handle(
//           _caminhoSchemasMeta,
//           caminhoSchemas.isAcceptableOrUnknown(
//               data['CAMINHO_SCHEMAS']!, _caminhoSchemasMeta));
//     }
//     if (data.containsKey('CAMINHO_ARQUIVO_DANFE')) {
//       context.handle(
//           _caminhoArquivoDanfeMeta,
//           caminhoArquivoDanfe.isAcceptableOrUnknown(
//               data['CAMINHO_ARQUIVO_DANFE']!, _caminhoArquivoDanfeMeta));
//     }
//     if (data.containsKey('CAMINHO_SALVAR_PDF')) {
//       context.handle(
//           _caminhoSalvarPdfMeta,
//           caminhoSalvarPdf.isAcceptableOrUnknown(
//               data['CAMINHO_SALVAR_PDF']!, _caminhoSalvarPdfMeta));
//     }
//     if (data.containsKey('WEBSERVICE_UF')) {
//       context.handle(
//           _webserviceUfMeta,
//           webserviceUf.isAcceptableOrUnknown(
//               data['WEBSERVICE_UF']!, _webserviceUfMeta));
//     }
//     if (data.containsKey('WEBSERVICE_AMBIENTE')) {
//       context.handle(
//           _webserviceAmbienteMeta,
//           webserviceAmbiente.isAcceptableOrUnknown(
//               data['WEBSERVICE_AMBIENTE']!, _webserviceAmbienteMeta));
//     }
//     if (data.containsKey('WEBSERVICE_PROXY_HOST')) {
//       context.handle(
//           _webserviceProxyHostMeta,
//           webserviceProxyHost.isAcceptableOrUnknown(
//               data['WEBSERVICE_PROXY_HOST']!, _webserviceProxyHostMeta));
//     }
//     if (data.containsKey('WEBSERVICE_PROXY_PORTA')) {
//       context.handle(
//           _webserviceProxyPortaMeta,
//           webserviceProxyPorta.isAcceptableOrUnknown(
//               data['WEBSERVICE_PROXY_PORTA']!, _webserviceProxyPortaMeta));
//     }
//     if (data.containsKey('WEBSERVICE_PROXY_USUARIO')) {
//       context.handle(
//           _webserviceProxyUsuarioMeta,
//           webserviceProxyUsuario.isAcceptableOrUnknown(
//               data['WEBSERVICE_PROXY_USUARIO']!, _webserviceProxyUsuarioMeta));
//     }
//     if (data.containsKey('WEBSERVICE_PROXY_SENHA')) {
//       context.handle(
//           _webserviceProxySenhaMeta,
//           webserviceProxySenha.isAcceptableOrUnknown(
//               data['WEBSERVICE_PROXY_SENHA']!, _webserviceProxySenhaMeta));
//     }
//     if (data.containsKey('WEBSERVICE_VISUALIZAR')) {
//       context.handle(
//           _webserviceVisualizarMeta,
//           webserviceVisualizar.isAcceptableOrUnknown(
//               data['WEBSERVICE_VISUALIZAR']!, _webserviceVisualizarMeta));
//     }
//     if (data.containsKey('EMAIL_SERVIDOR_SMTP')) {
//       context.handle(
//           _emailServidorSmtpMeta,
//           emailServidorSmtp.isAcceptableOrUnknown(
//               data['EMAIL_SERVIDOR_SMTP']!, _emailServidorSmtpMeta));
//     }
//     if (data.containsKey('EMAIL_PORTA')) {
//       context.handle(
//           _emailPortaMeta,
//           emailPorta.isAcceptableOrUnknown(
//               data['EMAIL_PORTA']!, _emailPortaMeta));
//     }
//     if (data.containsKey('EMAIL_USUARIO')) {
//       context.handle(
//           _emailUsuarioMeta,
//           emailUsuario.isAcceptableOrUnknown(
//               data['EMAIL_USUARIO']!, _emailUsuarioMeta));
//     }
//     if (data.containsKey('EMAIL_SENHA')) {
//       context.handle(
//           _emailSenhaMeta,
//           emailSenha.isAcceptableOrUnknown(
//               data['EMAIL_SENHA']!, _emailSenhaMeta));
//     }
//     if (data.containsKey('EMAIL_ASSUNTO')) {
//       context.handle(
//           _emailAssuntoMeta,
//           emailAssunto.isAcceptableOrUnknown(
//               data['EMAIL_ASSUNTO']!, _emailAssuntoMeta));
//     }
//     if (data.containsKey('EMAIL_AUTENTICA_SSL')) {
//       context.handle(
//           _emailAutenticaSslMeta,
//           emailAutenticaSsl.isAcceptableOrUnknown(
//               data['EMAIL_AUTENTICA_SSL']!, _emailAutenticaSslMeta));
//     }
//     if (data.containsKey('EMAIL_TEXTO')) {
//       context.handle(
//           _emailTextoMeta,
//           emailTexto.isAcceptableOrUnknown(
//               data['EMAIL_TEXTO']!, _emailTextoMeta));
//     }
//     if (data.containsKey('NFCE_ID_CSC')) {
//       context.handle(
//           _nfceIdCscMeta,
//           nfceIdCsc.isAcceptableOrUnknown(
//               data['NFCE_ID_CSC']!, _nfceIdCscMeta));
//     }
//     if (data.containsKey('NFCE_CSC')) {
//       context.handle(_nfceCscMeta,
//           nfceCsc.isAcceptableOrUnknown(data['NFCE_CSC']!, _nfceCscMeta));
//     }
//     if (data.containsKey('NFCE_MODELO_IMPRESSAO')) {
//       context.handle(
//           _nfceModeloImpressaoMeta,
//           nfceModeloImpressao.isAcceptableOrUnknown(
//               data['NFCE_MODELO_IMPRESSAO']!, _nfceModeloImpressaoMeta));
//     }
//     if (data.containsKey('NFCE_IMPRIMIR_ITENS_UMA_LINHA')) {
//       context.handle(
//           _nfceImprimirItensUmaLinhaMeta,
//           nfceImprimirItensUmaLinha.isAcceptableOrUnknown(
//               data['NFCE_IMPRIMIR_ITENS_UMA_LINHA']!,
//               _nfceImprimirItensUmaLinhaMeta));
//     }
//     if (data.containsKey('NFCE_IMPRIMIR_DESCONTO_POR_ITEM')) {
//       context.handle(
//           _nfceImprimirDescontoPorItemMeta,
//           nfceImprimirDescontoPorItem.isAcceptableOrUnknown(
//               data['NFCE_IMPRIMIR_DESCONTO_POR_ITEM']!,
//               _nfceImprimirDescontoPorItemMeta));
//     }
//     if (data.containsKey('NFCE_IMPRIMIR_QRCODE_LATERAL')) {
//       context.handle(
//           _nfceImprimirQrcodeLateralMeta,
//           nfceImprimirQrcodeLateral.isAcceptableOrUnknown(
//               data['NFCE_IMPRIMIR_QRCODE_LATERAL']!,
//               _nfceImprimirQrcodeLateralMeta));
//     }
//     if (data.containsKey('NFCE_IMPRIMIR_GTIN')) {
//       context.handle(
//           _nfceImprimirGtinMeta,
//           nfceImprimirGtin.isAcceptableOrUnknown(
//               data['NFCE_IMPRIMIR_GTIN']!, _nfceImprimirGtinMeta));
//     }
//     if (data.containsKey('NFCE_IMPRIMIR_NOME_FANTASIA')) {
//       context.handle(
//           _nfceImprimirNomeFantasiaMeta,
//           nfceImprimirNomeFantasia.isAcceptableOrUnknown(
//               data['NFCE_IMPRIMIR_NOME_FANTASIA']!,
//               _nfceImprimirNomeFantasiaMeta));
//     }
//     if (data.containsKey('NFCE_IMPRESSAO_TRIBUTOS')) {
//       context.handle(
//           _nfceImpressaoTributosMeta,
//           nfceImpressaoTributos.isAcceptableOrUnknown(
//               data['NFCE_IMPRESSAO_TRIBUTOS']!, _nfceImpressaoTributosMeta));
//     }
//     if (data.containsKey('NFCE_MARGEM_SUPERIOR')) {
//       context.handle(
//           _nfceMargemSuperiorMeta,
//           nfceMargemSuperior.isAcceptableOrUnknown(
//               data['NFCE_MARGEM_SUPERIOR']!, _nfceMargemSuperiorMeta));
//     }
//     if (data.containsKey('NFCE_MARGEM_INFERIOR')) {
//       context.handle(
//           _nfceMargemInferiorMeta,
//           nfceMargemInferior.isAcceptableOrUnknown(
//               data['NFCE_MARGEM_INFERIOR']!, _nfceMargemInferiorMeta));
//     }
//     if (data.containsKey('NFCE_MARGEM_DIREITA')) {
//       context.handle(
//           _nfceMargemDireitaMeta,
//           nfceMargemDireita.isAcceptableOrUnknown(
//               data['NFCE_MARGEM_DIREITA']!, _nfceMargemDireitaMeta));
//     }
//     if (data.containsKey('NFCE_MARGEM_ESQUERDA')) {
//       context.handle(
//           _nfceMargemEsquerdaMeta,
//           nfceMargemEsquerda.isAcceptableOrUnknown(
//               data['NFCE_MARGEM_ESQUERDA']!, _nfceMargemEsquerdaMeta));
//     }
//     if (data.containsKey('NFCE_RESOLUCAO_IMPRESSAO')) {
//       context.handle(
//           _nfceResolucaoImpressaoMeta,
//           nfceResolucaoImpressao.isAcceptableOrUnknown(
//               data['NFCE_RESOLUCAO_IMPRESSAO']!, _nfceResolucaoImpressaoMeta));
//     }
//     if (data.containsKey('RESP_TEC_CNPJ')) {
//       context.handle(
//           _respTecCnpjMeta,
//           respTecCnpj.isAcceptableOrUnknown(
//               data['RESP_TEC_CNPJ']!, _respTecCnpjMeta));
//     }
//     if (data.containsKey('RESP_TEC_CONTATO')) {
//       context.handle(
//           _respTecContatoMeta,
//           respTecContato.isAcceptableOrUnknown(
//               data['RESP_TEC_CONTATO']!, _respTecContatoMeta));
//     }
//     if (data.containsKey('RESP_TEC_EMAIL')) {
//       context.handle(
//           _respTecEmailMeta,
//           respTecEmail.isAcceptableOrUnknown(
//               data['RESP_TEC_EMAIL']!, _respTecEmailMeta));
//     }
//     if (data.containsKey('RESP_TEC_FONE')) {
//       context.handle(
//           _respTecFoneMeta,
//           respTecFone.isAcceptableOrUnknown(
//               data['RESP_TEC_FONE']!, _respTecFoneMeta));
//     }
//     if (data.containsKey('RESP_TEC_ID_CSRT')) {
//       context.handle(
//           _respTecIdCsrtMeta,
//           respTecIdCsrt.isAcceptableOrUnknown(
//               data['RESP_TEC_ID_CSRT']!, _respTecIdCsrtMeta));
//     }
//     if (data.containsKey('RESP_TEC_HASH_CSRT')) {
//       context.handle(
//           _respTecHashCsrtMeta,
//           respTecHashCsrt.isAcceptableOrUnknown(
//               data['RESP_TEC_HASH_CSRT']!, _respTecHashCsrtMeta));
//     }
//     if (data.containsKey('NFCE_TAMANHO_FONTE_ITEM')) {
//       context.handle(
//           _nfceTamanhoFonteItemMeta,
//           nfceTamanhoFonteItem.isAcceptableOrUnknown(
//               data['NFCE_TAMANHO_FONTE_ITEM']!, _nfceTamanhoFonteItemMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeConfiguracao map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeConfiguracao(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       certificadoDigitalSerie: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}CERTIFICADO_DIGITAL_SERIE']),
//       certificadoDigitalCaminho: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}CERTIFICADO_DIGITAL_CAMINHO']),
//       certificadoDigitalSenha: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}CERTIFICADO_DIGITAL_SENHA']),
//       tipoEmissao: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TIPO_EMISSAO']),
//       formatoImpressaoDanfe: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}FORMATO_IMPRESSAO_DANFE']),
//       processoEmissao: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}PROCESSO_EMISSAO']),
//       versaoProcessoEmissao: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VERSAO_PROCESSO_EMISSAO']),
//       caminhoLogomarca: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CAMINHO_LOGOMARCA']),
//       salvarXml: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}SALVAR_XML']),
//       caminhoSalvarXml: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}CAMINHO_SALVAR_XML']),
//       caminhoSchemas: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CAMINHO_SCHEMAS']),
//       caminhoArquivoDanfe: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}CAMINHO_ARQUIVO_DANFE']),
//       caminhoSalvarPdf: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}CAMINHO_SALVAR_PDF']),
//       webserviceUf: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}WEBSERVICE_UF']),
//       webserviceAmbiente: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}WEBSERVICE_AMBIENTE']),
//       webserviceProxyHost: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}WEBSERVICE_PROXY_HOST']),
//       webserviceProxyPorta: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}WEBSERVICE_PROXY_PORTA']),
//       webserviceProxyUsuario: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}WEBSERVICE_PROXY_USUARIO']),
//       webserviceProxySenha: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}WEBSERVICE_PROXY_SENHA']),
//       webserviceVisualizar: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}WEBSERVICE_VISUALIZAR']),
//       emailServidorSmtp: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}EMAIL_SERVIDOR_SMTP']),
//       emailPorta: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}EMAIL_PORTA']),
//       emailUsuario: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}EMAIL_USUARIO']),
//       emailSenha: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}EMAIL_SENHA']),
//       emailAssunto: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}EMAIL_ASSUNTO']),
//       emailAutenticaSsl: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}EMAIL_AUTENTICA_SSL']),
//       emailTexto: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}EMAIL_TEXTO']),
//       nfceIdCsc: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NFCE_ID_CSC']),
//       nfceCsc: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NFCE_CSC']),
//       nfceModeloImpressao: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}NFCE_MODELO_IMPRESSAO']),
//       nfceImprimirItensUmaLinha: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}NFCE_IMPRIMIR_ITENS_UMA_LINHA']),
//       nfceImprimirDescontoPorItem: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}NFCE_IMPRIMIR_DESCONTO_POR_ITEM']),
//       nfceImprimirQrcodeLateral: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}NFCE_IMPRIMIR_QRCODE_LATERAL']),
//       nfceImprimirGtin: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}NFCE_IMPRIMIR_GTIN']),
//       nfceImprimirNomeFantasia: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}NFCE_IMPRIMIR_NOME_FANTASIA']),
//       nfceImpressaoTributos: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}NFCE_IMPRESSAO_TRIBUTOS']),
//       nfceMargemSuperior: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}NFCE_MARGEM_SUPERIOR']),
//       nfceMargemInferior: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}NFCE_MARGEM_INFERIOR']),
//       nfceMargemDireita: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}NFCE_MARGEM_DIREITA']),
//       nfceMargemEsquerda: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}NFCE_MARGEM_ESQUERDA']),
//       nfceResolucaoImpressao: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}NFCE_RESOLUCAO_IMPRESSAO']),
//       respTecCnpj: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}RESP_TEC_CNPJ']),
//       respTecContato: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}RESP_TEC_CONTATO']),
//       respTecEmail: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}RESP_TEC_EMAIL']),
//       respTecFone: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}RESP_TEC_FONE']),
//       respTecIdCsrt: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}RESP_TEC_ID_CSRT']),
//       respTecHashCsrt: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}RESP_TEC_HASH_CSRT']),
//       nfceTamanhoFonteItem: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}NFCE_TAMANHO_FONTE_ITEM']),
//     );
//   }

//   @override
//   $NfeConfiguracaosTable createAlias(String alias) {
//     return $NfeConfiguracaosTable(_db, alias);
//   }
// }

// class NfeCteReferenciadosCompanion extends UpdateCompanion<NfeCteReferenciado> {
//   final Value<int> id;
//   final Value<int?> idNfeCabecalho;
//   final Value<String?> chaveAcesso;
//   const NfeCteReferenciadosCompanion({
//     this.id = const Value.absent(),
//     this.idNfeCabecalho = const Value.absent(),
//     this.chaveAcesso = const Value.absent(),
//   });
//   NfeCteReferenciadosCompanion.insert({
//     this.id = const Value.absent(),
//     this.idNfeCabecalho = const Value.absent(),
//     this.chaveAcesso = const Value.absent(),
//   });
//   static Insertable<NfeCteReferenciado> custom({
//     Expression<int>? id,
//     Expression<int?>? idNfeCabecalho,
//     Expression<String?>? chaveAcesso,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idNfeCabecalho != null) 'ID_NFE_CABECALHO': idNfeCabecalho,
//       if (chaveAcesso != null) 'CHAVE_ACESSO': chaveAcesso,
//     });
//   }

//   NfeCteReferenciadosCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idNfeCabecalho,
//       Value<String?>? chaveAcesso}) {
//     return NfeCteReferenciadosCompanion(
//       id: id ?? this.id,
//       idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
//       chaveAcesso: chaveAcesso ?? this.chaveAcesso,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idNfeCabecalho.present) {
//       map['ID_NFE_CABECALHO'] = Variable<int?>(idNfeCabecalho.value);
//     }
//     if (chaveAcesso.present) {
//       map['CHAVE_ACESSO'] = Variable<String?>(chaveAcesso.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeCteReferenciadosCompanion(')
//           ..write('id: $id, ')
//           ..write('idNfeCabecalho: $idNfeCabecalho, ')
//           ..write('chaveAcesso: $chaveAcesso')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeCteReferenciadosTable extends NfeCteReferenciados
//     with TableInfo<$NfeCteReferenciadosTable, NfeCteReferenciado> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeCteReferenciadosTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idNfeCabecalhoMeta =
//       const VerificationMeta('idNfeCabecalho');
//   late final GeneratedColumn<int?> idNfeCabecalho = GeneratedColumn<int?>(
//       'ID_NFE_CABECALHO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES NFE_CABECALHO(ID)');
//   final VerificationMeta _chaveAcessoMeta =
//       const VerificationMeta('chaveAcesso');
//   late final GeneratedColumn<String?> chaveAcesso = GeneratedColumn<String?>(
//       'CHAVE_ACESSO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 44),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [id, idNfeCabecalho, chaveAcesso];
//   @override
//   String get aliasedName => _alias ?? 'NFE_CTE_REFERENCIADO';
//   @override
//   String get actualTableName => 'NFE_CTE_REFERENCIADO';
//   @override
//   VerificationContext validateIntegrity(Insertable<NfeCteReferenciado> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_NFE_CABECALHO')) {
//       context.handle(
//           _idNfeCabecalhoMeta,
//           idNfeCabecalho.isAcceptableOrUnknown(
//               data['ID_NFE_CABECALHO']!, _idNfeCabecalhoMeta));
//     }
//     if (data.containsKey('CHAVE_ACESSO')) {
//       context.handle(
//           _chaveAcessoMeta,
//           chaveAcesso.isAcceptableOrUnknown(
//               data['CHAVE_ACESSO']!, _chaveAcessoMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeCteReferenciado map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeCteReferenciado(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idNfeCabecalho: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_NFE_CABECALHO']),
//       chaveAcesso: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CHAVE_ACESSO']),
//     );
//   }

//   @override
//   $NfeCteReferenciadosTable createAlias(String alias) {
//     return $NfeCteReferenciadosTable(_db, alias);
//   }
// }

// class NfeCupomFiscalReferenciadosCompanion
//     extends UpdateCompanion<NfeCupomFiscalReferenciado> {
//   final Value<int> id;
//   final Value<int?> idNfeCabecalho;
//   final Value<String?> modeloDocumentoFiscal;
//   final Value<int?> numeroOrdemEcf;
//   final Value<int?> coo;
//   final Value<DateTime?> dataEmissaoCupom;
//   final Value<int?> numeroCaixa;
//   final Value<String?> numeroSerieEcf;
//   const NfeCupomFiscalReferenciadosCompanion({
//     this.id = const Value.absent(),
//     this.idNfeCabecalho = const Value.absent(),
//     this.modeloDocumentoFiscal = const Value.absent(),
//     this.numeroOrdemEcf = const Value.absent(),
//     this.coo = const Value.absent(),
//     this.dataEmissaoCupom = const Value.absent(),
//     this.numeroCaixa = const Value.absent(),
//     this.numeroSerieEcf = const Value.absent(),
//   });
//   NfeCupomFiscalReferenciadosCompanion.insert({
//     this.id = const Value.absent(),
//     this.idNfeCabecalho = const Value.absent(),
//     this.modeloDocumentoFiscal = const Value.absent(),
//     this.numeroOrdemEcf = const Value.absent(),
//     this.coo = const Value.absent(),
//     this.dataEmissaoCupom = const Value.absent(),
//     this.numeroCaixa = const Value.absent(),
//     this.numeroSerieEcf = const Value.absent(),
//   });
//   static Insertable<NfeCupomFiscalReferenciado> custom({
//     Expression<int>? id,
//     Expression<int?>? idNfeCabecalho,
//     Expression<String?>? modeloDocumentoFiscal,
//     Expression<int?>? numeroOrdemEcf,
//     Expression<int?>? coo,
//     Expression<DateTime?>? dataEmissaoCupom,
//     Expression<int?>? numeroCaixa,
//     Expression<String?>? numeroSerieEcf,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idNfeCabecalho != null) 'ID_NFE_CABECALHO': idNfeCabecalho,
//       if (modeloDocumentoFiscal != null)
//         'MODELO_DOCUMENTO_FISCAL': modeloDocumentoFiscal,
//       if (numeroOrdemEcf != null) 'NUMERO_ORDEM_ECF': numeroOrdemEcf,
//       if (coo != null) 'COO': coo,
//       if (dataEmissaoCupom != null) 'DATA_EMISSAO_CUPOM': dataEmissaoCupom,
//       if (numeroCaixa != null) 'NUMERO_CAIXA': numeroCaixa,
//       if (numeroSerieEcf != null) 'NUMERO_SERIE_ECF': numeroSerieEcf,
//     });
//   }

//   NfeCupomFiscalReferenciadosCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idNfeCabecalho,
//       Value<String?>? modeloDocumentoFiscal,
//       Value<int?>? numeroOrdemEcf,
//       Value<int?>? coo,
//       Value<DateTime?>? dataEmissaoCupom,
//       Value<int?>? numeroCaixa,
//       Value<String?>? numeroSerieEcf}) {
//     return NfeCupomFiscalReferenciadosCompanion(
//       id: id ?? this.id,
//       idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
//       modeloDocumentoFiscal:
//           modeloDocumentoFiscal ?? this.modeloDocumentoFiscal,
//       numeroOrdemEcf: numeroOrdemEcf ?? this.numeroOrdemEcf,
//       coo: coo ?? this.coo,
//       dataEmissaoCupom: dataEmissaoCupom ?? this.dataEmissaoCupom,
//       numeroCaixa: numeroCaixa ?? this.numeroCaixa,
//       numeroSerieEcf: numeroSerieEcf ?? this.numeroSerieEcf,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idNfeCabecalho.present) {
//       map['ID_NFE_CABECALHO'] = Variable<int?>(idNfeCabecalho.value);
//     }
//     if (modeloDocumentoFiscal.present) {
//       map['MODELO_DOCUMENTO_FISCAL'] =
//           Variable<String?>(modeloDocumentoFiscal.value);
//     }
//     if (numeroOrdemEcf.present) {
//       map['NUMERO_ORDEM_ECF'] = Variable<int?>(numeroOrdemEcf.value);
//     }
//     if (coo.present) {
//       map['COO'] = Variable<int?>(coo.value);
//     }
//     if (dataEmissaoCupom.present) {
//       map['DATA_EMISSAO_CUPOM'] = Variable<DateTime?>(dataEmissaoCupom.value);
//     }
//     if (numeroCaixa.present) {
//       map['NUMERO_CAIXA'] = Variable<int?>(numeroCaixa.value);
//     }
//     if (numeroSerieEcf.present) {
//       map['NUMERO_SERIE_ECF'] = Variable<String?>(numeroSerieEcf.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeCupomFiscalReferenciadosCompanion(')
//           ..write('id: $id, ')
//           ..write('idNfeCabecalho: $idNfeCabecalho, ')
//           ..write('modeloDocumentoFiscal: $modeloDocumentoFiscal, ')
//           ..write('numeroOrdemEcf: $numeroOrdemEcf, ')
//           ..write('coo: $coo, ')
//           ..write('dataEmissaoCupom: $dataEmissaoCupom, ')
//           ..write('numeroCaixa: $numeroCaixa, ')
//           ..write('numeroSerieEcf: $numeroSerieEcf')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeCupomFiscalReferenciadosTable extends NfeCupomFiscalReferenciados
//     with
//         TableInfo<$NfeCupomFiscalReferenciadosTable,
//             NfeCupomFiscalReferenciado> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeCupomFiscalReferenciadosTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idNfeCabecalhoMeta =
//       const VerificationMeta('idNfeCabecalho');
//   late final GeneratedColumn<int?> idNfeCabecalho = GeneratedColumn<int?>(
//       'ID_NFE_CABECALHO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES NFE_CABECALHO(ID)');
//   final VerificationMeta _modeloDocumentoFiscalMeta =
//       const VerificationMeta('modeloDocumentoFiscal');
//   late final GeneratedColumn<String?> modeloDocumentoFiscal =
//       GeneratedColumn<String?>('MODELO_DOCUMENTO_FISCAL', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 2),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _numeroOrdemEcfMeta =
//       const VerificationMeta('numeroOrdemEcf');
//   late final GeneratedColumn<int?> numeroOrdemEcf = GeneratedColumn<int?>(
//       'NUMERO_ORDEM_ECF', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _cooMeta = const VerificationMeta('coo');
//   late final GeneratedColumn<int?> coo = GeneratedColumn<int?>(
//       'COO', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _dataEmissaoCupomMeta =
//       const VerificationMeta('dataEmissaoCupom');
//   late final GeneratedColumn<DateTime?> dataEmissaoCupom =
//       GeneratedColumn<DateTime?>('DATA_EMISSAO_CUPOM', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _numeroCaixaMeta =
//       const VerificationMeta('numeroCaixa');
//   late final GeneratedColumn<int?> numeroCaixa = GeneratedColumn<int?>(
//       'NUMERO_CAIXA', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _numeroSerieEcfMeta =
//       const VerificationMeta('numeroSerieEcf');
//   late final GeneratedColumn<String?> numeroSerieEcf = GeneratedColumn<String?>(
//       'NUMERO_SERIE_ECF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 21),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idNfeCabecalho,
//         modeloDocumentoFiscal,
//         numeroOrdemEcf,
//         coo,
//         dataEmissaoCupom,
//         numeroCaixa,
//         numeroSerieEcf
//       ];
//   @override
//   String get aliasedName => _alias ?? 'NFE_CUPOM_FISCAL_REFERENCIADO';
//   @override
//   String get actualTableName => 'NFE_CUPOM_FISCAL_REFERENCIADO';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<NfeCupomFiscalReferenciado> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_NFE_CABECALHO')) {
//       context.handle(
//           _idNfeCabecalhoMeta,
//           idNfeCabecalho.isAcceptableOrUnknown(
//               data['ID_NFE_CABECALHO']!, _idNfeCabecalhoMeta));
//     }
//     if (data.containsKey('MODELO_DOCUMENTO_FISCAL')) {
//       context.handle(
//           _modeloDocumentoFiscalMeta,
//           modeloDocumentoFiscal.isAcceptableOrUnknown(
//               data['MODELO_DOCUMENTO_FISCAL']!, _modeloDocumentoFiscalMeta));
//     }
//     if (data.containsKey('NUMERO_ORDEM_ECF')) {
//       context.handle(
//           _numeroOrdemEcfMeta,
//           numeroOrdemEcf.isAcceptableOrUnknown(
//               data['NUMERO_ORDEM_ECF']!, _numeroOrdemEcfMeta));
//     }
//     if (data.containsKey('COO')) {
//       context.handle(
//           _cooMeta, coo.isAcceptableOrUnknown(data['COO']!, _cooMeta));
//     }
//     if (data.containsKey('DATA_EMISSAO_CUPOM')) {
//       context.handle(
//           _dataEmissaoCupomMeta,
//           dataEmissaoCupom.isAcceptableOrUnknown(
//               data['DATA_EMISSAO_CUPOM']!, _dataEmissaoCupomMeta));
//     }
//     if (data.containsKey('NUMERO_CAIXA')) {
//       context.handle(
//           _numeroCaixaMeta,
//           numeroCaixa.isAcceptableOrUnknown(
//               data['NUMERO_CAIXA']!, _numeroCaixaMeta));
//     }
//     if (data.containsKey('NUMERO_SERIE_ECF')) {
//       context.handle(
//           _numeroSerieEcfMeta,
//           numeroSerieEcf.isAcceptableOrUnknown(
//               data['NUMERO_SERIE_ECF']!, _numeroSerieEcfMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeCupomFiscalReferenciado map(Map<String, dynamic> data,
//       {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeCupomFiscalReferenciado(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idNfeCabecalho: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_NFE_CABECALHO']),
//       modeloDocumentoFiscal: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}MODELO_DOCUMENTO_FISCAL']),
//       numeroOrdemEcf: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO_ORDEM_ECF']),
//       coo: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}COO']),
//       dataEmissaoCupom: const DateTimeType().mapFromDatabaseResponse(
//           data['${effectivePrefix}DATA_EMISSAO_CUPOM']),
//       numeroCaixa: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO_CAIXA']),
//       numeroSerieEcf: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO_SERIE_ECF']),
//     );
//   }

//   @override
//   $NfeCupomFiscalReferenciadosTable createAlias(String alias) {
//     return $NfeCupomFiscalReferenciadosTable(_db, alias);
//   }
// }

// class NfeDeclaracaoImportacaosCompanion
//     extends UpdateCompanion<NfeDeclaracaoImportacao> {
//   final Value<int> id;
//   final Value<int?> idNfeDetalhe;
//   final Value<String?> numeroDocumento;
//   final Value<DateTime?> dataRegistro;
//   final Value<String?> localDesembaraco;
//   final Value<String?> ufDesembaraco;
//   final Value<DateTime?> dataDesembaraco;
//   final Value<String?> viaTransporte;
//   final Value<double?> valorAfrmm;
//   final Value<String?> formaIntermediacao;
//   final Value<String?> cnpj;
//   final Value<String?> ufTerceiro;
//   final Value<String?> codigoExportador;
//   const NfeDeclaracaoImportacaosCompanion({
//     this.id = const Value.absent(),
//     this.idNfeDetalhe = const Value.absent(),
//     this.numeroDocumento = const Value.absent(),
//     this.dataRegistro = const Value.absent(),
//     this.localDesembaraco = const Value.absent(),
//     this.ufDesembaraco = const Value.absent(),
//     this.dataDesembaraco = const Value.absent(),
//     this.viaTransporte = const Value.absent(),
//     this.valorAfrmm = const Value.absent(),
//     this.formaIntermediacao = const Value.absent(),
//     this.cnpj = const Value.absent(),
//     this.ufTerceiro = const Value.absent(),
//     this.codigoExportador = const Value.absent(),
//   });
//   NfeDeclaracaoImportacaosCompanion.insert({
//     this.id = const Value.absent(),
//     this.idNfeDetalhe = const Value.absent(),
//     this.numeroDocumento = const Value.absent(),
//     this.dataRegistro = const Value.absent(),
//     this.localDesembaraco = const Value.absent(),
//     this.ufDesembaraco = const Value.absent(),
//     this.dataDesembaraco = const Value.absent(),
//     this.viaTransporte = const Value.absent(),
//     this.valorAfrmm = const Value.absent(),
//     this.formaIntermediacao = const Value.absent(),
//     this.cnpj = const Value.absent(),
//     this.ufTerceiro = const Value.absent(),
//     this.codigoExportador = const Value.absent(),
//   });
//   static Insertable<NfeDeclaracaoImportacao> custom({
//     Expression<int>? id,
//     Expression<int?>? idNfeDetalhe,
//     Expression<String?>? numeroDocumento,
//     Expression<DateTime?>? dataRegistro,
//     Expression<String?>? localDesembaraco,
//     Expression<String?>? ufDesembaraco,
//     Expression<DateTime?>? dataDesembaraco,
//     Expression<String?>? viaTransporte,
//     Expression<double?>? valorAfrmm,
//     Expression<String?>? formaIntermediacao,
//     Expression<String?>? cnpj,
//     Expression<String?>? ufTerceiro,
//     Expression<String?>? codigoExportador,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idNfeDetalhe != null) 'ID_NFE_DETALHE': idNfeDetalhe,
//       if (numeroDocumento != null) 'NUMERO_DOCUMENTO': numeroDocumento,
//       if (dataRegistro != null) 'DATA_REGISTRO': dataRegistro,
//       if (localDesembaraco != null) 'LOCAL_DESEMBARACO': localDesembaraco,
//       if (ufDesembaraco != null) 'UF_DESEMBARACO': ufDesembaraco,
//       if (dataDesembaraco != null) 'DATA_DESEMBARACO': dataDesembaraco,
//       if (viaTransporte != null) 'VIA_TRANSPORTE': viaTransporte,
//       if (valorAfrmm != null) 'VALOR_AFRMM': valorAfrmm,
//       if (formaIntermediacao != null) 'FORMA_INTERMEDIACAO': formaIntermediacao,
//       if (cnpj != null) 'CNPJ': cnpj,
//       if (ufTerceiro != null) 'UF_TERCEIRO': ufTerceiro,
//       if (codigoExportador != null) 'CODIGO_EXPORTADOR': codigoExportador,
//     });
//   }

//   NfeDeclaracaoImportacaosCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idNfeDetalhe,
//       Value<String?>? numeroDocumento,
//       Value<DateTime?>? dataRegistro,
//       Value<String?>? localDesembaraco,
//       Value<String?>? ufDesembaraco,
//       Value<DateTime?>? dataDesembaraco,
//       Value<String?>? viaTransporte,
//       Value<double?>? valorAfrmm,
//       Value<String?>? formaIntermediacao,
//       Value<String?>? cnpj,
//       Value<String?>? ufTerceiro,
//       Value<String?>? codigoExportador}) {
//     return NfeDeclaracaoImportacaosCompanion(
//       id: id ?? this.id,
//       idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
//       numeroDocumento: numeroDocumento ?? this.numeroDocumento,
//       dataRegistro: dataRegistro ?? this.dataRegistro,
//       localDesembaraco: localDesembaraco ?? this.localDesembaraco,
//       ufDesembaraco: ufDesembaraco ?? this.ufDesembaraco,
//       dataDesembaraco: dataDesembaraco ?? this.dataDesembaraco,
//       viaTransporte: viaTransporte ?? this.viaTransporte,
//       valorAfrmm: valorAfrmm ?? this.valorAfrmm,
//       formaIntermediacao: formaIntermediacao ?? this.formaIntermediacao,
//       cnpj: cnpj ?? this.cnpj,
//       ufTerceiro: ufTerceiro ?? this.ufTerceiro,
//       codigoExportador: codigoExportador ?? this.codigoExportador,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idNfeDetalhe.present) {
//       map['ID_NFE_DETALHE'] = Variable<int?>(idNfeDetalhe.value);
//     }
//     if (numeroDocumento.present) {
//       map['NUMERO_DOCUMENTO'] = Variable<String?>(numeroDocumento.value);
//     }
//     if (dataRegistro.present) {
//       map['DATA_REGISTRO'] = Variable<DateTime?>(dataRegistro.value);
//     }
//     if (localDesembaraco.present) {
//       map['LOCAL_DESEMBARACO'] = Variable<String?>(localDesembaraco.value);
//     }
//     if (ufDesembaraco.present) {
//       map['UF_DESEMBARACO'] = Variable<String?>(ufDesembaraco.value);
//     }
//     if (dataDesembaraco.present) {
//       map['DATA_DESEMBARACO'] = Variable<DateTime?>(dataDesembaraco.value);
//     }
//     if (viaTransporte.present) {
//       map['VIA_TRANSPORTE'] = Variable<String?>(viaTransporte.value);
//     }
//     if (valorAfrmm.present) {
//       map['VALOR_AFRMM'] = Variable<double?>(valorAfrmm.value);
//     }
//     if (formaIntermediacao.present) {
//       map['FORMA_INTERMEDIACAO'] = Variable<String?>(formaIntermediacao.value);
//     }
//     if (cnpj.present) {
//       map['CNPJ'] = Variable<String?>(cnpj.value);
//     }
//     if (ufTerceiro.present) {
//       map['UF_TERCEIRO'] = Variable<String?>(ufTerceiro.value);
//     }
//     if (codigoExportador.present) {
//       map['CODIGO_EXPORTADOR'] = Variable<String?>(codigoExportador.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeDeclaracaoImportacaosCompanion(')
//           ..write('id: $id, ')
//           ..write('idNfeDetalhe: $idNfeDetalhe, ')
//           ..write('numeroDocumento: $numeroDocumento, ')
//           ..write('dataRegistro: $dataRegistro, ')
//           ..write('localDesembaraco: $localDesembaraco, ')
//           ..write('ufDesembaraco: $ufDesembaraco, ')
//           ..write('dataDesembaraco: $dataDesembaraco, ')
//           ..write('viaTransporte: $viaTransporte, ')
//           ..write('valorAfrmm: $valorAfrmm, ')
//           ..write('formaIntermediacao: $formaIntermediacao, ')
//           ..write('cnpj: $cnpj, ')
//           ..write('ufTerceiro: $ufTerceiro, ')
//           ..write('codigoExportador: $codigoExportador')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeDeclaracaoImportacaosTable extends NfeDeclaracaoImportacaos
//     with TableInfo<$NfeDeclaracaoImportacaosTable, NfeDeclaracaoImportacao> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeDeclaracaoImportacaosTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idNfeDetalheMeta =
//       const VerificationMeta('idNfeDetalhe');
//   late final GeneratedColumn<int?> idNfeDetalhe = GeneratedColumn<int?>(
//       'ID_NFE_DETALHE', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES NFE_DETALHE(ID)');
//   final VerificationMeta _numeroDocumentoMeta =
//       const VerificationMeta('numeroDocumento');
//   late final GeneratedColumn<String?> numeroDocumento =
//       GeneratedColumn<String?>('NUMERO_DOCUMENTO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 12),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _dataRegistroMeta =
//       const VerificationMeta('dataRegistro');
//   late final GeneratedColumn<DateTime?> dataRegistro =
//       GeneratedColumn<DateTime?>('DATA_REGISTRO', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _localDesembaracoMeta =
//       const VerificationMeta('localDesembaraco');
//   late final GeneratedColumn<String?> localDesembaraco =
//       GeneratedColumn<String?>('LOCAL_DESEMBARACO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 60),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _ufDesembaracoMeta =
//       const VerificationMeta('ufDesembaraco');
//   late final GeneratedColumn<String?> ufDesembaraco = GeneratedColumn<String?>(
//       'UF_DESEMBARACO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _dataDesembaracoMeta =
//       const VerificationMeta('dataDesembaraco');
//   late final GeneratedColumn<DateTime?> dataDesembaraco =
//       GeneratedColumn<DateTime?>('DATA_DESEMBARACO', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _viaTransporteMeta =
//       const VerificationMeta('viaTransporte');
//   late final GeneratedColumn<String?> viaTransporte = GeneratedColumn<String?>(
//       'VIA_TRANSPORTE', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _valorAfrmmMeta = const VerificationMeta('valorAfrmm');
//   late final GeneratedColumn<double?> valorAfrmm = GeneratedColumn<double?>(
//       'VALOR_AFRMM', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _formaIntermediacaoMeta =
//       const VerificationMeta('formaIntermediacao');
//   late final GeneratedColumn<String?> formaIntermediacao =
//       GeneratedColumn<String?>(
//           'FORMA_INTERMEDIACAO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _cnpjMeta = const VerificationMeta('cnpj');
//   late final GeneratedColumn<String?> cnpj = GeneratedColumn<String?>(
//       'CNPJ', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _ufTerceiroMeta = const VerificationMeta('ufTerceiro');
//   late final GeneratedColumn<String?> ufTerceiro = GeneratedColumn<String?>(
//       'UF_TERCEIRO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _codigoExportadorMeta =
//       const VerificationMeta('codigoExportador');
//   late final GeneratedColumn<String?> codigoExportador =
//       GeneratedColumn<String?>('CODIGO_EXPORTADOR', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 60),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idNfeDetalhe,
//         numeroDocumento,
//         dataRegistro,
//         localDesembaraco,
//         ufDesembaraco,
//         dataDesembaraco,
//         viaTransporte,
//         valorAfrmm,
//         formaIntermediacao,
//         cnpj,
//         ufTerceiro,
//         codigoExportador
//       ];
//   @override
//   String get aliasedName => _alias ?? 'NFE_DECLARACAO_IMPORTACAO';
//   @override
//   String get actualTableName => 'NFE_DECLARACAO_IMPORTACAO';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<NfeDeclaracaoImportacao> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_NFE_DETALHE')) {
//       context.handle(
//           _idNfeDetalheMeta,
//           idNfeDetalhe.isAcceptableOrUnknown(
//               data['ID_NFE_DETALHE']!, _idNfeDetalheMeta));
//     }
//     if (data.containsKey('NUMERO_DOCUMENTO')) {
//       context.handle(
//           _numeroDocumentoMeta,
//           numeroDocumento.isAcceptableOrUnknown(
//               data['NUMERO_DOCUMENTO']!, _numeroDocumentoMeta));
//     }
//     if (data.containsKey('DATA_REGISTRO')) {
//       context.handle(
//           _dataRegistroMeta,
//           dataRegistro.isAcceptableOrUnknown(
//               data['DATA_REGISTRO']!, _dataRegistroMeta));
//     }
//     if (data.containsKey('LOCAL_DESEMBARACO')) {
//       context.handle(
//           _localDesembaracoMeta,
//           localDesembaraco.isAcceptableOrUnknown(
//               data['LOCAL_DESEMBARACO']!, _localDesembaracoMeta));
//     }
//     if (data.containsKey('UF_DESEMBARACO')) {
//       context.handle(
//           _ufDesembaracoMeta,
//           ufDesembaraco.isAcceptableOrUnknown(
//               data['UF_DESEMBARACO']!, _ufDesembaracoMeta));
//     }
//     if (data.containsKey('DATA_DESEMBARACO')) {
//       context.handle(
//           _dataDesembaracoMeta,
//           dataDesembaraco.isAcceptableOrUnknown(
//               data['DATA_DESEMBARACO']!, _dataDesembaracoMeta));
//     }
//     if (data.containsKey('VIA_TRANSPORTE')) {
//       context.handle(
//           _viaTransporteMeta,
//           viaTransporte.isAcceptableOrUnknown(
//               data['VIA_TRANSPORTE']!, _viaTransporteMeta));
//     }
//     if (data.containsKey('VALOR_AFRMM')) {
//       context.handle(
//           _valorAfrmmMeta,
//           valorAfrmm.isAcceptableOrUnknown(
//               data['VALOR_AFRMM']!, _valorAfrmmMeta));
//     }
//     if (data.containsKey('FORMA_INTERMEDIACAO')) {
//       context.handle(
//           _formaIntermediacaoMeta,
//           formaIntermediacao.isAcceptableOrUnknown(
//               data['FORMA_INTERMEDIACAO']!, _formaIntermediacaoMeta));
//     }
//     if (data.containsKey('CNPJ')) {
//       context.handle(
//           _cnpjMeta, cnpj.isAcceptableOrUnknown(data['CNPJ']!, _cnpjMeta));
//     }
//     if (data.containsKey('UF_TERCEIRO')) {
//       context.handle(
//           _ufTerceiroMeta,
//           ufTerceiro.isAcceptableOrUnknown(
//               data['UF_TERCEIRO']!, _ufTerceiroMeta));
//     }
//     if (data.containsKey('CODIGO_EXPORTADOR')) {
//       context.handle(
//           _codigoExportadorMeta,
//           codigoExportador.isAcceptableOrUnknown(
//               data['CODIGO_EXPORTADOR']!, _codigoExportadorMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeDeclaracaoImportacao map(Map<String, dynamic> data,
//       {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeDeclaracaoImportacao(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idNfeDetalhe: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_NFE_DETALHE']),
//       numeroDocumento: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO_DOCUMENTO']),
//       dataRegistro: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_REGISTRO']),
//       localDesembaraco: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}LOCAL_DESEMBARACO']),
//       ufDesembaraco: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}UF_DESEMBARACO']),
//       dataDesembaraco: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_DESEMBARACO']),
//       viaTransporte: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VIA_TRANSPORTE']),
//       valorAfrmm: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_AFRMM']),
//       formaIntermediacao: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}FORMA_INTERMEDIACAO']),
//       cnpj: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CNPJ']),
//       ufTerceiro: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}UF_TERCEIRO']),
//       codigoExportador: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO_EXPORTADOR']),
//     );
//   }

//   @override
//   $NfeDeclaracaoImportacaosTable createAlias(String alias) {
//     return $NfeDeclaracaoImportacaosTable(_db, alias);
//   }
// }

// class NfeDestinatariosCompanion extends UpdateCompanion<NfeDestinatario> {
//   final Value<int> id;
//   final Value<int?> idNfeCabecalho;
//   final Value<String?> cnpj;
//   final Value<String?> cpf;
//   final Value<String?> estrangeiroIdentificacao;
//   final Value<String?> nome;
//   final Value<String?> logradouro;
//   final Value<String?> numero;
//   final Value<String?> complemento;
//   final Value<String?> bairro;
//   final Value<int?> codigoMunicipio;
//   final Value<String?> nomeMunicipio;
//   final Value<String?> uf;
//   final Value<String?> cep;
//   final Value<int?> codigoPais;
//   final Value<String?> nomePais;
//   final Value<String?> telefone;
//   final Value<String?> indicadorIe;
//   final Value<String?> inscricaoEstadual;
//   final Value<int?> suframa;
//   final Value<String?> inscricaoMunicipal;
//   final Value<String?> email;
//   const NfeDestinatariosCompanion({
//     this.id = const Value.absent(),
//     this.idNfeCabecalho = const Value.absent(),
//     this.cnpj = const Value.absent(),
//     this.cpf = const Value.absent(),
//     this.estrangeiroIdentificacao = const Value.absent(),
//     this.nome = const Value.absent(),
//     this.logradouro = const Value.absent(),
//     this.numero = const Value.absent(),
//     this.complemento = const Value.absent(),
//     this.bairro = const Value.absent(),
//     this.codigoMunicipio = const Value.absent(),
//     this.nomeMunicipio = const Value.absent(),
//     this.uf = const Value.absent(),
//     this.cep = const Value.absent(),
//     this.codigoPais = const Value.absent(),
//     this.nomePais = const Value.absent(),
//     this.telefone = const Value.absent(),
//     this.indicadorIe = const Value.absent(),
//     this.inscricaoEstadual = const Value.absent(),
//     this.suframa = const Value.absent(),
//     this.inscricaoMunicipal = const Value.absent(),
//     this.email = const Value.absent(),
//   });
//   NfeDestinatariosCompanion.insert({
//     this.id = const Value.absent(),
//     this.idNfeCabecalho = const Value.absent(),
//     this.cnpj = const Value.absent(),
//     this.cpf = const Value.absent(),
//     this.estrangeiroIdentificacao = const Value.absent(),
//     this.nome = const Value.absent(),
//     this.logradouro = const Value.absent(),
//     this.numero = const Value.absent(),
//     this.complemento = const Value.absent(),
//     this.bairro = const Value.absent(),
//     this.codigoMunicipio = const Value.absent(),
//     this.nomeMunicipio = const Value.absent(),
//     this.uf = const Value.absent(),
//     this.cep = const Value.absent(),
//     this.codigoPais = const Value.absent(),
//     this.nomePais = const Value.absent(),
//     this.telefone = const Value.absent(),
//     this.indicadorIe = const Value.absent(),
//     this.inscricaoEstadual = const Value.absent(),
//     this.suframa = const Value.absent(),
//     this.inscricaoMunicipal = const Value.absent(),
//     this.email = const Value.absent(),
//   });
//   static Insertable<NfeDestinatario> custom({
//     Expression<int>? id,
//     Expression<int?>? idNfeCabecalho,
//     Expression<String?>? cnpj,
//     Expression<String?>? cpf,
//     Expression<String?>? estrangeiroIdentificacao,
//     Expression<String?>? nome,
//     Expression<String?>? logradouro,
//     Expression<String?>? numero,
//     Expression<String?>? complemento,
//     Expression<String?>? bairro,
//     Expression<int?>? codigoMunicipio,
//     Expression<String?>? nomeMunicipio,
//     Expression<String?>? uf,
//     Expression<String?>? cep,
//     Expression<int?>? codigoPais,
//     Expression<String?>? nomePais,
//     Expression<String?>? telefone,
//     Expression<String?>? indicadorIe,
//     Expression<String?>? inscricaoEstadual,
//     Expression<int?>? suframa,
//     Expression<String?>? inscricaoMunicipal,
//     Expression<String?>? email,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idNfeCabecalho != null) 'ID_NFE_CABECALHO': idNfeCabecalho,
//       if (cnpj != null) 'CNPJ': cnpj,
//       if (cpf != null) 'CPF': cpf,
//       if (estrangeiroIdentificacao != null)
//         'ESTRANGEIRO_IDENTIFICACAO': estrangeiroIdentificacao,
//       if (nome != null) 'NOME': nome,
//       if (logradouro != null) 'LOGRADOURO': logradouro,
//       if (numero != null) 'NUMERO': numero,
//       if (complemento != null) 'COMPLEMENTO': complemento,
//       if (bairro != null) 'BAIRRO': bairro,
//       if (codigoMunicipio != null) 'CODIGO_MUNICIPIO': codigoMunicipio,
//       if (nomeMunicipio != null) 'NOME_MUNICIPIO': nomeMunicipio,
//       if (uf != null) 'UF': uf,
//       if (cep != null) 'CEP': cep,
//       if (codigoPais != null) 'CODIGO_PAIS': codigoPais,
//       if (nomePais != null) 'NOME_PAIS': nomePais,
//       if (telefone != null) 'TELEFONE': telefone,
//       if (indicadorIe != null) 'INDICADOR_IE': indicadorIe,
//       if (inscricaoEstadual != null) 'INSCRICAO_ESTADUAL': inscricaoEstadual,
//       if (suframa != null) 'SUFRAMA': suframa,
//       if (inscricaoMunicipal != null) 'INSCRICAO_MUNICIPAL': inscricaoMunicipal,
//       if (email != null) 'EMAIL': email,
//     });
//   }

//   NfeDestinatariosCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idNfeCabecalho,
//       Value<String?>? cnpj,
//       Value<String?>? cpf,
//       Value<String?>? estrangeiroIdentificacao,
//       Value<String?>? nome,
//       Value<String?>? logradouro,
//       Value<String?>? numero,
//       Value<String?>? complemento,
//       Value<String?>? bairro,
//       Value<int?>? codigoMunicipio,
//       Value<String?>? nomeMunicipio,
//       Value<String?>? uf,
//       Value<String?>? cep,
//       Value<int?>? codigoPais,
//       Value<String?>? nomePais,
//       Value<String?>? telefone,
//       Value<String?>? indicadorIe,
//       Value<String?>? inscricaoEstadual,
//       Value<int?>? suframa,
//       Value<String?>? inscricaoMunicipal,
//       Value<String?>? email}) {
//     return NfeDestinatariosCompanion(
//       id: id ?? this.id,
//       idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
//       cnpj: cnpj ?? this.cnpj,
//       cpf: cpf ?? this.cpf,
//       estrangeiroIdentificacao:
//           estrangeiroIdentificacao ?? this.estrangeiroIdentificacao,
//       nome: nome ?? this.nome,
//       logradouro: logradouro ?? this.logradouro,
//       numero: numero ?? this.numero,
//       complemento: complemento ?? this.complemento,
//       bairro: bairro ?? this.bairro,
//       codigoMunicipio: codigoMunicipio ?? this.codigoMunicipio,
//       nomeMunicipio: nomeMunicipio ?? this.nomeMunicipio,
//       uf: uf ?? this.uf,
//       cep: cep ?? this.cep,
//       codigoPais: codigoPais ?? this.codigoPais,
//       nomePais: nomePais ?? this.nomePais,
//       telefone: telefone ?? this.telefone,
//       indicadorIe: indicadorIe ?? this.indicadorIe,
//       inscricaoEstadual: inscricaoEstadual ?? this.inscricaoEstadual,
//       suframa: suframa ?? this.suframa,
//       inscricaoMunicipal: inscricaoMunicipal ?? this.inscricaoMunicipal,
//       email: email ?? this.email,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idNfeCabecalho.present) {
//       map['ID_NFE_CABECALHO'] = Variable<int?>(idNfeCabecalho.value);
//     }
//     if (cnpj.present) {
//       map['CNPJ'] = Variable<String?>(cnpj.value);
//     }
//     if (cpf.present) {
//       map['CPF'] = Variable<String?>(cpf.value);
//     }
//     if (estrangeiroIdentificacao.present) {
//       map['ESTRANGEIRO_IDENTIFICACAO'] =
//           Variable<String?>(estrangeiroIdentificacao.value);
//     }
//     if (nome.present) {
//       map['NOME'] = Variable<String?>(nome.value);
//     }
//     if (logradouro.present) {
//       map['LOGRADOURO'] = Variable<String?>(logradouro.value);
//     }
//     if (numero.present) {
//       map['NUMERO'] = Variable<String?>(numero.value);
//     }
//     if (complemento.present) {
//       map['COMPLEMENTO'] = Variable<String?>(complemento.value);
//     }
//     if (bairro.present) {
//       map['BAIRRO'] = Variable<String?>(bairro.value);
//     }
//     if (codigoMunicipio.present) {
//       map['CODIGO_MUNICIPIO'] = Variable<int?>(codigoMunicipio.value);
//     }
//     if (nomeMunicipio.present) {
//       map['NOME_MUNICIPIO'] = Variable<String?>(nomeMunicipio.value);
//     }
//     if (uf.present) {
//       map['UF'] = Variable<String?>(uf.value);
//     }
//     if (cep.present) {
//       map['CEP'] = Variable<String?>(cep.value);
//     }
//     if (codigoPais.present) {
//       map['CODIGO_PAIS'] = Variable<int?>(codigoPais.value);
//     }
//     if (nomePais.present) {
//       map['NOME_PAIS'] = Variable<String?>(nomePais.value);
//     }
//     if (telefone.present) {
//       map['TELEFONE'] = Variable<String?>(telefone.value);
//     }
//     if (indicadorIe.present) {
//       map['INDICADOR_IE'] = Variable<String?>(indicadorIe.value);
//     }
//     if (inscricaoEstadual.present) {
//       map['INSCRICAO_ESTADUAL'] = Variable<String?>(inscricaoEstadual.value);
//     }
//     if (suframa.present) {
//       map['SUFRAMA'] = Variable<int?>(suframa.value);
//     }
//     if (inscricaoMunicipal.present) {
//       map['INSCRICAO_MUNICIPAL'] = Variable<String?>(inscricaoMunicipal.value);
//     }
//     if (email.present) {
//       map['EMAIL'] = Variable<String?>(email.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeDestinatariosCompanion(')
//           ..write('id: $id, ')
//           ..write('idNfeCabecalho: $idNfeCabecalho, ')
//           ..write('cnpj: $cnpj, ')
//           ..write('cpf: $cpf, ')
//           ..write('estrangeiroIdentificacao: $estrangeiroIdentificacao, ')
//           ..write('nome: $nome, ')
//           ..write('logradouro: $logradouro, ')
//           ..write('numero: $numero, ')
//           ..write('complemento: $complemento, ')
//           ..write('bairro: $bairro, ')
//           ..write('codigoMunicipio: $codigoMunicipio, ')
//           ..write('nomeMunicipio: $nomeMunicipio, ')
//           ..write('uf: $uf, ')
//           ..write('cep: $cep, ')
//           ..write('codigoPais: $codigoPais, ')
//           ..write('nomePais: $nomePais, ')
//           ..write('telefone: $telefone, ')
//           ..write('indicadorIe: $indicadorIe, ')
//           ..write('inscricaoEstadual: $inscricaoEstadual, ')
//           ..write('suframa: $suframa, ')
//           ..write('inscricaoMunicipal: $inscricaoMunicipal, ')
//           ..write('email: $email')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeDestinatariosTable extends NfeDestinatarios
//     with TableInfo<$NfeDestinatariosTable, NfeDestinatario> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeDestinatariosTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idNfeCabecalhoMeta =
//       const VerificationMeta('idNfeCabecalho');
//   late final GeneratedColumn<int?> idNfeCabecalho = GeneratedColumn<int?>(
//       'ID_NFE_CABECALHO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES NFE_CABECALHO(ID)');
//   final VerificationMeta _cnpjMeta = const VerificationMeta('cnpj');
//   late final GeneratedColumn<String?> cnpj = GeneratedColumn<String?>(
//       'CNPJ', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cpfMeta = const VerificationMeta('cpf');
//   late final GeneratedColumn<String?> cpf = GeneratedColumn<String?>(
//       'CPF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 11),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _estrangeiroIdentificacaoMeta =
//       const VerificationMeta('estrangeiroIdentificacao');
//   late final GeneratedColumn<String?> estrangeiroIdentificacao =
//       GeneratedColumn<String?>('ESTRANGEIRO_IDENTIFICACAO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 20),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _nomeMeta = const VerificationMeta('nome');
//   late final GeneratedColumn<String?> nome = GeneratedColumn<String?>(
//       'NOME', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _logradouroMeta = const VerificationMeta('logradouro');
//   late final GeneratedColumn<String?> logradouro = GeneratedColumn<String?>(
//       'LOGRADOURO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _numeroMeta = const VerificationMeta('numero');
//   late final GeneratedColumn<String?> numero = GeneratedColumn<String?>(
//       'NUMERO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _complementoMeta =
//       const VerificationMeta('complemento');
//   late final GeneratedColumn<String?> complemento = GeneratedColumn<String?>(
//       'COMPLEMENTO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _bairroMeta = const VerificationMeta('bairro');
//   late final GeneratedColumn<String?> bairro = GeneratedColumn<String?>(
//       'BAIRRO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _codigoMunicipioMeta =
//       const VerificationMeta('codigoMunicipio');
//   late final GeneratedColumn<int?> codigoMunicipio = GeneratedColumn<int?>(
//       'CODIGO_MUNICIPIO', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _nomeMunicipioMeta =
//       const VerificationMeta('nomeMunicipio');
//   late final GeneratedColumn<String?> nomeMunicipio = GeneratedColumn<String?>(
//       'NOME_MUNICIPIO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _ufMeta = const VerificationMeta('uf');
//   late final GeneratedColumn<String?> uf = GeneratedColumn<String?>(
//       'UF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cepMeta = const VerificationMeta('cep');
//   late final GeneratedColumn<String?> cep = GeneratedColumn<String?>(
//       'CEP', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _codigoPaisMeta = const VerificationMeta('codigoPais');
//   late final GeneratedColumn<int?> codigoPais = GeneratedColumn<int?>(
//       'CODIGO_PAIS', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _nomePaisMeta = const VerificationMeta('nomePais');
//   late final GeneratedColumn<String?> nomePais = GeneratedColumn<String?>(
//       'NOME_PAIS', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _telefoneMeta = const VerificationMeta('telefone');
//   late final GeneratedColumn<String?> telefone = GeneratedColumn<String?>(
//       'TELEFONE', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _indicadorIeMeta =
//       const VerificationMeta('indicadorIe');
//   late final GeneratedColumn<String?> indicadorIe = GeneratedColumn<String?>(
//       'INDICADOR_IE', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _inscricaoEstadualMeta =
//       const VerificationMeta('inscricaoEstadual');
//   late final GeneratedColumn<String?> inscricaoEstadual =
//       GeneratedColumn<String?>('INSCRICAO_ESTADUAL', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 14),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _suframaMeta = const VerificationMeta('suframa');
//   late final GeneratedColumn<int?> suframa = GeneratedColumn<int?>(
//       'SUFRAMA', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _inscricaoMunicipalMeta =
//       const VerificationMeta('inscricaoMunicipal');
//   late final GeneratedColumn<String?> inscricaoMunicipal =
//       GeneratedColumn<String?>(
//           'INSCRICAO_MUNICIPAL', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 15),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _emailMeta = const VerificationMeta('email');
//   late final GeneratedColumn<String?> email = GeneratedColumn<String?>(
//       'EMAIL', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idNfeCabecalho,
//         cnpj,
//         cpf,
//         estrangeiroIdentificacao,
//         nome,
//         logradouro,
//         numero,
//         complemento,
//         bairro,
//         codigoMunicipio,
//         nomeMunicipio,
//         uf,
//         cep,
//         codigoPais,
//         nomePais,
//         telefone,
//         indicadorIe,
//         inscricaoEstadual,
//         suframa,
//         inscricaoMunicipal,
//         email
//       ];
//   @override
//   String get aliasedName => _alias ?? 'NFE_DESTINATARIO';
//   @override
//   String get actualTableName => 'NFE_DESTINATARIO';
//   @override
//   VerificationContext validateIntegrity(Insertable<NfeDestinatario> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_NFE_CABECALHO')) {
//       context.handle(
//           _idNfeCabecalhoMeta,
//           idNfeCabecalho.isAcceptableOrUnknown(
//               data['ID_NFE_CABECALHO']!, _idNfeCabecalhoMeta));
//     }
//     if (data.containsKey('CNPJ')) {
//       context.handle(
//           _cnpjMeta, cnpj.isAcceptableOrUnknown(data['CNPJ']!, _cnpjMeta));
//     }
//     if (data.containsKey('CPF')) {
//       context.handle(
//           _cpfMeta, cpf.isAcceptableOrUnknown(data['CPF']!, _cpfMeta));
//     }
//     if (data.containsKey('ESTRANGEIRO_IDENTIFICACAO')) {
//       context.handle(
//           _estrangeiroIdentificacaoMeta,
//           estrangeiroIdentificacao.isAcceptableOrUnknown(
//               data['ESTRANGEIRO_IDENTIFICACAO']!,
//               _estrangeiroIdentificacaoMeta));
//     }
//     if (data.containsKey('NOME')) {
//       context.handle(
//           _nomeMeta, nome.isAcceptableOrUnknown(data['NOME']!, _nomeMeta));
//     }
//     if (data.containsKey('LOGRADOURO')) {
//       context.handle(
//           _logradouroMeta,
//           logradouro.isAcceptableOrUnknown(
//               data['LOGRADOURO']!, _logradouroMeta));
//     }
//     if (data.containsKey('NUMERO')) {
//       context.handle(_numeroMeta,
//           numero.isAcceptableOrUnknown(data['NUMERO']!, _numeroMeta));
//     }
//     if (data.containsKey('COMPLEMENTO')) {
//       context.handle(
//           _complementoMeta,
//           complemento.isAcceptableOrUnknown(
//               data['COMPLEMENTO']!, _complementoMeta));
//     }
//     if (data.containsKey('BAIRRO')) {
//       context.handle(_bairroMeta,
//           bairro.isAcceptableOrUnknown(data['BAIRRO']!, _bairroMeta));
//     }
//     if (data.containsKey('CODIGO_MUNICIPIO')) {
//       context.handle(
//           _codigoMunicipioMeta,
//           codigoMunicipio.isAcceptableOrUnknown(
//               data['CODIGO_MUNICIPIO']!, _codigoMunicipioMeta));
//     }
//     if (data.containsKey('NOME_MUNICIPIO')) {
//       context.handle(
//           _nomeMunicipioMeta,
//           nomeMunicipio.isAcceptableOrUnknown(
//               data['NOME_MUNICIPIO']!, _nomeMunicipioMeta));
//     }
//     if (data.containsKey('UF')) {
//       context.handle(_ufMeta, uf.isAcceptableOrUnknown(data['UF']!, _ufMeta));
//     }
//     if (data.containsKey('CEP')) {
//       context.handle(
//           _cepMeta, cep.isAcceptableOrUnknown(data['CEP']!, _cepMeta));
//     }
//     if (data.containsKey('CODIGO_PAIS')) {
//       context.handle(
//           _codigoPaisMeta,
//           codigoPais.isAcceptableOrUnknown(
//               data['CODIGO_PAIS']!, _codigoPaisMeta));
//     }
//     if (data.containsKey('NOME_PAIS')) {
//       context.handle(_nomePaisMeta,
//           nomePais.isAcceptableOrUnknown(data['NOME_PAIS']!, _nomePaisMeta));
//     }
//     if (data.containsKey('TELEFONE')) {
//       context.handle(_telefoneMeta,
//           telefone.isAcceptableOrUnknown(data['TELEFONE']!, _telefoneMeta));
//     }
//     if (data.containsKey('INDICADOR_IE')) {
//       context.handle(
//           _indicadorIeMeta,
//           indicadorIe.isAcceptableOrUnknown(
//               data['INDICADOR_IE']!, _indicadorIeMeta));
//     }
//     if (data.containsKey('INSCRICAO_ESTADUAL')) {
//       context.handle(
//           _inscricaoEstadualMeta,
//           inscricaoEstadual.isAcceptableOrUnknown(
//               data['INSCRICAO_ESTADUAL']!, _inscricaoEstadualMeta));
//     }
//     if (data.containsKey('SUFRAMA')) {
//       context.handle(_suframaMeta,
//           suframa.isAcceptableOrUnknown(data['SUFRAMA']!, _suframaMeta));
//     }
//     if (data.containsKey('INSCRICAO_MUNICIPAL')) {
//       context.handle(
//           _inscricaoMunicipalMeta,
//           inscricaoMunicipal.isAcceptableOrUnknown(
//               data['INSCRICAO_MUNICIPAL']!, _inscricaoMunicipalMeta));
//     }
//     if (data.containsKey('EMAIL')) {
//       context.handle(
//           _emailMeta, email.isAcceptableOrUnknown(data['EMAIL']!, _emailMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeDestinatario map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeDestinatario(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idNfeCabecalho: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_NFE_CABECALHO']),
//       cnpj: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CNPJ']),
//       cpf: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CPF']),
//       estrangeiroIdentificacao: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ESTRANGEIRO_IDENTIFICACAO']),
//       nome: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NOME']),
//       logradouro: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}LOGRADOURO']),
//       numero: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO']),
//       complemento: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}COMPLEMENTO']),
//       bairro: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}BAIRRO']),
//       codigoMunicipio: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO_MUNICIPIO']),
//       nomeMunicipio: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NOME_MUNICIPIO']),
//       uf: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}UF']),
//       cep: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CEP']),
//       codigoPais: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO_PAIS']),
//       nomePais: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NOME_PAIS']),
//       telefone: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TELEFONE']),
//       indicadorIe: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}INDICADOR_IE']),
//       inscricaoEstadual: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}INSCRICAO_ESTADUAL']),
//       suframa: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}SUFRAMA']),
//       inscricaoMunicipal: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}INSCRICAO_MUNICIPAL']),
//       email: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}EMAIL']),
//     );
//   }

//   @override
//   $NfeDestinatariosTable createAlias(String alias) {
//     return $NfeDestinatariosTable(_db, alias);
//   }
// }

// class NfeDetEspecificoArmamentosCompanion
//     extends UpdateCompanion<NfeDetEspecificoArmamento> {
//   final Value<int> id;
//   final Value<int?> idNfeDetalhe;
//   final Value<String?> tipoArma;
//   final Value<String?> numeroSerieArma;
//   final Value<String?> numeroSerieCano;
//   final Value<String?> descricao;
//   const NfeDetEspecificoArmamentosCompanion({
//     this.id = const Value.absent(),
//     this.idNfeDetalhe = const Value.absent(),
//     this.tipoArma = const Value.absent(),
//     this.numeroSerieArma = const Value.absent(),
//     this.numeroSerieCano = const Value.absent(),
//     this.descricao = const Value.absent(),
//   });
//   NfeDetEspecificoArmamentosCompanion.insert({
//     this.id = const Value.absent(),
//     this.idNfeDetalhe = const Value.absent(),
//     this.tipoArma = const Value.absent(),
//     this.numeroSerieArma = const Value.absent(),
//     this.numeroSerieCano = const Value.absent(),
//     this.descricao = const Value.absent(),
//   });
//   static Insertable<NfeDetEspecificoArmamento> custom({
//     Expression<int>? id,
//     Expression<int?>? idNfeDetalhe,
//     Expression<String?>? tipoArma,
//     Expression<String?>? numeroSerieArma,
//     Expression<String?>? numeroSerieCano,
//     Expression<String?>? descricao,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idNfeDetalhe != null) 'ID_NFE_DETALHE': idNfeDetalhe,
//       if (tipoArma != null) 'TIPO_ARMA': tipoArma,
//       if (numeroSerieArma != null) 'NUMERO_SERIE_ARMA': numeroSerieArma,
//       if (numeroSerieCano != null) 'NUMERO_SERIE_CANO': numeroSerieCano,
//       if (descricao != null) 'DESCRICAO': descricao,
//     });
//   }

//   NfeDetEspecificoArmamentosCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idNfeDetalhe,
//       Value<String?>? tipoArma,
//       Value<String?>? numeroSerieArma,
//       Value<String?>? numeroSerieCano,
//       Value<String?>? descricao}) {
//     return NfeDetEspecificoArmamentosCompanion(
//       id: id ?? this.id,
//       idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
//       tipoArma: tipoArma ?? this.tipoArma,
//       numeroSerieArma: numeroSerieArma ?? this.numeroSerieArma,
//       numeroSerieCano: numeroSerieCano ?? this.numeroSerieCano,
//       descricao: descricao ?? this.descricao,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idNfeDetalhe.present) {
//       map['ID_NFE_DETALHE'] = Variable<int?>(idNfeDetalhe.value);
//     }
//     if (tipoArma.present) {
//       map['TIPO_ARMA'] = Variable<String?>(tipoArma.value);
//     }
//     if (numeroSerieArma.present) {
//       map['NUMERO_SERIE_ARMA'] = Variable<String?>(numeroSerieArma.value);
//     }
//     if (numeroSerieCano.present) {
//       map['NUMERO_SERIE_CANO'] = Variable<String?>(numeroSerieCano.value);
//     }
//     if (descricao.present) {
//       map['DESCRICAO'] = Variable<String?>(descricao.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeDetEspecificoArmamentosCompanion(')
//           ..write('id: $id, ')
//           ..write('idNfeDetalhe: $idNfeDetalhe, ')
//           ..write('tipoArma: $tipoArma, ')
//           ..write('numeroSerieArma: $numeroSerieArma, ')
//           ..write('numeroSerieCano: $numeroSerieCano, ')
//           ..write('descricao: $descricao')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeDetEspecificoArmamentosTable extends NfeDetEspecificoArmamentos
//     with
//         TableInfo<$NfeDetEspecificoArmamentosTable, NfeDetEspecificoArmamento> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeDetEspecificoArmamentosTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idNfeDetalheMeta =
//       const VerificationMeta('idNfeDetalhe');
//   late final GeneratedColumn<int?> idNfeDetalhe = GeneratedColumn<int?>(
//       'ID_NFE_DETALHE', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES NFE_DETALHE(ID)');
//   final VerificationMeta _tipoArmaMeta = const VerificationMeta('tipoArma');
//   late final GeneratedColumn<String?> tipoArma = GeneratedColumn<String?>(
//       'TIPO_ARMA', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _numeroSerieArmaMeta =
//       const VerificationMeta('numeroSerieArma');
//   late final GeneratedColumn<String?> numeroSerieArma =
//       GeneratedColumn<String?>('NUMERO_SERIE_ARMA', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 15),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _numeroSerieCanoMeta =
//       const VerificationMeta('numeroSerieCano');
//   late final GeneratedColumn<String?> numeroSerieCano =
//       GeneratedColumn<String?>('NUMERO_SERIE_CANO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 15),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _descricaoMeta = const VerificationMeta('descricao');
//   late final GeneratedColumn<String?> descricao = GeneratedColumn<String?>(
//       'DESCRICAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns =>
//       [id, idNfeDetalhe, tipoArma, numeroSerieArma, numeroSerieCano, descricao];
//   @override
//   String get aliasedName => _alias ?? 'NFE_DET_ESPECIFICO_ARMAMENTO';
//   @override
//   String get actualTableName => 'NFE_DET_ESPECIFICO_ARMAMENTO';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<NfeDetEspecificoArmamento> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_NFE_DETALHE')) {
//       context.handle(
//           _idNfeDetalheMeta,
//           idNfeDetalhe.isAcceptableOrUnknown(
//               data['ID_NFE_DETALHE']!, _idNfeDetalheMeta));
//     }
//     if (data.containsKey('TIPO_ARMA')) {
//       context.handle(_tipoArmaMeta,
//           tipoArma.isAcceptableOrUnknown(data['TIPO_ARMA']!, _tipoArmaMeta));
//     }
//     if (data.containsKey('NUMERO_SERIE_ARMA')) {
//       context.handle(
//           _numeroSerieArmaMeta,
//           numeroSerieArma.isAcceptableOrUnknown(
//               data['NUMERO_SERIE_ARMA']!, _numeroSerieArmaMeta));
//     }
//     if (data.containsKey('NUMERO_SERIE_CANO')) {
//       context.handle(
//           _numeroSerieCanoMeta,
//           numeroSerieCano.isAcceptableOrUnknown(
//               data['NUMERO_SERIE_CANO']!, _numeroSerieCanoMeta));
//     }
//     if (data.containsKey('DESCRICAO')) {
//       context.handle(_descricaoMeta,
//           descricao.isAcceptableOrUnknown(data['DESCRICAO']!, _descricaoMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeDetEspecificoArmamento map(Map<String, dynamic> data,
//       {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeDetEspecificoArmamento(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idNfeDetalhe: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_NFE_DETALHE']),
//       tipoArma: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TIPO_ARMA']),
//       numeroSerieArma: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO_SERIE_ARMA']),
//       numeroSerieCano: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO_SERIE_CANO']),
//       descricao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DESCRICAO']),
//     );
//   }

//   @override
//   $NfeDetEspecificoArmamentosTable createAlias(String alias) {
//     return $NfeDetEspecificoArmamentosTable(_db, alias);
//   }
// }

// class NfeDetEspecificoCombustivelsCompanion
//     extends UpdateCompanion<NfeDetEspecificoCombustivel> {
//   final Value<int> id;
//   final Value<int?> idNfeDetalhe;
//   final Value<int?> codigoAnp;
//   final Value<String?> descricaoAnp;
//   final Value<double?> percentualGlp;
//   final Value<double?> percentualGasNacional;
//   final Value<double?> percentualGasImportado;
//   final Value<double?> valorPartida;
//   final Value<String?> codif;
//   final Value<double?> quantidadeTempAmbiente;
//   final Value<String?> ufConsumo;
//   final Value<double?> cideBaseCalculo;
//   final Value<double?> cideAliquota;
//   final Value<double?> cideValor;
//   final Value<int?> encerranteBico;
//   final Value<int?> encerranteBomba;
//   final Value<int?> encerranteTanque;
//   final Value<double?> encerranteValorInicio;
//   final Value<double?> encerranteValorFim;
//   const NfeDetEspecificoCombustivelsCompanion({
//     this.id = const Value.absent(),
//     this.idNfeDetalhe = const Value.absent(),
//     this.codigoAnp = const Value.absent(),
//     this.descricaoAnp = const Value.absent(),
//     this.percentualGlp = const Value.absent(),
//     this.percentualGasNacional = const Value.absent(),
//     this.percentualGasImportado = const Value.absent(),
//     this.valorPartida = const Value.absent(),
//     this.codif = const Value.absent(),
//     this.quantidadeTempAmbiente = const Value.absent(),
//     this.ufConsumo = const Value.absent(),
//     this.cideBaseCalculo = const Value.absent(),
//     this.cideAliquota = const Value.absent(),
//     this.cideValor = const Value.absent(),
//     this.encerranteBico = const Value.absent(),
//     this.encerranteBomba = const Value.absent(),
//     this.encerranteTanque = const Value.absent(),
//     this.encerranteValorInicio = const Value.absent(),
//     this.encerranteValorFim = const Value.absent(),
//   });
//   NfeDetEspecificoCombustivelsCompanion.insert({
//     this.id = const Value.absent(),
//     this.idNfeDetalhe = const Value.absent(),
//     this.codigoAnp = const Value.absent(),
//     this.descricaoAnp = const Value.absent(),
//     this.percentualGlp = const Value.absent(),
//     this.percentualGasNacional = const Value.absent(),
//     this.percentualGasImportado = const Value.absent(),
//     this.valorPartida = const Value.absent(),
//     this.codif = const Value.absent(),
//     this.quantidadeTempAmbiente = const Value.absent(),
//     this.ufConsumo = const Value.absent(),
//     this.cideBaseCalculo = const Value.absent(),
//     this.cideAliquota = const Value.absent(),
//     this.cideValor = const Value.absent(),
//     this.encerranteBico = const Value.absent(),
//     this.encerranteBomba = const Value.absent(),
//     this.encerranteTanque = const Value.absent(),
//     this.encerranteValorInicio = const Value.absent(),
//     this.encerranteValorFim = const Value.absent(),
//   });
//   static Insertable<NfeDetEspecificoCombustivel> custom({
//     Expression<int>? id,
//     Expression<int?>? idNfeDetalhe,
//     Expression<int?>? codigoAnp,
//     Expression<String?>? descricaoAnp,
//     Expression<double?>? percentualGlp,
//     Expression<double?>? percentualGasNacional,
//     Expression<double?>? percentualGasImportado,
//     Expression<double?>? valorPartida,
//     Expression<String?>? codif,
//     Expression<double?>? quantidadeTempAmbiente,
//     Expression<String?>? ufConsumo,
//     Expression<double?>? cideBaseCalculo,
//     Expression<double?>? cideAliquota,
//     Expression<double?>? cideValor,
//     Expression<int?>? encerranteBico,
//     Expression<int?>? encerranteBomba,
//     Expression<int?>? encerranteTanque,
//     Expression<double?>? encerranteValorInicio,
//     Expression<double?>? encerranteValorFim,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idNfeDetalhe != null) 'ID_NFE_DETALHE': idNfeDetalhe,
//       if (codigoAnp != null) 'CODIGO_ANP': codigoAnp,
//       if (descricaoAnp != null) 'DESCRICAO_ANP': descricaoAnp,
//       if (percentualGlp != null) 'PERCENTUAL_GLP': percentualGlp,
//       if (percentualGasNacional != null)
//         'PERCENTUAL_GAS_NACIONAL': percentualGasNacional,
//       if (percentualGasImportado != null)
//         'PERCENTUAL_GAS_IMPORTADO': percentualGasImportado,
//       if (valorPartida != null) 'VALOR_PARTIDA': valorPartida,
//       if (codif != null) 'CODIF': codif,
//       if (quantidadeTempAmbiente != null)
//         'QUANTIDADE_TEMP_AMBIENTE': quantidadeTempAmbiente,
//       if (ufConsumo != null) 'UF_CONSUMO': ufConsumo,
//       if (cideBaseCalculo != null) 'CIDE_BASE_CALCULO': cideBaseCalculo,
//       if (cideAliquota != null) 'CIDE_ALIQUOTA': cideAliquota,
//       if (cideValor != null) 'CIDE_VALOR': cideValor,
//       if (encerranteBico != null) 'ENCERRANTE_BICO': encerranteBico,
//       if (encerranteBomba != null) 'ENCERRANTE_BOMBA': encerranteBomba,
//       if (encerranteTanque != null) 'ENCERRANTE_TANQUE': encerranteTanque,
//       if (encerranteValorInicio != null)
//         'ENCERRANTE_VALOR_INICIO': encerranteValorInicio,
//       if (encerranteValorFim != null)
//         'ENCERRANTE_VALOR_FIM': encerranteValorFim,
//     });
//   }

//   NfeDetEspecificoCombustivelsCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idNfeDetalhe,
//       Value<int?>? codigoAnp,
//       Value<String?>? descricaoAnp,
//       Value<double?>? percentualGlp,
//       Value<double?>? percentualGasNacional,
//       Value<double?>? percentualGasImportado,
//       Value<double?>? valorPartida,
//       Value<String?>? codif,
//       Value<double?>? quantidadeTempAmbiente,
//       Value<String?>? ufConsumo,
//       Value<double?>? cideBaseCalculo,
//       Value<double?>? cideAliquota,
//       Value<double?>? cideValor,
//       Value<int?>? encerranteBico,
//       Value<int?>? encerranteBomba,
//       Value<int?>? encerranteTanque,
//       Value<double?>? encerranteValorInicio,
//       Value<double?>? encerranteValorFim}) {
//     return NfeDetEspecificoCombustivelsCompanion(
//       id: id ?? this.id,
//       idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
//       codigoAnp: codigoAnp ?? this.codigoAnp,
//       descricaoAnp: descricaoAnp ?? this.descricaoAnp,
//       percentualGlp: percentualGlp ?? this.percentualGlp,
//       percentualGasNacional:
//           percentualGasNacional ?? this.percentualGasNacional,
//       percentualGasImportado:
//           percentualGasImportado ?? this.percentualGasImportado,
//       valorPartida: valorPartida ?? this.valorPartida,
//       codif: codif ?? this.codif,
//       quantidadeTempAmbiente:
//           quantidadeTempAmbiente ?? this.quantidadeTempAmbiente,
//       ufConsumo: ufConsumo ?? this.ufConsumo,
//       cideBaseCalculo: cideBaseCalculo ?? this.cideBaseCalculo,
//       cideAliquota: cideAliquota ?? this.cideAliquota,
//       cideValor: cideValor ?? this.cideValor,
//       encerranteBico: encerranteBico ?? this.encerranteBico,
//       encerranteBomba: encerranteBomba ?? this.encerranteBomba,
//       encerranteTanque: encerranteTanque ?? this.encerranteTanque,
//       encerranteValorInicio:
//           encerranteValorInicio ?? this.encerranteValorInicio,
//       encerranteValorFim: encerranteValorFim ?? this.encerranteValorFim,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idNfeDetalhe.present) {
//       map['ID_NFE_DETALHE'] = Variable<int?>(idNfeDetalhe.value);
//     }
//     if (codigoAnp.present) {
//       map['CODIGO_ANP'] = Variable<int?>(codigoAnp.value);
//     }
//     if (descricaoAnp.present) {
//       map['DESCRICAO_ANP'] = Variable<String?>(descricaoAnp.value);
//     }
//     if (percentualGlp.present) {
//       map['PERCENTUAL_GLP'] = Variable<double?>(percentualGlp.value);
//     }
//     if (percentualGasNacional.present) {
//       map['PERCENTUAL_GAS_NACIONAL'] =
//           Variable<double?>(percentualGasNacional.value);
//     }
//     if (percentualGasImportado.present) {
//       map['PERCENTUAL_GAS_IMPORTADO'] =
//           Variable<double?>(percentualGasImportado.value);
//     }
//     if (valorPartida.present) {
//       map['VALOR_PARTIDA'] = Variable<double?>(valorPartida.value);
//     }
//     if (codif.present) {
//       map['CODIF'] = Variable<String?>(codif.value);
//     }
//     if (quantidadeTempAmbiente.present) {
//       map['QUANTIDADE_TEMP_AMBIENTE'] =
//           Variable<double?>(quantidadeTempAmbiente.value);
//     }
//     if (ufConsumo.present) {
//       map['UF_CONSUMO'] = Variable<String?>(ufConsumo.value);
//     }
//     if (cideBaseCalculo.present) {
//       map['CIDE_BASE_CALCULO'] = Variable<double?>(cideBaseCalculo.value);
//     }
//     if (cideAliquota.present) {
//       map['CIDE_ALIQUOTA'] = Variable<double?>(cideAliquota.value);
//     }
//     if (cideValor.present) {
//       map['CIDE_VALOR'] = Variable<double?>(cideValor.value);
//     }
//     if (encerranteBico.present) {
//       map['ENCERRANTE_BICO'] = Variable<int?>(encerranteBico.value);
//     }
//     if (encerranteBomba.present) {
//       map['ENCERRANTE_BOMBA'] = Variable<int?>(encerranteBomba.value);
//     }
//     if (encerranteTanque.present) {
//       map['ENCERRANTE_TANQUE'] = Variable<int?>(encerranteTanque.value);
//     }
//     if (encerranteValorInicio.present) {
//       map['ENCERRANTE_VALOR_INICIO'] =
//           Variable<double?>(encerranteValorInicio.value);
//     }
//     if (encerranteValorFim.present) {
//       map['ENCERRANTE_VALOR_FIM'] = Variable<double?>(encerranteValorFim.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeDetEspecificoCombustivelsCompanion(')
//           ..write('id: $id, ')
//           ..write('idNfeDetalhe: $idNfeDetalhe, ')
//           ..write('codigoAnp: $codigoAnp, ')
//           ..write('descricaoAnp: $descricaoAnp, ')
//           ..write('percentualGlp: $percentualGlp, ')
//           ..write('percentualGasNacional: $percentualGasNacional, ')
//           ..write('percentualGasImportado: $percentualGasImportado, ')
//           ..write('valorPartida: $valorPartida, ')
//           ..write('codif: $codif, ')
//           ..write('quantidadeTempAmbiente: $quantidadeTempAmbiente, ')
//           ..write('ufConsumo: $ufConsumo, ')
//           ..write('cideBaseCalculo: $cideBaseCalculo, ')
//           ..write('cideAliquota: $cideAliquota, ')
//           ..write('cideValor: $cideValor, ')
//           ..write('encerranteBico: $encerranteBico, ')
//           ..write('encerranteBomba: $encerranteBomba, ')
//           ..write('encerranteTanque: $encerranteTanque, ')
//           ..write('encerranteValorInicio: $encerranteValorInicio, ')
//           ..write('encerranteValorFim: $encerranteValorFim')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeDetEspecificoCombustivelsTable extends NfeDetEspecificoCombustivels
//     with
//         TableInfo<$NfeDetEspecificoCombustivelsTable,
//             NfeDetEspecificoCombustivel> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeDetEspecificoCombustivelsTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idNfeDetalheMeta =
//       const VerificationMeta('idNfeDetalhe');
//   late final GeneratedColumn<int?> idNfeDetalhe = GeneratedColumn<int?>(
//       'ID_NFE_DETALHE', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES NFE_DETALHE(ID)');
//   final VerificationMeta _codigoAnpMeta = const VerificationMeta('codigoAnp');
//   late final GeneratedColumn<int?> codigoAnp = GeneratedColumn<int?>(
//       'CODIGO_ANP', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _descricaoAnpMeta =
//       const VerificationMeta('descricaoAnp');
//   late final GeneratedColumn<String?> descricaoAnp = GeneratedColumn<String?>(
//       'DESCRICAO_ANP', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 95),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _percentualGlpMeta =
//       const VerificationMeta('percentualGlp');
//   late final GeneratedColumn<double?> percentualGlp = GeneratedColumn<double?>(
//       'PERCENTUAL_GLP', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _percentualGasNacionalMeta =
//       const VerificationMeta('percentualGasNacional');
//   late final GeneratedColumn<double?> percentualGasNacional =
//       GeneratedColumn<double?>('PERCENTUAL_GAS_NACIONAL', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _percentualGasImportadoMeta =
//       const VerificationMeta('percentualGasImportado');
//   late final GeneratedColumn<double?> percentualGasImportado =
//       GeneratedColumn<double?>('PERCENTUAL_GAS_IMPORTADO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorPartidaMeta =
//       const VerificationMeta('valorPartida');
//   late final GeneratedColumn<double?> valorPartida = GeneratedColumn<double?>(
//       'VALOR_PARTIDA', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _codifMeta = const VerificationMeta('codif');
//   late final GeneratedColumn<String?> codif = GeneratedColumn<String?>(
//       'CODIF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 21),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _quantidadeTempAmbienteMeta =
//       const VerificationMeta('quantidadeTempAmbiente');
//   late final GeneratedColumn<double?> quantidadeTempAmbiente =
//       GeneratedColumn<double?>('QUANTIDADE_TEMP_AMBIENTE', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _ufConsumoMeta = const VerificationMeta('ufConsumo');
//   late final GeneratedColumn<String?> ufConsumo = GeneratedColumn<String?>(
//       'UF_CONSUMO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cideBaseCalculoMeta =
//       const VerificationMeta('cideBaseCalculo');
//   late final GeneratedColumn<double?> cideBaseCalculo =
//       GeneratedColumn<double?>('CIDE_BASE_CALCULO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _cideAliquotaMeta =
//       const VerificationMeta('cideAliquota');
//   late final GeneratedColumn<double?> cideAliquota = GeneratedColumn<double?>(
//       'CIDE_ALIQUOTA', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _cideValorMeta = const VerificationMeta('cideValor');
//   late final GeneratedColumn<double?> cideValor = GeneratedColumn<double?>(
//       'CIDE_VALOR', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _encerranteBicoMeta =
//       const VerificationMeta('encerranteBico');
//   late final GeneratedColumn<int?> encerranteBico = GeneratedColumn<int?>(
//       'ENCERRANTE_BICO', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _encerranteBombaMeta =
//       const VerificationMeta('encerranteBomba');
//   late final GeneratedColumn<int?> encerranteBomba = GeneratedColumn<int?>(
//       'ENCERRANTE_BOMBA', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _encerranteTanqueMeta =
//       const VerificationMeta('encerranteTanque');
//   late final GeneratedColumn<int?> encerranteTanque = GeneratedColumn<int?>(
//       'ENCERRANTE_TANQUE', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _encerranteValorInicioMeta =
//       const VerificationMeta('encerranteValorInicio');
//   late final GeneratedColumn<double?> encerranteValorInicio =
//       GeneratedColumn<double?>('ENCERRANTE_VALOR_INICIO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _encerranteValorFimMeta =
//       const VerificationMeta('encerranteValorFim');
//   late final GeneratedColumn<double?> encerranteValorFim =
//       GeneratedColumn<double?>('ENCERRANTE_VALOR_FIM', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idNfeDetalhe,
//         codigoAnp,
//         descricaoAnp,
//         percentualGlp,
//         percentualGasNacional,
//         percentualGasImportado,
//         valorPartida,
//         codif,
//         quantidadeTempAmbiente,
//         ufConsumo,
//         cideBaseCalculo,
//         cideAliquota,
//         cideValor,
//         encerranteBico,
//         encerranteBomba,
//         encerranteTanque,
//         encerranteValorInicio,
//         encerranteValorFim
//       ];
//   @override
//   String get aliasedName => _alias ?? 'NFE_DET_ESPECIFICO_COMBUSTIVEL';
//   @override
//   String get actualTableName => 'NFE_DET_ESPECIFICO_COMBUSTIVEL';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<NfeDetEspecificoCombustivel> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_NFE_DETALHE')) {
//       context.handle(
//           _idNfeDetalheMeta,
//           idNfeDetalhe.isAcceptableOrUnknown(
//               data['ID_NFE_DETALHE']!, _idNfeDetalheMeta));
//     }
//     if (data.containsKey('CODIGO_ANP')) {
//       context.handle(_codigoAnpMeta,
//           codigoAnp.isAcceptableOrUnknown(data['CODIGO_ANP']!, _codigoAnpMeta));
//     }
//     if (data.containsKey('DESCRICAO_ANP')) {
//       context.handle(
//           _descricaoAnpMeta,
//           descricaoAnp.isAcceptableOrUnknown(
//               data['DESCRICAO_ANP']!, _descricaoAnpMeta));
//     }
//     if (data.containsKey('PERCENTUAL_GLP')) {
//       context.handle(
//           _percentualGlpMeta,
//           percentualGlp.isAcceptableOrUnknown(
//               data['PERCENTUAL_GLP']!, _percentualGlpMeta));
//     }
//     if (data.containsKey('PERCENTUAL_GAS_NACIONAL')) {
//       context.handle(
//           _percentualGasNacionalMeta,
//           percentualGasNacional.isAcceptableOrUnknown(
//               data['PERCENTUAL_GAS_NACIONAL']!, _percentualGasNacionalMeta));
//     }
//     if (data.containsKey('PERCENTUAL_GAS_IMPORTADO')) {
//       context.handle(
//           _percentualGasImportadoMeta,
//           percentualGasImportado.isAcceptableOrUnknown(
//               data['PERCENTUAL_GAS_IMPORTADO']!, _percentualGasImportadoMeta));
//     }
//     if (data.containsKey('VALOR_PARTIDA')) {
//       context.handle(
//           _valorPartidaMeta,
//           valorPartida.isAcceptableOrUnknown(
//               data['VALOR_PARTIDA']!, _valorPartidaMeta));
//     }
//     if (data.containsKey('CODIF')) {
//       context.handle(
//           _codifMeta, codif.isAcceptableOrUnknown(data['CODIF']!, _codifMeta));
//     }
//     if (data.containsKey('QUANTIDADE_TEMP_AMBIENTE')) {
//       context.handle(
//           _quantidadeTempAmbienteMeta,
//           quantidadeTempAmbiente.isAcceptableOrUnknown(
//               data['QUANTIDADE_TEMP_AMBIENTE']!, _quantidadeTempAmbienteMeta));
//     }
//     if (data.containsKey('UF_CONSUMO')) {
//       context.handle(_ufConsumoMeta,
//           ufConsumo.isAcceptableOrUnknown(data['UF_CONSUMO']!, _ufConsumoMeta));
//     }
//     if (data.containsKey('CIDE_BASE_CALCULO')) {
//       context.handle(
//           _cideBaseCalculoMeta,
//           cideBaseCalculo.isAcceptableOrUnknown(
//               data['CIDE_BASE_CALCULO']!, _cideBaseCalculoMeta));
//     }
//     if (data.containsKey('CIDE_ALIQUOTA')) {
//       context.handle(
//           _cideAliquotaMeta,
//           cideAliquota.isAcceptableOrUnknown(
//               data['CIDE_ALIQUOTA']!, _cideAliquotaMeta));
//     }
//     if (data.containsKey('CIDE_VALOR')) {
//       context.handle(_cideValorMeta,
//           cideValor.isAcceptableOrUnknown(data['CIDE_VALOR']!, _cideValorMeta));
//     }
//     if (data.containsKey('ENCERRANTE_BICO')) {
//       context.handle(
//           _encerranteBicoMeta,
//           encerranteBico.isAcceptableOrUnknown(
//               data['ENCERRANTE_BICO']!, _encerranteBicoMeta));
//     }
//     if (data.containsKey('ENCERRANTE_BOMBA')) {
//       context.handle(
//           _encerranteBombaMeta,
//           encerranteBomba.isAcceptableOrUnknown(
//               data['ENCERRANTE_BOMBA']!, _encerranteBombaMeta));
//     }
//     if (data.containsKey('ENCERRANTE_TANQUE')) {
//       context.handle(
//           _encerranteTanqueMeta,
//           encerranteTanque.isAcceptableOrUnknown(
//               data['ENCERRANTE_TANQUE']!, _encerranteTanqueMeta));
//     }
//     if (data.containsKey('ENCERRANTE_VALOR_INICIO')) {
//       context.handle(
//           _encerranteValorInicioMeta,
//           encerranteValorInicio.isAcceptableOrUnknown(
//               data['ENCERRANTE_VALOR_INICIO']!, _encerranteValorInicioMeta));
//     }
//     if (data.containsKey('ENCERRANTE_VALOR_FIM')) {
//       context.handle(
//           _encerranteValorFimMeta,
//           encerranteValorFim.isAcceptableOrUnknown(
//               data['ENCERRANTE_VALOR_FIM']!, _encerranteValorFimMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeDetEspecificoCombustivel map(Map<String, dynamic> data,
//       {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeDetEspecificoCombustivel(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idNfeDetalhe: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_NFE_DETALHE']),
//       codigoAnp: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO_ANP']),
//       descricaoAnp: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DESCRICAO_ANP']),
//       percentualGlp: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}PERCENTUAL_GLP']),
//       percentualGasNacional: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}PERCENTUAL_GAS_NACIONAL']),
//       percentualGasImportado: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}PERCENTUAL_GAS_IMPORTADO']),
//       valorPartida: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_PARTIDA']),
//       codif: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CODIF']),
//       quantidadeTempAmbiente: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}QUANTIDADE_TEMP_AMBIENTE']),
//       ufConsumo: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}UF_CONSUMO']),
//       cideBaseCalculo: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CIDE_BASE_CALCULO']),
//       cideAliquota: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CIDE_ALIQUOTA']),
//       cideValor: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CIDE_VALOR']),
//       encerranteBico: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ENCERRANTE_BICO']),
//       encerranteBomba: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ENCERRANTE_BOMBA']),
//       encerranteTanque: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ENCERRANTE_TANQUE']),
//       encerranteValorInicio: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ENCERRANTE_VALOR_INICIO']),
//       encerranteValorFim: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ENCERRANTE_VALOR_FIM']),
//     );
//   }

//   @override
//   $NfeDetEspecificoCombustivelsTable createAlias(String alias) {
//     return $NfeDetEspecificoCombustivelsTable(_db, alias);
//   }
// }

// class NfeDetEspecificoMedicamentosCompanion
//     extends UpdateCompanion<NfeDetEspecificoMedicamento> {
//   final Value<int> id;
//   final Value<int?> idNfeDetalhe;
//   final Value<String?> codigoAnvisa;
//   final Value<String?> motivoIsencao;
//   final Value<double?> precoMaximoConsumidor;
//   const NfeDetEspecificoMedicamentosCompanion({
//     this.id = const Value.absent(),
//     this.idNfeDetalhe = const Value.absent(),
//     this.codigoAnvisa = const Value.absent(),
//     this.motivoIsencao = const Value.absent(),
//     this.precoMaximoConsumidor = const Value.absent(),
//   });
//   NfeDetEspecificoMedicamentosCompanion.insert({
//     this.id = const Value.absent(),
//     this.idNfeDetalhe = const Value.absent(),
//     this.codigoAnvisa = const Value.absent(),
//     this.motivoIsencao = const Value.absent(),
//     this.precoMaximoConsumidor = const Value.absent(),
//   });
//   static Insertable<NfeDetEspecificoMedicamento> custom({
//     Expression<int>? id,
//     Expression<int?>? idNfeDetalhe,
//     Expression<String?>? codigoAnvisa,
//     Expression<String?>? motivoIsencao,
//     Expression<double?>? precoMaximoConsumidor,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idNfeDetalhe != null) 'ID_NFE_DETALHE': idNfeDetalhe,
//       if (codigoAnvisa != null) 'CODIGO_ANVISA': codigoAnvisa,
//       if (motivoIsencao != null) 'MOTIVO_ISENCAO': motivoIsencao,
//       if (precoMaximoConsumidor != null)
//         'PRECO_MAXIMO_CONSUMIDOR': precoMaximoConsumidor,
//     });
//   }

//   NfeDetEspecificoMedicamentosCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idNfeDetalhe,
//       Value<String?>? codigoAnvisa,
//       Value<String?>? motivoIsencao,
//       Value<double?>? precoMaximoConsumidor}) {
//     return NfeDetEspecificoMedicamentosCompanion(
//       id: id ?? this.id,
//       idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
//       codigoAnvisa: codigoAnvisa ?? this.codigoAnvisa,
//       motivoIsencao: motivoIsencao ?? this.motivoIsencao,
//       precoMaximoConsumidor:
//           precoMaximoConsumidor ?? this.precoMaximoConsumidor,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idNfeDetalhe.present) {
//       map['ID_NFE_DETALHE'] = Variable<int?>(idNfeDetalhe.value);
//     }
//     if (codigoAnvisa.present) {
//       map['CODIGO_ANVISA'] = Variable<String?>(codigoAnvisa.value);
//     }
//     if (motivoIsencao.present) {
//       map['MOTIVO_ISENCAO'] = Variable<String?>(motivoIsencao.value);
//     }
//     if (precoMaximoConsumidor.present) {
//       map['PRECO_MAXIMO_CONSUMIDOR'] =
//           Variable<double?>(precoMaximoConsumidor.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeDetEspecificoMedicamentosCompanion(')
//           ..write('id: $id, ')
//           ..write('idNfeDetalhe: $idNfeDetalhe, ')
//           ..write('codigoAnvisa: $codigoAnvisa, ')
//           ..write('motivoIsencao: $motivoIsencao, ')
//           ..write('precoMaximoConsumidor: $precoMaximoConsumidor')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeDetEspecificoMedicamentosTable extends NfeDetEspecificoMedicamentos
//     with
//         TableInfo<$NfeDetEspecificoMedicamentosTable,
//             NfeDetEspecificoMedicamento> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeDetEspecificoMedicamentosTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idNfeDetalheMeta =
//       const VerificationMeta('idNfeDetalhe');
//   late final GeneratedColumn<int?> idNfeDetalhe = GeneratedColumn<int?>(
//       'ID_NFE_DETALHE', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES NFE_DETALHE(ID)');
//   final VerificationMeta _codigoAnvisaMeta =
//       const VerificationMeta('codigoAnvisa');
//   late final GeneratedColumn<String?> codigoAnvisa = GeneratedColumn<String?>(
//       'CODIGO_ANVISA', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 13),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _motivoIsencaoMeta =
//       const VerificationMeta('motivoIsencao');
//   late final GeneratedColumn<String?> motivoIsencao = GeneratedColumn<String?>(
//       'MOTIVO_ISENCAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _precoMaximoConsumidorMeta =
//       const VerificationMeta('precoMaximoConsumidor');
//   late final GeneratedColumn<double?> precoMaximoConsumidor =
//       GeneratedColumn<double?>('PRECO_MAXIMO_CONSUMIDOR', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns =>
//       [id, idNfeDetalhe, codigoAnvisa, motivoIsencao, precoMaximoConsumidor];
//   @override
//   String get aliasedName => _alias ?? 'NFE_DET_ESPECIFICO_MEDICAMENTO';
//   @override
//   String get actualTableName => 'NFE_DET_ESPECIFICO_MEDICAMENTO';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<NfeDetEspecificoMedicamento> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_NFE_DETALHE')) {
//       context.handle(
//           _idNfeDetalheMeta,
//           idNfeDetalhe.isAcceptableOrUnknown(
//               data['ID_NFE_DETALHE']!, _idNfeDetalheMeta));
//     }
//     if (data.containsKey('CODIGO_ANVISA')) {
//       context.handle(
//           _codigoAnvisaMeta,
//           codigoAnvisa.isAcceptableOrUnknown(
//               data['CODIGO_ANVISA']!, _codigoAnvisaMeta));
//     }
//     if (data.containsKey('MOTIVO_ISENCAO')) {
//       context.handle(
//           _motivoIsencaoMeta,
//           motivoIsencao.isAcceptableOrUnknown(
//               data['MOTIVO_ISENCAO']!, _motivoIsencaoMeta));
//     }
//     if (data.containsKey('PRECO_MAXIMO_CONSUMIDOR')) {
//       context.handle(
//           _precoMaximoConsumidorMeta,
//           precoMaximoConsumidor.isAcceptableOrUnknown(
//               data['PRECO_MAXIMO_CONSUMIDOR']!, _precoMaximoConsumidorMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeDetEspecificoMedicamento map(Map<String, dynamic> data,
//       {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeDetEspecificoMedicamento(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idNfeDetalhe: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_NFE_DETALHE']),
//       codigoAnvisa: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO_ANVISA']),
//       motivoIsencao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}MOTIVO_ISENCAO']),
//       precoMaximoConsumidor: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}PRECO_MAXIMO_CONSUMIDOR']),
//     );
//   }

//   @override
//   $NfeDetEspecificoMedicamentosTable createAlias(String alias) {
//     return $NfeDetEspecificoMedicamentosTable(_db, alias);
//   }
// }

// class NfeDetEspecificoVeiculosCompanion
//     extends UpdateCompanion<NfeDetEspecificoVeiculo> {
//   final Value<int> id;
//   final Value<int?> idNfeDetalhe;
//   final Value<String?> tipoOperacao;
//   final Value<String?> chassi;
//   final Value<String?> cor;
//   final Value<String?> descricaoCor;
//   final Value<String?> potenciaMotor;
//   final Value<String?> cilindradas;
//   final Value<String?> pesoLiquido;
//   final Value<String?> pesoBruto;
//   final Value<String?> numeroSerie;
//   final Value<String?> tipoCombustivel;
//   final Value<String?> numeroMotor;
//   final Value<String?> capacidadeMaximaTracao;
//   final Value<String?> distanciaEixos;
//   final Value<String?> anoModelo;
//   final Value<String?> anoFabricacao;
//   final Value<String?> tipoPintura;
//   final Value<String?> tipoVeiculo;
//   final Value<String?> especieVeiculo;
//   final Value<String?> condicaoVin;
//   final Value<String?> condicaoVeiculo;
//   final Value<String?> codigoMarcaModelo;
//   final Value<String?> codigoCorDenatran;
//   final Value<int?> lotacaoMaxima;
//   final Value<String?> restricao;
//   const NfeDetEspecificoVeiculosCompanion({
//     this.id = const Value.absent(),
//     this.idNfeDetalhe = const Value.absent(),
//     this.tipoOperacao = const Value.absent(),
//     this.chassi = const Value.absent(),
//     this.cor = const Value.absent(),
//     this.descricaoCor = const Value.absent(),
//     this.potenciaMotor = const Value.absent(),
//     this.cilindradas = const Value.absent(),
//     this.pesoLiquido = const Value.absent(),
//     this.pesoBruto = const Value.absent(),
//     this.numeroSerie = const Value.absent(),
//     this.tipoCombustivel = const Value.absent(),
//     this.numeroMotor = const Value.absent(),
//     this.capacidadeMaximaTracao = const Value.absent(),
//     this.distanciaEixos = const Value.absent(),
//     this.anoModelo = const Value.absent(),
//     this.anoFabricacao = const Value.absent(),
//     this.tipoPintura = const Value.absent(),
//     this.tipoVeiculo = const Value.absent(),
//     this.especieVeiculo = const Value.absent(),
//     this.condicaoVin = const Value.absent(),
//     this.condicaoVeiculo = const Value.absent(),
//     this.codigoMarcaModelo = const Value.absent(),
//     this.codigoCorDenatran = const Value.absent(),
//     this.lotacaoMaxima = const Value.absent(),
//     this.restricao = const Value.absent(),
//   });
//   NfeDetEspecificoVeiculosCompanion.insert({
//     this.id = const Value.absent(),
//     this.idNfeDetalhe = const Value.absent(),
//     this.tipoOperacao = const Value.absent(),
//     this.chassi = const Value.absent(),
//     this.cor = const Value.absent(),
//     this.descricaoCor = const Value.absent(),
//     this.potenciaMotor = const Value.absent(),
//     this.cilindradas = const Value.absent(),
//     this.pesoLiquido = const Value.absent(),
//     this.pesoBruto = const Value.absent(),
//     this.numeroSerie = const Value.absent(),
//     this.tipoCombustivel = const Value.absent(),
//     this.numeroMotor = const Value.absent(),
//     this.capacidadeMaximaTracao = const Value.absent(),
//     this.distanciaEixos = const Value.absent(),
//     this.anoModelo = const Value.absent(),
//     this.anoFabricacao = const Value.absent(),
//     this.tipoPintura = const Value.absent(),
//     this.tipoVeiculo = const Value.absent(),
//     this.especieVeiculo = const Value.absent(),
//     this.condicaoVin = const Value.absent(),
//     this.condicaoVeiculo = const Value.absent(),
//     this.codigoMarcaModelo = const Value.absent(),
//     this.codigoCorDenatran = const Value.absent(),
//     this.lotacaoMaxima = const Value.absent(),
//     this.restricao = const Value.absent(),
//   });
//   static Insertable<NfeDetEspecificoVeiculo> custom({
//     Expression<int>? id,
//     Expression<int?>? idNfeDetalhe,
//     Expression<String?>? tipoOperacao,
//     Expression<String?>? chassi,
//     Expression<String?>? cor,
//     Expression<String?>? descricaoCor,
//     Expression<String?>? potenciaMotor,
//     Expression<String?>? cilindradas,
//     Expression<String?>? pesoLiquido,
//     Expression<String?>? pesoBruto,
//     Expression<String?>? numeroSerie,
//     Expression<String?>? tipoCombustivel,
//     Expression<String?>? numeroMotor,
//     Expression<String?>? capacidadeMaximaTracao,
//     Expression<String?>? distanciaEixos,
//     Expression<String?>? anoModelo,
//     Expression<String?>? anoFabricacao,
//     Expression<String?>? tipoPintura,
//     Expression<String?>? tipoVeiculo,
//     Expression<String?>? especieVeiculo,
//     Expression<String?>? condicaoVin,
//     Expression<String?>? condicaoVeiculo,
//     Expression<String?>? codigoMarcaModelo,
//     Expression<String?>? codigoCorDenatran,
//     Expression<int?>? lotacaoMaxima,
//     Expression<String?>? restricao,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idNfeDetalhe != null) 'ID_NFE_DETALHE': idNfeDetalhe,
//       if (tipoOperacao != null) 'TIPO_OPERACAO': tipoOperacao,
//       if (chassi != null) 'CHASSI': chassi,
//       if (cor != null) 'COR': cor,
//       if (descricaoCor != null) 'DESCRICAO_COR': descricaoCor,
//       if (potenciaMotor != null) 'POTENCIA_MOTOR': potenciaMotor,
//       if (cilindradas != null) 'CILINDRADAS': cilindradas,
//       if (pesoLiquido != null) 'PESO_LIQUIDO': pesoLiquido,
//       if (pesoBruto != null) 'PESO_BRUTO': pesoBruto,
//       if (numeroSerie != null) 'NUMERO_SERIE': numeroSerie,
//       if (tipoCombustivel != null) 'TIPO_COMBUSTIVEL': tipoCombustivel,
//       if (numeroMotor != null) 'NUMERO_MOTOR': numeroMotor,
//       if (capacidadeMaximaTracao != null)
//         'CAPACIDADE_MAXIMA_TRACAO': capacidadeMaximaTracao,
//       if (distanciaEixos != null) 'DISTANCIA_EIXOS': distanciaEixos,
//       if (anoModelo != null) 'ANO_MODELO': anoModelo,
//       if (anoFabricacao != null) 'ANO_FABRICACAO': anoFabricacao,
//       if (tipoPintura != null) 'TIPO_PINTURA': tipoPintura,
//       if (tipoVeiculo != null) 'TIPO_VEICULO': tipoVeiculo,
//       if (especieVeiculo != null) 'ESPECIE_VEICULO': especieVeiculo,
//       if (condicaoVin != null) 'CONDICAO_VIN': condicaoVin,
//       if (condicaoVeiculo != null) 'CONDICAO_VEICULO': condicaoVeiculo,
//       if (codigoMarcaModelo != null) 'CODIGO_MARCA_MODELO': codigoMarcaModelo,
//       if (codigoCorDenatran != null) 'CODIGO_COR_DENATRAN': codigoCorDenatran,
//       if (lotacaoMaxima != null) 'LOTACAO_MAXIMA': lotacaoMaxima,
//       if (restricao != null) 'RESTRICAO': restricao,
//     });
//   }

//   NfeDetEspecificoVeiculosCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idNfeDetalhe,
//       Value<String?>? tipoOperacao,
//       Value<String?>? chassi,
//       Value<String?>? cor,
//       Value<String?>? descricaoCor,
//       Value<String?>? potenciaMotor,
//       Value<String?>? cilindradas,
//       Value<String?>? pesoLiquido,
//       Value<String?>? pesoBruto,
//       Value<String?>? numeroSerie,
//       Value<String?>? tipoCombustivel,
//       Value<String?>? numeroMotor,
//       Value<String?>? capacidadeMaximaTracao,
//       Value<String?>? distanciaEixos,
//       Value<String?>? anoModelo,
//       Value<String?>? anoFabricacao,
//       Value<String?>? tipoPintura,
//       Value<String?>? tipoVeiculo,
//       Value<String?>? especieVeiculo,
//       Value<String?>? condicaoVin,
//       Value<String?>? condicaoVeiculo,
//       Value<String?>? codigoMarcaModelo,
//       Value<String?>? codigoCorDenatran,
//       Value<int?>? lotacaoMaxima,
//       Value<String?>? restricao}) {
//     return NfeDetEspecificoVeiculosCompanion(
//       id: id ?? this.id,
//       idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
//       tipoOperacao: tipoOperacao ?? this.tipoOperacao,
//       chassi: chassi ?? this.chassi,
//       cor: cor ?? this.cor,
//       descricaoCor: descricaoCor ?? this.descricaoCor,
//       potenciaMotor: potenciaMotor ?? this.potenciaMotor,
//       cilindradas: cilindradas ?? this.cilindradas,
//       pesoLiquido: pesoLiquido ?? this.pesoLiquido,
//       pesoBruto: pesoBruto ?? this.pesoBruto,
//       numeroSerie: numeroSerie ?? this.numeroSerie,
//       tipoCombustivel: tipoCombustivel ?? this.tipoCombustivel,
//       numeroMotor: numeroMotor ?? this.numeroMotor,
//       capacidadeMaximaTracao:
//           capacidadeMaximaTracao ?? this.capacidadeMaximaTracao,
//       distanciaEixos: distanciaEixos ?? this.distanciaEixos,
//       anoModelo: anoModelo ?? this.anoModelo,
//       anoFabricacao: anoFabricacao ?? this.anoFabricacao,
//       tipoPintura: tipoPintura ?? this.tipoPintura,
//       tipoVeiculo: tipoVeiculo ?? this.tipoVeiculo,
//       especieVeiculo: especieVeiculo ?? this.especieVeiculo,
//       condicaoVin: condicaoVin ?? this.condicaoVin,
//       condicaoVeiculo: condicaoVeiculo ?? this.condicaoVeiculo,
//       codigoMarcaModelo: codigoMarcaModelo ?? this.codigoMarcaModelo,
//       codigoCorDenatran: codigoCorDenatran ?? this.codigoCorDenatran,
//       lotacaoMaxima: lotacaoMaxima ?? this.lotacaoMaxima,
//       restricao: restricao ?? this.restricao,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idNfeDetalhe.present) {
//       map['ID_NFE_DETALHE'] = Variable<int?>(idNfeDetalhe.value);
//     }
//     if (tipoOperacao.present) {
//       map['TIPO_OPERACAO'] = Variable<String?>(tipoOperacao.value);
//     }
//     if (chassi.present) {
//       map['CHASSI'] = Variable<String?>(chassi.value);
//     }
//     if (cor.present) {
//       map['COR'] = Variable<String?>(cor.value);
//     }
//     if (descricaoCor.present) {
//       map['DESCRICAO_COR'] = Variable<String?>(descricaoCor.value);
//     }
//     if (potenciaMotor.present) {
//       map['POTENCIA_MOTOR'] = Variable<String?>(potenciaMotor.value);
//     }
//     if (cilindradas.present) {
//       map['CILINDRADAS'] = Variable<String?>(cilindradas.value);
//     }
//     if (pesoLiquido.present) {
//       map['PESO_LIQUIDO'] = Variable<String?>(pesoLiquido.value);
//     }
//     if (pesoBruto.present) {
//       map['PESO_BRUTO'] = Variable<String?>(pesoBruto.value);
//     }
//     if (numeroSerie.present) {
//       map['NUMERO_SERIE'] = Variable<String?>(numeroSerie.value);
//     }
//     if (tipoCombustivel.present) {
//       map['TIPO_COMBUSTIVEL'] = Variable<String?>(tipoCombustivel.value);
//     }
//     if (numeroMotor.present) {
//       map['NUMERO_MOTOR'] = Variable<String?>(numeroMotor.value);
//     }
//     if (capacidadeMaximaTracao.present) {
//       map['CAPACIDADE_MAXIMA_TRACAO'] =
//           Variable<String?>(capacidadeMaximaTracao.value);
//     }
//     if (distanciaEixos.present) {
//       map['DISTANCIA_EIXOS'] = Variable<String?>(distanciaEixos.value);
//     }
//     if (anoModelo.present) {
//       map['ANO_MODELO'] = Variable<String?>(anoModelo.value);
//     }
//     if (anoFabricacao.present) {
//       map['ANO_FABRICACAO'] = Variable<String?>(anoFabricacao.value);
//     }
//     if (tipoPintura.present) {
//       map['TIPO_PINTURA'] = Variable<String?>(tipoPintura.value);
//     }
//     if (tipoVeiculo.present) {
//       map['TIPO_VEICULO'] = Variable<String?>(tipoVeiculo.value);
//     }
//     if (especieVeiculo.present) {
//       map['ESPECIE_VEICULO'] = Variable<String?>(especieVeiculo.value);
//     }
//     if (condicaoVin.present) {
//       map['CONDICAO_VIN'] = Variable<String?>(condicaoVin.value);
//     }
//     if (condicaoVeiculo.present) {
//       map['CONDICAO_VEICULO'] = Variable<String?>(condicaoVeiculo.value);
//     }
//     if (codigoMarcaModelo.present) {
//       map['CODIGO_MARCA_MODELO'] = Variable<String?>(codigoMarcaModelo.value);
//     }
//     if (codigoCorDenatran.present) {
//       map['CODIGO_COR_DENATRAN'] = Variable<String?>(codigoCorDenatran.value);
//     }
//     if (lotacaoMaxima.present) {
//       map['LOTACAO_MAXIMA'] = Variable<int?>(lotacaoMaxima.value);
//     }
//     if (restricao.present) {
//       map['RESTRICAO'] = Variable<String?>(restricao.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeDetEspecificoVeiculosCompanion(')
//           ..write('id: $id, ')
//           ..write('idNfeDetalhe: $idNfeDetalhe, ')
//           ..write('tipoOperacao: $tipoOperacao, ')
//           ..write('chassi: $chassi, ')
//           ..write('cor: $cor, ')
//           ..write('descricaoCor: $descricaoCor, ')
//           ..write('potenciaMotor: $potenciaMotor, ')
//           ..write('cilindradas: $cilindradas, ')
//           ..write('pesoLiquido: $pesoLiquido, ')
//           ..write('pesoBruto: $pesoBruto, ')
//           ..write('numeroSerie: $numeroSerie, ')
//           ..write('tipoCombustivel: $tipoCombustivel, ')
//           ..write('numeroMotor: $numeroMotor, ')
//           ..write('capacidadeMaximaTracao: $capacidadeMaximaTracao, ')
//           ..write('distanciaEixos: $distanciaEixos, ')
//           ..write('anoModelo: $anoModelo, ')
//           ..write('anoFabricacao: $anoFabricacao, ')
//           ..write('tipoPintura: $tipoPintura, ')
//           ..write('tipoVeiculo: $tipoVeiculo, ')
//           ..write('especieVeiculo: $especieVeiculo, ')
//           ..write('condicaoVin: $condicaoVin, ')
//           ..write('condicaoVeiculo: $condicaoVeiculo, ')
//           ..write('codigoMarcaModelo: $codigoMarcaModelo, ')
//           ..write('codigoCorDenatran: $codigoCorDenatran, ')
//           ..write('lotacaoMaxima: $lotacaoMaxima, ')
//           ..write('restricao: $restricao')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeDetEspecificoVeiculosTable extends NfeDetEspecificoVeiculos
//     with TableInfo<$NfeDetEspecificoVeiculosTable, NfeDetEspecificoVeiculo> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeDetEspecificoVeiculosTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idNfeDetalheMeta =
//       const VerificationMeta('idNfeDetalhe');
//   late final GeneratedColumn<int?> idNfeDetalhe = GeneratedColumn<int?>(
//       'ID_NFE_DETALHE', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES NFE_DETALHE(ID)');
//   final VerificationMeta _tipoOperacaoMeta =
//       const VerificationMeta('tipoOperacao');
//   late final GeneratedColumn<String?> tipoOperacao = GeneratedColumn<String?>(
//       'TIPO_OPERACAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _chassiMeta = const VerificationMeta('chassi');
//   late final GeneratedColumn<String?> chassi = GeneratedColumn<String?>(
//       'CHASSI', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 17),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _corMeta = const VerificationMeta('cor');
//   late final GeneratedColumn<String?> cor = GeneratedColumn<String?>(
//       'COR', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 4),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _descricaoCorMeta =
//       const VerificationMeta('descricaoCor');
//   late final GeneratedColumn<String?> descricaoCor = GeneratedColumn<String?>(
//       'DESCRICAO_COR', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 40),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _potenciaMotorMeta =
//       const VerificationMeta('potenciaMotor');
//   late final GeneratedColumn<String?> potenciaMotor = GeneratedColumn<String?>(
//       'POTENCIA_MOTOR', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 4),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cilindradasMeta =
//       const VerificationMeta('cilindradas');
//   late final GeneratedColumn<String?> cilindradas = GeneratedColumn<String?>(
//       'CILINDRADAS', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 4),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _pesoLiquidoMeta =
//       const VerificationMeta('pesoLiquido');
//   late final GeneratedColumn<String?> pesoLiquido = GeneratedColumn<String?>(
//       'PESO_LIQUIDO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 9),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _pesoBrutoMeta = const VerificationMeta('pesoBruto');
//   late final GeneratedColumn<String?> pesoBruto = GeneratedColumn<String?>(
//       'PESO_BRUTO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 9),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _numeroSerieMeta =
//       const VerificationMeta('numeroSerie');
//   late final GeneratedColumn<String?> numeroSerie = GeneratedColumn<String?>(
//       'NUMERO_SERIE', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 9),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _tipoCombustivelMeta =
//       const VerificationMeta('tipoCombustivel');
//   late final GeneratedColumn<String?> tipoCombustivel =
//       GeneratedColumn<String?>('TIPO_COMBUSTIVEL', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 2),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _numeroMotorMeta =
//       const VerificationMeta('numeroMotor');
//   late final GeneratedColumn<String?> numeroMotor = GeneratedColumn<String?>(
//       'NUMERO_MOTOR', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 21),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _capacidadeMaximaTracaoMeta =
//       const VerificationMeta('capacidadeMaximaTracao');
//   late final GeneratedColumn<String?> capacidadeMaximaTracao =
//       GeneratedColumn<String?>('CAPACIDADE_MAXIMA_TRACAO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 9),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _distanciaEixosMeta =
//       const VerificationMeta('distanciaEixos');
//   late final GeneratedColumn<String?> distanciaEixos = GeneratedColumn<String?>(
//       'DISTANCIA_EIXOS', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 4),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _anoModeloMeta = const VerificationMeta('anoModelo');
//   late final GeneratedColumn<String?> anoModelo = GeneratedColumn<String?>(
//       'ANO_MODELO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 4),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _anoFabricacaoMeta =
//       const VerificationMeta('anoFabricacao');
//   late final GeneratedColumn<String?> anoFabricacao = GeneratedColumn<String?>(
//       'ANO_FABRICACAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 4),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _tipoPinturaMeta =
//       const VerificationMeta('tipoPintura');
//   late final GeneratedColumn<String?> tipoPintura = GeneratedColumn<String?>(
//       'TIPO_PINTURA', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _tipoVeiculoMeta =
//       const VerificationMeta('tipoVeiculo');
//   late final GeneratedColumn<String?> tipoVeiculo = GeneratedColumn<String?>(
//       'TIPO_VEICULO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _especieVeiculoMeta =
//       const VerificationMeta('especieVeiculo');
//   late final GeneratedColumn<String?> especieVeiculo = GeneratedColumn<String?>(
//       'ESPECIE_VEICULO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _condicaoVinMeta =
//       const VerificationMeta('condicaoVin');
//   late final GeneratedColumn<String?> condicaoVin = GeneratedColumn<String?>(
//       'CONDICAO_VIN', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _condicaoVeiculoMeta =
//       const VerificationMeta('condicaoVeiculo');
//   late final GeneratedColumn<String?> condicaoVeiculo =
//       GeneratedColumn<String?>('CONDICAO_VEICULO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _codigoMarcaModeloMeta =
//       const VerificationMeta('codigoMarcaModelo');
//   late final GeneratedColumn<String?> codigoMarcaModelo =
//       GeneratedColumn<String?>('CODIGO_MARCA_MODELO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 6),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _codigoCorDenatranMeta =
//       const VerificationMeta('codigoCorDenatran');
//   late final GeneratedColumn<String?> codigoCorDenatran =
//       GeneratedColumn<String?>('CODIGO_COR_DENATRAN', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 2),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _lotacaoMaximaMeta =
//       const VerificationMeta('lotacaoMaxima');
//   late final GeneratedColumn<int?> lotacaoMaxima = GeneratedColumn<int?>(
//       'LOTACAO_MAXIMA', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _restricaoMeta = const VerificationMeta('restricao');
//   late final GeneratedColumn<String?> restricao = GeneratedColumn<String?>(
//       'RESTRICAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idNfeDetalhe,
//         tipoOperacao,
//         chassi,
//         cor,
//         descricaoCor,
//         potenciaMotor,
//         cilindradas,
//         pesoLiquido,
//         pesoBruto,
//         numeroSerie,
//         tipoCombustivel,
//         numeroMotor,
//         capacidadeMaximaTracao,
//         distanciaEixos,
//         anoModelo,
//         anoFabricacao,
//         tipoPintura,
//         tipoVeiculo,
//         especieVeiculo,
//         condicaoVin,
//         condicaoVeiculo,
//         codigoMarcaModelo,
//         codigoCorDenatran,
//         lotacaoMaxima,
//         restricao
//       ];
//   @override
//   String get aliasedName => _alias ?? 'NFE_DET_ESPECIFICO_VEICULO';
//   @override
//   String get actualTableName => 'NFE_DET_ESPECIFICO_VEICULO';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<NfeDetEspecificoVeiculo> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_NFE_DETALHE')) {
//       context.handle(
//           _idNfeDetalheMeta,
//           idNfeDetalhe.isAcceptableOrUnknown(
//               data['ID_NFE_DETALHE']!, _idNfeDetalheMeta));
//     }
//     if (data.containsKey('TIPO_OPERACAO')) {
//       context.handle(
//           _tipoOperacaoMeta,
//           tipoOperacao.isAcceptableOrUnknown(
//               data['TIPO_OPERACAO']!, _tipoOperacaoMeta));
//     }
//     if (data.containsKey('CHASSI')) {
//       context.handle(_chassiMeta,
//           chassi.isAcceptableOrUnknown(data['CHASSI']!, _chassiMeta));
//     }
//     if (data.containsKey('COR')) {
//       context.handle(
//           _corMeta, cor.isAcceptableOrUnknown(data['COR']!, _corMeta));
//     }
//     if (data.containsKey('DESCRICAO_COR')) {
//       context.handle(
//           _descricaoCorMeta,
//           descricaoCor.isAcceptableOrUnknown(
//               data['DESCRICAO_COR']!, _descricaoCorMeta));
//     }
//     if (data.containsKey('POTENCIA_MOTOR')) {
//       context.handle(
//           _potenciaMotorMeta,
//           potenciaMotor.isAcceptableOrUnknown(
//               data['POTENCIA_MOTOR']!, _potenciaMotorMeta));
//     }
//     if (data.containsKey('CILINDRADAS')) {
//       context.handle(
//           _cilindradasMeta,
//           cilindradas.isAcceptableOrUnknown(
//               data['CILINDRADAS']!, _cilindradasMeta));
//     }
//     if (data.containsKey('PESO_LIQUIDO')) {
//       context.handle(
//           _pesoLiquidoMeta,
//           pesoLiquido.isAcceptableOrUnknown(
//               data['PESO_LIQUIDO']!, _pesoLiquidoMeta));
//     }
//     if (data.containsKey('PESO_BRUTO')) {
//       context.handle(_pesoBrutoMeta,
//           pesoBruto.isAcceptableOrUnknown(data['PESO_BRUTO']!, _pesoBrutoMeta));
//     }
//     if (data.containsKey('NUMERO_SERIE')) {
//       context.handle(
//           _numeroSerieMeta,
//           numeroSerie.isAcceptableOrUnknown(
//               data['NUMERO_SERIE']!, _numeroSerieMeta));
//     }
//     if (data.containsKey('TIPO_COMBUSTIVEL')) {
//       context.handle(
//           _tipoCombustivelMeta,
//           tipoCombustivel.isAcceptableOrUnknown(
//               data['TIPO_COMBUSTIVEL']!, _tipoCombustivelMeta));
//     }
//     if (data.containsKey('NUMERO_MOTOR')) {
//       context.handle(
//           _numeroMotorMeta,
//           numeroMotor.isAcceptableOrUnknown(
//               data['NUMERO_MOTOR']!, _numeroMotorMeta));
//     }
//     if (data.containsKey('CAPACIDADE_MAXIMA_TRACAO')) {
//       context.handle(
//           _capacidadeMaximaTracaoMeta,
//           capacidadeMaximaTracao.isAcceptableOrUnknown(
//               data['CAPACIDADE_MAXIMA_TRACAO']!, _capacidadeMaximaTracaoMeta));
//     }
//     if (data.containsKey('DISTANCIA_EIXOS')) {
//       context.handle(
//           _distanciaEixosMeta,
//           distanciaEixos.isAcceptableOrUnknown(
//               data['DISTANCIA_EIXOS']!, _distanciaEixosMeta));
//     }
//     if (data.containsKey('ANO_MODELO')) {
//       context.handle(_anoModeloMeta,
//           anoModelo.isAcceptableOrUnknown(data['ANO_MODELO']!, _anoModeloMeta));
//     }
//     if (data.containsKey('ANO_FABRICACAO')) {
//       context.handle(
//           _anoFabricacaoMeta,
//           anoFabricacao.isAcceptableOrUnknown(
//               data['ANO_FABRICACAO']!, _anoFabricacaoMeta));
//     }
//     if (data.containsKey('TIPO_PINTURA')) {
//       context.handle(
//           _tipoPinturaMeta,
//           tipoPintura.isAcceptableOrUnknown(
//               data['TIPO_PINTURA']!, _tipoPinturaMeta));
//     }
//     if (data.containsKey('TIPO_VEICULO')) {
//       context.handle(
//           _tipoVeiculoMeta,
//           tipoVeiculo.isAcceptableOrUnknown(
//               data['TIPO_VEICULO']!, _tipoVeiculoMeta));
//     }
//     if (data.containsKey('ESPECIE_VEICULO')) {
//       context.handle(
//           _especieVeiculoMeta,
//           especieVeiculo.isAcceptableOrUnknown(
//               data['ESPECIE_VEICULO']!, _especieVeiculoMeta));
//     }
//     if (data.containsKey('CONDICAO_VIN')) {
//       context.handle(
//           _condicaoVinMeta,
//           condicaoVin.isAcceptableOrUnknown(
//               data['CONDICAO_VIN']!, _condicaoVinMeta));
//     }
//     if (data.containsKey('CONDICAO_VEICULO')) {
//       context.handle(
//           _condicaoVeiculoMeta,
//           condicaoVeiculo.isAcceptableOrUnknown(
//               data['CONDICAO_VEICULO']!, _condicaoVeiculoMeta));
//     }
//     if (data.containsKey('CODIGO_MARCA_MODELO')) {
//       context.handle(
//           _codigoMarcaModeloMeta,
//           codigoMarcaModelo.isAcceptableOrUnknown(
//               data['CODIGO_MARCA_MODELO']!, _codigoMarcaModeloMeta));
//     }
//     if (data.containsKey('CODIGO_COR_DENATRAN')) {
//       context.handle(
//           _codigoCorDenatranMeta,
//           codigoCorDenatran.isAcceptableOrUnknown(
//               data['CODIGO_COR_DENATRAN']!, _codigoCorDenatranMeta));
//     }
//     if (data.containsKey('LOTACAO_MAXIMA')) {
//       context.handle(
//           _lotacaoMaximaMeta,
//           lotacaoMaxima.isAcceptableOrUnknown(
//               data['LOTACAO_MAXIMA']!, _lotacaoMaximaMeta));
//     }
//     if (data.containsKey('RESTRICAO')) {
//       context.handle(_restricaoMeta,
//           restricao.isAcceptableOrUnknown(data['RESTRICAO']!, _restricaoMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeDetEspecificoVeiculo map(Map<String, dynamic> data,
//       {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeDetEspecificoVeiculo(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idNfeDetalhe: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_NFE_DETALHE']),
//       tipoOperacao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TIPO_OPERACAO']),
//       chassi: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CHASSI']),
//       cor: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}COR']),
//       descricaoCor: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DESCRICAO_COR']),
//       potenciaMotor: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}POTENCIA_MOTOR']),
//       cilindradas: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CILINDRADAS']),
//       pesoLiquido: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}PESO_LIQUIDO']),
//       pesoBruto: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}PESO_BRUTO']),
//       numeroSerie: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO_SERIE']),
//       tipoCombustivel: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TIPO_COMBUSTIVEL']),
//       numeroMotor: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO_MOTOR']),
//       capacidadeMaximaTracao: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}CAPACIDADE_MAXIMA_TRACAO']),
//       distanciaEixos: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DISTANCIA_EIXOS']),
//       anoModelo: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ANO_MODELO']),
//       anoFabricacao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ANO_FABRICACAO']),
//       tipoPintura: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TIPO_PINTURA']),
//       tipoVeiculo: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TIPO_VEICULO']),
//       especieVeiculo: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ESPECIE_VEICULO']),
//       condicaoVin: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CONDICAO_VIN']),
//       condicaoVeiculo: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CONDICAO_VEICULO']),
//       codigoMarcaModelo: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}CODIGO_MARCA_MODELO']),
//       codigoCorDenatran: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}CODIGO_COR_DENATRAN']),
//       lotacaoMaxima: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}LOTACAO_MAXIMA']),
//       restricao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}RESTRICAO']),
//     );
//   }

//   @override
//   $NfeDetEspecificoVeiculosTable createAlias(String alias) {
//     return $NfeDetEspecificoVeiculosTable(_db, alias);
//   }
// }

// class NfeDetalhesCompanion extends UpdateCompanion<NfeDetalhe> {
//   final Value<int> id;
//   final Value<int?> idNfeCabecalho;
//   final Value<int?> numeroItem;
//   final Value<String?> codigoProduto;
//   final Value<String?> gtin;
//   final Value<String?> nomeProduto;
//   final Value<String?> ncm;
//   final Value<String?> nve;
//   final Value<String?> cest;
//   final Value<String?> indicadorEscalaRelevante;
//   final Value<String?> cnpjFabricante;
//   final Value<String?> codigoBeneficioFiscal;
//   final Value<int?> exTipi;
//   final Value<int?> cfop;
//   final Value<String?> unidadeComercial;
//   final Value<double?> quantidadeComercial;
//   final Value<String?> numeroPedidoCompra;
//   final Value<int?> itemPedidoCompra;
//   final Value<String?> numeroFci;
//   final Value<String?> numeroRecopi;
//   final Value<double?> valorUnitarioComercial;
//   final Value<double?> valorBrutoProduto;
//   final Value<String?> gtinUnidadeTributavel;
//   final Value<String?> unidadeTributavel;
//   final Value<double?> quantidadeTributavel;
//   final Value<double?> valorUnitarioTributavel;
//   final Value<double?> valorFrete;
//   final Value<double?> valorSeguro;
//   final Value<double?> valorDesconto;
//   final Value<double?> valorOutrasDespesas;
//   final Value<String?> entraTotal;
//   final Value<double?> valorTotalTributos;
//   final Value<double?> percentualDevolvido;
//   final Value<double?> valorIpiDevolvido;
//   final Value<String?> informacoesAdicionais;
//   final Value<double?> valorSubtotal;
//   final Value<double?> valorTotal;
//   const NfeDetalhesCompanion({
//     this.id = const Value.absent(),
//     this.idNfeCabecalho = const Value.absent(),
//     this.numeroItem = const Value.absent(),
//     this.codigoProduto = const Value.absent(),
//     this.gtin = const Value.absent(),
//     this.nomeProduto = const Value.absent(),
//     this.ncm = const Value.absent(),
//     this.nve = const Value.absent(),
//     this.cest = const Value.absent(),
//     this.indicadorEscalaRelevante = const Value.absent(),
//     this.cnpjFabricante = const Value.absent(),
//     this.codigoBeneficioFiscal = const Value.absent(),
//     this.exTipi = const Value.absent(),
//     this.cfop = const Value.absent(),
//     this.unidadeComercial = const Value.absent(),
//     this.quantidadeComercial = const Value.absent(),
//     this.numeroPedidoCompra = const Value.absent(),
//     this.itemPedidoCompra = const Value.absent(),
//     this.numeroFci = const Value.absent(),
//     this.numeroRecopi = const Value.absent(),
//     this.valorUnitarioComercial = const Value.absent(),
//     this.valorBrutoProduto = const Value.absent(),
//     this.gtinUnidadeTributavel = const Value.absent(),
//     this.unidadeTributavel = const Value.absent(),
//     this.quantidadeTributavel = const Value.absent(),
//     this.valorUnitarioTributavel = const Value.absent(),
//     this.valorFrete = const Value.absent(),
//     this.valorSeguro = const Value.absent(),
//     this.valorDesconto = const Value.absent(),
//     this.valorOutrasDespesas = const Value.absent(),
//     this.entraTotal = const Value.absent(),
//     this.valorTotalTributos = const Value.absent(),
//     this.percentualDevolvido = const Value.absent(),
//     this.valorIpiDevolvido = const Value.absent(),
//     this.informacoesAdicionais = const Value.absent(),
//     this.valorSubtotal = const Value.absent(),
//     this.valorTotal = const Value.absent(),
//   });
//   NfeDetalhesCompanion.insert({
//     this.id = const Value.absent(),
//     this.idNfeCabecalho = const Value.absent(),
//     this.numeroItem = const Value.absent(),
//     this.codigoProduto = const Value.absent(),
//     this.gtin = const Value.absent(),
//     this.nomeProduto = const Value.absent(),
//     this.ncm = const Value.absent(),
//     this.nve = const Value.absent(),
//     this.cest = const Value.absent(),
//     this.indicadorEscalaRelevante = const Value.absent(),
//     this.cnpjFabricante = const Value.absent(),
//     this.codigoBeneficioFiscal = const Value.absent(),
//     this.exTipi = const Value.absent(),
//     this.cfop = const Value.absent(),
//     this.unidadeComercial = const Value.absent(),
//     this.quantidadeComercial = const Value.absent(),
//     this.numeroPedidoCompra = const Value.absent(),
//     this.itemPedidoCompra = const Value.absent(),
//     this.numeroFci = const Value.absent(),
//     this.numeroRecopi = const Value.absent(),
//     this.valorUnitarioComercial = const Value.absent(),
//     this.valorBrutoProduto = const Value.absent(),
//     this.gtinUnidadeTributavel = const Value.absent(),
//     this.unidadeTributavel = const Value.absent(),
//     this.quantidadeTributavel = const Value.absent(),
//     this.valorUnitarioTributavel = const Value.absent(),
//     this.valorFrete = const Value.absent(),
//     this.valorSeguro = const Value.absent(),
//     this.valorDesconto = const Value.absent(),
//     this.valorOutrasDespesas = const Value.absent(),
//     this.entraTotal = const Value.absent(),
//     this.valorTotalTributos = const Value.absent(),
//     this.percentualDevolvido = const Value.absent(),
//     this.valorIpiDevolvido = const Value.absent(),
//     this.informacoesAdicionais = const Value.absent(),
//     this.valorSubtotal = const Value.absent(),
//     this.valorTotal = const Value.absent(),
//   });
//   static Insertable<NfeDetalhe> custom({
//     Expression<int>? id,
//     Expression<int?>? idNfeCabecalho,
//     Expression<int?>? numeroItem,
//     Expression<String?>? codigoProduto,
//     Expression<String?>? gtin,
//     Expression<String?>? nomeProduto,
//     Expression<String?>? ncm,
//     Expression<String?>? nve,
//     Expression<String?>? cest,
//     Expression<String?>? indicadorEscalaRelevante,
//     Expression<String?>? cnpjFabricante,
//     Expression<String?>? codigoBeneficioFiscal,
//     Expression<int?>? exTipi,
//     Expression<int?>? cfop,
//     Expression<String?>? unidadeComercial,
//     Expression<double?>? quantidadeComercial,
//     Expression<String?>? numeroPedidoCompra,
//     Expression<int?>? itemPedidoCompra,
//     Expression<String?>? numeroFci,
//     Expression<String?>? numeroRecopi,
//     Expression<double?>? valorUnitarioComercial,
//     Expression<double?>? valorBrutoProduto,
//     Expression<String?>? gtinUnidadeTributavel,
//     Expression<String?>? unidadeTributavel,
//     Expression<double?>? quantidadeTributavel,
//     Expression<double?>? valorUnitarioTributavel,
//     Expression<double?>? valorFrete,
//     Expression<double?>? valorSeguro,
//     Expression<double?>? valorDesconto,
//     Expression<double?>? valorOutrasDespesas,
//     Expression<String?>? entraTotal,
//     Expression<double?>? valorTotalTributos,
//     Expression<double?>? percentualDevolvido,
//     Expression<double?>? valorIpiDevolvido,
//     Expression<String?>? informacoesAdicionais,
//     Expression<double?>? valorSubtotal,
//     Expression<double?>? valorTotal,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idNfeCabecalho != null) 'ID_NFE_CABECALHO': idNfeCabecalho,
//       if (numeroItem != null) 'NUMERO_ITEM': numeroItem,
//       if (codigoProduto != null) 'CODIGO_PRODUTO': codigoProduto,
//       if (gtin != null) 'GTIN': gtin,
//       if (nomeProduto != null) 'NOME_PRODUTO': nomeProduto,
//       if (ncm != null) 'NCM': ncm,
//       if (nve != null) 'NVE': nve,
//       if (cest != null) 'CEST': cest,
//       if (indicadorEscalaRelevante != null)
//         'INDICADOR_ESCALA_RELEVANTE': indicadorEscalaRelevante,
//       if (cnpjFabricante != null) 'CNPJ_FABRICANTE': cnpjFabricante,
//       if (codigoBeneficioFiscal != null)
//         'CODIGO_BENEFICIO_FISCAL': codigoBeneficioFiscal,
//       if (exTipi != null) 'EX_TIPI': exTipi,
//       if (cfop != null) 'CFOP': cfop,
//       if (unidadeComercial != null) 'UNIDADE_COMERCIAL': unidadeComercial,
//       if (quantidadeComercial != null)
//         'QUANTIDADE_COMERCIAL': quantidadeComercial,
//       if (numeroPedidoCompra != null)
//         'NUMERO_PEDIDO_COMPRA': numeroPedidoCompra,
//       if (itemPedidoCompra != null) 'ITEM_PEDIDO_COMPRA': itemPedidoCompra,
//       if (numeroFci != null) 'NUMERO_FCI': numeroFci,
//       if (numeroRecopi != null) 'NUMERO_RECOPI': numeroRecopi,
//       if (valorUnitarioComercial != null)
//         'VALOR_UNITARIO_COMERCIAL': valorUnitarioComercial,
//       if (valorBrutoProduto != null) 'VALOR_BRUTO_PRODUTO': valorBrutoProduto,
//       if (gtinUnidadeTributavel != null)
//         'GTIN_UNIDADE_TRIBUTAVEL': gtinUnidadeTributavel,
//       if (unidadeTributavel != null) 'UNIDADE_TRIBUTAVEL': unidadeTributavel,
//       if (quantidadeTributavel != null)
//         'QUANTIDADE_TRIBUTAVEL': quantidadeTributavel,
//       if (valorUnitarioTributavel != null)
//         'VALOR_UNITARIO_TRIBUTAVEL': valorUnitarioTributavel,
//       if (valorFrete != null) 'VALOR_FRETE': valorFrete,
//       if (valorSeguro != null) 'VALOR_SEGURO': valorSeguro,
//       if (valorDesconto != null) 'VALOR_DESCONTO': valorDesconto,
//       if (valorOutrasDespesas != null)
//         'VALOR_OUTRAS_DESPESAS': valorOutrasDespesas,
//       if (entraTotal != null) 'ENTRA_TOTAL': entraTotal,
//       if (valorTotalTributos != null)
//         'VALOR_TOTAL_TRIBUTOS': valorTotalTributos,
//       if (percentualDevolvido != null)
//         'PERCENTUAL_DEVOLVIDO': percentualDevolvido,
//       if (valorIpiDevolvido != null) 'VALOR_IPI_DEVOLVIDO': valorIpiDevolvido,
//       if (informacoesAdicionais != null)
//         'INFORMACOES_ADICIONAIS': informacoesAdicionais,
//       if (valorSubtotal != null) 'VALOR_SUBTOTAL': valorSubtotal,
//       if (valorTotal != null) 'VALOR_TOTAL': valorTotal,
//     });
//   }

//   NfeDetalhesCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idNfeCabecalho,
//       Value<int?>? numeroItem,
//       Value<String?>? codigoProduto,
//       Value<String?>? gtin,
//       Value<String?>? nomeProduto,
//       Value<String?>? ncm,
//       Value<String?>? nve,
//       Value<String?>? cest,
//       Value<String?>? indicadorEscalaRelevante,
//       Value<String?>? cnpjFabricante,
//       Value<String?>? codigoBeneficioFiscal,
//       Value<int?>? exTipi,
//       Value<int?>? cfop,
//       Value<String?>? unidadeComercial,
//       Value<double?>? quantidadeComercial,
//       Value<String?>? numeroPedidoCompra,
//       Value<int?>? itemPedidoCompra,
//       Value<String?>? numeroFci,
//       Value<String?>? numeroRecopi,
//       Value<double?>? valorUnitarioComercial,
//       Value<double?>? valorBrutoProduto,
//       Value<String?>? gtinUnidadeTributavel,
//       Value<String?>? unidadeTributavel,
//       Value<double?>? quantidadeTributavel,
//       Value<double?>? valorUnitarioTributavel,
//       Value<double?>? valorFrete,
//       Value<double?>? valorSeguro,
//       Value<double?>? valorDesconto,
//       Value<double?>? valorOutrasDespesas,
//       Value<String?>? entraTotal,
//       Value<double?>? valorTotalTributos,
//       Value<double?>? percentualDevolvido,
//       Value<double?>? valorIpiDevolvido,
//       Value<String?>? informacoesAdicionais,
//       Value<double?>? valorSubtotal,
//       Value<double?>? valorTotal}) {
//     return NfeDetalhesCompanion(
//       id: id ?? this.id,
//       idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
//       numeroItem: numeroItem ?? this.numeroItem,
//       codigoProduto: codigoProduto ?? this.codigoProduto,
//       gtin: gtin ?? this.gtin,
//       nomeProduto: nomeProduto ?? this.nomeProduto,
//       ncm: ncm ?? this.ncm,
//       nve: nve ?? this.nve,
//       cest: cest ?? this.cest,
//       indicadorEscalaRelevante:
//           indicadorEscalaRelevante ?? this.indicadorEscalaRelevante,
//       cnpjFabricante: cnpjFabricante ?? this.cnpjFabricante,
//       codigoBeneficioFiscal:
//           codigoBeneficioFiscal ?? this.codigoBeneficioFiscal,
//       exTipi: exTipi ?? this.exTipi,
//       cfop: cfop ?? this.cfop,
//       unidadeComercial: unidadeComercial ?? this.unidadeComercial,
//       quantidadeComercial: quantidadeComercial ?? this.quantidadeComercial,
//       numeroPedidoCompra: numeroPedidoCompra ?? this.numeroPedidoCompra,
//       itemPedidoCompra: itemPedidoCompra ?? this.itemPedidoCompra,
//       numeroFci: numeroFci ?? this.numeroFci,
//       numeroRecopi: numeroRecopi ?? this.numeroRecopi,
//       valorUnitarioComercial:
//           valorUnitarioComercial ?? this.valorUnitarioComercial,
//       valorBrutoProduto: valorBrutoProduto ?? this.valorBrutoProduto,
//       gtinUnidadeTributavel:
//           gtinUnidadeTributavel ?? this.gtinUnidadeTributavel,
//       unidadeTributavel: unidadeTributavel ?? this.unidadeTributavel,
//       quantidadeTributavel: quantidadeTributavel ?? this.quantidadeTributavel,
//       valorUnitarioTributavel:
//           valorUnitarioTributavel ?? this.valorUnitarioTributavel,
//       valorFrete: valorFrete ?? this.valorFrete,
//       valorSeguro: valorSeguro ?? this.valorSeguro,
//       valorDesconto: valorDesconto ?? this.valorDesconto,
//       valorOutrasDespesas: valorOutrasDespesas ?? this.valorOutrasDespesas,
//       entraTotal: entraTotal ?? this.entraTotal,
//       valorTotalTributos: valorTotalTributos ?? this.valorTotalTributos,
//       percentualDevolvido: percentualDevolvido ?? this.percentualDevolvido,
//       valorIpiDevolvido: valorIpiDevolvido ?? this.valorIpiDevolvido,
//       informacoesAdicionais:
//           informacoesAdicionais ?? this.informacoesAdicionais,
//       valorSubtotal: valorSubtotal ?? this.valorSubtotal,
//       valorTotal: valorTotal ?? this.valorTotal,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idNfeCabecalho.present) {
//       map['ID_NFE_CABECALHO'] = Variable<int?>(idNfeCabecalho.value);
//     }
//     if (numeroItem.present) {
//       map['NUMERO_ITEM'] = Variable<int?>(numeroItem.value);
//     }
//     if (codigoProduto.present) {
//       map['CODIGO_PRODUTO'] = Variable<String?>(codigoProduto.value);
//     }
//     if (gtin.present) {
//       map['GTIN'] = Variable<String?>(gtin.value);
//     }
//     if (nomeProduto.present) {
//       map['NOME_PRODUTO'] = Variable<String?>(nomeProduto.value);
//     }
//     if (ncm.present) {
//       map['NCM'] = Variable<String?>(ncm.value);
//     }
//     if (nve.present) {
//       map['NVE'] = Variable<String?>(nve.value);
//     }
//     if (cest.present) {
//       map['CEST'] = Variable<String?>(cest.value);
//     }
//     if (indicadorEscalaRelevante.present) {
//       map['INDICADOR_ESCALA_RELEVANTE'] =
//           Variable<String?>(indicadorEscalaRelevante.value);
//     }
//     if (cnpjFabricante.present) {
//       map['CNPJ_FABRICANTE'] = Variable<String?>(cnpjFabricante.value);
//     }
//     if (codigoBeneficioFiscal.present) {
//       map['CODIGO_BENEFICIO_FISCAL'] =
//           Variable<String?>(codigoBeneficioFiscal.value);
//     }
//     if (exTipi.present) {
//       map['EX_TIPI'] = Variable<int?>(exTipi.value);
//     }
//     if (cfop.present) {
//       map['CFOP'] = Variable<int?>(cfop.value);
//     }
//     if (unidadeComercial.present) {
//       map['UNIDADE_COMERCIAL'] = Variable<String?>(unidadeComercial.value);
//     }
//     if (quantidadeComercial.present) {
//       map['QUANTIDADE_COMERCIAL'] =
//           Variable<double?>(quantidadeComercial.value);
//     }
//     if (numeroPedidoCompra.present) {
//       map['NUMERO_PEDIDO_COMPRA'] = Variable<String?>(numeroPedidoCompra.value);
//     }
//     if (itemPedidoCompra.present) {
//       map['ITEM_PEDIDO_COMPRA'] = Variable<int?>(itemPedidoCompra.value);
//     }
//     if (numeroFci.present) {
//       map['NUMERO_FCI'] = Variable<String?>(numeroFci.value);
//     }
//     if (numeroRecopi.present) {
//       map['NUMERO_RECOPI'] = Variable<String?>(numeroRecopi.value);
//     }
//     if (valorUnitarioComercial.present) {
//       map['VALOR_UNITARIO_COMERCIAL'] =
//           Variable<double?>(valorUnitarioComercial.value);
//     }
//     if (valorBrutoProduto.present) {
//       map['VALOR_BRUTO_PRODUTO'] = Variable<double?>(valorBrutoProduto.value);
//     }
//     if (gtinUnidadeTributavel.present) {
//       map['GTIN_UNIDADE_TRIBUTAVEL'] =
//           Variable<String?>(gtinUnidadeTributavel.value);
//     }
//     if (unidadeTributavel.present) {
//       map['UNIDADE_TRIBUTAVEL'] = Variable<String?>(unidadeTributavel.value);
//     }
//     if (quantidadeTributavel.present) {
//       map['QUANTIDADE_TRIBUTAVEL'] =
//           Variable<double?>(quantidadeTributavel.value);
//     }
//     if (valorUnitarioTributavel.present) {
//       map['VALOR_UNITARIO_TRIBUTAVEL'] =
//           Variable<double?>(valorUnitarioTributavel.value);
//     }
//     if (valorFrete.present) {
//       map['VALOR_FRETE'] = Variable<double?>(valorFrete.value);
//     }
//     if (valorSeguro.present) {
//       map['VALOR_SEGURO'] = Variable<double?>(valorSeguro.value);
//     }
//     if (valorDesconto.present) {
//       map['VALOR_DESCONTO'] = Variable<double?>(valorDesconto.value);
//     }
//     if (valorOutrasDespesas.present) {
//       map['VALOR_OUTRAS_DESPESAS'] =
//           Variable<double?>(valorOutrasDespesas.value);
//     }
//     if (entraTotal.present) {
//       map['ENTRA_TOTAL'] = Variable<String?>(entraTotal.value);
//     }
//     if (valorTotalTributos.present) {
//       map['VALOR_TOTAL_TRIBUTOS'] = Variable<double?>(valorTotalTributos.value);
//     }
//     if (percentualDevolvido.present) {
//       map['PERCENTUAL_DEVOLVIDO'] =
//           Variable<double?>(percentualDevolvido.value);
//     }
//     if (valorIpiDevolvido.present) {
//       map['VALOR_IPI_DEVOLVIDO'] = Variable<double?>(valorIpiDevolvido.value);
//     }
//     if (informacoesAdicionais.present) {
//       map['INFORMACOES_ADICIONAIS'] =
//           Variable<String?>(informacoesAdicionais.value);
//     }
//     if (valorSubtotal.present) {
//       map['VALOR_SUBTOTAL'] = Variable<double?>(valorSubtotal.value);
//     }
//     if (valorTotal.present) {
//       map['VALOR_TOTAL'] = Variable<double?>(valorTotal.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeDetalhesCompanion(')
//           ..write('id: $id, ')
//           ..write('idNfeCabecalho: $idNfeCabecalho, ')
//           ..write('numeroItem: $numeroItem, ')
//           ..write('codigoProduto: $codigoProduto, ')
//           ..write('gtin: $gtin, ')
//           ..write('nomeProduto: $nomeProduto, ')
//           ..write('ncm: $ncm, ')
//           ..write('nve: $nve, ')
//           ..write('cest: $cest, ')
//           ..write('indicadorEscalaRelevante: $indicadorEscalaRelevante, ')
//           ..write('cnpjFabricante: $cnpjFabricante, ')
//           ..write('codigoBeneficioFiscal: $codigoBeneficioFiscal, ')
//           ..write('exTipi: $exTipi, ')
//           ..write('cfop: $cfop, ')
//           ..write('unidadeComercial: $unidadeComercial, ')
//           ..write('quantidadeComercial: $quantidadeComercial, ')
//           ..write('numeroPedidoCompra: $numeroPedidoCompra, ')
//           ..write('itemPedidoCompra: $itemPedidoCompra, ')
//           ..write('numeroFci: $numeroFci, ')
//           ..write('numeroRecopi: $numeroRecopi, ')
//           ..write('valorUnitarioComercial: $valorUnitarioComercial, ')
//           ..write('valorBrutoProduto: $valorBrutoProduto, ')
//           ..write('gtinUnidadeTributavel: $gtinUnidadeTributavel, ')
//           ..write('unidadeTributavel: $unidadeTributavel, ')
//           ..write('quantidadeTributavel: $quantidadeTributavel, ')
//           ..write('valorUnitarioTributavel: $valorUnitarioTributavel, ')
//           ..write('valorFrete: $valorFrete, ')
//           ..write('valorSeguro: $valorSeguro, ')
//           ..write('valorDesconto: $valorDesconto, ')
//           ..write('valorOutrasDespesas: $valorOutrasDespesas, ')
//           ..write('entraTotal: $entraTotal, ')
//           ..write('valorTotalTributos: $valorTotalTributos, ')
//           ..write('percentualDevolvido: $percentualDevolvido, ')
//           ..write('valorIpiDevolvido: $valorIpiDevolvido, ')
//           ..write('informacoesAdicionais: $informacoesAdicionais, ')
//           ..write('valorSubtotal: $valorSubtotal, ')
//           ..write('valorTotal: $valorTotal')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeDetalhesTable extends NfeDetalhes
//     with TableInfo<$NfeDetalhesTable, NfeDetalhe> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeDetalhesTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idNfeCabecalhoMeta =
//       const VerificationMeta('idNfeCabecalho');
//   late final GeneratedColumn<int?> idNfeCabecalho = GeneratedColumn<int?>(
//       'ID_NFE_CABECALHO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES NFE_CABECALHO(ID)');
//   final VerificationMeta _numeroItemMeta = const VerificationMeta('numeroItem');
//   late final GeneratedColumn<int?> numeroItem = GeneratedColumn<int?>(
//       'NUMERO_ITEM', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _codigoProdutoMeta =
//       const VerificationMeta('codigoProduto');
//   late final GeneratedColumn<String?> codigoProduto = GeneratedColumn<String?>(
//       'CODIGO_PRODUTO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _gtinMeta = const VerificationMeta('gtin');
//   late final GeneratedColumn<String?> gtin = GeneratedColumn<String?>(
//       'GTIN', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _nomeProdutoMeta =
//       const VerificationMeta('nomeProduto');
//   late final GeneratedColumn<String?> nomeProduto = GeneratedColumn<String?>(
//       'NOME_PRODUTO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 120),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _ncmMeta = const VerificationMeta('ncm');
//   late final GeneratedColumn<String?> ncm = GeneratedColumn<String?>(
//       'NCM', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _nveMeta = const VerificationMeta('nve');
//   late final GeneratedColumn<String?> nve = GeneratedColumn<String?>(
//       'NVE', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 6),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cestMeta = const VerificationMeta('cest');
//   late final GeneratedColumn<String?> cest = GeneratedColumn<String?>(
//       'CEST', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 7),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _indicadorEscalaRelevanteMeta =
//       const VerificationMeta('indicadorEscalaRelevante');
//   late final GeneratedColumn<String?> indicadorEscalaRelevante =
//       GeneratedColumn<String?>('INDICADOR_ESCALA_RELEVANTE', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _cnpjFabricanteMeta =
//       const VerificationMeta('cnpjFabricante');
//   late final GeneratedColumn<String?> cnpjFabricante = GeneratedColumn<String?>(
//       'CNPJ_FABRICANTE', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _codigoBeneficioFiscalMeta =
//       const VerificationMeta('codigoBeneficioFiscal');
//   late final GeneratedColumn<String?> codigoBeneficioFiscal =
//       GeneratedColumn<String?>('CODIGO_BENEFICIO_FISCAL', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 10),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _exTipiMeta = const VerificationMeta('exTipi');
//   late final GeneratedColumn<int?> exTipi = GeneratedColumn<int?>(
//       'EX_TIPI', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _cfopMeta = const VerificationMeta('cfop');
//   late final GeneratedColumn<int?> cfop = GeneratedColumn<int?>(
//       'CFOP', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _unidadeComercialMeta =
//       const VerificationMeta('unidadeComercial');
//   late final GeneratedColumn<String?> unidadeComercial =
//       GeneratedColumn<String?>('UNIDADE_COMERCIAL', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 6),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _quantidadeComercialMeta =
//       const VerificationMeta('quantidadeComercial');
//   late final GeneratedColumn<double?> quantidadeComercial =
//       GeneratedColumn<double?>('QUANTIDADE_COMERCIAL', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _numeroPedidoCompraMeta =
//       const VerificationMeta('numeroPedidoCompra');
//   late final GeneratedColumn<String?> numeroPedidoCompra =
//       GeneratedColumn<String?>(
//           'NUMERO_PEDIDO_COMPRA', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 15),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _itemPedidoCompraMeta =
//       const VerificationMeta('itemPedidoCompra');
//   late final GeneratedColumn<int?> itemPedidoCompra = GeneratedColumn<int?>(
//       'ITEM_PEDIDO_COMPRA', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _numeroFciMeta = const VerificationMeta('numeroFci');
//   late final GeneratedColumn<String?> numeroFci = GeneratedColumn<String?>(
//       'NUMERO_FCI', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 36),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _numeroRecopiMeta =
//       const VerificationMeta('numeroRecopi');
//   late final GeneratedColumn<String?> numeroRecopi = GeneratedColumn<String?>(
//       'NUMERO_RECOPI', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _valorUnitarioComercialMeta =
//       const VerificationMeta('valorUnitarioComercial');
//   late final GeneratedColumn<double?> valorUnitarioComercial =
//       GeneratedColumn<double?>('VALOR_UNITARIO_COMERCIAL', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorBrutoProdutoMeta =
//       const VerificationMeta('valorBrutoProduto');
//   late final GeneratedColumn<double?> valorBrutoProduto =
//       GeneratedColumn<double?>('VALOR_BRUTO_PRODUTO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _gtinUnidadeTributavelMeta =
//       const VerificationMeta('gtinUnidadeTributavel');
//   late final GeneratedColumn<String?> gtinUnidadeTributavel =
//       GeneratedColumn<String?>('GTIN_UNIDADE_TRIBUTAVEL', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 14),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _unidadeTributavelMeta =
//       const VerificationMeta('unidadeTributavel');
//   late final GeneratedColumn<String?> unidadeTributavel =
//       GeneratedColumn<String?>('UNIDADE_TRIBUTAVEL', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 6),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _quantidadeTributavelMeta =
//       const VerificationMeta('quantidadeTributavel');
//   late final GeneratedColumn<double?> quantidadeTributavel =
//       GeneratedColumn<double?>('QUANTIDADE_TRIBUTAVEL', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorUnitarioTributavelMeta =
//       const VerificationMeta('valorUnitarioTributavel');
//   late final GeneratedColumn<double?> valorUnitarioTributavel =
//       GeneratedColumn<double?>('VALOR_UNITARIO_TRIBUTAVEL', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorFreteMeta = const VerificationMeta('valorFrete');
//   late final GeneratedColumn<double?> valorFrete = GeneratedColumn<double?>(
//       'VALOR_FRETE', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorSeguroMeta =
//       const VerificationMeta('valorSeguro');
//   late final GeneratedColumn<double?> valorSeguro = GeneratedColumn<double?>(
//       'VALOR_SEGURO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorDescontoMeta =
//       const VerificationMeta('valorDesconto');
//   late final GeneratedColumn<double?> valorDesconto = GeneratedColumn<double?>(
//       'VALOR_DESCONTO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorOutrasDespesasMeta =
//       const VerificationMeta('valorOutrasDespesas');
//   late final GeneratedColumn<double?> valorOutrasDespesas =
//       GeneratedColumn<double?>('VALOR_OUTRAS_DESPESAS', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _entraTotalMeta = const VerificationMeta('entraTotal');
//   late final GeneratedColumn<String?> entraTotal = GeneratedColumn<String?>(
//       'ENTRA_TOTAL', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _valorTotalTributosMeta =
//       const VerificationMeta('valorTotalTributos');
//   late final GeneratedColumn<double?> valorTotalTributos =
//       GeneratedColumn<double?>('VALOR_TOTAL_TRIBUTOS', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _percentualDevolvidoMeta =
//       const VerificationMeta('percentualDevolvido');
//   late final GeneratedColumn<double?> percentualDevolvido =
//       GeneratedColumn<double?>('PERCENTUAL_DEVOLVIDO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorIpiDevolvidoMeta =
//       const VerificationMeta('valorIpiDevolvido');
//   late final GeneratedColumn<double?> valorIpiDevolvido =
//       GeneratedColumn<double?>('VALOR_IPI_DEVOLVIDO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _informacoesAdicionaisMeta =
//       const VerificationMeta('informacoesAdicionais');
//   late final GeneratedColumn<String?> informacoesAdicionais =
//       GeneratedColumn<String?>('INFORMACOES_ADICIONAIS', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 250),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _valorSubtotalMeta =
//       const VerificationMeta('valorSubtotal');
//   late final GeneratedColumn<double?> valorSubtotal = GeneratedColumn<double?>(
//       'VALOR_SUBTOTAL', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorTotalMeta = const VerificationMeta('valorTotal');
//   late final GeneratedColumn<double?> valorTotal = GeneratedColumn<double?>(
//       'VALOR_TOTAL', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idNfeCabecalho,
//         numeroItem,
//         codigoProduto,
//         gtin,
//         nomeProduto,
//         ncm,
//         nve,
//         cest,
//         indicadorEscalaRelevante,
//         cnpjFabricante,
//         codigoBeneficioFiscal,
//         exTipi,
//         cfop,
//         unidadeComercial,
//         quantidadeComercial,
//         numeroPedidoCompra,
//         itemPedidoCompra,
//         numeroFci,
//         numeroRecopi,
//         valorUnitarioComercial,
//         valorBrutoProduto,
//         gtinUnidadeTributavel,
//         unidadeTributavel,
//         quantidadeTributavel,
//         valorUnitarioTributavel,
//         valorFrete,
//         valorSeguro,
//         valorDesconto,
//         valorOutrasDespesas,
//         entraTotal,
//         valorTotalTributos,
//         percentualDevolvido,
//         valorIpiDevolvido,
//         informacoesAdicionais,
//         valorSubtotal,
//         valorTotal
//       ];
//   @override
//   String get aliasedName => _alias ?? 'NFE_DETALHE';
//   @override
//   String get actualTableName => 'NFE_DETALHE';
//   @override
//   VerificationContext validateIntegrity(Insertable<NfeDetalhe> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_NFE_CABECALHO')) {
//       context.handle(
//           _idNfeCabecalhoMeta,
//           idNfeCabecalho.isAcceptableOrUnknown(
//               data['ID_NFE_CABECALHO']!, _idNfeCabecalhoMeta));
//     }
//     if (data.containsKey('NUMERO_ITEM')) {
//       context.handle(
//           _numeroItemMeta,
//           numeroItem.isAcceptableOrUnknown(
//               data['NUMERO_ITEM']!, _numeroItemMeta));
//     }
//     if (data.containsKey('CODIGO_PRODUTO')) {
//       context.handle(
//           _codigoProdutoMeta,
//           codigoProduto.isAcceptableOrUnknown(
//               data['CODIGO_PRODUTO']!, _codigoProdutoMeta));
//     }
//     if (data.containsKey('GTIN')) {
//       context.handle(
//           _gtinMeta, gtin.isAcceptableOrUnknown(data['GTIN']!, _gtinMeta));
//     }
//     if (data.containsKey('NOME_PRODUTO')) {
//       context.handle(
//           _nomeProdutoMeta,
//           nomeProduto.isAcceptableOrUnknown(
//               data['NOME_PRODUTO']!, _nomeProdutoMeta));
//     }
//     if (data.containsKey('NCM')) {
//       context.handle(
//           _ncmMeta, ncm.isAcceptableOrUnknown(data['NCM']!, _ncmMeta));
//     }
//     if (data.containsKey('NVE')) {
//       context.handle(
//           _nveMeta, nve.isAcceptableOrUnknown(data['NVE']!, _nveMeta));
//     }
//     if (data.containsKey('CEST')) {
//       context.handle(
//           _cestMeta, cest.isAcceptableOrUnknown(data['CEST']!, _cestMeta));
//     }
//     if (data.containsKey('INDICADOR_ESCALA_RELEVANTE')) {
//       context.handle(
//           _indicadorEscalaRelevanteMeta,
//           indicadorEscalaRelevante.isAcceptableOrUnknown(
//               data['INDICADOR_ESCALA_RELEVANTE']!,
//               _indicadorEscalaRelevanteMeta));
//     }
//     if (data.containsKey('CNPJ_FABRICANTE')) {
//       context.handle(
//           _cnpjFabricanteMeta,
//           cnpjFabricante.isAcceptableOrUnknown(
//               data['CNPJ_FABRICANTE']!, _cnpjFabricanteMeta));
//     }
//     if (data.containsKey('CODIGO_BENEFICIO_FISCAL')) {
//       context.handle(
//           _codigoBeneficioFiscalMeta,
//           codigoBeneficioFiscal.isAcceptableOrUnknown(
//               data['CODIGO_BENEFICIO_FISCAL']!, _codigoBeneficioFiscalMeta));
//     }
//     if (data.containsKey('EX_TIPI')) {
//       context.handle(_exTipiMeta,
//           exTipi.isAcceptableOrUnknown(data['EX_TIPI']!, _exTipiMeta));
//     }
//     if (data.containsKey('CFOP')) {
//       context.handle(
//           _cfopMeta, cfop.isAcceptableOrUnknown(data['CFOP']!, _cfopMeta));
//     }
//     if (data.containsKey('UNIDADE_COMERCIAL')) {
//       context.handle(
//           _unidadeComercialMeta,
//           unidadeComercial.isAcceptableOrUnknown(
//               data['UNIDADE_COMERCIAL']!, _unidadeComercialMeta));
//     }
//     if (data.containsKey('QUANTIDADE_COMERCIAL')) {
//       context.handle(
//           _quantidadeComercialMeta,
//           quantidadeComercial.isAcceptableOrUnknown(
//               data['QUANTIDADE_COMERCIAL']!, _quantidadeComercialMeta));
//     }
//     if (data.containsKey('NUMERO_PEDIDO_COMPRA')) {
//       context.handle(
//           _numeroPedidoCompraMeta,
//           numeroPedidoCompra.isAcceptableOrUnknown(
//               data['NUMERO_PEDIDO_COMPRA']!, _numeroPedidoCompraMeta));
//     }
//     if (data.containsKey('ITEM_PEDIDO_COMPRA')) {
//       context.handle(
//           _itemPedidoCompraMeta,
//           itemPedidoCompra.isAcceptableOrUnknown(
//               data['ITEM_PEDIDO_COMPRA']!, _itemPedidoCompraMeta));
//     }
//     if (data.containsKey('NUMERO_FCI')) {
//       context.handle(_numeroFciMeta,
//           numeroFci.isAcceptableOrUnknown(data['NUMERO_FCI']!, _numeroFciMeta));
//     }
//     if (data.containsKey('NUMERO_RECOPI')) {
//       context.handle(
//           _numeroRecopiMeta,
//           numeroRecopi.isAcceptableOrUnknown(
//               data['NUMERO_RECOPI']!, _numeroRecopiMeta));
//     }
//     if (data.containsKey('VALOR_UNITARIO_COMERCIAL')) {
//       context.handle(
//           _valorUnitarioComercialMeta,
//           valorUnitarioComercial.isAcceptableOrUnknown(
//               data['VALOR_UNITARIO_COMERCIAL']!, _valorUnitarioComercialMeta));
//     }
//     if (data.containsKey('VALOR_BRUTO_PRODUTO')) {
//       context.handle(
//           _valorBrutoProdutoMeta,
//           valorBrutoProduto.isAcceptableOrUnknown(
//               data['VALOR_BRUTO_PRODUTO']!, _valorBrutoProdutoMeta));
//     }
//     if (data.containsKey('GTIN_UNIDADE_TRIBUTAVEL')) {
//       context.handle(
//           _gtinUnidadeTributavelMeta,
//           gtinUnidadeTributavel.isAcceptableOrUnknown(
//               data['GTIN_UNIDADE_TRIBUTAVEL']!, _gtinUnidadeTributavelMeta));
//     }
//     if (data.containsKey('UNIDADE_TRIBUTAVEL')) {
//       context.handle(
//           _unidadeTributavelMeta,
//           unidadeTributavel.isAcceptableOrUnknown(
//               data['UNIDADE_TRIBUTAVEL']!, _unidadeTributavelMeta));
//     }
//     if (data.containsKey('QUANTIDADE_TRIBUTAVEL')) {
//       context.handle(
//           _quantidadeTributavelMeta,
//           quantidadeTributavel.isAcceptableOrUnknown(
//               data['QUANTIDADE_TRIBUTAVEL']!, _quantidadeTributavelMeta));
//     }
//     if (data.containsKey('VALOR_UNITARIO_TRIBUTAVEL')) {
//       context.handle(
//           _valorUnitarioTributavelMeta,
//           valorUnitarioTributavel.isAcceptableOrUnknown(
//               data['VALOR_UNITARIO_TRIBUTAVEL']!,
//               _valorUnitarioTributavelMeta));
//     }
//     if (data.containsKey('VALOR_FRETE')) {
//       context.handle(
//           _valorFreteMeta,
//           valorFrete.isAcceptableOrUnknown(
//               data['VALOR_FRETE']!, _valorFreteMeta));
//     }
//     if (data.containsKey('VALOR_SEGURO')) {
//       context.handle(
//           _valorSeguroMeta,
//           valorSeguro.isAcceptableOrUnknown(
//               data['VALOR_SEGURO']!, _valorSeguroMeta));
//     }
//     if (data.containsKey('VALOR_DESCONTO')) {
//       context.handle(
//           _valorDescontoMeta,
//           valorDesconto.isAcceptableOrUnknown(
//               data['VALOR_DESCONTO']!, _valorDescontoMeta));
//     }
//     if (data.containsKey('VALOR_OUTRAS_DESPESAS')) {
//       context.handle(
//           _valorOutrasDespesasMeta,
//           valorOutrasDespesas.isAcceptableOrUnknown(
//               data['VALOR_OUTRAS_DESPESAS']!, _valorOutrasDespesasMeta));
//     }
//     if (data.containsKey('ENTRA_TOTAL')) {
//       context.handle(
//           _entraTotalMeta,
//           entraTotal.isAcceptableOrUnknown(
//               data['ENTRA_TOTAL']!, _entraTotalMeta));
//     }
//     if (data.containsKey('VALOR_TOTAL_TRIBUTOS')) {
//       context.handle(
//           _valorTotalTributosMeta,
//           valorTotalTributos.isAcceptableOrUnknown(
//               data['VALOR_TOTAL_TRIBUTOS']!, _valorTotalTributosMeta));
//     }
//     if (data.containsKey('PERCENTUAL_DEVOLVIDO')) {
//       context.handle(
//           _percentualDevolvidoMeta,
//           percentualDevolvido.isAcceptableOrUnknown(
//               data['PERCENTUAL_DEVOLVIDO']!, _percentualDevolvidoMeta));
//     }
//     if (data.containsKey('VALOR_IPI_DEVOLVIDO')) {
//       context.handle(
//           _valorIpiDevolvidoMeta,
//           valorIpiDevolvido.isAcceptableOrUnknown(
//               data['VALOR_IPI_DEVOLVIDO']!, _valorIpiDevolvidoMeta));
//     }
//     if (data.containsKey('INFORMACOES_ADICIONAIS')) {
//       context.handle(
//           _informacoesAdicionaisMeta,
//           informacoesAdicionais.isAcceptableOrUnknown(
//               data['INFORMACOES_ADICIONAIS']!, _informacoesAdicionaisMeta));
//     }
//     if (data.containsKey('VALOR_SUBTOTAL')) {
//       context.handle(
//           _valorSubtotalMeta,
//           valorSubtotal.isAcceptableOrUnknown(
//               data['VALOR_SUBTOTAL']!, _valorSubtotalMeta));
//     }
//     if (data.containsKey('VALOR_TOTAL')) {
//       context.handle(
//           _valorTotalMeta,
//           valorTotal.isAcceptableOrUnknown(
//               data['VALOR_TOTAL']!, _valorTotalMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeDetalhe map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeDetalhe(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idNfeCabecalho: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_NFE_CABECALHO']),
//       numeroItem: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO_ITEM']),
//       codigoProduto: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO_PRODUTO']),
//       gtin: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}GTIN']),
//       nomeProduto: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NOME_PRODUTO']),
//       ncm: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NCM']),
//       nve: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NVE']),
//       cest: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CEST']),
//       indicadorEscalaRelevante: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}INDICADOR_ESCALA_RELEVANTE']),
//       cnpjFabricante: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CNPJ_FABRICANTE']),
//       codigoBeneficioFiscal: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}CODIGO_BENEFICIO_FISCAL']),
//       exTipi: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}EX_TIPI']),
//       cfop: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CFOP']),
//       unidadeComercial: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}UNIDADE_COMERCIAL']),
//       quantidadeComercial: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}QUANTIDADE_COMERCIAL']),
//       numeroPedidoCompra: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}NUMERO_PEDIDO_COMPRA']),
//       itemPedidoCompra: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ITEM_PEDIDO_COMPRA']),
//       numeroFci: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO_FCI']),
//       numeroRecopi: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO_RECOPI']),
//       valorUnitarioComercial: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_UNITARIO_COMERCIAL']),
//       valorBrutoProduto: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_BRUTO_PRODUTO']),
//       gtinUnidadeTributavel: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}GTIN_UNIDADE_TRIBUTAVEL']),
//       unidadeTributavel: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}UNIDADE_TRIBUTAVEL']),
//       quantidadeTributavel: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}QUANTIDADE_TRIBUTAVEL']),
//       valorUnitarioTributavel: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_UNITARIO_TRIBUTAVEL']),
//       valorFrete: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_FRETE']),
//       valorSeguro: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_SEGURO']),
//       valorDesconto: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_DESCONTO']),
//       valorOutrasDespesas: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_OUTRAS_DESPESAS']),
//       entraTotal: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ENTRA_TOTAL']),
//       valorTotalTributos: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_TOTAL_TRIBUTOS']),
//       percentualDevolvido: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}PERCENTUAL_DEVOLVIDO']),
//       valorIpiDevolvido: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_IPI_DEVOLVIDO']),
//       informacoesAdicionais: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}INFORMACOES_ADICIONAIS']),
//       valorSubtotal: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_SUBTOTAL']),
//       valorTotal: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_TOTAL']),
//     );
//   }

//   @override
//   $NfeDetalhesTable createAlias(String alias) {
//     return $NfeDetalhesTable(_db, alias);
//   }
// }

// class NfeDetalheImpostoCofinssCompanion
//     extends UpdateCompanion<NfeDetalheImpostoCofins> {
//   final Value<int> id;
//   final Value<int?> idNfeDetalhe;
//   final Value<String?> cstCofins;
//   final Value<double?> baseCalculoCofins;
//   final Value<double?> aliquotaCofinsPercentual;
//   final Value<double?> quantidadeVendida;
//   final Value<double?> aliquotaCofinsReais;
//   final Value<double?> valorCofins;
//   const NfeDetalheImpostoCofinssCompanion({
//     this.id = const Value.absent(),
//     this.idNfeDetalhe = const Value.absent(),
//     this.cstCofins = const Value.absent(),
//     this.baseCalculoCofins = const Value.absent(),
//     this.aliquotaCofinsPercentual = const Value.absent(),
//     this.quantidadeVendida = const Value.absent(),
//     this.aliquotaCofinsReais = const Value.absent(),
//     this.valorCofins = const Value.absent(),
//   });
//   NfeDetalheImpostoCofinssCompanion.insert({
//     this.id = const Value.absent(),
//     this.idNfeDetalhe = const Value.absent(),
//     this.cstCofins = const Value.absent(),
//     this.baseCalculoCofins = const Value.absent(),
//     this.aliquotaCofinsPercentual = const Value.absent(),
//     this.quantidadeVendida = const Value.absent(),
//     this.aliquotaCofinsReais = const Value.absent(),
//     this.valorCofins = const Value.absent(),
//   });
//   static Insertable<NfeDetalheImpostoCofins> custom({
//     Expression<int>? id,
//     Expression<int?>? idNfeDetalhe,
//     Expression<String?>? cstCofins,
//     Expression<double?>? baseCalculoCofins,
//     Expression<double?>? aliquotaCofinsPercentual,
//     Expression<double?>? quantidadeVendida,
//     Expression<double?>? aliquotaCofinsReais,
//     Expression<double?>? valorCofins,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idNfeDetalhe != null) 'ID_NFE_DETALHE': idNfeDetalhe,
//       if (cstCofins != null) 'CST_COFINS': cstCofins,
//       if (baseCalculoCofins != null) 'BASE_CALCULO_COFINS': baseCalculoCofins,
//       if (aliquotaCofinsPercentual != null)
//         'ALIQUOTA_COFINS_PERCENTUAL': aliquotaCofinsPercentual,
//       if (quantidadeVendida != null) 'QUANTIDADE_VENDIDA': quantidadeVendida,
//       if (aliquotaCofinsReais != null)
//         'ALIQUOTA_COFINS_REAIS': aliquotaCofinsReais,
//       if (valorCofins != null) 'VALOR_COFINS': valorCofins,
//     });
//   }

//   NfeDetalheImpostoCofinssCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idNfeDetalhe,
//       Value<String?>? cstCofins,
//       Value<double?>? baseCalculoCofins,
//       Value<double?>? aliquotaCofinsPercentual,
//       Value<double?>? quantidadeVendida,
//       Value<double?>? aliquotaCofinsReais,
//       Value<double?>? valorCofins}) {
//     return NfeDetalheImpostoCofinssCompanion(
//       id: id ?? this.id,
//       idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
//       cstCofins: cstCofins ?? this.cstCofins,
//       baseCalculoCofins: baseCalculoCofins ?? this.baseCalculoCofins,
//       aliquotaCofinsPercentual:
//           aliquotaCofinsPercentual ?? this.aliquotaCofinsPercentual,
//       quantidadeVendida: quantidadeVendida ?? this.quantidadeVendida,
//       aliquotaCofinsReais: aliquotaCofinsReais ?? this.aliquotaCofinsReais,
//       valorCofins: valorCofins ?? this.valorCofins,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idNfeDetalhe.present) {
//       map['ID_NFE_DETALHE'] = Variable<int?>(idNfeDetalhe.value);
//     }
//     if (cstCofins.present) {
//       map['CST_COFINS'] = Variable<String?>(cstCofins.value);
//     }
//     if (baseCalculoCofins.present) {
//       map['BASE_CALCULO_COFINS'] = Variable<double?>(baseCalculoCofins.value);
//     }
//     if (aliquotaCofinsPercentual.present) {
//       map['ALIQUOTA_COFINS_PERCENTUAL'] =
//           Variable<double?>(aliquotaCofinsPercentual.value);
//     }
//     if (quantidadeVendida.present) {
//       map['QUANTIDADE_VENDIDA'] = Variable<double?>(quantidadeVendida.value);
//     }
//     if (aliquotaCofinsReais.present) {
//       map['ALIQUOTA_COFINS_REAIS'] =
//           Variable<double?>(aliquotaCofinsReais.value);
//     }
//     if (valorCofins.present) {
//       map['VALOR_COFINS'] = Variable<double?>(valorCofins.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeDetalheImpostoCofinssCompanion(')
//           ..write('id: $id, ')
//           ..write('idNfeDetalhe: $idNfeDetalhe, ')
//           ..write('cstCofins: $cstCofins, ')
//           ..write('baseCalculoCofins: $baseCalculoCofins, ')
//           ..write('aliquotaCofinsPercentual: $aliquotaCofinsPercentual, ')
//           ..write('quantidadeVendida: $quantidadeVendida, ')
//           ..write('aliquotaCofinsReais: $aliquotaCofinsReais, ')
//           ..write('valorCofins: $valorCofins')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeDetalheImpostoCofinssTable extends NfeDetalheImpostoCofinss
//     with TableInfo<$NfeDetalheImpostoCofinssTable, NfeDetalheImpostoCofins> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeDetalheImpostoCofinssTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idNfeDetalheMeta =
//       const VerificationMeta('idNfeDetalhe');
//   late final GeneratedColumn<int?> idNfeDetalhe = GeneratedColumn<int?>(
//       'ID_NFE_DETALHE', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES NFE_DETALHE(ID)');
//   final VerificationMeta _cstCofinsMeta = const VerificationMeta('cstCofins');
//   late final GeneratedColumn<String?> cstCofins = GeneratedColumn<String?>(
//       'CST_COFINS', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _baseCalculoCofinsMeta =
//       const VerificationMeta('baseCalculoCofins');
//   late final GeneratedColumn<double?> baseCalculoCofins =
//       GeneratedColumn<double?>('BASE_CALCULO_COFINS', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _aliquotaCofinsPercentualMeta =
//       const VerificationMeta('aliquotaCofinsPercentual');
//   late final GeneratedColumn<double?> aliquotaCofinsPercentual =
//       GeneratedColumn<double?>('ALIQUOTA_COFINS_PERCENTUAL', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _quantidadeVendidaMeta =
//       const VerificationMeta('quantidadeVendida');
//   late final GeneratedColumn<double?> quantidadeVendida =
//       GeneratedColumn<double?>('QUANTIDADE_VENDIDA', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _aliquotaCofinsReaisMeta =
//       const VerificationMeta('aliquotaCofinsReais');
//   late final GeneratedColumn<double?> aliquotaCofinsReais =
//       GeneratedColumn<double?>('ALIQUOTA_COFINS_REAIS', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorCofinsMeta =
//       const VerificationMeta('valorCofins');
//   late final GeneratedColumn<double?> valorCofins = GeneratedColumn<double?>(
//       'VALOR_COFINS', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idNfeDetalhe,
//         cstCofins,
//         baseCalculoCofins,
//         aliquotaCofinsPercentual,
//         quantidadeVendida,
//         aliquotaCofinsReais,
//         valorCofins
//       ];
//   @override
//   String get aliasedName => _alias ?? 'NFE_DETALHE_IMPOSTO_COFINS';
//   @override
//   String get actualTableName => 'NFE_DETALHE_IMPOSTO_COFINS';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<NfeDetalheImpostoCofins> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_NFE_DETALHE')) {
//       context.handle(
//           _idNfeDetalheMeta,
//           idNfeDetalhe.isAcceptableOrUnknown(
//               data['ID_NFE_DETALHE']!, _idNfeDetalheMeta));
//     }
//     if (data.containsKey('CST_COFINS')) {
//       context.handle(_cstCofinsMeta,
//           cstCofins.isAcceptableOrUnknown(data['CST_COFINS']!, _cstCofinsMeta));
//     }
//     if (data.containsKey('BASE_CALCULO_COFINS')) {
//       context.handle(
//           _baseCalculoCofinsMeta,
//           baseCalculoCofins.isAcceptableOrUnknown(
//               data['BASE_CALCULO_COFINS']!, _baseCalculoCofinsMeta));
//     }
//     if (data.containsKey('ALIQUOTA_COFINS_PERCENTUAL')) {
//       context.handle(
//           _aliquotaCofinsPercentualMeta,
//           aliquotaCofinsPercentual.isAcceptableOrUnknown(
//               data['ALIQUOTA_COFINS_PERCENTUAL']!,
//               _aliquotaCofinsPercentualMeta));
//     }
//     if (data.containsKey('QUANTIDADE_VENDIDA')) {
//       context.handle(
//           _quantidadeVendidaMeta,
//           quantidadeVendida.isAcceptableOrUnknown(
//               data['QUANTIDADE_VENDIDA']!, _quantidadeVendidaMeta));
//     }
//     if (data.containsKey('ALIQUOTA_COFINS_REAIS')) {
//       context.handle(
//           _aliquotaCofinsReaisMeta,
//           aliquotaCofinsReais.isAcceptableOrUnknown(
//               data['ALIQUOTA_COFINS_REAIS']!, _aliquotaCofinsReaisMeta));
//     }
//     if (data.containsKey('VALOR_COFINS')) {
//       context.handle(
//           _valorCofinsMeta,
//           valorCofins.isAcceptableOrUnknown(
//               data['VALOR_COFINS']!, _valorCofinsMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeDetalheImpostoCofins map(Map<String, dynamic> data,
//       {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeDetalheImpostoCofins(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idNfeDetalhe: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_NFE_DETALHE']),
//       cstCofins: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CST_COFINS']),
//       baseCalculoCofins: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}BASE_CALCULO_COFINS']),
//       aliquotaCofinsPercentual: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ALIQUOTA_COFINS_PERCENTUAL']),
//       quantidadeVendida: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}QUANTIDADE_VENDIDA']),
//       aliquotaCofinsReais: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ALIQUOTA_COFINS_REAIS']),
//       valorCofins: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_COFINS']),
//     );
//   }

//   @override
//   $NfeDetalheImpostoCofinssTable createAlias(String alias) {
//     return $NfeDetalheImpostoCofinssTable(_db, alias);
//   }
// }

// class NfeDetalheImpostoCofinsStsCompanion
//     extends UpdateCompanion<NfeDetalheImpostoCofinsSt> {
//   final Value<int> id;
//   final Value<int?> idNfeDetalhe;
//   final Value<double?> baseCalculoCofinsSt;
//   final Value<double?> aliquotaCofinsStPercentual;
//   final Value<double?> quantidadeVendidaCofinsSt;
//   final Value<double?> aliquotaCofinsStReais;
//   final Value<double?> valorCofinsSt;
//   const NfeDetalheImpostoCofinsStsCompanion({
//     this.id = const Value.absent(),
//     this.idNfeDetalhe = const Value.absent(),
//     this.baseCalculoCofinsSt = const Value.absent(),
//     this.aliquotaCofinsStPercentual = const Value.absent(),
//     this.quantidadeVendidaCofinsSt = const Value.absent(),
//     this.aliquotaCofinsStReais = const Value.absent(),
//     this.valorCofinsSt = const Value.absent(),
//   });
//   NfeDetalheImpostoCofinsStsCompanion.insert({
//     this.id = const Value.absent(),
//     this.idNfeDetalhe = const Value.absent(),
//     this.baseCalculoCofinsSt = const Value.absent(),
//     this.aliquotaCofinsStPercentual = const Value.absent(),
//     this.quantidadeVendidaCofinsSt = const Value.absent(),
//     this.aliquotaCofinsStReais = const Value.absent(),
//     this.valorCofinsSt = const Value.absent(),
//   });
//   static Insertable<NfeDetalheImpostoCofinsSt> custom({
//     Expression<int>? id,
//     Expression<int?>? idNfeDetalhe,
//     Expression<double?>? baseCalculoCofinsSt,
//     Expression<double?>? aliquotaCofinsStPercentual,
//     Expression<double?>? quantidadeVendidaCofinsSt,
//     Expression<double?>? aliquotaCofinsStReais,
//     Expression<double?>? valorCofinsSt,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idNfeDetalhe != null) 'ID_NFE_DETALHE': idNfeDetalhe,
//       if (baseCalculoCofinsSt != null)
//         'BASE_CALCULO_COFINS_ST': baseCalculoCofinsSt,
//       if (aliquotaCofinsStPercentual != null)
//         'ALIQUOTA_COFINS_ST_PERCENTUAL': aliquotaCofinsStPercentual,
//       if (quantidadeVendidaCofinsSt != null)
//         'QUANTIDADE_VENDIDA_COFINS_ST': quantidadeVendidaCofinsSt,
//       if (aliquotaCofinsStReais != null)
//         'ALIQUOTA_COFINS_ST_REAIS': aliquotaCofinsStReais,
//       if (valorCofinsSt != null) 'VALOR_COFINS_ST': valorCofinsSt,
//     });
//   }

//   NfeDetalheImpostoCofinsStsCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idNfeDetalhe,
//       Value<double?>? baseCalculoCofinsSt,
//       Value<double?>? aliquotaCofinsStPercentual,
//       Value<double?>? quantidadeVendidaCofinsSt,
//       Value<double?>? aliquotaCofinsStReais,
//       Value<double?>? valorCofinsSt}) {
//     return NfeDetalheImpostoCofinsStsCompanion(
//       id: id ?? this.id,
//       idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
//       baseCalculoCofinsSt: baseCalculoCofinsSt ?? this.baseCalculoCofinsSt,
//       aliquotaCofinsStPercentual:
//           aliquotaCofinsStPercentual ?? this.aliquotaCofinsStPercentual,
//       quantidadeVendidaCofinsSt:
//           quantidadeVendidaCofinsSt ?? this.quantidadeVendidaCofinsSt,
//       aliquotaCofinsStReais:
//           aliquotaCofinsStReais ?? this.aliquotaCofinsStReais,
//       valorCofinsSt: valorCofinsSt ?? this.valorCofinsSt,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idNfeDetalhe.present) {
//       map['ID_NFE_DETALHE'] = Variable<int?>(idNfeDetalhe.value);
//     }
//     if (baseCalculoCofinsSt.present) {
//       map['BASE_CALCULO_COFINS_ST'] =
//           Variable<double?>(baseCalculoCofinsSt.value);
//     }
//     if (aliquotaCofinsStPercentual.present) {
//       map['ALIQUOTA_COFINS_ST_PERCENTUAL'] =
//           Variable<double?>(aliquotaCofinsStPercentual.value);
//     }
//     if (quantidadeVendidaCofinsSt.present) {
//       map['QUANTIDADE_VENDIDA_COFINS_ST'] =
//           Variable<double?>(quantidadeVendidaCofinsSt.value);
//     }
//     if (aliquotaCofinsStReais.present) {
//       map['ALIQUOTA_COFINS_ST_REAIS'] =
//           Variable<double?>(aliquotaCofinsStReais.value);
//     }
//     if (valorCofinsSt.present) {
//       map['VALOR_COFINS_ST'] = Variable<double?>(valorCofinsSt.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeDetalheImpostoCofinsStsCompanion(')
//           ..write('id: $id, ')
//           ..write('idNfeDetalhe: $idNfeDetalhe, ')
//           ..write('baseCalculoCofinsSt: $baseCalculoCofinsSt, ')
//           ..write('aliquotaCofinsStPercentual: $aliquotaCofinsStPercentual, ')
//           ..write('quantidadeVendidaCofinsSt: $quantidadeVendidaCofinsSt, ')
//           ..write('aliquotaCofinsStReais: $aliquotaCofinsStReais, ')
//           ..write('valorCofinsSt: $valorCofinsSt')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeDetalheImpostoCofinsStsTable extends NfeDetalheImpostoCofinsSts
//     with
//         TableInfo<$NfeDetalheImpostoCofinsStsTable, NfeDetalheImpostoCofinsSt> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeDetalheImpostoCofinsStsTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idNfeDetalheMeta =
//       const VerificationMeta('idNfeDetalhe');
//   late final GeneratedColumn<int?> idNfeDetalhe = GeneratedColumn<int?>(
//       'ID_NFE_DETALHE', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES NFE_DETALHE(ID)');
//   final VerificationMeta _baseCalculoCofinsStMeta =
//       const VerificationMeta('baseCalculoCofinsSt');
//   late final GeneratedColumn<double?> baseCalculoCofinsSt =
//       GeneratedColumn<double?>('BASE_CALCULO_COFINS_ST', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _aliquotaCofinsStPercentualMeta =
//       const VerificationMeta('aliquotaCofinsStPercentual');
//   late final GeneratedColumn<double?> aliquotaCofinsStPercentual =
//       GeneratedColumn<double?>(
//           'ALIQUOTA_COFINS_ST_PERCENTUAL', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _quantidadeVendidaCofinsStMeta =
//       const VerificationMeta('quantidadeVendidaCofinsSt');
//   late final GeneratedColumn<double?> quantidadeVendidaCofinsSt =
//       GeneratedColumn<double?>(
//           'QUANTIDADE_VENDIDA_COFINS_ST', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _aliquotaCofinsStReaisMeta =
//       const VerificationMeta('aliquotaCofinsStReais');
//   late final GeneratedColumn<double?> aliquotaCofinsStReais =
//       GeneratedColumn<double?>('ALIQUOTA_COFINS_ST_REAIS', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorCofinsStMeta =
//       const VerificationMeta('valorCofinsSt');
//   late final GeneratedColumn<double?> valorCofinsSt = GeneratedColumn<double?>(
//       'VALOR_COFINS_ST', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idNfeDetalhe,
//         baseCalculoCofinsSt,
//         aliquotaCofinsStPercentual,
//         quantidadeVendidaCofinsSt,
//         aliquotaCofinsStReais,
//         valorCofinsSt
//       ];
//   @override
//   String get aliasedName => _alias ?? 'NFE_DETALHE_IMPOSTO_COFINS_ST';
//   @override
//   String get actualTableName => 'NFE_DETALHE_IMPOSTO_COFINS_ST';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<NfeDetalheImpostoCofinsSt> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_NFE_DETALHE')) {
//       context.handle(
//           _idNfeDetalheMeta,
//           idNfeDetalhe.isAcceptableOrUnknown(
//               data['ID_NFE_DETALHE']!, _idNfeDetalheMeta));
//     }
//     if (data.containsKey('BASE_CALCULO_COFINS_ST')) {
//       context.handle(
//           _baseCalculoCofinsStMeta,
//           baseCalculoCofinsSt.isAcceptableOrUnknown(
//               data['BASE_CALCULO_COFINS_ST']!, _baseCalculoCofinsStMeta));
//     }
//     if (data.containsKey('ALIQUOTA_COFINS_ST_PERCENTUAL')) {
//       context.handle(
//           _aliquotaCofinsStPercentualMeta,
//           aliquotaCofinsStPercentual.isAcceptableOrUnknown(
//               data['ALIQUOTA_COFINS_ST_PERCENTUAL']!,
//               _aliquotaCofinsStPercentualMeta));
//     }
//     if (data.containsKey('QUANTIDADE_VENDIDA_COFINS_ST')) {
//       context.handle(
//           _quantidadeVendidaCofinsStMeta,
//           quantidadeVendidaCofinsSt.isAcceptableOrUnknown(
//               data['QUANTIDADE_VENDIDA_COFINS_ST']!,
//               _quantidadeVendidaCofinsStMeta));
//     }
//     if (data.containsKey('ALIQUOTA_COFINS_ST_REAIS')) {
//       context.handle(
//           _aliquotaCofinsStReaisMeta,
//           aliquotaCofinsStReais.isAcceptableOrUnknown(
//               data['ALIQUOTA_COFINS_ST_REAIS']!, _aliquotaCofinsStReaisMeta));
//     }
//     if (data.containsKey('VALOR_COFINS_ST')) {
//       context.handle(
//           _valorCofinsStMeta,
//           valorCofinsSt.isAcceptableOrUnknown(
//               data['VALOR_COFINS_ST']!, _valorCofinsStMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeDetalheImpostoCofinsSt map(Map<String, dynamic> data,
//       {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeDetalheImpostoCofinsSt(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idNfeDetalhe: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_NFE_DETALHE']),
//       baseCalculoCofinsSt: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}BASE_CALCULO_COFINS_ST']),
//       aliquotaCofinsStPercentual: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ALIQUOTA_COFINS_ST_PERCENTUAL']),
//       quantidadeVendidaCofinsSt: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}QUANTIDADE_VENDIDA_COFINS_ST']),
//       aliquotaCofinsStReais: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ALIQUOTA_COFINS_ST_REAIS']),
//       valorCofinsSt: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_COFINS_ST']),
//     );
//   }

//   @override
//   $NfeDetalheImpostoCofinsStsTable createAlias(String alias) {
//     return $NfeDetalheImpostoCofinsStsTable(_db, alias);
//   }
// }

// class NfeDetalheImpostoIcmssCompanion
//     extends UpdateCompanion<NfeDetalheImpostoIcms> {
//   final Value<int> id;
//   final Value<int?> idNfeDetalhe;
//   final Value<String?> origemMercadoria;
//   final Value<String?> cstIcms;
//   final Value<String?> csosn;
//   final Value<String?> modalidadeBcIcms;
//   final Value<double?> percentualReducaoBcIcms;
//   final Value<double?> valorBcIcms;
//   final Value<double?> aliquotaIcms;
//   final Value<double?> valorIcmsOperacao;
//   final Value<double?> percentualDiferimento;
//   final Value<double?> valorIcmsDiferido;
//   final Value<double?> valorIcms;
//   final Value<double?> baseCalculoFcp;
//   final Value<double?> percentualFcp;
//   final Value<double?> valorFcp;
//   final Value<String?> modalidadeBcIcmsSt;
//   final Value<double?> percentualMvaIcmsSt;
//   final Value<double?> percentualReducaoBcIcmsSt;
//   final Value<double?> valorBaseCalculoIcmsSt;
//   final Value<double?> aliquotaIcmsSt;
//   final Value<double?> valorIcmsSt;
//   final Value<double?> baseCalculoFcpSt;
//   final Value<double?> percentualFcpSt;
//   final Value<double?> valorFcpSt;
//   final Value<String?> ufSt;
//   final Value<double?> percentualBcOperacaoPropria;
//   final Value<double?> valorBcIcmsStRetido;
//   final Value<double?> aliquotaSuportadaConsumidor;
//   final Value<double?> valorIcmsSubstituto;
//   final Value<double?> valorIcmsStRetido;
//   final Value<double?> baseCalculoFcpStRetido;
//   final Value<double?> percentualFcpStRetido;
//   final Value<double?> valorFcpStRetido;
//   final Value<String?> motivoDesoneracaoIcms;
//   final Value<double?> valorIcmsDesonerado;
//   final Value<double?> aliquotaCreditoIcmsSn;
//   final Value<double?> valorCreditoIcmsSn;
//   final Value<double?> valorBcIcmsStDestino;
//   final Value<double?> valorIcmsStDestino;
//   final Value<double?> percentualReducaoBcEfetivo;
//   final Value<double?> valorBcEfetivo;
//   final Value<double?> aliquotaIcmsEfetivo;
//   final Value<double?> valorIcmsEfetivo;
//   const NfeDetalheImpostoIcmssCompanion({
//     this.id = const Value.absent(),
//     this.idNfeDetalhe = const Value.absent(),
//     this.origemMercadoria = const Value.absent(),
//     this.cstIcms = const Value.absent(),
//     this.csosn = const Value.absent(),
//     this.modalidadeBcIcms = const Value.absent(),
//     this.percentualReducaoBcIcms = const Value.absent(),
//     this.valorBcIcms = const Value.absent(),
//     this.aliquotaIcms = const Value.absent(),
//     this.valorIcmsOperacao = const Value.absent(),
//     this.percentualDiferimento = const Value.absent(),
//     this.valorIcmsDiferido = const Value.absent(),
//     this.valorIcms = const Value.absent(),
//     this.baseCalculoFcp = const Value.absent(),
//     this.percentualFcp = const Value.absent(),
//     this.valorFcp = const Value.absent(),
//     this.modalidadeBcIcmsSt = const Value.absent(),
//     this.percentualMvaIcmsSt = const Value.absent(),
//     this.percentualReducaoBcIcmsSt = const Value.absent(),
//     this.valorBaseCalculoIcmsSt = const Value.absent(),
//     this.aliquotaIcmsSt = const Value.absent(),
//     this.valorIcmsSt = const Value.absent(),
//     this.baseCalculoFcpSt = const Value.absent(),
//     this.percentualFcpSt = const Value.absent(),
//     this.valorFcpSt = const Value.absent(),
//     this.ufSt = const Value.absent(),
//     this.percentualBcOperacaoPropria = const Value.absent(),
//     this.valorBcIcmsStRetido = const Value.absent(),
//     this.aliquotaSuportadaConsumidor = const Value.absent(),
//     this.valorIcmsSubstituto = const Value.absent(),
//     this.valorIcmsStRetido = const Value.absent(),
//     this.baseCalculoFcpStRetido = const Value.absent(),
//     this.percentualFcpStRetido = const Value.absent(),
//     this.valorFcpStRetido = const Value.absent(),
//     this.motivoDesoneracaoIcms = const Value.absent(),
//     this.valorIcmsDesonerado = const Value.absent(),
//     this.aliquotaCreditoIcmsSn = const Value.absent(),
//     this.valorCreditoIcmsSn = const Value.absent(),
//     this.valorBcIcmsStDestino = const Value.absent(),
//     this.valorIcmsStDestino = const Value.absent(),
//     this.percentualReducaoBcEfetivo = const Value.absent(),
//     this.valorBcEfetivo = const Value.absent(),
//     this.aliquotaIcmsEfetivo = const Value.absent(),
//     this.valorIcmsEfetivo = const Value.absent(),
//   });
//   NfeDetalheImpostoIcmssCompanion.insert({
//     this.id = const Value.absent(),
//     this.idNfeDetalhe = const Value.absent(),
//     this.origemMercadoria = const Value.absent(),
//     this.cstIcms = const Value.absent(),
//     this.csosn = const Value.absent(),
//     this.modalidadeBcIcms = const Value.absent(),
//     this.percentualReducaoBcIcms = const Value.absent(),
//     this.valorBcIcms = const Value.absent(),
//     this.aliquotaIcms = const Value.absent(),
//     this.valorIcmsOperacao = const Value.absent(),
//     this.percentualDiferimento = const Value.absent(),
//     this.valorIcmsDiferido = const Value.absent(),
//     this.valorIcms = const Value.absent(),
//     this.baseCalculoFcp = const Value.absent(),
//     this.percentualFcp = const Value.absent(),
//     this.valorFcp = const Value.absent(),
//     this.modalidadeBcIcmsSt = const Value.absent(),
//     this.percentualMvaIcmsSt = const Value.absent(),
//     this.percentualReducaoBcIcmsSt = const Value.absent(),
//     this.valorBaseCalculoIcmsSt = const Value.absent(),
//     this.aliquotaIcmsSt = const Value.absent(),
//     this.valorIcmsSt = const Value.absent(),
//     this.baseCalculoFcpSt = const Value.absent(),
//     this.percentualFcpSt = const Value.absent(),
//     this.valorFcpSt = const Value.absent(),
//     this.ufSt = const Value.absent(),
//     this.percentualBcOperacaoPropria = const Value.absent(),
//     this.valorBcIcmsStRetido = const Value.absent(),
//     this.aliquotaSuportadaConsumidor = const Value.absent(),
//     this.valorIcmsSubstituto = const Value.absent(),
//     this.valorIcmsStRetido = const Value.absent(),
//     this.baseCalculoFcpStRetido = const Value.absent(),
//     this.percentualFcpStRetido = const Value.absent(),
//     this.valorFcpStRetido = const Value.absent(),
//     this.motivoDesoneracaoIcms = const Value.absent(),
//     this.valorIcmsDesonerado = const Value.absent(),
//     this.aliquotaCreditoIcmsSn = const Value.absent(),
//     this.valorCreditoIcmsSn = const Value.absent(),
//     this.valorBcIcmsStDestino = const Value.absent(),
//     this.valorIcmsStDestino = const Value.absent(),
//     this.percentualReducaoBcEfetivo = const Value.absent(),
//     this.valorBcEfetivo = const Value.absent(),
//     this.aliquotaIcmsEfetivo = const Value.absent(),
//     this.valorIcmsEfetivo = const Value.absent(),
//   });
//   static Insertable<NfeDetalheImpostoIcms> custom({
//     Expression<int>? id,
//     Expression<int?>? idNfeDetalhe,
//     Expression<String?>? origemMercadoria,
//     Expression<String?>? cstIcms,
//     Expression<String?>? csosn,
//     Expression<String?>? modalidadeBcIcms,
//     Expression<double?>? percentualReducaoBcIcms,
//     Expression<double?>? valorBcIcms,
//     Expression<double?>? aliquotaIcms,
//     Expression<double?>? valorIcmsOperacao,
//     Expression<double?>? percentualDiferimento,
//     Expression<double?>? valorIcmsDiferido,
//     Expression<double?>? valorIcms,
//     Expression<double?>? baseCalculoFcp,
//     Expression<double?>? percentualFcp,
//     Expression<double?>? valorFcp,
//     Expression<String?>? modalidadeBcIcmsSt,
//     Expression<double?>? percentualMvaIcmsSt,
//     Expression<double?>? percentualReducaoBcIcmsSt,
//     Expression<double?>? valorBaseCalculoIcmsSt,
//     Expression<double?>? aliquotaIcmsSt,
//     Expression<double?>? valorIcmsSt,
//     Expression<double?>? baseCalculoFcpSt,
//     Expression<double?>? percentualFcpSt,
//     Expression<double?>? valorFcpSt,
//     Expression<String?>? ufSt,
//     Expression<double?>? percentualBcOperacaoPropria,
//     Expression<double?>? valorBcIcmsStRetido,
//     Expression<double?>? aliquotaSuportadaConsumidor,
//     Expression<double?>? valorIcmsSubstituto,
//     Expression<double?>? valorIcmsStRetido,
//     Expression<double?>? baseCalculoFcpStRetido,
//     Expression<double?>? percentualFcpStRetido,
//     Expression<double?>? valorFcpStRetido,
//     Expression<String?>? motivoDesoneracaoIcms,
//     Expression<double?>? valorIcmsDesonerado,
//     Expression<double?>? aliquotaCreditoIcmsSn,
//     Expression<double?>? valorCreditoIcmsSn,
//     Expression<double?>? valorBcIcmsStDestino,
//     Expression<double?>? valorIcmsStDestino,
//     Expression<double?>? percentualReducaoBcEfetivo,
//     Expression<double?>? valorBcEfetivo,
//     Expression<double?>? aliquotaIcmsEfetivo,
//     Expression<double?>? valorIcmsEfetivo,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idNfeDetalhe != null) 'ID_NFE_DETALHE': idNfeDetalhe,
//       if (origemMercadoria != null) 'ORIGEM_MERCADORIA': origemMercadoria,
//       if (cstIcms != null) 'CST_ICMS': cstIcms,
//       if (csosn != null) 'CSOSN': csosn,
//       if (modalidadeBcIcms != null) 'MODALIDADE_BC_ICMS': modalidadeBcIcms,
//       if (percentualReducaoBcIcms != null)
//         'PERCENTUAL_REDUCAO_BC_ICMS': percentualReducaoBcIcms,
//       if (valorBcIcms != null) 'VALOR_BC_ICMS': valorBcIcms,
//       if (aliquotaIcms != null) 'ALIQUOTA_ICMS': aliquotaIcms,
//       if (valorIcmsOperacao != null) 'VALOR_ICMS_OPERACAO': valorIcmsOperacao,
//       if (percentualDiferimento != null)
//         'PERCENTUAL_DIFERIMENTO': percentualDiferimento,
//       if (valorIcmsDiferido != null) 'VALOR_ICMS_DIFERIDO': valorIcmsDiferido,
//       if (valorIcms != null) 'VALOR_ICMS': valorIcms,
//       if (baseCalculoFcp != null) 'BASE_CALCULO_FCP': baseCalculoFcp,
//       if (percentualFcp != null) 'PERCENTUAL_FCP': percentualFcp,
//       if (valorFcp != null) 'VALOR_FCP': valorFcp,
//       if (modalidadeBcIcmsSt != null)
//         'MODALIDADE_BC_ICMS_ST': modalidadeBcIcmsSt,
//       if (percentualMvaIcmsSt != null)
//         'PERCENTUAL_MVA_ICMS_ST': percentualMvaIcmsSt,
//       if (percentualReducaoBcIcmsSt != null)
//         'PERCENTUAL_REDUCAO_BC_ICMS_ST': percentualReducaoBcIcmsSt,
//       if (valorBaseCalculoIcmsSt != null)
//         'VALOR_BASE_CALCULO_ICMS_ST': valorBaseCalculoIcmsSt,
//       if (aliquotaIcmsSt != null) 'ALIQUOTA_ICMS_ST': aliquotaIcmsSt,
//       if (valorIcmsSt != null) 'VALOR_ICMS_ST': valorIcmsSt,
//       if (baseCalculoFcpSt != null) 'BASE_CALCULO_FCP_ST': baseCalculoFcpSt,
//       if (percentualFcpSt != null) 'PERCENTUAL_FCP_ST': percentualFcpSt,
//       if (valorFcpSt != null) 'VALOR_FCP_ST': valorFcpSt,
//       if (ufSt != null) 'UF_ST': ufSt,
//       if (percentualBcOperacaoPropria != null)
//         'PERCENTUAL_BC_OPERACAO_PROPRIA': percentualBcOperacaoPropria,
//       if (valorBcIcmsStRetido != null)
//         'VALOR_BC_ICMS_ST_RETIDO': valorBcIcmsStRetido,
//       if (aliquotaSuportadaConsumidor != null)
//         'ALIQUOTA_SUPORTADA_CONSUMIDOR': aliquotaSuportadaConsumidor,
//       if (valorIcmsSubstituto != null)
//         'VALOR_ICMS_SUBSTITUTO': valorIcmsSubstituto,
//       if (valorIcmsStRetido != null) 'VALOR_ICMS_ST_RETIDO': valorIcmsStRetido,
//       if (baseCalculoFcpStRetido != null)
//         'BASE_CALCULO_FCP_ST_RETIDO': baseCalculoFcpStRetido,
//       if (percentualFcpStRetido != null)
//         'PERCENTUAL_FCP_ST_RETIDO': percentualFcpStRetido,
//       if (valorFcpStRetido != null) 'VALOR_FCP_ST_RETIDO': valorFcpStRetido,
//       if (motivoDesoneracaoIcms != null)
//         'MOTIVO_DESONERACAO_ICMS': motivoDesoneracaoIcms,
//       if (valorIcmsDesonerado != null)
//         'VALOR_ICMS_DESONERADO': valorIcmsDesonerado,
//       if (aliquotaCreditoIcmsSn != null)
//         'ALIQUOTA_CREDITO_ICMS_SN': aliquotaCreditoIcmsSn,
//       if (valorCreditoIcmsSn != null)
//         'VALOR_CREDITO_ICMS_SN': valorCreditoIcmsSn,
//       if (valorBcIcmsStDestino != null)
//         'VALOR_BC_ICMS_ST_DESTINO': valorBcIcmsStDestino,
//       if (valorIcmsStDestino != null)
//         'VALOR_ICMS_ST_DESTINO': valorIcmsStDestino,
//       if (percentualReducaoBcEfetivo != null)
//         'PERCENTUAL_REDUCAO_BC_EFETIVO': percentualReducaoBcEfetivo,
//       if (valorBcEfetivo != null) 'VALOR_BC_EFETIVO': valorBcEfetivo,
//       if (aliquotaIcmsEfetivo != null)
//         'ALIQUOTA_ICMS_EFETIVO': aliquotaIcmsEfetivo,
//       if (valorIcmsEfetivo != null) 'VALOR_ICMS_EFETIVO': valorIcmsEfetivo,
//     });
//   }

//   NfeDetalheImpostoIcmssCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idNfeDetalhe,
//       Value<String?>? origemMercadoria,
//       Value<String?>? cstIcms,
//       Value<String?>? csosn,
//       Value<String?>? modalidadeBcIcms,
//       Value<double?>? percentualReducaoBcIcms,
//       Value<double?>? valorBcIcms,
//       Value<double?>? aliquotaIcms,
//       Value<double?>? valorIcmsOperacao,
//       Value<double?>? percentualDiferimento,
//       Value<double?>? valorIcmsDiferido,
//       Value<double?>? valorIcms,
//       Value<double?>? baseCalculoFcp,
//       Value<double?>? percentualFcp,
//       Value<double?>? valorFcp,
//       Value<String?>? modalidadeBcIcmsSt,
//       Value<double?>? percentualMvaIcmsSt,
//       Value<double?>? percentualReducaoBcIcmsSt,
//       Value<double?>? valorBaseCalculoIcmsSt,
//       Value<double?>? aliquotaIcmsSt,
//       Value<double?>? valorIcmsSt,
//       Value<double?>? baseCalculoFcpSt,
//       Value<double?>? percentualFcpSt,
//       Value<double?>? valorFcpSt,
//       Value<String?>? ufSt,
//       Value<double?>? percentualBcOperacaoPropria,
//       Value<double?>? valorBcIcmsStRetido,
//       Value<double?>? aliquotaSuportadaConsumidor,
//       Value<double?>? valorIcmsSubstituto,
//       Value<double?>? valorIcmsStRetido,
//       Value<double?>? baseCalculoFcpStRetido,
//       Value<double?>? percentualFcpStRetido,
//       Value<double?>? valorFcpStRetido,
//       Value<String?>? motivoDesoneracaoIcms,
//       Value<double?>? valorIcmsDesonerado,
//       Value<double?>? aliquotaCreditoIcmsSn,
//       Value<double?>? valorCreditoIcmsSn,
//       Value<double?>? valorBcIcmsStDestino,
//       Value<double?>? valorIcmsStDestino,
//       Value<double?>? percentualReducaoBcEfetivo,
//       Value<double?>? valorBcEfetivo,
//       Value<double?>? aliquotaIcmsEfetivo,
//       Value<double?>? valorIcmsEfetivo}) {
//     return NfeDetalheImpostoIcmssCompanion(
//       id: id ?? this.id,
//       idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
//       origemMercadoria: origemMercadoria ?? this.origemMercadoria,
//       cstIcms: cstIcms ?? this.cstIcms,
//       csosn: csosn ?? this.csosn,
//       modalidadeBcIcms: modalidadeBcIcms ?? this.modalidadeBcIcms,
//       percentualReducaoBcIcms:
//           percentualReducaoBcIcms ?? this.percentualReducaoBcIcms,
//       valorBcIcms: valorBcIcms ?? this.valorBcIcms,
//       aliquotaIcms: aliquotaIcms ?? this.aliquotaIcms,
//       valorIcmsOperacao: valorIcmsOperacao ?? this.valorIcmsOperacao,
//       percentualDiferimento:
//           percentualDiferimento ?? this.percentualDiferimento,
//       valorIcmsDiferido: valorIcmsDiferido ?? this.valorIcmsDiferido,
//       valorIcms: valorIcms ?? this.valorIcms,
//       baseCalculoFcp: baseCalculoFcp ?? this.baseCalculoFcp,
//       percentualFcp: percentualFcp ?? this.percentualFcp,
//       valorFcp: valorFcp ?? this.valorFcp,
//       modalidadeBcIcmsSt: modalidadeBcIcmsSt ?? this.modalidadeBcIcmsSt,
//       percentualMvaIcmsSt: percentualMvaIcmsSt ?? this.percentualMvaIcmsSt,
//       percentualReducaoBcIcmsSt:
//           percentualReducaoBcIcmsSt ?? this.percentualReducaoBcIcmsSt,
//       valorBaseCalculoIcmsSt:
//           valorBaseCalculoIcmsSt ?? this.valorBaseCalculoIcmsSt,
//       aliquotaIcmsSt: aliquotaIcmsSt ?? this.aliquotaIcmsSt,
//       valorIcmsSt: valorIcmsSt ?? this.valorIcmsSt,
//       baseCalculoFcpSt: baseCalculoFcpSt ?? this.baseCalculoFcpSt,
//       percentualFcpSt: percentualFcpSt ?? this.percentualFcpSt,
//       valorFcpSt: valorFcpSt ?? this.valorFcpSt,
//       ufSt: ufSt ?? this.ufSt,
//       percentualBcOperacaoPropria:
//           percentualBcOperacaoPropria ?? this.percentualBcOperacaoPropria,
//       valorBcIcmsStRetido: valorBcIcmsStRetido ?? this.valorBcIcmsStRetido,
//       aliquotaSuportadaConsumidor:
//           aliquotaSuportadaConsumidor ?? this.aliquotaSuportadaConsumidor,
//       valorIcmsSubstituto: valorIcmsSubstituto ?? this.valorIcmsSubstituto,
//       valorIcmsStRetido: valorIcmsStRetido ?? this.valorIcmsStRetido,
//       baseCalculoFcpStRetido:
//           baseCalculoFcpStRetido ?? this.baseCalculoFcpStRetido,
//       percentualFcpStRetido:
//           percentualFcpStRetido ?? this.percentualFcpStRetido,
//       valorFcpStRetido: valorFcpStRetido ?? this.valorFcpStRetido,
//       motivoDesoneracaoIcms:
//           motivoDesoneracaoIcms ?? this.motivoDesoneracaoIcms,
//       valorIcmsDesonerado: valorIcmsDesonerado ?? this.valorIcmsDesonerado,
//       aliquotaCreditoIcmsSn:
//           aliquotaCreditoIcmsSn ?? this.aliquotaCreditoIcmsSn,
//       valorCreditoIcmsSn: valorCreditoIcmsSn ?? this.valorCreditoIcmsSn,
//       valorBcIcmsStDestino: valorBcIcmsStDestino ?? this.valorBcIcmsStDestino,
//       valorIcmsStDestino: valorIcmsStDestino ?? this.valorIcmsStDestino,
//       percentualReducaoBcEfetivo:
//           percentualReducaoBcEfetivo ?? this.percentualReducaoBcEfetivo,
//       valorBcEfetivo: valorBcEfetivo ?? this.valorBcEfetivo,
//       aliquotaIcmsEfetivo: aliquotaIcmsEfetivo ?? this.aliquotaIcmsEfetivo,
//       valorIcmsEfetivo: valorIcmsEfetivo ?? this.valorIcmsEfetivo,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idNfeDetalhe.present) {
//       map['ID_NFE_DETALHE'] = Variable<int?>(idNfeDetalhe.value);
//     }
//     if (origemMercadoria.present) {
//       map['ORIGEM_MERCADORIA'] = Variable<String?>(origemMercadoria.value);
//     }
//     if (cstIcms.present) {
//       map['CST_ICMS'] = Variable<String?>(cstIcms.value);
//     }
//     if (csosn.present) {
//       map['CSOSN'] = Variable<String?>(csosn.value);
//     }
//     if (modalidadeBcIcms.present) {
//       map['MODALIDADE_BC_ICMS'] = Variable<String?>(modalidadeBcIcms.value);
//     }
//     if (percentualReducaoBcIcms.present) {
//       map['PERCENTUAL_REDUCAO_BC_ICMS'] =
//           Variable<double?>(percentualReducaoBcIcms.value);
//     }
//     if (valorBcIcms.present) {
//       map['VALOR_BC_ICMS'] = Variable<double?>(valorBcIcms.value);
//     }
//     if (aliquotaIcms.present) {
//       map['ALIQUOTA_ICMS'] = Variable<double?>(aliquotaIcms.value);
//     }
//     if (valorIcmsOperacao.present) {
//       map['VALOR_ICMS_OPERACAO'] = Variable<double?>(valorIcmsOperacao.value);
//     }
//     if (percentualDiferimento.present) {
//       map['PERCENTUAL_DIFERIMENTO'] =
//           Variable<double?>(percentualDiferimento.value);
//     }
//     if (valorIcmsDiferido.present) {
//       map['VALOR_ICMS_DIFERIDO'] = Variable<double?>(valorIcmsDiferido.value);
//     }
//     if (valorIcms.present) {
//       map['VALOR_ICMS'] = Variable<double?>(valorIcms.value);
//     }
//     if (baseCalculoFcp.present) {
//       map['BASE_CALCULO_FCP'] = Variable<double?>(baseCalculoFcp.value);
//     }
//     if (percentualFcp.present) {
//       map['PERCENTUAL_FCP'] = Variable<double?>(percentualFcp.value);
//     }
//     if (valorFcp.present) {
//       map['VALOR_FCP'] = Variable<double?>(valorFcp.value);
//     }
//     if (modalidadeBcIcmsSt.present) {
//       map['MODALIDADE_BC_ICMS_ST'] =
//           Variable<String?>(modalidadeBcIcmsSt.value);
//     }
//     if (percentualMvaIcmsSt.present) {
//       map['PERCENTUAL_MVA_ICMS_ST'] =
//           Variable<double?>(percentualMvaIcmsSt.value);
//     }
//     if (percentualReducaoBcIcmsSt.present) {
//       map['PERCENTUAL_REDUCAO_BC_ICMS_ST'] =
//           Variable<double?>(percentualReducaoBcIcmsSt.value);
//     }
//     if (valorBaseCalculoIcmsSt.present) {
//       map['VALOR_BASE_CALCULO_ICMS_ST'] =
//           Variable<double?>(valorBaseCalculoIcmsSt.value);
//     }
//     if (aliquotaIcmsSt.present) {
//       map['ALIQUOTA_ICMS_ST'] = Variable<double?>(aliquotaIcmsSt.value);
//     }
//     if (valorIcmsSt.present) {
//       map['VALOR_ICMS_ST'] = Variable<double?>(valorIcmsSt.value);
//     }
//     if (baseCalculoFcpSt.present) {
//       map['BASE_CALCULO_FCP_ST'] = Variable<double?>(baseCalculoFcpSt.value);
//     }
//     if (percentualFcpSt.present) {
//       map['PERCENTUAL_FCP_ST'] = Variable<double?>(percentualFcpSt.value);
//     }
//     if (valorFcpSt.present) {
//       map['VALOR_FCP_ST'] = Variable<double?>(valorFcpSt.value);
//     }
//     if (ufSt.present) {
//       map['UF_ST'] = Variable<String?>(ufSt.value);
//     }
//     if (percentualBcOperacaoPropria.present) {
//       map['PERCENTUAL_BC_OPERACAO_PROPRIA'] =
//           Variable<double?>(percentualBcOperacaoPropria.value);
//     }
//     if (valorBcIcmsStRetido.present) {
//       map['VALOR_BC_ICMS_ST_RETIDO'] =
//           Variable<double?>(valorBcIcmsStRetido.value);
//     }
//     if (aliquotaSuportadaConsumidor.present) {
//       map['ALIQUOTA_SUPORTADA_CONSUMIDOR'] =
//           Variable<double?>(aliquotaSuportadaConsumidor.value);
//     }
//     if (valorIcmsSubstituto.present) {
//       map['VALOR_ICMS_SUBSTITUTO'] =
//           Variable<double?>(valorIcmsSubstituto.value);
//     }
//     if (valorIcmsStRetido.present) {
//       map['VALOR_ICMS_ST_RETIDO'] = Variable<double?>(valorIcmsStRetido.value);
//     }
//     if (baseCalculoFcpStRetido.present) {
//       map['BASE_CALCULO_FCP_ST_RETIDO'] =
//           Variable<double?>(baseCalculoFcpStRetido.value);
//     }
//     if (percentualFcpStRetido.present) {
//       map['PERCENTUAL_FCP_ST_RETIDO'] =
//           Variable<double?>(percentualFcpStRetido.value);
//     }
//     if (valorFcpStRetido.present) {
//       map['VALOR_FCP_ST_RETIDO'] = Variable<double?>(valorFcpStRetido.value);
//     }
//     if (motivoDesoneracaoIcms.present) {
//       map['MOTIVO_DESONERACAO_ICMS'] =
//           Variable<String?>(motivoDesoneracaoIcms.value);
//     }
//     if (valorIcmsDesonerado.present) {
//       map['VALOR_ICMS_DESONERADO'] =
//           Variable<double?>(valorIcmsDesonerado.value);
//     }
//     if (aliquotaCreditoIcmsSn.present) {
//       map['ALIQUOTA_CREDITO_ICMS_SN'] =
//           Variable<double?>(aliquotaCreditoIcmsSn.value);
//     }
//     if (valorCreditoIcmsSn.present) {
//       map['VALOR_CREDITO_ICMS_SN'] =
//           Variable<double?>(valorCreditoIcmsSn.value);
//     }
//     if (valorBcIcmsStDestino.present) {
//       map['VALOR_BC_ICMS_ST_DESTINO'] =
//           Variable<double?>(valorBcIcmsStDestino.value);
//     }
//     if (valorIcmsStDestino.present) {
//       map['VALOR_ICMS_ST_DESTINO'] =
//           Variable<double?>(valorIcmsStDestino.value);
//     }
//     if (percentualReducaoBcEfetivo.present) {
//       map['PERCENTUAL_REDUCAO_BC_EFETIVO'] =
//           Variable<double?>(percentualReducaoBcEfetivo.value);
//     }
//     if (valorBcEfetivo.present) {
//       map['VALOR_BC_EFETIVO'] = Variable<double?>(valorBcEfetivo.value);
//     }
//     if (aliquotaIcmsEfetivo.present) {
//       map['ALIQUOTA_ICMS_EFETIVO'] =
//           Variable<double?>(aliquotaIcmsEfetivo.value);
//     }
//     if (valorIcmsEfetivo.present) {
//       map['VALOR_ICMS_EFETIVO'] = Variable<double?>(valorIcmsEfetivo.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeDetalheImpostoIcmssCompanion(')
//           ..write('id: $id, ')
//           ..write('idNfeDetalhe: $idNfeDetalhe, ')
//           ..write('origemMercadoria: $origemMercadoria, ')
//           ..write('cstIcms: $cstIcms, ')
//           ..write('csosn: $csosn, ')
//           ..write('modalidadeBcIcms: $modalidadeBcIcms, ')
//           ..write('percentualReducaoBcIcms: $percentualReducaoBcIcms, ')
//           ..write('valorBcIcms: $valorBcIcms, ')
//           ..write('aliquotaIcms: $aliquotaIcms, ')
//           ..write('valorIcmsOperacao: $valorIcmsOperacao, ')
//           ..write('percentualDiferimento: $percentualDiferimento, ')
//           ..write('valorIcmsDiferido: $valorIcmsDiferido, ')
//           ..write('valorIcms: $valorIcms, ')
//           ..write('baseCalculoFcp: $baseCalculoFcp, ')
//           ..write('percentualFcp: $percentualFcp, ')
//           ..write('valorFcp: $valorFcp, ')
//           ..write('modalidadeBcIcmsSt: $modalidadeBcIcmsSt, ')
//           ..write('percentualMvaIcmsSt: $percentualMvaIcmsSt, ')
//           ..write('percentualReducaoBcIcmsSt: $percentualReducaoBcIcmsSt, ')
//           ..write('valorBaseCalculoIcmsSt: $valorBaseCalculoIcmsSt, ')
//           ..write('aliquotaIcmsSt: $aliquotaIcmsSt, ')
//           ..write('valorIcmsSt: $valorIcmsSt, ')
//           ..write('baseCalculoFcpSt: $baseCalculoFcpSt, ')
//           ..write('percentualFcpSt: $percentualFcpSt, ')
//           ..write('valorFcpSt: $valorFcpSt, ')
//           ..write('ufSt: $ufSt, ')
//           ..write('percentualBcOperacaoPropria: $percentualBcOperacaoPropria, ')
//           ..write('valorBcIcmsStRetido: $valorBcIcmsStRetido, ')
//           ..write('aliquotaSuportadaConsumidor: $aliquotaSuportadaConsumidor, ')
//           ..write('valorIcmsSubstituto: $valorIcmsSubstituto, ')
//           ..write('valorIcmsStRetido: $valorIcmsStRetido, ')
//           ..write('baseCalculoFcpStRetido: $baseCalculoFcpStRetido, ')
//           ..write('percentualFcpStRetido: $percentualFcpStRetido, ')
//           ..write('valorFcpStRetido: $valorFcpStRetido, ')
//           ..write('motivoDesoneracaoIcms: $motivoDesoneracaoIcms, ')
//           ..write('valorIcmsDesonerado: $valorIcmsDesonerado, ')
//           ..write('aliquotaCreditoIcmsSn: $aliquotaCreditoIcmsSn, ')
//           ..write('valorCreditoIcmsSn: $valorCreditoIcmsSn, ')
//           ..write('valorBcIcmsStDestino: $valorBcIcmsStDestino, ')
//           ..write('valorIcmsStDestino: $valorIcmsStDestino, ')
//           ..write('percentualReducaoBcEfetivo: $percentualReducaoBcEfetivo, ')
//           ..write('valorBcEfetivo: $valorBcEfetivo, ')
//           ..write('aliquotaIcmsEfetivo: $aliquotaIcmsEfetivo, ')
//           ..write('valorIcmsEfetivo: $valorIcmsEfetivo')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeDetalheImpostoIcmssTable extends NfeDetalheImpostoIcmss
//     with TableInfo<$NfeDetalheImpostoIcmssTable, NfeDetalheImpostoIcms> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeDetalheImpostoIcmssTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idNfeDetalheMeta =
//       const VerificationMeta('idNfeDetalhe');
//   late final GeneratedColumn<int?> idNfeDetalhe = GeneratedColumn<int?>(
//       'ID_NFE_DETALHE', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES NFE_DETALHE(ID)');
//   final VerificationMeta _origemMercadoriaMeta =
//       const VerificationMeta('origemMercadoria');
//   late final GeneratedColumn<String?> origemMercadoria =
//       GeneratedColumn<String?>('ORIGEM_MERCADORIA', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _cstIcmsMeta = const VerificationMeta('cstIcms');
//   late final GeneratedColumn<String?> cstIcms = GeneratedColumn<String?>(
//       'CST_ICMS', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _csosnMeta = const VerificationMeta('csosn');
//   late final GeneratedColumn<String?> csosn = GeneratedColumn<String?>(
//       'CSOSN', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 3),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _modalidadeBcIcmsMeta =
//       const VerificationMeta('modalidadeBcIcms');
//   late final GeneratedColumn<String?> modalidadeBcIcms =
//       GeneratedColumn<String?>('MODALIDADE_BC_ICMS', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _percentualReducaoBcIcmsMeta =
//       const VerificationMeta('percentualReducaoBcIcms');
//   late final GeneratedColumn<double?> percentualReducaoBcIcms =
//       GeneratedColumn<double?>('PERCENTUAL_REDUCAO_BC_ICMS', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorBcIcmsMeta =
//       const VerificationMeta('valorBcIcms');
//   late final GeneratedColumn<double?> valorBcIcms = GeneratedColumn<double?>(
//       'VALOR_BC_ICMS', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _aliquotaIcmsMeta =
//       const VerificationMeta('aliquotaIcms');
//   late final GeneratedColumn<double?> aliquotaIcms = GeneratedColumn<double?>(
//       'ALIQUOTA_ICMS', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorIcmsOperacaoMeta =
//       const VerificationMeta('valorIcmsOperacao');
//   late final GeneratedColumn<double?> valorIcmsOperacao =
//       GeneratedColumn<double?>('VALOR_ICMS_OPERACAO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _percentualDiferimentoMeta =
//       const VerificationMeta('percentualDiferimento');
//   late final GeneratedColumn<double?> percentualDiferimento =
//       GeneratedColumn<double?>('PERCENTUAL_DIFERIMENTO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorIcmsDiferidoMeta =
//       const VerificationMeta('valorIcmsDiferido');
//   late final GeneratedColumn<double?> valorIcmsDiferido =
//       GeneratedColumn<double?>('VALOR_ICMS_DIFERIDO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorIcmsMeta = const VerificationMeta('valorIcms');
//   late final GeneratedColumn<double?> valorIcms = GeneratedColumn<double?>(
//       'VALOR_ICMS', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _baseCalculoFcpMeta =
//       const VerificationMeta('baseCalculoFcp');
//   late final GeneratedColumn<double?> baseCalculoFcp = GeneratedColumn<double?>(
//       'BASE_CALCULO_FCP', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _percentualFcpMeta =
//       const VerificationMeta('percentualFcp');
//   late final GeneratedColumn<double?> percentualFcp = GeneratedColumn<double?>(
//       'PERCENTUAL_FCP', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorFcpMeta = const VerificationMeta('valorFcp');
//   late final GeneratedColumn<double?> valorFcp = GeneratedColumn<double?>(
//       'VALOR_FCP', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _modalidadeBcIcmsStMeta =
//       const VerificationMeta('modalidadeBcIcmsSt');
//   late final GeneratedColumn<String?> modalidadeBcIcmsSt =
//       GeneratedColumn<String?>(
//           'MODALIDADE_BC_ICMS_ST', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _percentualMvaIcmsStMeta =
//       const VerificationMeta('percentualMvaIcmsSt');
//   late final GeneratedColumn<double?> percentualMvaIcmsSt =
//       GeneratedColumn<double?>('PERCENTUAL_MVA_ICMS_ST', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _percentualReducaoBcIcmsStMeta =
//       const VerificationMeta('percentualReducaoBcIcmsSt');
//   late final GeneratedColumn<double?> percentualReducaoBcIcmsSt =
//       GeneratedColumn<double?>(
//           'PERCENTUAL_REDUCAO_BC_ICMS_ST', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorBaseCalculoIcmsStMeta =
//       const VerificationMeta('valorBaseCalculoIcmsSt');
//   late final GeneratedColumn<double?> valorBaseCalculoIcmsSt =
//       GeneratedColumn<double?>('VALOR_BASE_CALCULO_ICMS_ST', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _aliquotaIcmsStMeta =
//       const VerificationMeta('aliquotaIcmsSt');
//   late final GeneratedColumn<double?> aliquotaIcmsSt = GeneratedColumn<double?>(
//       'ALIQUOTA_ICMS_ST', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorIcmsStMeta =
//       const VerificationMeta('valorIcmsSt');
//   late final GeneratedColumn<double?> valorIcmsSt = GeneratedColumn<double?>(
//       'VALOR_ICMS_ST', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _baseCalculoFcpStMeta =
//       const VerificationMeta('baseCalculoFcpSt');
//   late final GeneratedColumn<double?> baseCalculoFcpSt =
//       GeneratedColumn<double?>('BASE_CALCULO_FCP_ST', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _percentualFcpStMeta =
//       const VerificationMeta('percentualFcpSt');
//   late final GeneratedColumn<double?> percentualFcpSt =
//       GeneratedColumn<double?>('PERCENTUAL_FCP_ST', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorFcpStMeta = const VerificationMeta('valorFcpSt');
//   late final GeneratedColumn<double?> valorFcpSt = GeneratedColumn<double?>(
//       'VALOR_FCP_ST', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _ufStMeta = const VerificationMeta('ufSt');
//   late final GeneratedColumn<String?> ufSt = GeneratedColumn<String?>(
//       'UF_ST', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _percentualBcOperacaoPropriaMeta =
//       const VerificationMeta('percentualBcOperacaoPropria');
//   late final GeneratedColumn<double?> percentualBcOperacaoPropria =
//       GeneratedColumn<double?>(
//           'PERCENTUAL_BC_OPERACAO_PROPRIA', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorBcIcmsStRetidoMeta =
//       const VerificationMeta('valorBcIcmsStRetido');
//   late final GeneratedColumn<double?> valorBcIcmsStRetido =
//       GeneratedColumn<double?>('VALOR_BC_ICMS_ST_RETIDO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _aliquotaSuportadaConsumidorMeta =
//       const VerificationMeta('aliquotaSuportadaConsumidor');
//   late final GeneratedColumn<double?> aliquotaSuportadaConsumidor =
//       GeneratedColumn<double?>(
//           'ALIQUOTA_SUPORTADA_CONSUMIDOR', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorIcmsSubstitutoMeta =
//       const VerificationMeta('valorIcmsSubstituto');
//   late final GeneratedColumn<double?> valorIcmsSubstituto =
//       GeneratedColumn<double?>('VALOR_ICMS_SUBSTITUTO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorIcmsStRetidoMeta =
//       const VerificationMeta('valorIcmsStRetido');
//   late final GeneratedColumn<double?> valorIcmsStRetido =
//       GeneratedColumn<double?>('VALOR_ICMS_ST_RETIDO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _baseCalculoFcpStRetidoMeta =
//       const VerificationMeta('baseCalculoFcpStRetido');
//   late final GeneratedColumn<double?> baseCalculoFcpStRetido =
//       GeneratedColumn<double?>('BASE_CALCULO_FCP_ST_RETIDO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _percentualFcpStRetidoMeta =
//       const VerificationMeta('percentualFcpStRetido');
//   late final GeneratedColumn<double?> percentualFcpStRetido =
//       GeneratedColumn<double?>('PERCENTUAL_FCP_ST_RETIDO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorFcpStRetidoMeta =
//       const VerificationMeta('valorFcpStRetido');
//   late final GeneratedColumn<double?> valorFcpStRetido =
//       GeneratedColumn<double?>('VALOR_FCP_ST_RETIDO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _motivoDesoneracaoIcmsMeta =
//       const VerificationMeta('motivoDesoneracaoIcms');
//   late final GeneratedColumn<String?> motivoDesoneracaoIcms =
//       GeneratedColumn<String?>('MOTIVO_DESONERACAO_ICMS', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 2),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _valorIcmsDesoneradoMeta =
//       const VerificationMeta('valorIcmsDesonerado');
//   late final GeneratedColumn<double?> valorIcmsDesonerado =
//       GeneratedColumn<double?>('VALOR_ICMS_DESONERADO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _aliquotaCreditoIcmsSnMeta =
//       const VerificationMeta('aliquotaCreditoIcmsSn');
//   late final GeneratedColumn<double?> aliquotaCreditoIcmsSn =
//       GeneratedColumn<double?>('ALIQUOTA_CREDITO_ICMS_SN', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorCreditoIcmsSnMeta =
//       const VerificationMeta('valorCreditoIcmsSn');
//   late final GeneratedColumn<double?> valorCreditoIcmsSn =
//       GeneratedColumn<double?>('VALOR_CREDITO_ICMS_SN', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorBcIcmsStDestinoMeta =
//       const VerificationMeta('valorBcIcmsStDestino');
//   late final GeneratedColumn<double?> valorBcIcmsStDestino =
//       GeneratedColumn<double?>('VALOR_BC_ICMS_ST_DESTINO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorIcmsStDestinoMeta =
//       const VerificationMeta('valorIcmsStDestino');
//   late final GeneratedColumn<double?> valorIcmsStDestino =
//       GeneratedColumn<double?>('VALOR_ICMS_ST_DESTINO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _percentualReducaoBcEfetivoMeta =
//       const VerificationMeta('percentualReducaoBcEfetivo');
//   late final GeneratedColumn<double?> percentualReducaoBcEfetivo =
//       GeneratedColumn<double?>(
//           'PERCENTUAL_REDUCAO_BC_EFETIVO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorBcEfetivoMeta =
//       const VerificationMeta('valorBcEfetivo');
//   late final GeneratedColumn<double?> valorBcEfetivo = GeneratedColumn<double?>(
//       'VALOR_BC_EFETIVO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _aliquotaIcmsEfetivoMeta =
//       const VerificationMeta('aliquotaIcmsEfetivo');
//   late final GeneratedColumn<double?> aliquotaIcmsEfetivo =
//       GeneratedColumn<double?>('ALIQUOTA_ICMS_EFETIVO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorIcmsEfetivoMeta =
//       const VerificationMeta('valorIcmsEfetivo');
//   late final GeneratedColumn<double?> valorIcmsEfetivo =
//       GeneratedColumn<double?>('VALOR_ICMS_EFETIVO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idNfeDetalhe,
//         origemMercadoria,
//         cstIcms,
//         csosn,
//         modalidadeBcIcms,
//         percentualReducaoBcIcms,
//         valorBcIcms,
//         aliquotaIcms,
//         valorIcmsOperacao,
//         percentualDiferimento,
//         valorIcmsDiferido,
//         valorIcms,
//         baseCalculoFcp,
//         percentualFcp,
//         valorFcp,
//         modalidadeBcIcmsSt,
//         percentualMvaIcmsSt,
//         percentualReducaoBcIcmsSt,
//         valorBaseCalculoIcmsSt,
//         aliquotaIcmsSt,
//         valorIcmsSt,
//         baseCalculoFcpSt,
//         percentualFcpSt,
//         valorFcpSt,
//         ufSt,
//         percentualBcOperacaoPropria,
//         valorBcIcmsStRetido,
//         aliquotaSuportadaConsumidor,
//         valorIcmsSubstituto,
//         valorIcmsStRetido,
//         baseCalculoFcpStRetido,
//         percentualFcpStRetido,
//         valorFcpStRetido,
//         motivoDesoneracaoIcms,
//         valorIcmsDesonerado,
//         aliquotaCreditoIcmsSn,
//         valorCreditoIcmsSn,
//         valorBcIcmsStDestino,
//         valorIcmsStDestino,
//         percentualReducaoBcEfetivo,
//         valorBcEfetivo,
//         aliquotaIcmsEfetivo,
//         valorIcmsEfetivo
//       ];
//   @override
//   String get aliasedName => _alias ?? 'NFE_DETALHE_IMPOSTO_ICMS';
//   @override
//   String get actualTableName => 'NFE_DETALHE_IMPOSTO_ICMS';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<NfeDetalheImpostoIcms> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_NFE_DETALHE')) {
//       context.handle(
//           _idNfeDetalheMeta,
//           idNfeDetalhe.isAcceptableOrUnknown(
//               data['ID_NFE_DETALHE']!, _idNfeDetalheMeta));
//     }
//     if (data.containsKey('ORIGEM_MERCADORIA')) {
//       context.handle(
//           _origemMercadoriaMeta,
//           origemMercadoria.isAcceptableOrUnknown(
//               data['ORIGEM_MERCADORIA']!, _origemMercadoriaMeta));
//     }
//     if (data.containsKey('CST_ICMS')) {
//       context.handle(_cstIcmsMeta,
//           cstIcms.isAcceptableOrUnknown(data['CST_ICMS']!, _cstIcmsMeta));
//     }
//     if (data.containsKey('CSOSN')) {
//       context.handle(
//           _csosnMeta, csosn.isAcceptableOrUnknown(data['CSOSN']!, _csosnMeta));
//     }
//     if (data.containsKey('MODALIDADE_BC_ICMS')) {
//       context.handle(
//           _modalidadeBcIcmsMeta,
//           modalidadeBcIcms.isAcceptableOrUnknown(
//               data['MODALIDADE_BC_ICMS']!, _modalidadeBcIcmsMeta));
//     }
//     if (data.containsKey('PERCENTUAL_REDUCAO_BC_ICMS')) {
//       context.handle(
//           _percentualReducaoBcIcmsMeta,
//           percentualReducaoBcIcms.isAcceptableOrUnknown(
//               data['PERCENTUAL_REDUCAO_BC_ICMS']!,
//               _percentualReducaoBcIcmsMeta));
//     }
//     if (data.containsKey('VALOR_BC_ICMS')) {
//       context.handle(
//           _valorBcIcmsMeta,
//           valorBcIcms.isAcceptableOrUnknown(
//               data['VALOR_BC_ICMS']!, _valorBcIcmsMeta));
//     }
//     if (data.containsKey('ALIQUOTA_ICMS')) {
//       context.handle(
//           _aliquotaIcmsMeta,
//           aliquotaIcms.isAcceptableOrUnknown(
//               data['ALIQUOTA_ICMS']!, _aliquotaIcmsMeta));
//     }
//     if (data.containsKey('VALOR_ICMS_OPERACAO')) {
//       context.handle(
//           _valorIcmsOperacaoMeta,
//           valorIcmsOperacao.isAcceptableOrUnknown(
//               data['VALOR_ICMS_OPERACAO']!, _valorIcmsOperacaoMeta));
//     }
//     if (data.containsKey('PERCENTUAL_DIFERIMENTO')) {
//       context.handle(
//           _percentualDiferimentoMeta,
//           percentualDiferimento.isAcceptableOrUnknown(
//               data['PERCENTUAL_DIFERIMENTO']!, _percentualDiferimentoMeta));
//     }
//     if (data.containsKey('VALOR_ICMS_DIFERIDO')) {
//       context.handle(
//           _valorIcmsDiferidoMeta,
//           valorIcmsDiferido.isAcceptableOrUnknown(
//               data['VALOR_ICMS_DIFERIDO']!, _valorIcmsDiferidoMeta));
//     }
//     if (data.containsKey('VALOR_ICMS')) {
//       context.handle(_valorIcmsMeta,
//           valorIcms.isAcceptableOrUnknown(data['VALOR_ICMS']!, _valorIcmsMeta));
//     }
//     if (data.containsKey('BASE_CALCULO_FCP')) {
//       context.handle(
//           _baseCalculoFcpMeta,
//           baseCalculoFcp.isAcceptableOrUnknown(
//               data['BASE_CALCULO_FCP']!, _baseCalculoFcpMeta));
//     }
//     if (data.containsKey('PERCENTUAL_FCP')) {
//       context.handle(
//           _percentualFcpMeta,
//           percentualFcp.isAcceptableOrUnknown(
//               data['PERCENTUAL_FCP']!, _percentualFcpMeta));
//     }
//     if (data.containsKey('VALOR_FCP')) {
//       context.handle(_valorFcpMeta,
//           valorFcp.isAcceptableOrUnknown(data['VALOR_FCP']!, _valorFcpMeta));
//     }
//     if (data.containsKey('MODALIDADE_BC_ICMS_ST')) {
//       context.handle(
//           _modalidadeBcIcmsStMeta,
//           modalidadeBcIcmsSt.isAcceptableOrUnknown(
//               data['MODALIDADE_BC_ICMS_ST']!, _modalidadeBcIcmsStMeta));
//     }
//     if (data.containsKey('PERCENTUAL_MVA_ICMS_ST')) {
//       context.handle(
//           _percentualMvaIcmsStMeta,
//           percentualMvaIcmsSt.isAcceptableOrUnknown(
//               data['PERCENTUAL_MVA_ICMS_ST']!, _percentualMvaIcmsStMeta));
//     }
//     if (data.containsKey('PERCENTUAL_REDUCAO_BC_ICMS_ST')) {
//       context.handle(
//           _percentualReducaoBcIcmsStMeta,
//           percentualReducaoBcIcmsSt.isAcceptableOrUnknown(
//               data['PERCENTUAL_REDUCAO_BC_ICMS_ST']!,
//               _percentualReducaoBcIcmsStMeta));
//     }
//     if (data.containsKey('VALOR_BASE_CALCULO_ICMS_ST')) {
//       context.handle(
//           _valorBaseCalculoIcmsStMeta,
//           valorBaseCalculoIcmsSt.isAcceptableOrUnknown(
//               data['VALOR_BASE_CALCULO_ICMS_ST']!,
//               _valorBaseCalculoIcmsStMeta));
//     }
//     if (data.containsKey('ALIQUOTA_ICMS_ST')) {
//       context.handle(
//           _aliquotaIcmsStMeta,
//           aliquotaIcmsSt.isAcceptableOrUnknown(
//               data['ALIQUOTA_ICMS_ST']!, _aliquotaIcmsStMeta));
//     }
//     if (data.containsKey('VALOR_ICMS_ST')) {
//       context.handle(
//           _valorIcmsStMeta,
//           valorIcmsSt.isAcceptableOrUnknown(
//               data['VALOR_ICMS_ST']!, _valorIcmsStMeta));
//     }
//     if (data.containsKey('BASE_CALCULO_FCP_ST')) {
//       context.handle(
//           _baseCalculoFcpStMeta,
//           baseCalculoFcpSt.isAcceptableOrUnknown(
//               data['BASE_CALCULO_FCP_ST']!, _baseCalculoFcpStMeta));
//     }
//     if (data.containsKey('PERCENTUAL_FCP_ST')) {
//       context.handle(
//           _percentualFcpStMeta,
//           percentualFcpSt.isAcceptableOrUnknown(
//               data['PERCENTUAL_FCP_ST']!, _percentualFcpStMeta));
//     }
//     if (data.containsKey('VALOR_FCP_ST')) {
//       context.handle(
//           _valorFcpStMeta,
//           valorFcpSt.isAcceptableOrUnknown(
//               data['VALOR_FCP_ST']!, _valorFcpStMeta));
//     }
//     if (data.containsKey('UF_ST')) {
//       context.handle(
//           _ufStMeta, ufSt.isAcceptableOrUnknown(data['UF_ST']!, _ufStMeta));
//     }
//     if (data.containsKey('PERCENTUAL_BC_OPERACAO_PROPRIA')) {
//       context.handle(
//           _percentualBcOperacaoPropriaMeta,
//           percentualBcOperacaoPropria.isAcceptableOrUnknown(
//               data['PERCENTUAL_BC_OPERACAO_PROPRIA']!,
//               _percentualBcOperacaoPropriaMeta));
//     }
//     if (data.containsKey('VALOR_BC_ICMS_ST_RETIDO')) {
//       context.handle(
//           _valorBcIcmsStRetidoMeta,
//           valorBcIcmsStRetido.isAcceptableOrUnknown(
//               data['VALOR_BC_ICMS_ST_RETIDO']!, _valorBcIcmsStRetidoMeta));
//     }
//     if (data.containsKey('ALIQUOTA_SUPORTADA_CONSUMIDOR')) {
//       context.handle(
//           _aliquotaSuportadaConsumidorMeta,
//           aliquotaSuportadaConsumidor.isAcceptableOrUnknown(
//               data['ALIQUOTA_SUPORTADA_CONSUMIDOR']!,
//               _aliquotaSuportadaConsumidorMeta));
//     }
//     if (data.containsKey('VALOR_ICMS_SUBSTITUTO')) {
//       context.handle(
//           _valorIcmsSubstitutoMeta,
//           valorIcmsSubstituto.isAcceptableOrUnknown(
//               data['VALOR_ICMS_SUBSTITUTO']!, _valorIcmsSubstitutoMeta));
//     }
//     if (data.containsKey('VALOR_ICMS_ST_RETIDO')) {
//       context.handle(
//           _valorIcmsStRetidoMeta,
//           valorIcmsStRetido.isAcceptableOrUnknown(
//               data['VALOR_ICMS_ST_RETIDO']!, _valorIcmsStRetidoMeta));
//     }
//     if (data.containsKey('BASE_CALCULO_FCP_ST_RETIDO')) {
//       context.handle(
//           _baseCalculoFcpStRetidoMeta,
//           baseCalculoFcpStRetido.isAcceptableOrUnknown(
//               data['BASE_CALCULO_FCP_ST_RETIDO']!,
//               _baseCalculoFcpStRetidoMeta));
//     }
//     if (data.containsKey('PERCENTUAL_FCP_ST_RETIDO')) {
//       context.handle(
//           _percentualFcpStRetidoMeta,
//           percentualFcpStRetido.isAcceptableOrUnknown(
//               data['PERCENTUAL_FCP_ST_RETIDO']!, _percentualFcpStRetidoMeta));
//     }
//     if (data.containsKey('VALOR_FCP_ST_RETIDO')) {
//       context.handle(
//           _valorFcpStRetidoMeta,
//           valorFcpStRetido.isAcceptableOrUnknown(
//               data['VALOR_FCP_ST_RETIDO']!, _valorFcpStRetidoMeta));
//     }
//     if (data.containsKey('MOTIVO_DESONERACAO_ICMS')) {
//       context.handle(
//           _motivoDesoneracaoIcmsMeta,
//           motivoDesoneracaoIcms.isAcceptableOrUnknown(
//               data['MOTIVO_DESONERACAO_ICMS']!, _motivoDesoneracaoIcmsMeta));
//     }
//     if (data.containsKey('VALOR_ICMS_DESONERADO')) {
//       context.handle(
//           _valorIcmsDesoneradoMeta,
//           valorIcmsDesonerado.isAcceptableOrUnknown(
//               data['VALOR_ICMS_DESONERADO']!, _valorIcmsDesoneradoMeta));
//     }
//     if (data.containsKey('ALIQUOTA_CREDITO_ICMS_SN')) {
//       context.handle(
//           _aliquotaCreditoIcmsSnMeta,
//           aliquotaCreditoIcmsSn.isAcceptableOrUnknown(
//               data['ALIQUOTA_CREDITO_ICMS_SN']!, _aliquotaCreditoIcmsSnMeta));
//     }
//     if (data.containsKey('VALOR_CREDITO_ICMS_SN')) {
//       context.handle(
//           _valorCreditoIcmsSnMeta,
//           valorCreditoIcmsSn.isAcceptableOrUnknown(
//               data['VALOR_CREDITO_ICMS_SN']!, _valorCreditoIcmsSnMeta));
//     }
//     if (data.containsKey('VALOR_BC_ICMS_ST_DESTINO')) {
//       context.handle(
//           _valorBcIcmsStDestinoMeta,
//           valorBcIcmsStDestino.isAcceptableOrUnknown(
//               data['VALOR_BC_ICMS_ST_DESTINO']!, _valorBcIcmsStDestinoMeta));
//     }
//     if (data.containsKey('VALOR_ICMS_ST_DESTINO')) {
//       context.handle(
//           _valorIcmsStDestinoMeta,
//           valorIcmsStDestino.isAcceptableOrUnknown(
//               data['VALOR_ICMS_ST_DESTINO']!, _valorIcmsStDestinoMeta));
//     }
//     if (data.containsKey('PERCENTUAL_REDUCAO_BC_EFETIVO')) {
//       context.handle(
//           _percentualReducaoBcEfetivoMeta,
//           percentualReducaoBcEfetivo.isAcceptableOrUnknown(
//               data['PERCENTUAL_REDUCAO_BC_EFETIVO']!,
//               _percentualReducaoBcEfetivoMeta));
//     }
//     if (data.containsKey('VALOR_BC_EFETIVO')) {
//       context.handle(
//           _valorBcEfetivoMeta,
//           valorBcEfetivo.isAcceptableOrUnknown(
//               data['VALOR_BC_EFETIVO']!, _valorBcEfetivoMeta));
//     }
//     if (data.containsKey('ALIQUOTA_ICMS_EFETIVO')) {
//       context.handle(
//           _aliquotaIcmsEfetivoMeta,
//           aliquotaIcmsEfetivo.isAcceptableOrUnknown(
//               data['ALIQUOTA_ICMS_EFETIVO']!, _aliquotaIcmsEfetivoMeta));
//     }
//     if (data.containsKey('VALOR_ICMS_EFETIVO')) {
//       context.handle(
//           _valorIcmsEfetivoMeta,
//           valorIcmsEfetivo.isAcceptableOrUnknown(
//               data['VALOR_ICMS_EFETIVO']!, _valorIcmsEfetivoMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeDetalheImpostoIcms map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeDetalheImpostoIcms(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idNfeDetalhe: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_NFE_DETALHE']),
//       origemMercadoria: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ORIGEM_MERCADORIA']),
//       cstIcms: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CST_ICMS']),
//       csosn: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CSOSN']),
//       modalidadeBcIcms: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}MODALIDADE_BC_ICMS']),
//       percentualReducaoBcIcms: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}PERCENTUAL_REDUCAO_BC_ICMS']),
//       valorBcIcms: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_BC_ICMS']),
//       aliquotaIcms: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ALIQUOTA_ICMS']),
//       valorIcmsOperacao: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_ICMS_OPERACAO']),
//       percentualDiferimento: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}PERCENTUAL_DIFERIMENTO']),
//       valorIcmsDiferido: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_ICMS_DIFERIDO']),
//       valorIcms: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_ICMS']),
//       baseCalculoFcp: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}BASE_CALCULO_FCP']),
//       percentualFcp: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}PERCENTUAL_FCP']),
//       valorFcp: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_FCP']),
//       modalidadeBcIcmsSt: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}MODALIDADE_BC_ICMS_ST']),
//       percentualMvaIcmsSt: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}PERCENTUAL_MVA_ICMS_ST']),
//       percentualReducaoBcIcmsSt: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}PERCENTUAL_REDUCAO_BC_ICMS_ST']),
//       valorBaseCalculoIcmsSt: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_BASE_CALCULO_ICMS_ST']),
//       aliquotaIcmsSt: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ALIQUOTA_ICMS_ST']),
//       valorIcmsSt: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_ICMS_ST']),
//       baseCalculoFcpSt: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}BASE_CALCULO_FCP_ST']),
//       percentualFcpSt: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}PERCENTUAL_FCP_ST']),
//       valorFcpSt: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_FCP_ST']),
//       ufSt: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}UF_ST']),
//       percentualBcOperacaoPropria: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}PERCENTUAL_BC_OPERACAO_PROPRIA']),
//       valorBcIcmsStRetido: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_BC_ICMS_ST_RETIDO']),
//       aliquotaSuportadaConsumidor: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ALIQUOTA_SUPORTADA_CONSUMIDOR']),
//       valorIcmsSubstituto: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_ICMS_SUBSTITUTO']),
//       valorIcmsStRetido: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_ICMS_ST_RETIDO']),
//       baseCalculoFcpStRetido: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}BASE_CALCULO_FCP_ST_RETIDO']),
//       percentualFcpStRetido: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}PERCENTUAL_FCP_ST_RETIDO']),
//       valorFcpStRetido: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_FCP_ST_RETIDO']),
//       motivoDesoneracaoIcms: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}MOTIVO_DESONERACAO_ICMS']),
//       valorIcmsDesonerado: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_ICMS_DESONERADO']),
//       aliquotaCreditoIcmsSn: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ALIQUOTA_CREDITO_ICMS_SN']),
//       valorCreditoIcmsSn: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_CREDITO_ICMS_SN']),
//       valorBcIcmsStDestino: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_BC_ICMS_ST_DESTINO']),
//       valorIcmsStDestino: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_ICMS_ST_DESTINO']),
//       percentualReducaoBcEfetivo: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}PERCENTUAL_REDUCAO_BC_EFETIVO']),
//       valorBcEfetivo: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_BC_EFETIVO']),
//       aliquotaIcmsEfetivo: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ALIQUOTA_ICMS_EFETIVO']),
//       valorIcmsEfetivo: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_ICMS_EFETIVO']),
//     );
//   }

//   @override
//   $NfeDetalheImpostoIcmssTable createAlias(String alias) {
//     return $NfeDetalheImpostoIcmssTable(_db, alias);
//   }
// }

// class NfeDetalheImpostoIcmsUfdestsCompanion
//     extends UpdateCompanion<NfeDetalheImpostoIcmsUfdest> {
//   final Value<int> id;
//   final Value<int?> idNfeDetalhe;
//   final Value<double?> valorBcIcmsUfDestino;
//   final Value<double?> valorBcFcpUfDestino;
//   final Value<double?> percentualFcpUfDestino;
//   final Value<double?> aliquotaInternaUfDestino;
//   final Value<double?> aliquotaInteresdatualUfEnvolvidas;
//   final Value<double?> percentualProvisorioPartilhaIcms;
//   final Value<double?> valorIcmsFcpUfDestino;
//   final Value<double?> valorInterestadualUfDestino;
//   final Value<double?> valorInterestadualUfRemetente;
//   const NfeDetalheImpostoIcmsUfdestsCompanion({
//     this.id = const Value.absent(),
//     this.idNfeDetalhe = const Value.absent(),
//     this.valorBcIcmsUfDestino = const Value.absent(),
//     this.valorBcFcpUfDestino = const Value.absent(),
//     this.percentualFcpUfDestino = const Value.absent(),
//     this.aliquotaInternaUfDestino = const Value.absent(),
//     this.aliquotaInteresdatualUfEnvolvidas = const Value.absent(),
//     this.percentualProvisorioPartilhaIcms = const Value.absent(),
//     this.valorIcmsFcpUfDestino = const Value.absent(),
//     this.valorInterestadualUfDestino = const Value.absent(),
//     this.valorInterestadualUfRemetente = const Value.absent(),
//   });
//   NfeDetalheImpostoIcmsUfdestsCompanion.insert({
//     this.id = const Value.absent(),
//     this.idNfeDetalhe = const Value.absent(),
//     this.valorBcIcmsUfDestino = const Value.absent(),
//     this.valorBcFcpUfDestino = const Value.absent(),
//     this.percentualFcpUfDestino = const Value.absent(),
//     this.aliquotaInternaUfDestino = const Value.absent(),
//     this.aliquotaInteresdatualUfEnvolvidas = const Value.absent(),
//     this.percentualProvisorioPartilhaIcms = const Value.absent(),
//     this.valorIcmsFcpUfDestino = const Value.absent(),
//     this.valorInterestadualUfDestino = const Value.absent(),
//     this.valorInterestadualUfRemetente = const Value.absent(),
//   });
//   static Insertable<NfeDetalheImpostoIcmsUfdest> custom({
//     Expression<int>? id,
//     Expression<int?>? idNfeDetalhe,
//     Expression<double?>? valorBcIcmsUfDestino,
//     Expression<double?>? valorBcFcpUfDestino,
//     Expression<double?>? percentualFcpUfDestino,
//     Expression<double?>? aliquotaInternaUfDestino,
//     Expression<double?>? aliquotaInteresdatualUfEnvolvidas,
//     Expression<double?>? percentualProvisorioPartilhaIcms,
//     Expression<double?>? valorIcmsFcpUfDestino,
//     Expression<double?>? valorInterestadualUfDestino,
//     Expression<double?>? valorInterestadualUfRemetente,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idNfeDetalhe != null) 'ID_NFE_DETALHE': idNfeDetalhe,
//       if (valorBcIcmsUfDestino != null)
//         'VALOR_BC_ICMS_UF_DESTINO': valorBcIcmsUfDestino,
//       if (valorBcFcpUfDestino != null)
//         'VALOR_BC_FCP_UF_DESTINO': valorBcFcpUfDestino,
//       if (percentualFcpUfDestino != null)
//         'PERCENTUAL_FCP_UF_DESTINO': percentualFcpUfDestino,
//       if (aliquotaInternaUfDestino != null)
//         'ALIQUOTA_INTERNA_UF_DESTINO': aliquotaInternaUfDestino,
//       if (aliquotaInteresdatualUfEnvolvidas != null)
//         'ALIQUOTA_INTERESDATUAL_UF_ENVOLVIDAS':
//             aliquotaInteresdatualUfEnvolvidas,
//       if (percentualProvisorioPartilhaIcms != null)
//         'PERCENTUAL_PROVISORIO_PARTILHA_ICMS': percentualProvisorioPartilhaIcms,
//       if (valorIcmsFcpUfDestino != null)
//         'VALOR_ICMS_FCP_UF_DESTINO': valorIcmsFcpUfDestino,
//       if (valorInterestadualUfDestino != null)
//         'VALOR_INTERESTADUAL_UF_DESTINO': valorInterestadualUfDestino,
//       if (valorInterestadualUfRemetente != null)
//         'VALOR_INTERESTADUAL_UF_REMETENTE': valorInterestadualUfRemetente,
//     });
//   }

//   NfeDetalheImpostoIcmsUfdestsCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idNfeDetalhe,
//       Value<double?>? valorBcIcmsUfDestino,
//       Value<double?>? valorBcFcpUfDestino,
//       Value<double?>? percentualFcpUfDestino,
//       Value<double?>? aliquotaInternaUfDestino,
//       Value<double?>? aliquotaInteresdatualUfEnvolvidas,
//       Value<double?>? percentualProvisorioPartilhaIcms,
//       Value<double?>? valorIcmsFcpUfDestino,
//       Value<double?>? valorInterestadualUfDestino,
//       Value<double?>? valorInterestadualUfRemetente}) {
//     return NfeDetalheImpostoIcmsUfdestsCompanion(
//       id: id ?? this.id,
//       idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
//       valorBcIcmsUfDestino: valorBcIcmsUfDestino ?? this.valorBcIcmsUfDestino,
//       valorBcFcpUfDestino: valorBcFcpUfDestino ?? this.valorBcFcpUfDestino,
//       percentualFcpUfDestino:
//           percentualFcpUfDestino ?? this.percentualFcpUfDestino,
//       aliquotaInternaUfDestino:
//           aliquotaInternaUfDestino ?? this.aliquotaInternaUfDestino,
//       aliquotaInteresdatualUfEnvolvidas: aliquotaInteresdatualUfEnvolvidas ??
//           this.aliquotaInteresdatualUfEnvolvidas,
//       percentualProvisorioPartilhaIcms: percentualProvisorioPartilhaIcms ??
//           this.percentualProvisorioPartilhaIcms,
//       valorIcmsFcpUfDestino:
//           valorIcmsFcpUfDestino ?? this.valorIcmsFcpUfDestino,
//       valorInterestadualUfDestino:
//           valorInterestadualUfDestino ?? this.valorInterestadualUfDestino,
//       valorInterestadualUfRemetente:
//           valorInterestadualUfRemetente ?? this.valorInterestadualUfRemetente,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idNfeDetalhe.present) {
//       map['ID_NFE_DETALHE'] = Variable<int?>(idNfeDetalhe.value);
//     }
//     if (valorBcIcmsUfDestino.present) {
//       map['VALOR_BC_ICMS_UF_DESTINO'] =
//           Variable<double?>(valorBcIcmsUfDestino.value);
//     }
//     if (valorBcFcpUfDestino.present) {
//       map['VALOR_BC_FCP_UF_DESTINO'] =
//           Variable<double?>(valorBcFcpUfDestino.value);
//     }
//     if (percentualFcpUfDestino.present) {
//       map['PERCENTUAL_FCP_UF_DESTINO'] =
//           Variable<double?>(percentualFcpUfDestino.value);
//     }
//     if (aliquotaInternaUfDestino.present) {
//       map['ALIQUOTA_INTERNA_UF_DESTINO'] =
//           Variable<double?>(aliquotaInternaUfDestino.value);
//     }
//     if (aliquotaInteresdatualUfEnvolvidas.present) {
//       map['ALIQUOTA_INTERESDATUAL_UF_ENVOLVIDAS'] =
//           Variable<double?>(aliquotaInteresdatualUfEnvolvidas.value);
//     }
//     if (percentualProvisorioPartilhaIcms.present) {
//       map['PERCENTUAL_PROVISORIO_PARTILHA_ICMS'] =
//           Variable<double?>(percentualProvisorioPartilhaIcms.value);
//     }
//     if (valorIcmsFcpUfDestino.present) {
//       map['VALOR_ICMS_FCP_UF_DESTINO'] =
//           Variable<double?>(valorIcmsFcpUfDestino.value);
//     }
//     if (valorInterestadualUfDestino.present) {
//       map['VALOR_INTERESTADUAL_UF_DESTINO'] =
//           Variable<double?>(valorInterestadualUfDestino.value);
//     }
//     if (valorInterestadualUfRemetente.present) {
//       map['VALOR_INTERESTADUAL_UF_REMETENTE'] =
//           Variable<double?>(valorInterestadualUfRemetente.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeDetalheImpostoIcmsUfdestsCompanion(')
//           ..write('id: $id, ')
//           ..write('idNfeDetalhe: $idNfeDetalhe, ')
//           ..write('valorBcIcmsUfDestino: $valorBcIcmsUfDestino, ')
//           ..write('valorBcFcpUfDestino: $valorBcFcpUfDestino, ')
//           ..write('percentualFcpUfDestino: $percentualFcpUfDestino, ')
//           ..write('aliquotaInternaUfDestino: $aliquotaInternaUfDestino, ')
//           ..write(
//               'aliquotaInteresdatualUfEnvolvidas: $aliquotaInteresdatualUfEnvolvidas, ')
//           ..write(
//               'percentualProvisorioPartilhaIcms: $percentualProvisorioPartilhaIcms, ')
//           ..write('valorIcmsFcpUfDestino: $valorIcmsFcpUfDestino, ')
//           ..write('valorInterestadualUfDestino: $valorInterestadualUfDestino, ')
//           ..write(
//               'valorInterestadualUfRemetente: $valorInterestadualUfRemetente')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeDetalheImpostoIcmsUfdestsTable extends NfeDetalheImpostoIcmsUfdests
//     with
//         TableInfo<$NfeDetalheImpostoIcmsUfdestsTable,
//             NfeDetalheImpostoIcmsUfdest> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeDetalheImpostoIcmsUfdestsTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idNfeDetalheMeta =
//       const VerificationMeta('idNfeDetalhe');
//   late final GeneratedColumn<int?> idNfeDetalhe = GeneratedColumn<int?>(
//       'ID_NFE_DETALHE', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES NFE_DETALHE(ID)');
//   final VerificationMeta _valorBcIcmsUfDestinoMeta =
//       const VerificationMeta('valorBcIcmsUfDestino');
//   late final GeneratedColumn<double?> valorBcIcmsUfDestino =
//       GeneratedColumn<double?>('VALOR_BC_ICMS_UF_DESTINO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorBcFcpUfDestinoMeta =
//       const VerificationMeta('valorBcFcpUfDestino');
//   late final GeneratedColumn<double?> valorBcFcpUfDestino =
//       GeneratedColumn<double?>('VALOR_BC_FCP_UF_DESTINO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _percentualFcpUfDestinoMeta =
//       const VerificationMeta('percentualFcpUfDestino');
//   late final GeneratedColumn<double?> percentualFcpUfDestino =
//       GeneratedColumn<double?>('PERCENTUAL_FCP_UF_DESTINO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _aliquotaInternaUfDestinoMeta =
//       const VerificationMeta('aliquotaInternaUfDestino');
//   late final GeneratedColumn<double?> aliquotaInternaUfDestino =
//       GeneratedColumn<double?>('ALIQUOTA_INTERNA_UF_DESTINO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _aliquotaInteresdatualUfEnvolvidasMeta =
//       const VerificationMeta('aliquotaInteresdatualUfEnvolvidas');
//   late final GeneratedColumn<double?> aliquotaInteresdatualUfEnvolvidas =
//       GeneratedColumn<double?>(
//           'ALIQUOTA_INTERESDATUAL_UF_ENVOLVIDAS', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _percentualProvisorioPartilhaIcmsMeta =
//       const VerificationMeta('percentualProvisorioPartilhaIcms');
//   late final GeneratedColumn<double?> percentualProvisorioPartilhaIcms =
//       GeneratedColumn<double?>(
//           'PERCENTUAL_PROVISORIO_PARTILHA_ICMS', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorIcmsFcpUfDestinoMeta =
//       const VerificationMeta('valorIcmsFcpUfDestino');
//   late final GeneratedColumn<double?> valorIcmsFcpUfDestino =
//       GeneratedColumn<double?>('VALOR_ICMS_FCP_UF_DESTINO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorInterestadualUfDestinoMeta =
//       const VerificationMeta('valorInterestadualUfDestino');
//   late final GeneratedColumn<double?> valorInterestadualUfDestino =
//       GeneratedColumn<double?>(
//           'VALOR_INTERESTADUAL_UF_DESTINO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorInterestadualUfRemetenteMeta =
//       const VerificationMeta('valorInterestadualUfRemetente');
//   late final GeneratedColumn<double?> valorInterestadualUfRemetente =
//       GeneratedColumn<double?>(
//           'VALOR_INTERESTADUAL_UF_REMETENTE', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idNfeDetalhe,
//         valorBcIcmsUfDestino,
//         valorBcFcpUfDestino,
//         percentualFcpUfDestino,
//         aliquotaInternaUfDestino,
//         aliquotaInteresdatualUfEnvolvidas,
//         percentualProvisorioPartilhaIcms,
//         valorIcmsFcpUfDestino,
//         valorInterestadualUfDestino,
//         valorInterestadualUfRemetente
//       ];
//   @override
//   String get aliasedName => _alias ?? 'NFE_DETALHE_IMPOSTO_ICMS_UFDEST';
//   @override
//   String get actualTableName => 'NFE_DETALHE_IMPOSTO_ICMS_UFDEST';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<NfeDetalheImpostoIcmsUfdest> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_NFE_DETALHE')) {
//       context.handle(
//           _idNfeDetalheMeta,
//           idNfeDetalhe.isAcceptableOrUnknown(
//               data['ID_NFE_DETALHE']!, _idNfeDetalheMeta));
//     }
//     if (data.containsKey('VALOR_BC_ICMS_UF_DESTINO')) {
//       context.handle(
//           _valorBcIcmsUfDestinoMeta,
//           valorBcIcmsUfDestino.isAcceptableOrUnknown(
//               data['VALOR_BC_ICMS_UF_DESTINO']!, _valorBcIcmsUfDestinoMeta));
//     }
//     if (data.containsKey('VALOR_BC_FCP_UF_DESTINO')) {
//       context.handle(
//           _valorBcFcpUfDestinoMeta,
//           valorBcFcpUfDestino.isAcceptableOrUnknown(
//               data['VALOR_BC_FCP_UF_DESTINO']!, _valorBcFcpUfDestinoMeta));
//     }
//     if (data.containsKey('PERCENTUAL_FCP_UF_DESTINO')) {
//       context.handle(
//           _percentualFcpUfDestinoMeta,
//           percentualFcpUfDestino.isAcceptableOrUnknown(
//               data['PERCENTUAL_FCP_UF_DESTINO']!, _percentualFcpUfDestinoMeta));
//     }
//     if (data.containsKey('ALIQUOTA_INTERNA_UF_DESTINO')) {
//       context.handle(
//           _aliquotaInternaUfDestinoMeta,
//           aliquotaInternaUfDestino.isAcceptableOrUnknown(
//               data['ALIQUOTA_INTERNA_UF_DESTINO']!,
//               _aliquotaInternaUfDestinoMeta));
//     }
//     if (data.containsKey('ALIQUOTA_INTERESDATUAL_UF_ENVOLVIDAS')) {
//       context.handle(
//           _aliquotaInteresdatualUfEnvolvidasMeta,
//           aliquotaInteresdatualUfEnvolvidas.isAcceptableOrUnknown(
//               data['ALIQUOTA_INTERESDATUAL_UF_ENVOLVIDAS']!,
//               _aliquotaInteresdatualUfEnvolvidasMeta));
//     }
//     if (data.containsKey('PERCENTUAL_PROVISORIO_PARTILHA_ICMS')) {
//       context.handle(
//           _percentualProvisorioPartilhaIcmsMeta,
//           percentualProvisorioPartilhaIcms.isAcceptableOrUnknown(
//               data['PERCENTUAL_PROVISORIO_PARTILHA_ICMS']!,
//               _percentualProvisorioPartilhaIcmsMeta));
//     }
//     if (data.containsKey('VALOR_ICMS_FCP_UF_DESTINO')) {
//       context.handle(
//           _valorIcmsFcpUfDestinoMeta,
//           valorIcmsFcpUfDestino.isAcceptableOrUnknown(
//               data['VALOR_ICMS_FCP_UF_DESTINO']!, _valorIcmsFcpUfDestinoMeta));
//     }
//     if (data.containsKey('VALOR_INTERESTADUAL_UF_DESTINO')) {
//       context.handle(
//           _valorInterestadualUfDestinoMeta,
//           valorInterestadualUfDestino.isAcceptableOrUnknown(
//               data['VALOR_INTERESTADUAL_UF_DESTINO']!,
//               _valorInterestadualUfDestinoMeta));
//     }
//     if (data.containsKey('VALOR_INTERESTADUAL_UF_REMETENTE')) {
//       context.handle(
//           _valorInterestadualUfRemetenteMeta,
//           valorInterestadualUfRemetente.isAcceptableOrUnknown(
//               data['VALOR_INTERESTADUAL_UF_REMETENTE']!,
//               _valorInterestadualUfRemetenteMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeDetalheImpostoIcmsUfdest map(Map<String, dynamic> data,
//       {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeDetalheImpostoIcmsUfdest(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idNfeDetalhe: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_NFE_DETALHE']),
//       valorBcIcmsUfDestino: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_BC_ICMS_UF_DESTINO']),
//       valorBcFcpUfDestino: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_BC_FCP_UF_DESTINO']),
//       percentualFcpUfDestino: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}PERCENTUAL_FCP_UF_DESTINO']),
//       aliquotaInternaUfDestino: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ALIQUOTA_INTERNA_UF_DESTINO']),
//       aliquotaInteresdatualUfEnvolvidas: const RealType()
//           .mapFromDatabaseResponse(
//               data['${effectivePrefix}ALIQUOTA_INTERESDATUAL_UF_ENVOLVIDAS']),
//       percentualProvisorioPartilhaIcms: const RealType()
//           .mapFromDatabaseResponse(
//               data['${effectivePrefix}PERCENTUAL_PROVISORIO_PARTILHA_ICMS']),
//       valorIcmsFcpUfDestino: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_ICMS_FCP_UF_DESTINO']),
//       valorInterestadualUfDestino: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_INTERESTADUAL_UF_DESTINO']),
//       valorInterestadualUfRemetente: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_INTERESTADUAL_UF_REMETENTE']),
//     );
//   }

//   @override
//   $NfeDetalheImpostoIcmsUfdestsTable createAlias(String alias) {
//     return $NfeDetalheImpostoIcmsUfdestsTable(_db, alias);
//   }
// }

// class NfeDetalheImpostoIisCompanion
//     extends UpdateCompanion<NfeDetalheImpostoIi> {
//   final Value<int> id;
//   final Value<int?> idNfeDetalhe;
//   final Value<double?> valorBcIi;
//   final Value<double?> valorDespesasAduaneiras;
//   final Value<double?> valorImpostoImportacao;
//   final Value<double?> valorIof;
//   const NfeDetalheImpostoIisCompanion({
//     this.id = const Value.absent(),
//     this.idNfeDetalhe = const Value.absent(),
//     this.valorBcIi = const Value.absent(),
//     this.valorDespesasAduaneiras = const Value.absent(),
//     this.valorImpostoImportacao = const Value.absent(),
//     this.valorIof = const Value.absent(),
//   });
//   NfeDetalheImpostoIisCompanion.insert({
//     this.id = const Value.absent(),
//     this.idNfeDetalhe = const Value.absent(),
//     this.valorBcIi = const Value.absent(),
//     this.valorDespesasAduaneiras = const Value.absent(),
//     this.valorImpostoImportacao = const Value.absent(),
//     this.valorIof = const Value.absent(),
//   });
//   static Insertable<NfeDetalheImpostoIi> custom({
//     Expression<int>? id,
//     Expression<int?>? idNfeDetalhe,
//     Expression<double?>? valorBcIi,
//     Expression<double?>? valorDespesasAduaneiras,
//     Expression<double?>? valorImpostoImportacao,
//     Expression<double?>? valorIof,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idNfeDetalhe != null) 'ID_NFE_DETALHE': idNfeDetalhe,
//       if (valorBcIi != null) 'VALOR_BC_II': valorBcIi,
//       if (valorDespesasAduaneiras != null)
//         'VALOR_DESPESAS_ADUANEIRAS': valorDespesasAduaneiras,
//       if (valorImpostoImportacao != null)
//         'VALOR_IMPOSTO_IMPORTACAO': valorImpostoImportacao,
//       if (valorIof != null) 'VALOR_IOF': valorIof,
//     });
//   }

//   NfeDetalheImpostoIisCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idNfeDetalhe,
//       Value<double?>? valorBcIi,
//       Value<double?>? valorDespesasAduaneiras,
//       Value<double?>? valorImpostoImportacao,
//       Value<double?>? valorIof}) {
//     return NfeDetalheImpostoIisCompanion(
//       id: id ?? this.id,
//       idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
//       valorBcIi: valorBcIi ?? this.valorBcIi,
//       valorDespesasAduaneiras:
//           valorDespesasAduaneiras ?? this.valorDespesasAduaneiras,
//       valorImpostoImportacao:
//           valorImpostoImportacao ?? this.valorImpostoImportacao,
//       valorIof: valorIof ?? this.valorIof,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idNfeDetalhe.present) {
//       map['ID_NFE_DETALHE'] = Variable<int?>(idNfeDetalhe.value);
//     }
//     if (valorBcIi.present) {
//       map['VALOR_BC_II'] = Variable<double?>(valorBcIi.value);
//     }
//     if (valorDespesasAduaneiras.present) {
//       map['VALOR_DESPESAS_ADUANEIRAS'] =
//           Variable<double?>(valorDespesasAduaneiras.value);
//     }
//     if (valorImpostoImportacao.present) {
//       map['VALOR_IMPOSTO_IMPORTACAO'] =
//           Variable<double?>(valorImpostoImportacao.value);
//     }
//     if (valorIof.present) {
//       map['VALOR_IOF'] = Variable<double?>(valorIof.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeDetalheImpostoIisCompanion(')
//           ..write('id: $id, ')
//           ..write('idNfeDetalhe: $idNfeDetalhe, ')
//           ..write('valorBcIi: $valorBcIi, ')
//           ..write('valorDespesasAduaneiras: $valorDespesasAduaneiras, ')
//           ..write('valorImpostoImportacao: $valorImpostoImportacao, ')
//           ..write('valorIof: $valorIof')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeDetalheImpostoIisTable extends NfeDetalheImpostoIis
//     with TableInfo<$NfeDetalheImpostoIisTable, NfeDetalheImpostoIi> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeDetalheImpostoIisTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idNfeDetalheMeta =
//       const VerificationMeta('idNfeDetalhe');
//   late final GeneratedColumn<int?> idNfeDetalhe = GeneratedColumn<int?>(
//       'ID_NFE_DETALHE', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES NFE_DETALHE(ID)');
//   final VerificationMeta _valorBcIiMeta = const VerificationMeta('valorBcIi');
//   late final GeneratedColumn<double?> valorBcIi = GeneratedColumn<double?>(
//       'VALOR_BC_II', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorDespesasAduaneirasMeta =
//       const VerificationMeta('valorDespesasAduaneiras');
//   late final GeneratedColumn<double?> valorDespesasAduaneiras =
//       GeneratedColumn<double?>('VALOR_DESPESAS_ADUANEIRAS', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorImpostoImportacaoMeta =
//       const VerificationMeta('valorImpostoImportacao');
//   late final GeneratedColumn<double?> valorImpostoImportacao =
//       GeneratedColumn<double?>('VALOR_IMPOSTO_IMPORTACAO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorIofMeta = const VerificationMeta('valorIof');
//   late final GeneratedColumn<double?> valorIof = GeneratedColumn<double?>(
//       'VALOR_IOF', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idNfeDetalhe,
//         valorBcIi,
//         valorDespesasAduaneiras,
//         valorImpostoImportacao,
//         valorIof
//       ];
//   @override
//   String get aliasedName => _alias ?? 'NFE_DETALHE_IMPOSTO_II';
//   @override
//   String get actualTableName => 'NFE_DETALHE_IMPOSTO_II';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<NfeDetalheImpostoIi> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_NFE_DETALHE')) {
//       context.handle(
//           _idNfeDetalheMeta,
//           idNfeDetalhe.isAcceptableOrUnknown(
//               data['ID_NFE_DETALHE']!, _idNfeDetalheMeta));
//     }
//     if (data.containsKey('VALOR_BC_II')) {
//       context.handle(
//           _valorBcIiMeta,
//           valorBcIi.isAcceptableOrUnknown(
//               data['VALOR_BC_II']!, _valorBcIiMeta));
//     }
//     if (data.containsKey('VALOR_DESPESAS_ADUANEIRAS')) {
//       context.handle(
//           _valorDespesasAduaneirasMeta,
//           valorDespesasAduaneiras.isAcceptableOrUnknown(
//               data['VALOR_DESPESAS_ADUANEIRAS']!,
//               _valorDespesasAduaneirasMeta));
//     }
//     if (data.containsKey('VALOR_IMPOSTO_IMPORTACAO')) {
//       context.handle(
//           _valorImpostoImportacaoMeta,
//           valorImpostoImportacao.isAcceptableOrUnknown(
//               data['VALOR_IMPOSTO_IMPORTACAO']!, _valorImpostoImportacaoMeta));
//     }
//     if (data.containsKey('VALOR_IOF')) {
//       context.handle(_valorIofMeta,
//           valorIof.isAcceptableOrUnknown(data['VALOR_IOF']!, _valorIofMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeDetalheImpostoIi map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeDetalheImpostoIi(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idNfeDetalhe: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_NFE_DETALHE']),
//       valorBcIi: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_BC_II']),
//       valorDespesasAduaneiras: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_DESPESAS_ADUANEIRAS']),
//       valorImpostoImportacao: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_IMPOSTO_IMPORTACAO']),
//       valorIof: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_IOF']),
//     );
//   }

//   @override
//   $NfeDetalheImpostoIisTable createAlias(String alias) {
//     return $NfeDetalheImpostoIisTable(_db, alias);
//   }
// }

// class NfeDetalheImpostoIpisCompanion
//     extends UpdateCompanion<NfeDetalheImpostoIpi> {
//   final Value<int> id;
//   final Value<int?> idNfeDetalhe;
//   final Value<String?> cnpjProdutor;
//   final Value<String?> codigoSeloIpi;
//   final Value<int?> quantidadeSeloIpi;
//   final Value<String?> enquadramentoLegalIpi;
//   final Value<String?> cstIpi;
//   final Value<double?> valorBaseCalculoIpi;
//   final Value<double?> quantidadeUnidadeTributavel;
//   final Value<double?> valorUnidadeTributavel;
//   final Value<double?> aliquotaIpi;
//   final Value<double?> valorIpi;
//   const NfeDetalheImpostoIpisCompanion({
//     this.id = const Value.absent(),
//     this.idNfeDetalhe = const Value.absent(),
//     this.cnpjProdutor = const Value.absent(),
//     this.codigoSeloIpi = const Value.absent(),
//     this.quantidadeSeloIpi = const Value.absent(),
//     this.enquadramentoLegalIpi = const Value.absent(),
//     this.cstIpi = const Value.absent(),
//     this.valorBaseCalculoIpi = const Value.absent(),
//     this.quantidadeUnidadeTributavel = const Value.absent(),
//     this.valorUnidadeTributavel = const Value.absent(),
//     this.aliquotaIpi = const Value.absent(),
//     this.valorIpi = const Value.absent(),
//   });
//   NfeDetalheImpostoIpisCompanion.insert({
//     this.id = const Value.absent(),
//     this.idNfeDetalhe = const Value.absent(),
//     this.cnpjProdutor = const Value.absent(),
//     this.codigoSeloIpi = const Value.absent(),
//     this.quantidadeSeloIpi = const Value.absent(),
//     this.enquadramentoLegalIpi = const Value.absent(),
//     this.cstIpi = const Value.absent(),
//     this.valorBaseCalculoIpi = const Value.absent(),
//     this.quantidadeUnidadeTributavel = const Value.absent(),
//     this.valorUnidadeTributavel = const Value.absent(),
//     this.aliquotaIpi = const Value.absent(),
//     this.valorIpi = const Value.absent(),
//   });
//   static Insertable<NfeDetalheImpostoIpi> custom({
//     Expression<int>? id,
//     Expression<int?>? idNfeDetalhe,
//     Expression<String?>? cnpjProdutor,
//     Expression<String?>? codigoSeloIpi,
//     Expression<int?>? quantidadeSeloIpi,
//     Expression<String?>? enquadramentoLegalIpi,
//     Expression<String?>? cstIpi,
//     Expression<double?>? valorBaseCalculoIpi,
//     Expression<double?>? quantidadeUnidadeTributavel,
//     Expression<double?>? valorUnidadeTributavel,
//     Expression<double?>? aliquotaIpi,
//     Expression<double?>? valorIpi,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idNfeDetalhe != null) 'ID_NFE_DETALHE': idNfeDetalhe,
//       if (cnpjProdutor != null) 'CNPJ_PRODUTOR': cnpjProdutor,
//       if (codigoSeloIpi != null) 'CODIGO_SELO_IPI': codigoSeloIpi,
//       if (quantidadeSeloIpi != null) 'QUANTIDADE_SELO_IPI': quantidadeSeloIpi,
//       if (enquadramentoLegalIpi != null)
//         'ENQUADRAMENTO_LEGAL_IPI': enquadramentoLegalIpi,
//       if (cstIpi != null) 'CST_IPI': cstIpi,
//       if (valorBaseCalculoIpi != null)
//         'VALOR_BASE_CALCULO_IPI': valorBaseCalculoIpi,
//       if (quantidadeUnidadeTributavel != null)
//         'QUANTIDADE_UNIDADE_TRIBUTAVEL': quantidadeUnidadeTributavel,
//       if (valorUnidadeTributavel != null)
//         'VALOR_UNIDADE_TRIBUTAVEL': valorUnidadeTributavel,
//       if (aliquotaIpi != null) 'ALIQUOTA_IPI': aliquotaIpi,
//       if (valorIpi != null) 'VALOR_IPI': valorIpi,
//     });
//   }

//   NfeDetalheImpostoIpisCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idNfeDetalhe,
//       Value<String?>? cnpjProdutor,
//       Value<String?>? codigoSeloIpi,
//       Value<int?>? quantidadeSeloIpi,
//       Value<String?>? enquadramentoLegalIpi,
//       Value<String?>? cstIpi,
//       Value<double?>? valorBaseCalculoIpi,
//       Value<double?>? quantidadeUnidadeTributavel,
//       Value<double?>? valorUnidadeTributavel,
//       Value<double?>? aliquotaIpi,
//       Value<double?>? valorIpi}) {
//     return NfeDetalheImpostoIpisCompanion(
//       id: id ?? this.id,
//       idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
//       cnpjProdutor: cnpjProdutor ?? this.cnpjProdutor,
//       codigoSeloIpi: codigoSeloIpi ?? this.codigoSeloIpi,
//       quantidadeSeloIpi: quantidadeSeloIpi ?? this.quantidadeSeloIpi,
//       enquadramentoLegalIpi:
//           enquadramentoLegalIpi ?? this.enquadramentoLegalIpi,
//       cstIpi: cstIpi ?? this.cstIpi,
//       valorBaseCalculoIpi: valorBaseCalculoIpi ?? this.valorBaseCalculoIpi,
//       quantidadeUnidadeTributavel:
//           quantidadeUnidadeTributavel ?? this.quantidadeUnidadeTributavel,
//       valorUnidadeTributavel:
//           valorUnidadeTributavel ?? this.valorUnidadeTributavel,
//       aliquotaIpi: aliquotaIpi ?? this.aliquotaIpi,
//       valorIpi: valorIpi ?? this.valorIpi,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idNfeDetalhe.present) {
//       map['ID_NFE_DETALHE'] = Variable<int?>(idNfeDetalhe.value);
//     }
//     if (cnpjProdutor.present) {
//       map['CNPJ_PRODUTOR'] = Variable<String?>(cnpjProdutor.value);
//     }
//     if (codigoSeloIpi.present) {
//       map['CODIGO_SELO_IPI'] = Variable<String?>(codigoSeloIpi.value);
//     }
//     if (quantidadeSeloIpi.present) {
//       map['QUANTIDADE_SELO_IPI'] = Variable<int?>(quantidadeSeloIpi.value);
//     }
//     if (enquadramentoLegalIpi.present) {
//       map['ENQUADRAMENTO_LEGAL_IPI'] =
//           Variable<String?>(enquadramentoLegalIpi.value);
//     }
//     if (cstIpi.present) {
//       map['CST_IPI'] = Variable<String?>(cstIpi.value);
//     }
//     if (valorBaseCalculoIpi.present) {
//       map['VALOR_BASE_CALCULO_IPI'] =
//           Variable<double?>(valorBaseCalculoIpi.value);
//     }
//     if (quantidadeUnidadeTributavel.present) {
//       map['QUANTIDADE_UNIDADE_TRIBUTAVEL'] =
//           Variable<double?>(quantidadeUnidadeTributavel.value);
//     }
//     if (valorUnidadeTributavel.present) {
//       map['VALOR_UNIDADE_TRIBUTAVEL'] =
//           Variable<double?>(valorUnidadeTributavel.value);
//     }
//     if (aliquotaIpi.present) {
//       map['ALIQUOTA_IPI'] = Variable<double?>(aliquotaIpi.value);
//     }
//     if (valorIpi.present) {
//       map['VALOR_IPI'] = Variable<double?>(valorIpi.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeDetalheImpostoIpisCompanion(')
//           ..write('id: $id, ')
//           ..write('idNfeDetalhe: $idNfeDetalhe, ')
//           ..write('cnpjProdutor: $cnpjProdutor, ')
//           ..write('codigoSeloIpi: $codigoSeloIpi, ')
//           ..write('quantidadeSeloIpi: $quantidadeSeloIpi, ')
//           ..write('enquadramentoLegalIpi: $enquadramentoLegalIpi, ')
//           ..write('cstIpi: $cstIpi, ')
//           ..write('valorBaseCalculoIpi: $valorBaseCalculoIpi, ')
//           ..write('quantidadeUnidadeTributavel: $quantidadeUnidadeTributavel, ')
//           ..write('valorUnidadeTributavel: $valorUnidadeTributavel, ')
//           ..write('aliquotaIpi: $aliquotaIpi, ')
//           ..write('valorIpi: $valorIpi')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeDetalheImpostoIpisTable extends NfeDetalheImpostoIpis
//     with TableInfo<$NfeDetalheImpostoIpisTable, NfeDetalheImpostoIpi> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeDetalheImpostoIpisTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idNfeDetalheMeta =
//       const VerificationMeta('idNfeDetalhe');
//   late final GeneratedColumn<int?> idNfeDetalhe = GeneratedColumn<int?>(
//       'ID_NFE_DETALHE', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES NFE_DETALHE(ID)');
//   final VerificationMeta _cnpjProdutorMeta =
//       const VerificationMeta('cnpjProdutor');
//   late final GeneratedColumn<String?> cnpjProdutor = GeneratedColumn<String?>(
//       'CNPJ_PRODUTOR', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _codigoSeloIpiMeta =
//       const VerificationMeta('codigoSeloIpi');
//   late final GeneratedColumn<String?> codigoSeloIpi = GeneratedColumn<String?>(
//       'CODIGO_SELO_IPI', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _quantidadeSeloIpiMeta =
//       const VerificationMeta('quantidadeSeloIpi');
//   late final GeneratedColumn<int?> quantidadeSeloIpi = GeneratedColumn<int?>(
//       'QUANTIDADE_SELO_IPI', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _enquadramentoLegalIpiMeta =
//       const VerificationMeta('enquadramentoLegalIpi');
//   late final GeneratedColumn<String?> enquadramentoLegalIpi =
//       GeneratedColumn<String?>('ENQUADRAMENTO_LEGAL_IPI', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 3),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _cstIpiMeta = const VerificationMeta('cstIpi');
//   late final GeneratedColumn<String?> cstIpi = GeneratedColumn<String?>(
//       'CST_IPI', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _valorBaseCalculoIpiMeta =
//       const VerificationMeta('valorBaseCalculoIpi');
//   late final GeneratedColumn<double?> valorBaseCalculoIpi =
//       GeneratedColumn<double?>('VALOR_BASE_CALCULO_IPI', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _quantidadeUnidadeTributavelMeta =
//       const VerificationMeta('quantidadeUnidadeTributavel');
//   late final GeneratedColumn<double?> quantidadeUnidadeTributavel =
//       GeneratedColumn<double?>(
//           'QUANTIDADE_UNIDADE_TRIBUTAVEL', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorUnidadeTributavelMeta =
//       const VerificationMeta('valorUnidadeTributavel');
//   late final GeneratedColumn<double?> valorUnidadeTributavel =
//       GeneratedColumn<double?>('VALOR_UNIDADE_TRIBUTAVEL', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _aliquotaIpiMeta =
//       const VerificationMeta('aliquotaIpi');
//   late final GeneratedColumn<double?> aliquotaIpi = GeneratedColumn<double?>(
//       'ALIQUOTA_IPI', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorIpiMeta = const VerificationMeta('valorIpi');
//   late final GeneratedColumn<double?> valorIpi = GeneratedColumn<double?>(
//       'VALOR_IPI', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idNfeDetalhe,
//         cnpjProdutor,
//         codigoSeloIpi,
//         quantidadeSeloIpi,
//         enquadramentoLegalIpi,
//         cstIpi,
//         valorBaseCalculoIpi,
//         quantidadeUnidadeTributavel,
//         valorUnidadeTributavel,
//         aliquotaIpi,
//         valorIpi
//       ];
//   @override
//   String get aliasedName => _alias ?? 'NFE_DETALHE_IMPOSTO_IPI';
//   @override
//   String get actualTableName => 'NFE_DETALHE_IMPOSTO_IPI';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<NfeDetalheImpostoIpi> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_NFE_DETALHE')) {
//       context.handle(
//           _idNfeDetalheMeta,
//           idNfeDetalhe.isAcceptableOrUnknown(
//               data['ID_NFE_DETALHE']!, _idNfeDetalheMeta));
//     }
//     if (data.containsKey('CNPJ_PRODUTOR')) {
//       context.handle(
//           _cnpjProdutorMeta,
//           cnpjProdutor.isAcceptableOrUnknown(
//               data['CNPJ_PRODUTOR']!, _cnpjProdutorMeta));
//     }
//     if (data.containsKey('CODIGO_SELO_IPI')) {
//       context.handle(
//           _codigoSeloIpiMeta,
//           codigoSeloIpi.isAcceptableOrUnknown(
//               data['CODIGO_SELO_IPI']!, _codigoSeloIpiMeta));
//     }
//     if (data.containsKey('QUANTIDADE_SELO_IPI')) {
//       context.handle(
//           _quantidadeSeloIpiMeta,
//           quantidadeSeloIpi.isAcceptableOrUnknown(
//               data['QUANTIDADE_SELO_IPI']!, _quantidadeSeloIpiMeta));
//     }
//     if (data.containsKey('ENQUADRAMENTO_LEGAL_IPI')) {
//       context.handle(
//           _enquadramentoLegalIpiMeta,
//           enquadramentoLegalIpi.isAcceptableOrUnknown(
//               data['ENQUADRAMENTO_LEGAL_IPI']!, _enquadramentoLegalIpiMeta));
//     }
//     if (data.containsKey('CST_IPI')) {
//       context.handle(_cstIpiMeta,
//           cstIpi.isAcceptableOrUnknown(data['CST_IPI']!, _cstIpiMeta));
//     }
//     if (data.containsKey('VALOR_BASE_CALCULO_IPI')) {
//       context.handle(
//           _valorBaseCalculoIpiMeta,
//           valorBaseCalculoIpi.isAcceptableOrUnknown(
//               data['VALOR_BASE_CALCULO_IPI']!, _valorBaseCalculoIpiMeta));
//     }
//     if (data.containsKey('QUANTIDADE_UNIDADE_TRIBUTAVEL')) {
//       context.handle(
//           _quantidadeUnidadeTributavelMeta,
//           quantidadeUnidadeTributavel.isAcceptableOrUnknown(
//               data['QUANTIDADE_UNIDADE_TRIBUTAVEL']!,
//               _quantidadeUnidadeTributavelMeta));
//     }
//     if (data.containsKey('VALOR_UNIDADE_TRIBUTAVEL')) {
//       context.handle(
//           _valorUnidadeTributavelMeta,
//           valorUnidadeTributavel.isAcceptableOrUnknown(
//               data['VALOR_UNIDADE_TRIBUTAVEL']!, _valorUnidadeTributavelMeta));
//     }
//     if (data.containsKey('ALIQUOTA_IPI')) {
//       context.handle(
//           _aliquotaIpiMeta,
//           aliquotaIpi.isAcceptableOrUnknown(
//               data['ALIQUOTA_IPI']!, _aliquotaIpiMeta));
//     }
//     if (data.containsKey('VALOR_IPI')) {
//       context.handle(_valorIpiMeta,
//           valorIpi.isAcceptableOrUnknown(data['VALOR_IPI']!, _valorIpiMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeDetalheImpostoIpi map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeDetalheImpostoIpi(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idNfeDetalhe: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_NFE_DETALHE']),
//       cnpjProdutor: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CNPJ_PRODUTOR']),
//       codigoSeloIpi: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO_SELO_IPI']),
//       quantidadeSeloIpi: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}QUANTIDADE_SELO_IPI']),
//       enquadramentoLegalIpi: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ENQUADRAMENTO_LEGAL_IPI']),
//       cstIpi: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CST_IPI']),
//       valorBaseCalculoIpi: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_BASE_CALCULO_IPI']),
//       quantidadeUnidadeTributavel: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}QUANTIDADE_UNIDADE_TRIBUTAVEL']),
//       valorUnidadeTributavel: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_UNIDADE_TRIBUTAVEL']),
//       aliquotaIpi: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ALIQUOTA_IPI']),
//       valorIpi: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_IPI']),
//     );
//   }

//   @override
//   $NfeDetalheImpostoIpisTable createAlias(String alias) {
//     return $NfeDetalheImpostoIpisTable(_db, alias);
//   }
// }

// class NfeDetalheImpostoIssqnsCompanion
//     extends UpdateCompanion<NfeDetalheImpostoIssqn> {
//   final Value<int> id;
//   final Value<int?> idNfeDetalhe;
//   final Value<double?> baseCalculoIssqn;
//   final Value<double?> aliquotaIssqn;
//   final Value<double?> valorIssqn;
//   final Value<int?> municipioIssqn;
//   final Value<int?> itemListaServicos;
//   final Value<double?> valorDeducao;
//   final Value<double?> valorOutrasRetencoes;
//   final Value<double?> valorDescontoIncondicionado;
//   final Value<double?> valorDescontoCondicionado;
//   final Value<double?> valorRetencaoIss;
//   final Value<String?> indicadorExigibilidadeIss;
//   final Value<String?> codigoServico;
//   final Value<int?> municipioIncidencia;
//   final Value<int?> paisSevicoPrestado;
//   final Value<String?> numeroProcesso;
//   final Value<String?> indicadorIncentivoFiscal;
//   const NfeDetalheImpostoIssqnsCompanion({
//     this.id = const Value.absent(),
//     this.idNfeDetalhe = const Value.absent(),
//     this.baseCalculoIssqn = const Value.absent(),
//     this.aliquotaIssqn = const Value.absent(),
//     this.valorIssqn = const Value.absent(),
//     this.municipioIssqn = const Value.absent(),
//     this.itemListaServicos = const Value.absent(),
//     this.valorDeducao = const Value.absent(),
//     this.valorOutrasRetencoes = const Value.absent(),
//     this.valorDescontoIncondicionado = const Value.absent(),
//     this.valorDescontoCondicionado = const Value.absent(),
//     this.valorRetencaoIss = const Value.absent(),
//     this.indicadorExigibilidadeIss = const Value.absent(),
//     this.codigoServico = const Value.absent(),
//     this.municipioIncidencia = const Value.absent(),
//     this.paisSevicoPrestado = const Value.absent(),
//     this.numeroProcesso = const Value.absent(),
//     this.indicadorIncentivoFiscal = const Value.absent(),
//   });
//   NfeDetalheImpostoIssqnsCompanion.insert({
//     this.id = const Value.absent(),
//     this.idNfeDetalhe = const Value.absent(),
//     this.baseCalculoIssqn = const Value.absent(),
//     this.aliquotaIssqn = const Value.absent(),
//     this.valorIssqn = const Value.absent(),
//     this.municipioIssqn = const Value.absent(),
//     this.itemListaServicos = const Value.absent(),
//     this.valorDeducao = const Value.absent(),
//     this.valorOutrasRetencoes = const Value.absent(),
//     this.valorDescontoIncondicionado = const Value.absent(),
//     this.valorDescontoCondicionado = const Value.absent(),
//     this.valorRetencaoIss = const Value.absent(),
//     this.indicadorExigibilidadeIss = const Value.absent(),
//     this.codigoServico = const Value.absent(),
//     this.municipioIncidencia = const Value.absent(),
//     this.paisSevicoPrestado = const Value.absent(),
//     this.numeroProcesso = const Value.absent(),
//     this.indicadorIncentivoFiscal = const Value.absent(),
//   });
//   static Insertable<NfeDetalheImpostoIssqn> custom({
//     Expression<int>? id,
//     Expression<int?>? idNfeDetalhe,
//     Expression<double?>? baseCalculoIssqn,
//     Expression<double?>? aliquotaIssqn,
//     Expression<double?>? valorIssqn,
//     Expression<int?>? municipioIssqn,
//     Expression<int?>? itemListaServicos,
//     Expression<double?>? valorDeducao,
//     Expression<double?>? valorOutrasRetencoes,
//     Expression<double?>? valorDescontoIncondicionado,
//     Expression<double?>? valorDescontoCondicionado,
//     Expression<double?>? valorRetencaoIss,
//     Expression<String?>? indicadorExigibilidadeIss,
//     Expression<String?>? codigoServico,
//     Expression<int?>? municipioIncidencia,
//     Expression<int?>? paisSevicoPrestado,
//     Expression<String?>? numeroProcesso,
//     Expression<String?>? indicadorIncentivoFiscal,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idNfeDetalhe != null) 'ID_NFE_DETALHE': idNfeDetalhe,
//       if (baseCalculoIssqn != null) 'BASE_CALCULO_ISSQN': baseCalculoIssqn,
//       if (aliquotaIssqn != null) 'ALIQUOTA_ISSQN': aliquotaIssqn,
//       if (valorIssqn != null) 'VALOR_ISSQN': valorIssqn,
//       if (municipioIssqn != null) 'MUNICIPIO_ISSQN': municipioIssqn,
//       if (itemListaServicos != null) 'ITEM_LISTA_SERVICOS': itemListaServicos,
//       if (valorDeducao != null) 'VALOR_DEDUCAO': valorDeducao,
//       if (valorOutrasRetencoes != null)
//         'VALOR_OUTRAS_RETENCOES': valorOutrasRetencoes,
//       if (valorDescontoIncondicionado != null)
//         'VALOR_DESCONTO_INCONDICIONADO': valorDescontoIncondicionado,
//       if (valorDescontoCondicionado != null)
//         'VALOR_DESCONTO_CONDICIONADO': valorDescontoCondicionado,
//       if (valorRetencaoIss != null) 'VALOR_RETENCAO_ISS': valorRetencaoIss,
//       if (indicadorExigibilidadeIss != null)
//         'INDICADOR_EXIGIBILIDADE_ISS': indicadorExigibilidadeIss,
//       if (codigoServico != null) 'CODIGO_SERVICO': codigoServico,
//       if (municipioIncidencia != null)
//         'MUNICIPIO_INCIDENCIA': municipioIncidencia,
//       if (paisSevicoPrestado != null)
//         'PAIS_SEVICO_PRESTADO': paisSevicoPrestado,
//       if (numeroProcesso != null) 'NUMERO_PROCESSO': numeroProcesso,
//       if (indicadorIncentivoFiscal != null)
//         'INDICADOR_INCENTIVO_FISCAL': indicadorIncentivoFiscal,
//     });
//   }

//   NfeDetalheImpostoIssqnsCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idNfeDetalhe,
//       Value<double?>? baseCalculoIssqn,
//       Value<double?>? aliquotaIssqn,
//       Value<double?>? valorIssqn,
//       Value<int?>? municipioIssqn,
//       Value<int?>? itemListaServicos,
//       Value<double?>? valorDeducao,
//       Value<double?>? valorOutrasRetencoes,
//       Value<double?>? valorDescontoIncondicionado,
//       Value<double?>? valorDescontoCondicionado,
//       Value<double?>? valorRetencaoIss,
//       Value<String?>? indicadorExigibilidadeIss,
//       Value<String?>? codigoServico,
//       Value<int?>? municipioIncidencia,
//       Value<int?>? paisSevicoPrestado,
//       Value<String?>? numeroProcesso,
//       Value<String?>? indicadorIncentivoFiscal}) {
//     return NfeDetalheImpostoIssqnsCompanion(
//       id: id ?? this.id,
//       idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
//       baseCalculoIssqn: baseCalculoIssqn ?? this.baseCalculoIssqn,
//       aliquotaIssqn: aliquotaIssqn ?? this.aliquotaIssqn,
//       valorIssqn: valorIssqn ?? this.valorIssqn,
//       municipioIssqn: municipioIssqn ?? this.municipioIssqn,
//       itemListaServicos: itemListaServicos ?? this.itemListaServicos,
//       valorDeducao: valorDeducao ?? this.valorDeducao,
//       valorOutrasRetencoes: valorOutrasRetencoes ?? this.valorOutrasRetencoes,
//       valorDescontoIncondicionado:
//           valorDescontoIncondicionado ?? this.valorDescontoIncondicionado,
//       valorDescontoCondicionado:
//           valorDescontoCondicionado ?? this.valorDescontoCondicionado,
//       valorRetencaoIss: valorRetencaoIss ?? this.valorRetencaoIss,
//       indicadorExigibilidadeIss:
//           indicadorExigibilidadeIss ?? this.indicadorExigibilidadeIss,
//       codigoServico: codigoServico ?? this.codigoServico,
//       municipioIncidencia: municipioIncidencia ?? this.municipioIncidencia,
//       paisSevicoPrestado: paisSevicoPrestado ?? this.paisSevicoPrestado,
//       numeroProcesso: numeroProcesso ?? this.numeroProcesso,
//       indicadorIncentivoFiscal:
//           indicadorIncentivoFiscal ?? this.indicadorIncentivoFiscal,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idNfeDetalhe.present) {
//       map['ID_NFE_DETALHE'] = Variable<int?>(idNfeDetalhe.value);
//     }
//     if (baseCalculoIssqn.present) {
//       map['BASE_CALCULO_ISSQN'] = Variable<double?>(baseCalculoIssqn.value);
//     }
//     if (aliquotaIssqn.present) {
//       map['ALIQUOTA_ISSQN'] = Variable<double?>(aliquotaIssqn.value);
//     }
//     if (valorIssqn.present) {
//       map['VALOR_ISSQN'] = Variable<double?>(valorIssqn.value);
//     }
//     if (municipioIssqn.present) {
//       map['MUNICIPIO_ISSQN'] = Variable<int?>(municipioIssqn.value);
//     }
//     if (itemListaServicos.present) {
//       map['ITEM_LISTA_SERVICOS'] = Variable<int?>(itemListaServicos.value);
//     }
//     if (valorDeducao.present) {
//       map['VALOR_DEDUCAO'] = Variable<double?>(valorDeducao.value);
//     }
//     if (valorOutrasRetencoes.present) {
//       map['VALOR_OUTRAS_RETENCOES'] =
//           Variable<double?>(valorOutrasRetencoes.value);
//     }
//     if (valorDescontoIncondicionado.present) {
//       map['VALOR_DESCONTO_INCONDICIONADO'] =
//           Variable<double?>(valorDescontoIncondicionado.value);
//     }
//     if (valorDescontoCondicionado.present) {
//       map['VALOR_DESCONTO_CONDICIONADO'] =
//           Variable<double?>(valorDescontoCondicionado.value);
//     }
//     if (valorRetencaoIss.present) {
//       map['VALOR_RETENCAO_ISS'] = Variable<double?>(valorRetencaoIss.value);
//     }
//     if (indicadorExigibilidadeIss.present) {
//       map['INDICADOR_EXIGIBILIDADE_ISS'] =
//           Variable<String?>(indicadorExigibilidadeIss.value);
//     }
//     if (codigoServico.present) {
//       map['CODIGO_SERVICO'] = Variable<String?>(codigoServico.value);
//     }
//     if (municipioIncidencia.present) {
//       map['MUNICIPIO_INCIDENCIA'] = Variable<int?>(municipioIncidencia.value);
//     }
//     if (paisSevicoPrestado.present) {
//       map['PAIS_SEVICO_PRESTADO'] = Variable<int?>(paisSevicoPrestado.value);
//     }
//     if (numeroProcesso.present) {
//       map['NUMERO_PROCESSO'] = Variable<String?>(numeroProcesso.value);
//     }
//     if (indicadorIncentivoFiscal.present) {
//       map['INDICADOR_INCENTIVO_FISCAL'] =
//           Variable<String?>(indicadorIncentivoFiscal.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeDetalheImpostoIssqnsCompanion(')
//           ..write('id: $id, ')
//           ..write('idNfeDetalhe: $idNfeDetalhe, ')
//           ..write('baseCalculoIssqn: $baseCalculoIssqn, ')
//           ..write('aliquotaIssqn: $aliquotaIssqn, ')
//           ..write('valorIssqn: $valorIssqn, ')
//           ..write('municipioIssqn: $municipioIssqn, ')
//           ..write('itemListaServicos: $itemListaServicos, ')
//           ..write('valorDeducao: $valorDeducao, ')
//           ..write('valorOutrasRetencoes: $valorOutrasRetencoes, ')
//           ..write('valorDescontoIncondicionado: $valorDescontoIncondicionado, ')
//           ..write('valorDescontoCondicionado: $valorDescontoCondicionado, ')
//           ..write('valorRetencaoIss: $valorRetencaoIss, ')
//           ..write('indicadorExigibilidadeIss: $indicadorExigibilidadeIss, ')
//           ..write('codigoServico: $codigoServico, ')
//           ..write('municipioIncidencia: $municipioIncidencia, ')
//           ..write('paisSevicoPrestado: $paisSevicoPrestado, ')
//           ..write('numeroProcesso: $numeroProcesso, ')
//           ..write('indicadorIncentivoFiscal: $indicadorIncentivoFiscal')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeDetalheImpostoIssqnsTable extends NfeDetalheImpostoIssqns
//     with TableInfo<$NfeDetalheImpostoIssqnsTable, NfeDetalheImpostoIssqn> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeDetalheImpostoIssqnsTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idNfeDetalheMeta =
//       const VerificationMeta('idNfeDetalhe');
//   late final GeneratedColumn<int?> idNfeDetalhe = GeneratedColumn<int?>(
//       'ID_NFE_DETALHE', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES NFE_DETALHE(ID)');
//   final VerificationMeta _baseCalculoIssqnMeta =
//       const VerificationMeta('baseCalculoIssqn');
//   late final GeneratedColumn<double?> baseCalculoIssqn =
//       GeneratedColumn<double?>('BASE_CALCULO_ISSQN', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _aliquotaIssqnMeta =
//       const VerificationMeta('aliquotaIssqn');
//   late final GeneratedColumn<double?> aliquotaIssqn = GeneratedColumn<double?>(
//       'ALIQUOTA_ISSQN', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorIssqnMeta = const VerificationMeta('valorIssqn');
//   late final GeneratedColumn<double?> valorIssqn = GeneratedColumn<double?>(
//       'VALOR_ISSQN', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _municipioIssqnMeta =
//       const VerificationMeta('municipioIssqn');
//   late final GeneratedColumn<int?> municipioIssqn = GeneratedColumn<int?>(
//       'MUNICIPIO_ISSQN', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _itemListaServicosMeta =
//       const VerificationMeta('itemListaServicos');
//   late final GeneratedColumn<int?> itemListaServicos = GeneratedColumn<int?>(
//       'ITEM_LISTA_SERVICOS', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _valorDeducaoMeta =
//       const VerificationMeta('valorDeducao');
//   late final GeneratedColumn<double?> valorDeducao = GeneratedColumn<double?>(
//       'VALOR_DEDUCAO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorOutrasRetencoesMeta =
//       const VerificationMeta('valorOutrasRetencoes');
//   late final GeneratedColumn<double?> valorOutrasRetencoes =
//       GeneratedColumn<double?>('VALOR_OUTRAS_RETENCOES', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorDescontoIncondicionadoMeta =
//       const VerificationMeta('valorDescontoIncondicionado');
//   late final GeneratedColumn<double?> valorDescontoIncondicionado =
//       GeneratedColumn<double?>(
//           'VALOR_DESCONTO_INCONDICIONADO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorDescontoCondicionadoMeta =
//       const VerificationMeta('valorDescontoCondicionado');
//   late final GeneratedColumn<double?> valorDescontoCondicionado =
//       GeneratedColumn<double?>('VALOR_DESCONTO_CONDICIONADO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorRetencaoIssMeta =
//       const VerificationMeta('valorRetencaoIss');
//   late final GeneratedColumn<double?> valorRetencaoIss =
//       GeneratedColumn<double?>('VALOR_RETENCAO_ISS', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _indicadorExigibilidadeIssMeta =
//       const VerificationMeta('indicadorExigibilidadeIss');
//   late final GeneratedColumn<String?> indicadorExigibilidadeIss =
//       GeneratedColumn<String?>('INDICADOR_EXIGIBILIDADE_ISS', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _codigoServicoMeta =
//       const VerificationMeta('codigoServico');
//   late final GeneratedColumn<String?> codigoServico = GeneratedColumn<String?>(
//       'CODIGO_SERVICO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _municipioIncidenciaMeta =
//       const VerificationMeta('municipioIncidencia');
//   late final GeneratedColumn<int?> municipioIncidencia = GeneratedColumn<int?>(
//       'MUNICIPIO_INCIDENCIA', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _paisSevicoPrestadoMeta =
//       const VerificationMeta('paisSevicoPrestado');
//   late final GeneratedColumn<int?> paisSevicoPrestado = GeneratedColumn<int?>(
//       'PAIS_SEVICO_PRESTADO', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _numeroProcessoMeta =
//       const VerificationMeta('numeroProcesso');
//   late final GeneratedColumn<String?> numeroProcesso = GeneratedColumn<String?>(
//       'NUMERO_PROCESSO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 30),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _indicadorIncentivoFiscalMeta =
//       const VerificationMeta('indicadorIncentivoFiscal');
//   late final GeneratedColumn<String?> indicadorIncentivoFiscal =
//       GeneratedColumn<String?>('INDICADOR_INCENTIVO_FISCAL', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idNfeDetalhe,
//         baseCalculoIssqn,
//         aliquotaIssqn,
//         valorIssqn,
//         municipioIssqn,
//         itemListaServicos,
//         valorDeducao,
//         valorOutrasRetencoes,
//         valorDescontoIncondicionado,
//         valorDescontoCondicionado,
//         valorRetencaoIss,
//         indicadorExigibilidadeIss,
//         codigoServico,
//         municipioIncidencia,
//         paisSevicoPrestado,
//         numeroProcesso,
//         indicadorIncentivoFiscal
//       ];
//   @override
//   String get aliasedName => _alias ?? 'NFE_DETALHE_IMPOSTO_ISSQN';
//   @override
//   String get actualTableName => 'NFE_DETALHE_IMPOSTO_ISSQN';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<NfeDetalheImpostoIssqn> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_NFE_DETALHE')) {
//       context.handle(
//           _idNfeDetalheMeta,
//           idNfeDetalhe.isAcceptableOrUnknown(
//               data['ID_NFE_DETALHE']!, _idNfeDetalheMeta));
//     }
//     if (data.containsKey('BASE_CALCULO_ISSQN')) {
//       context.handle(
//           _baseCalculoIssqnMeta,
//           baseCalculoIssqn.isAcceptableOrUnknown(
//               data['BASE_CALCULO_ISSQN']!, _baseCalculoIssqnMeta));
//     }
//     if (data.containsKey('ALIQUOTA_ISSQN')) {
//       context.handle(
//           _aliquotaIssqnMeta,
//           aliquotaIssqn.isAcceptableOrUnknown(
//               data['ALIQUOTA_ISSQN']!, _aliquotaIssqnMeta));
//     }
//     if (data.containsKey('VALOR_ISSQN')) {
//       context.handle(
//           _valorIssqnMeta,
//           valorIssqn.isAcceptableOrUnknown(
//               data['VALOR_ISSQN']!, _valorIssqnMeta));
//     }
//     if (data.containsKey('MUNICIPIO_ISSQN')) {
//       context.handle(
//           _municipioIssqnMeta,
//           municipioIssqn.isAcceptableOrUnknown(
//               data['MUNICIPIO_ISSQN']!, _municipioIssqnMeta));
//     }
//     if (data.containsKey('ITEM_LISTA_SERVICOS')) {
//       context.handle(
//           _itemListaServicosMeta,
//           itemListaServicos.isAcceptableOrUnknown(
//               data['ITEM_LISTA_SERVICOS']!, _itemListaServicosMeta));
//     }
//     if (data.containsKey('VALOR_DEDUCAO')) {
//       context.handle(
//           _valorDeducaoMeta,
//           valorDeducao.isAcceptableOrUnknown(
//               data['VALOR_DEDUCAO']!, _valorDeducaoMeta));
//     }
//     if (data.containsKey('VALOR_OUTRAS_RETENCOES')) {
//       context.handle(
//           _valorOutrasRetencoesMeta,
//           valorOutrasRetencoes.isAcceptableOrUnknown(
//               data['VALOR_OUTRAS_RETENCOES']!, _valorOutrasRetencoesMeta));
//     }
//     if (data.containsKey('VALOR_DESCONTO_INCONDICIONADO')) {
//       context.handle(
//           _valorDescontoIncondicionadoMeta,
//           valorDescontoIncondicionado.isAcceptableOrUnknown(
//               data['VALOR_DESCONTO_INCONDICIONADO']!,
//               _valorDescontoIncondicionadoMeta));
//     }
//     if (data.containsKey('VALOR_DESCONTO_CONDICIONADO')) {
//       context.handle(
//           _valorDescontoCondicionadoMeta,
//           valorDescontoCondicionado.isAcceptableOrUnknown(
//               data['VALOR_DESCONTO_CONDICIONADO']!,
//               _valorDescontoCondicionadoMeta));
//     }
//     if (data.containsKey('VALOR_RETENCAO_ISS')) {
//       context.handle(
//           _valorRetencaoIssMeta,
//           valorRetencaoIss.isAcceptableOrUnknown(
//               data['VALOR_RETENCAO_ISS']!, _valorRetencaoIssMeta));
//     }
//     if (data.containsKey('INDICADOR_EXIGIBILIDADE_ISS')) {
//       context.handle(
//           _indicadorExigibilidadeIssMeta,
//           indicadorExigibilidadeIss.isAcceptableOrUnknown(
//               data['INDICADOR_EXIGIBILIDADE_ISS']!,
//               _indicadorExigibilidadeIssMeta));
//     }
//     if (data.containsKey('CODIGO_SERVICO')) {
//       context.handle(
//           _codigoServicoMeta,
//           codigoServico.isAcceptableOrUnknown(
//               data['CODIGO_SERVICO']!, _codigoServicoMeta));
//     }
//     if (data.containsKey('MUNICIPIO_INCIDENCIA')) {
//       context.handle(
//           _municipioIncidenciaMeta,
//           municipioIncidencia.isAcceptableOrUnknown(
//               data['MUNICIPIO_INCIDENCIA']!, _municipioIncidenciaMeta));
//     }
//     if (data.containsKey('PAIS_SEVICO_PRESTADO')) {
//       context.handle(
//           _paisSevicoPrestadoMeta,
//           paisSevicoPrestado.isAcceptableOrUnknown(
//               data['PAIS_SEVICO_PRESTADO']!, _paisSevicoPrestadoMeta));
//     }
//     if (data.containsKey('NUMERO_PROCESSO')) {
//       context.handle(
//           _numeroProcessoMeta,
//           numeroProcesso.isAcceptableOrUnknown(
//               data['NUMERO_PROCESSO']!, _numeroProcessoMeta));
//     }
//     if (data.containsKey('INDICADOR_INCENTIVO_FISCAL')) {
//       context.handle(
//           _indicadorIncentivoFiscalMeta,
//           indicadorIncentivoFiscal.isAcceptableOrUnknown(
//               data['INDICADOR_INCENTIVO_FISCAL']!,
//               _indicadorIncentivoFiscalMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeDetalheImpostoIssqn map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeDetalheImpostoIssqn(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idNfeDetalhe: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_NFE_DETALHE']),
//       baseCalculoIssqn: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}BASE_CALCULO_ISSQN']),
//       aliquotaIssqn: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ALIQUOTA_ISSQN']),
//       valorIssqn: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_ISSQN']),
//       municipioIssqn: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}MUNICIPIO_ISSQN']),
//       itemListaServicos: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ITEM_LISTA_SERVICOS']),
//       valorDeducao: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_DEDUCAO']),
//       valorOutrasRetencoes: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_OUTRAS_RETENCOES']),
//       valorDescontoIncondicionado: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_DESCONTO_INCONDICIONADO']),
//       valorDescontoCondicionado: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_DESCONTO_CONDICIONADO']),
//       valorRetencaoIss: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_RETENCAO_ISS']),
//       indicadorExigibilidadeIss: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}INDICADOR_EXIGIBILIDADE_ISS']),
//       codigoServico: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO_SERVICO']),
//       municipioIncidencia: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}MUNICIPIO_INCIDENCIA']),
//       paisSevicoPrestado: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}PAIS_SEVICO_PRESTADO']),
//       numeroProcesso: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO_PROCESSO']),
//       indicadorIncentivoFiscal: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}INDICADOR_INCENTIVO_FISCAL']),
//     );
//   }

//   @override
//   $NfeDetalheImpostoIssqnsTable createAlias(String alias) {
//     return $NfeDetalheImpostoIssqnsTable(_db, alias);
//   }
// }

// class NfeDetalheImpostoPissCompanion
//     extends UpdateCompanion<NfeDetalheImpostoPis> {
//   final Value<int> id;
//   final Value<int?> idNfeDetalhe;
//   final Value<String?> cstPis;
//   final Value<double?> valorBaseCalculoPis;
//   final Value<double?> aliquotaPisPercentual;
//   final Value<double?> valorPis;
//   final Value<double?> quantidadeVendida;
//   final Value<double?> aliquotaPisReais;
//   const NfeDetalheImpostoPissCompanion({
//     this.id = const Value.absent(),
//     this.idNfeDetalhe = const Value.absent(),
//     this.cstPis = const Value.absent(),
//     this.valorBaseCalculoPis = const Value.absent(),
//     this.aliquotaPisPercentual = const Value.absent(),
//     this.valorPis = const Value.absent(),
//     this.quantidadeVendida = const Value.absent(),
//     this.aliquotaPisReais = const Value.absent(),
//   });
//   NfeDetalheImpostoPissCompanion.insert({
//     this.id = const Value.absent(),
//     this.idNfeDetalhe = const Value.absent(),
//     this.cstPis = const Value.absent(),
//     this.valorBaseCalculoPis = const Value.absent(),
//     this.aliquotaPisPercentual = const Value.absent(),
//     this.valorPis = const Value.absent(),
//     this.quantidadeVendida = const Value.absent(),
//     this.aliquotaPisReais = const Value.absent(),
//   });
//   static Insertable<NfeDetalheImpostoPis> custom({
//     Expression<int>? id,
//     Expression<int?>? idNfeDetalhe,
//     Expression<String?>? cstPis,
//     Expression<double?>? valorBaseCalculoPis,
//     Expression<double?>? aliquotaPisPercentual,
//     Expression<double?>? valorPis,
//     Expression<double?>? quantidadeVendida,
//     Expression<double?>? aliquotaPisReais,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idNfeDetalhe != null) 'ID_NFE_DETALHE': idNfeDetalhe,
//       if (cstPis != null) 'CST_PIS': cstPis,
//       if (valorBaseCalculoPis != null)
//         'VALOR_BASE_CALCULO_PIS': valorBaseCalculoPis,
//       if (aliquotaPisPercentual != null)
//         'ALIQUOTA_PIS_PERCENTUAL': aliquotaPisPercentual,
//       if (valorPis != null) 'VALOR_PIS': valorPis,
//       if (quantidadeVendida != null) 'QUANTIDADE_VENDIDA': quantidadeVendida,
//       if (aliquotaPisReais != null) 'ALIQUOTA_PIS_REAIS': aliquotaPisReais,
//     });
//   }

//   NfeDetalheImpostoPissCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idNfeDetalhe,
//       Value<String?>? cstPis,
//       Value<double?>? valorBaseCalculoPis,
//       Value<double?>? aliquotaPisPercentual,
//       Value<double?>? valorPis,
//       Value<double?>? quantidadeVendida,
//       Value<double?>? aliquotaPisReais}) {
//     return NfeDetalheImpostoPissCompanion(
//       id: id ?? this.id,
//       idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
//       cstPis: cstPis ?? this.cstPis,
//       valorBaseCalculoPis: valorBaseCalculoPis ?? this.valorBaseCalculoPis,
//       aliquotaPisPercentual:
//           aliquotaPisPercentual ?? this.aliquotaPisPercentual,
//       valorPis: valorPis ?? this.valorPis,
//       quantidadeVendida: quantidadeVendida ?? this.quantidadeVendida,
//       aliquotaPisReais: aliquotaPisReais ?? this.aliquotaPisReais,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idNfeDetalhe.present) {
//       map['ID_NFE_DETALHE'] = Variable<int?>(idNfeDetalhe.value);
//     }
//     if (cstPis.present) {
//       map['CST_PIS'] = Variable<String?>(cstPis.value);
//     }
//     if (valorBaseCalculoPis.present) {
//       map['VALOR_BASE_CALCULO_PIS'] =
//           Variable<double?>(valorBaseCalculoPis.value);
//     }
//     if (aliquotaPisPercentual.present) {
//       map['ALIQUOTA_PIS_PERCENTUAL'] =
//           Variable<double?>(aliquotaPisPercentual.value);
//     }
//     if (valorPis.present) {
//       map['VALOR_PIS'] = Variable<double?>(valorPis.value);
//     }
//     if (quantidadeVendida.present) {
//       map['QUANTIDADE_VENDIDA'] = Variable<double?>(quantidadeVendida.value);
//     }
//     if (aliquotaPisReais.present) {
//       map['ALIQUOTA_PIS_REAIS'] = Variable<double?>(aliquotaPisReais.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeDetalheImpostoPissCompanion(')
//           ..write('id: $id, ')
//           ..write('idNfeDetalhe: $idNfeDetalhe, ')
//           ..write('cstPis: $cstPis, ')
//           ..write('valorBaseCalculoPis: $valorBaseCalculoPis, ')
//           ..write('aliquotaPisPercentual: $aliquotaPisPercentual, ')
//           ..write('valorPis: $valorPis, ')
//           ..write('quantidadeVendida: $quantidadeVendida, ')
//           ..write('aliquotaPisReais: $aliquotaPisReais')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeDetalheImpostoPissTable extends NfeDetalheImpostoPiss
//     with TableInfo<$NfeDetalheImpostoPissTable, NfeDetalheImpostoPis> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeDetalheImpostoPissTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idNfeDetalheMeta =
//       const VerificationMeta('idNfeDetalhe');
//   late final GeneratedColumn<int?> idNfeDetalhe = GeneratedColumn<int?>(
//       'ID_NFE_DETALHE', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES NFE_DETALHE(ID)');
//   final VerificationMeta _cstPisMeta = const VerificationMeta('cstPis');
//   late final GeneratedColumn<String?> cstPis = GeneratedColumn<String?>(
//       'CST_PIS', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _valorBaseCalculoPisMeta =
//       const VerificationMeta('valorBaseCalculoPis');
//   late final GeneratedColumn<double?> valorBaseCalculoPis =
//       GeneratedColumn<double?>('VALOR_BASE_CALCULO_PIS', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _aliquotaPisPercentualMeta =
//       const VerificationMeta('aliquotaPisPercentual');
//   late final GeneratedColumn<double?> aliquotaPisPercentual =
//       GeneratedColumn<double?>('ALIQUOTA_PIS_PERCENTUAL', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorPisMeta = const VerificationMeta('valorPis');
//   late final GeneratedColumn<double?> valorPis = GeneratedColumn<double?>(
//       'VALOR_PIS', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _quantidadeVendidaMeta =
//       const VerificationMeta('quantidadeVendida');
//   late final GeneratedColumn<double?> quantidadeVendida =
//       GeneratedColumn<double?>('QUANTIDADE_VENDIDA', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _aliquotaPisReaisMeta =
//       const VerificationMeta('aliquotaPisReais');
//   late final GeneratedColumn<double?> aliquotaPisReais =
//       GeneratedColumn<double?>('ALIQUOTA_PIS_REAIS', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idNfeDetalhe,
//         cstPis,
//         valorBaseCalculoPis,
//         aliquotaPisPercentual,
//         valorPis,
//         quantidadeVendida,
//         aliquotaPisReais
//       ];
//   @override
//   String get aliasedName => _alias ?? 'NFE_DETALHE_IMPOSTO_PIS';
//   @override
//   String get actualTableName => 'NFE_DETALHE_IMPOSTO_PIS';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<NfeDetalheImpostoPis> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_NFE_DETALHE')) {
//       context.handle(
//           _idNfeDetalheMeta,
//           idNfeDetalhe.isAcceptableOrUnknown(
//               data['ID_NFE_DETALHE']!, _idNfeDetalheMeta));
//     }
//     if (data.containsKey('CST_PIS')) {
//       context.handle(_cstPisMeta,
//           cstPis.isAcceptableOrUnknown(data['CST_PIS']!, _cstPisMeta));
//     }
//     if (data.containsKey('VALOR_BASE_CALCULO_PIS')) {
//       context.handle(
//           _valorBaseCalculoPisMeta,
//           valorBaseCalculoPis.isAcceptableOrUnknown(
//               data['VALOR_BASE_CALCULO_PIS']!, _valorBaseCalculoPisMeta));
//     }
//     if (data.containsKey('ALIQUOTA_PIS_PERCENTUAL')) {
//       context.handle(
//           _aliquotaPisPercentualMeta,
//           aliquotaPisPercentual.isAcceptableOrUnknown(
//               data['ALIQUOTA_PIS_PERCENTUAL']!, _aliquotaPisPercentualMeta));
//     }
//     if (data.containsKey('VALOR_PIS')) {
//       context.handle(_valorPisMeta,
//           valorPis.isAcceptableOrUnknown(data['VALOR_PIS']!, _valorPisMeta));
//     }
//     if (data.containsKey('QUANTIDADE_VENDIDA')) {
//       context.handle(
//           _quantidadeVendidaMeta,
//           quantidadeVendida.isAcceptableOrUnknown(
//               data['QUANTIDADE_VENDIDA']!, _quantidadeVendidaMeta));
//     }
//     if (data.containsKey('ALIQUOTA_PIS_REAIS')) {
//       context.handle(
//           _aliquotaPisReaisMeta,
//           aliquotaPisReais.isAcceptableOrUnknown(
//               data['ALIQUOTA_PIS_REAIS']!, _aliquotaPisReaisMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeDetalheImpostoPis map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeDetalheImpostoPis(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idNfeDetalhe: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_NFE_DETALHE']),
//       cstPis: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CST_PIS']),
//       valorBaseCalculoPis: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_BASE_CALCULO_PIS']),
//       aliquotaPisPercentual: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ALIQUOTA_PIS_PERCENTUAL']),
//       valorPis: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_PIS']),
//       quantidadeVendida: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}QUANTIDADE_VENDIDA']),
//       aliquotaPisReais: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ALIQUOTA_PIS_REAIS']),
//     );
//   }

//   @override
//   $NfeDetalheImpostoPissTable createAlias(String alias) {
//     return $NfeDetalheImpostoPissTable(_db, alias);
//   }
// }

// class NfeDetalheImpostoPisStsCompanion
//     extends UpdateCompanion<NfeDetalheImpostoPisSt> {
//   final Value<int> id;
//   final Value<int?> idNfeDetalhe;
//   final Value<double?> valorBaseCalculoPisSt;
//   final Value<double?> aliquotaPisStPercentual;
//   final Value<double?> quantidadeVendidaPisSt;
//   final Value<double?> aliquotaPisStReais;
//   final Value<double?> valorPisSt;
//   const NfeDetalheImpostoPisStsCompanion({
//     this.id = const Value.absent(),
//     this.idNfeDetalhe = const Value.absent(),
//     this.valorBaseCalculoPisSt = const Value.absent(),
//     this.aliquotaPisStPercentual = const Value.absent(),
//     this.quantidadeVendidaPisSt = const Value.absent(),
//     this.aliquotaPisStReais = const Value.absent(),
//     this.valorPisSt = const Value.absent(),
//   });
//   NfeDetalheImpostoPisStsCompanion.insert({
//     this.id = const Value.absent(),
//     this.idNfeDetalhe = const Value.absent(),
//     this.valorBaseCalculoPisSt = const Value.absent(),
//     this.aliquotaPisStPercentual = const Value.absent(),
//     this.quantidadeVendidaPisSt = const Value.absent(),
//     this.aliquotaPisStReais = const Value.absent(),
//     this.valorPisSt = const Value.absent(),
//   });
//   static Insertable<NfeDetalheImpostoPisSt> custom({
//     Expression<int>? id,
//     Expression<int?>? idNfeDetalhe,
//     Expression<double?>? valorBaseCalculoPisSt,
//     Expression<double?>? aliquotaPisStPercentual,
//     Expression<double?>? quantidadeVendidaPisSt,
//     Expression<double?>? aliquotaPisStReais,
//     Expression<double?>? valorPisSt,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idNfeDetalhe != null) 'ID_NFE_DETALHE': idNfeDetalhe,
//       if (valorBaseCalculoPisSt != null)
//         'VALOR_BASE_CALCULO_PIS_ST': valorBaseCalculoPisSt,
//       if (aliquotaPisStPercentual != null)
//         'ALIQUOTA_PIS_ST_PERCENTUAL': aliquotaPisStPercentual,
//       if (quantidadeVendidaPisSt != null)
//         'QUANTIDADE_VENDIDA_PIS_ST': quantidadeVendidaPisSt,
//       if (aliquotaPisStReais != null)
//         'ALIQUOTA_PIS_ST_REAIS': aliquotaPisStReais,
//       if (valorPisSt != null) 'VALOR_PIS_ST': valorPisSt,
//     });
//   }

//   NfeDetalheImpostoPisStsCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idNfeDetalhe,
//       Value<double?>? valorBaseCalculoPisSt,
//       Value<double?>? aliquotaPisStPercentual,
//       Value<double?>? quantidadeVendidaPisSt,
//       Value<double?>? aliquotaPisStReais,
//       Value<double?>? valorPisSt}) {
//     return NfeDetalheImpostoPisStsCompanion(
//       id: id ?? this.id,
//       idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
//       valorBaseCalculoPisSt:
//           valorBaseCalculoPisSt ?? this.valorBaseCalculoPisSt,
//       aliquotaPisStPercentual:
//           aliquotaPisStPercentual ?? this.aliquotaPisStPercentual,
//       quantidadeVendidaPisSt:
//           quantidadeVendidaPisSt ?? this.quantidadeVendidaPisSt,
//       aliquotaPisStReais: aliquotaPisStReais ?? this.aliquotaPisStReais,
//       valorPisSt: valorPisSt ?? this.valorPisSt,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idNfeDetalhe.present) {
//       map['ID_NFE_DETALHE'] = Variable<int?>(idNfeDetalhe.value);
//     }
//     if (valorBaseCalculoPisSt.present) {
//       map['VALOR_BASE_CALCULO_PIS_ST'] =
//           Variable<double?>(valorBaseCalculoPisSt.value);
//     }
//     if (aliquotaPisStPercentual.present) {
//       map['ALIQUOTA_PIS_ST_PERCENTUAL'] =
//           Variable<double?>(aliquotaPisStPercentual.value);
//     }
//     if (quantidadeVendidaPisSt.present) {
//       map['QUANTIDADE_VENDIDA_PIS_ST'] =
//           Variable<double?>(quantidadeVendidaPisSt.value);
//     }
//     if (aliquotaPisStReais.present) {
//       map['ALIQUOTA_PIS_ST_REAIS'] =
//           Variable<double?>(aliquotaPisStReais.value);
//     }
//     if (valorPisSt.present) {
//       map['VALOR_PIS_ST'] = Variable<double?>(valorPisSt.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeDetalheImpostoPisStsCompanion(')
//           ..write('id: $id, ')
//           ..write('idNfeDetalhe: $idNfeDetalhe, ')
//           ..write('valorBaseCalculoPisSt: $valorBaseCalculoPisSt, ')
//           ..write('aliquotaPisStPercentual: $aliquotaPisStPercentual, ')
//           ..write('quantidadeVendidaPisSt: $quantidadeVendidaPisSt, ')
//           ..write('aliquotaPisStReais: $aliquotaPisStReais, ')
//           ..write('valorPisSt: $valorPisSt')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeDetalheImpostoPisStsTable extends NfeDetalheImpostoPisSts
//     with TableInfo<$NfeDetalheImpostoPisStsTable, NfeDetalheImpostoPisSt> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeDetalheImpostoPisStsTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idNfeDetalheMeta =
//       const VerificationMeta('idNfeDetalhe');
//   late final GeneratedColumn<int?> idNfeDetalhe = GeneratedColumn<int?>(
//       'ID_NFE_DETALHE', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES NFE_DETALHE(ID)');
//   final VerificationMeta _valorBaseCalculoPisStMeta =
//       const VerificationMeta('valorBaseCalculoPisSt');
//   late final GeneratedColumn<double?> valorBaseCalculoPisSt =
//       GeneratedColumn<double?>('VALOR_BASE_CALCULO_PIS_ST', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _aliquotaPisStPercentualMeta =
//       const VerificationMeta('aliquotaPisStPercentual');
//   late final GeneratedColumn<double?> aliquotaPisStPercentual =
//       GeneratedColumn<double?>('ALIQUOTA_PIS_ST_PERCENTUAL', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _quantidadeVendidaPisStMeta =
//       const VerificationMeta('quantidadeVendidaPisSt');
//   late final GeneratedColumn<double?> quantidadeVendidaPisSt =
//       GeneratedColumn<double?>('QUANTIDADE_VENDIDA_PIS_ST', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _aliquotaPisStReaisMeta =
//       const VerificationMeta('aliquotaPisStReais');
//   late final GeneratedColumn<double?> aliquotaPisStReais =
//       GeneratedColumn<double?>('ALIQUOTA_PIS_ST_REAIS', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorPisStMeta = const VerificationMeta('valorPisSt');
//   late final GeneratedColumn<double?> valorPisSt = GeneratedColumn<double?>(
//       'VALOR_PIS_ST', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idNfeDetalhe,
//         valorBaseCalculoPisSt,
//         aliquotaPisStPercentual,
//         quantidadeVendidaPisSt,
//         aliquotaPisStReais,
//         valorPisSt
//       ];
//   @override
//   String get aliasedName => _alias ?? 'NFE_DETALHE_IMPOSTO_PIS_ST';
//   @override
//   String get actualTableName => 'NFE_DETALHE_IMPOSTO_PIS_ST';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<NfeDetalheImpostoPisSt> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_NFE_DETALHE')) {
//       context.handle(
//           _idNfeDetalheMeta,
//           idNfeDetalhe.isAcceptableOrUnknown(
//               data['ID_NFE_DETALHE']!, _idNfeDetalheMeta));
//     }
//     if (data.containsKey('VALOR_BASE_CALCULO_PIS_ST')) {
//       context.handle(
//           _valorBaseCalculoPisStMeta,
//           valorBaseCalculoPisSt.isAcceptableOrUnknown(
//               data['VALOR_BASE_CALCULO_PIS_ST']!, _valorBaseCalculoPisStMeta));
//     }
//     if (data.containsKey('ALIQUOTA_PIS_ST_PERCENTUAL')) {
//       context.handle(
//           _aliquotaPisStPercentualMeta,
//           aliquotaPisStPercentual.isAcceptableOrUnknown(
//               data['ALIQUOTA_PIS_ST_PERCENTUAL']!,
//               _aliquotaPisStPercentualMeta));
//     }
//     if (data.containsKey('QUANTIDADE_VENDIDA_PIS_ST')) {
//       context.handle(
//           _quantidadeVendidaPisStMeta,
//           quantidadeVendidaPisSt.isAcceptableOrUnknown(
//               data['QUANTIDADE_VENDIDA_PIS_ST']!, _quantidadeVendidaPisStMeta));
//     }
//     if (data.containsKey('ALIQUOTA_PIS_ST_REAIS')) {
//       context.handle(
//           _aliquotaPisStReaisMeta,
//           aliquotaPisStReais.isAcceptableOrUnknown(
//               data['ALIQUOTA_PIS_ST_REAIS']!, _aliquotaPisStReaisMeta));
//     }
//     if (data.containsKey('VALOR_PIS_ST')) {
//       context.handle(
//           _valorPisStMeta,
//           valorPisSt.isAcceptableOrUnknown(
//               data['VALOR_PIS_ST']!, _valorPisStMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeDetalheImpostoPisSt map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeDetalheImpostoPisSt(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idNfeDetalhe: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_NFE_DETALHE']),
//       valorBaseCalculoPisSt: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_BASE_CALCULO_PIS_ST']),
//       aliquotaPisStPercentual: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ALIQUOTA_PIS_ST_PERCENTUAL']),
//       quantidadeVendidaPisSt: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}QUANTIDADE_VENDIDA_PIS_ST']),
//       aliquotaPisStReais: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ALIQUOTA_PIS_ST_REAIS']),
//       valorPisSt: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_PIS_ST']),
//     );
//   }

//   @override
//   $NfeDetalheImpostoPisStsTable createAlias(String alias) {
//     return $NfeDetalheImpostoPisStsTable(_db, alias);
//   }
// }

// class NfeDuplicatasCompanion extends UpdateCompanion<NfeDuplicata> {
//   final Value<int> id;
//   final Value<int?> idNfeFatura;
//   final Value<String?> numero;
//   final Value<DateTime?> dataVencimento;
//   final Value<double?> valor;
//   const NfeDuplicatasCompanion({
//     this.id = const Value.absent(),
//     this.idNfeFatura = const Value.absent(),
//     this.numero = const Value.absent(),
//     this.dataVencimento = const Value.absent(),
//     this.valor = const Value.absent(),
//   });
//   NfeDuplicatasCompanion.insert({
//     this.id = const Value.absent(),
//     this.idNfeFatura = const Value.absent(),
//     this.numero = const Value.absent(),
//     this.dataVencimento = const Value.absent(),
//     this.valor = const Value.absent(),
//   });
//   static Insertable<NfeDuplicata> custom({
//     Expression<int>? id,
//     Expression<int?>? idNfeFatura,
//     Expression<String?>? numero,
//     Expression<DateTime?>? dataVencimento,
//     Expression<double?>? valor,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idNfeFatura != null) 'ID_NFE_FATURA': idNfeFatura,
//       if (numero != null) 'NUMERO': numero,
//       if (dataVencimento != null) 'DATA_VENCIMENTO': dataVencimento,
//       if (valor != null) 'VALOR': valor,
//     });
//   }

//   NfeDuplicatasCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idNfeFatura,
//       Value<String?>? numero,
//       Value<DateTime?>? dataVencimento,
//       Value<double?>? valor}) {
//     return NfeDuplicatasCompanion(
//       id: id ?? this.id,
//       idNfeFatura: idNfeFatura ?? this.idNfeFatura,
//       numero: numero ?? this.numero,
//       dataVencimento: dataVencimento ?? this.dataVencimento,
//       valor: valor ?? this.valor,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idNfeFatura.present) {
//       map['ID_NFE_FATURA'] = Variable<int?>(idNfeFatura.value);
//     }
//     if (numero.present) {
//       map['NUMERO'] = Variable<String?>(numero.value);
//     }
//     if (dataVencimento.present) {
//       map['DATA_VENCIMENTO'] = Variable<DateTime?>(dataVencimento.value);
//     }
//     if (valor.present) {
//       map['VALOR'] = Variable<double?>(valor.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeDuplicatasCompanion(')
//           ..write('id: $id, ')
//           ..write('idNfeFatura: $idNfeFatura, ')
//           ..write('numero: $numero, ')
//           ..write('dataVencimento: $dataVencimento, ')
//           ..write('valor: $valor')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeDuplicatasTable extends NfeDuplicatas
//     with TableInfo<$NfeDuplicatasTable, NfeDuplicata> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeDuplicatasTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idNfeFaturaMeta =
//       const VerificationMeta('idNfeFatura');
//   late final GeneratedColumn<int?> idNfeFatura = GeneratedColumn<int?>(
//       'ID_NFE_FATURA', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES NFE_FATURA(ID)');
//   final VerificationMeta _numeroMeta = const VerificationMeta('numero');
//   late final GeneratedColumn<String?> numero = GeneratedColumn<String?>(
//       'NUMERO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _dataVencimentoMeta =
//       const VerificationMeta('dataVencimento');
//   late final GeneratedColumn<DateTime?> dataVencimento =
//       GeneratedColumn<DateTime?>('DATA_VENCIMENTO', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _valorMeta = const VerificationMeta('valor');
//   late final GeneratedColumn<double?> valor = GeneratedColumn<double?>(
//       'VALOR', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns =>
//       [id, idNfeFatura, numero, dataVencimento, valor];
//   @override
//   String get aliasedName => _alias ?? 'NFE_DUPLICATA';
//   @override
//   String get actualTableName => 'NFE_DUPLICATA';
//   @override
//   VerificationContext validateIntegrity(Insertable<NfeDuplicata> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_NFE_FATURA')) {
//       context.handle(
//           _idNfeFaturaMeta,
//           idNfeFatura.isAcceptableOrUnknown(
//               data['ID_NFE_FATURA']!, _idNfeFaturaMeta));
//     }
//     if (data.containsKey('NUMERO')) {
//       context.handle(_numeroMeta,
//           numero.isAcceptableOrUnknown(data['NUMERO']!, _numeroMeta));
//     }
//     if (data.containsKey('DATA_VENCIMENTO')) {
//       context.handle(
//           _dataVencimentoMeta,
//           dataVencimento.isAcceptableOrUnknown(
//               data['DATA_VENCIMENTO']!, _dataVencimentoMeta));
//     }
//     if (data.containsKey('VALOR')) {
//       context.handle(
//           _valorMeta, valor.isAcceptableOrUnknown(data['VALOR']!, _valorMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeDuplicata map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeDuplicata(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idNfeFatura: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_NFE_FATURA']),
//       numero: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO']),
//       dataVencimento: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_VENCIMENTO']),
//       valor: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR']),
//     );
//   }

//   @override
//   $NfeDuplicatasTable createAlias(String alias) {
//     return $NfeDuplicatasTable(_db, alias);
//   }
// }

// class NfeEmitentesCompanion extends UpdateCompanion<NfeEmitente> {
//   final Value<int> id;
//   final Value<int?> idNfeCabecalho;
//   final Value<String?> cnpj;
//   final Value<String?> cpf;
//   final Value<String?> nome;
//   final Value<String?> fantasia;
//   final Value<String?> logradouro;
//   final Value<String?> numero;
//   final Value<String?> complemento;
//   final Value<String?> bairro;
//   final Value<int?> codigoMunicipio;
//   final Value<String?> nomeMunicipio;
//   final Value<String?> uf;
//   final Value<String?> cep;
//   final Value<int?> codigoPais;
//   final Value<String?> nomePais;
//   final Value<String?> telefone;
//   final Value<String?> inscricaoEstadual;
//   final Value<String?> inscricaoEstadualSt;
//   final Value<String?> inscricaoMunicipal;
//   final Value<String?> cnae;
//   final Value<String?> crt;
//   const NfeEmitentesCompanion({
//     this.id = const Value.absent(),
//     this.idNfeCabecalho = const Value.absent(),
//     this.cnpj = const Value.absent(),
//     this.cpf = const Value.absent(),
//     this.nome = const Value.absent(),
//     this.fantasia = const Value.absent(),
//     this.logradouro = const Value.absent(),
//     this.numero = const Value.absent(),
//     this.complemento = const Value.absent(),
//     this.bairro = const Value.absent(),
//     this.codigoMunicipio = const Value.absent(),
//     this.nomeMunicipio = const Value.absent(),
//     this.uf = const Value.absent(),
//     this.cep = const Value.absent(),
//     this.codigoPais = const Value.absent(),
//     this.nomePais = const Value.absent(),
//     this.telefone = const Value.absent(),
//     this.inscricaoEstadual = const Value.absent(),
//     this.inscricaoEstadualSt = const Value.absent(),
//     this.inscricaoMunicipal = const Value.absent(),
//     this.cnae = const Value.absent(),
//     this.crt = const Value.absent(),
//   });
//   NfeEmitentesCompanion.insert({
//     this.id = const Value.absent(),
//     this.idNfeCabecalho = const Value.absent(),
//     this.cnpj = const Value.absent(),
//     this.cpf = const Value.absent(),
//     this.nome = const Value.absent(),
//     this.fantasia = const Value.absent(),
//     this.logradouro = const Value.absent(),
//     this.numero = const Value.absent(),
//     this.complemento = const Value.absent(),
//     this.bairro = const Value.absent(),
//     this.codigoMunicipio = const Value.absent(),
//     this.nomeMunicipio = const Value.absent(),
//     this.uf = const Value.absent(),
//     this.cep = const Value.absent(),
//     this.codigoPais = const Value.absent(),
//     this.nomePais = const Value.absent(),
//     this.telefone = const Value.absent(),
//     this.inscricaoEstadual = const Value.absent(),
//     this.inscricaoEstadualSt = const Value.absent(),
//     this.inscricaoMunicipal = const Value.absent(),
//     this.cnae = const Value.absent(),
//     this.crt = const Value.absent(),
//   });
//   static Insertable<NfeEmitente> custom({
//     Expression<int>? id,
//     Expression<int?>? idNfeCabecalho,
//     Expression<String?>? cnpj,
//     Expression<String?>? cpf,
//     Expression<String?>? nome,
//     Expression<String?>? fantasia,
//     Expression<String?>? logradouro,
//     Expression<String?>? numero,
//     Expression<String?>? complemento,
//     Expression<String?>? bairro,
//     Expression<int?>? codigoMunicipio,
//     Expression<String?>? nomeMunicipio,
//     Expression<String?>? uf,
//     Expression<String?>? cep,
//     Expression<int?>? codigoPais,
//     Expression<String?>? nomePais,
//     Expression<String?>? telefone,
//     Expression<String?>? inscricaoEstadual,
//     Expression<String?>? inscricaoEstadualSt,
//     Expression<String?>? inscricaoMunicipal,
//     Expression<String?>? cnae,
//     Expression<String?>? crt,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idNfeCabecalho != null) 'ID_NFE_CABECALHO': idNfeCabecalho,
//       if (cnpj != null) 'CNPJ': cnpj,
//       if (cpf != null) 'CPF': cpf,
//       if (nome != null) 'NOME': nome,
//       if (fantasia != null) 'FANTASIA': fantasia,
//       if (logradouro != null) 'LOGRADOURO': logradouro,
//       if (numero != null) 'NUMERO': numero,
//       if (complemento != null) 'COMPLEMENTO': complemento,
//       if (bairro != null) 'BAIRRO': bairro,
//       if (codigoMunicipio != null) 'CODIGO_MUNICIPIO': codigoMunicipio,
//       if (nomeMunicipio != null) 'NOME_MUNICIPIO': nomeMunicipio,
//       if (uf != null) 'UF': uf,
//       if (cep != null) 'CEP': cep,
//       if (codigoPais != null) 'CODIGO_PAIS': codigoPais,
//       if (nomePais != null) 'NOME_PAIS': nomePais,
//       if (telefone != null) 'TELEFONE': telefone,
//       if (inscricaoEstadual != null) 'INSCRICAO_ESTADUAL': inscricaoEstadual,
//       if (inscricaoEstadualSt != null)
//         'INSCRICAO_ESTADUAL_ST': inscricaoEstadualSt,
//       if (inscricaoMunicipal != null) 'INSCRICAO_MUNICIPAL': inscricaoMunicipal,
//       if (cnae != null) 'CNAE': cnae,
//       if (crt != null) 'CRT': crt,
//     });
//   }

//   NfeEmitentesCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idNfeCabecalho,
//       Value<String?>? cnpj,
//       Value<String?>? cpf,
//       Value<String?>? nome,
//       Value<String?>? fantasia,
//       Value<String?>? logradouro,
//       Value<String?>? numero,
//       Value<String?>? complemento,
//       Value<String?>? bairro,
//       Value<int?>? codigoMunicipio,
//       Value<String?>? nomeMunicipio,
//       Value<String?>? uf,
//       Value<String?>? cep,
//       Value<int?>? codigoPais,
//       Value<String?>? nomePais,
//       Value<String?>? telefone,
//       Value<String?>? inscricaoEstadual,
//       Value<String?>? inscricaoEstadualSt,
//       Value<String?>? inscricaoMunicipal,
//       Value<String?>? cnae,
//       Value<String?>? crt}) {
//     return NfeEmitentesCompanion(
//       id: id ?? this.id,
//       idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
//       cnpj: cnpj ?? this.cnpj,
//       cpf: cpf ?? this.cpf,
//       nome: nome ?? this.nome,
//       fantasia: fantasia ?? this.fantasia,
//       logradouro: logradouro ?? this.logradouro,
//       numero: numero ?? this.numero,
//       complemento: complemento ?? this.complemento,
//       bairro: bairro ?? this.bairro,
//       codigoMunicipio: codigoMunicipio ?? this.codigoMunicipio,
//       nomeMunicipio: nomeMunicipio ?? this.nomeMunicipio,
//       uf: uf ?? this.uf,
//       cep: cep ?? this.cep,
//       codigoPais: codigoPais ?? this.codigoPais,
//       nomePais: nomePais ?? this.nomePais,
//       telefone: telefone ?? this.telefone,
//       inscricaoEstadual: inscricaoEstadual ?? this.inscricaoEstadual,
//       inscricaoEstadualSt: inscricaoEstadualSt ?? this.inscricaoEstadualSt,
//       inscricaoMunicipal: inscricaoMunicipal ?? this.inscricaoMunicipal,
//       cnae: cnae ?? this.cnae,
//       crt: crt ?? this.crt,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idNfeCabecalho.present) {
//       map['ID_NFE_CABECALHO'] = Variable<int?>(idNfeCabecalho.value);
//     }
//     if (cnpj.present) {
//       map['CNPJ'] = Variable<String?>(cnpj.value);
//     }
//     if (cpf.present) {
//       map['CPF'] = Variable<String?>(cpf.value);
//     }
//     if (nome.present) {
//       map['NOME'] = Variable<String?>(nome.value);
//     }
//     if (fantasia.present) {
//       map['FANTASIA'] = Variable<String?>(fantasia.value);
//     }
//     if (logradouro.present) {
//       map['LOGRADOURO'] = Variable<String?>(logradouro.value);
//     }
//     if (numero.present) {
//       map['NUMERO'] = Variable<String?>(numero.value);
//     }
//     if (complemento.present) {
//       map['COMPLEMENTO'] = Variable<String?>(complemento.value);
//     }
//     if (bairro.present) {
//       map['BAIRRO'] = Variable<String?>(bairro.value);
//     }
//     if (codigoMunicipio.present) {
//       map['CODIGO_MUNICIPIO'] = Variable<int?>(codigoMunicipio.value);
//     }
//     if (nomeMunicipio.present) {
//       map['NOME_MUNICIPIO'] = Variable<String?>(nomeMunicipio.value);
//     }
//     if (uf.present) {
//       map['UF'] = Variable<String?>(uf.value);
//     }
//     if (cep.present) {
//       map['CEP'] = Variable<String?>(cep.value);
//     }
//     if (codigoPais.present) {
//       map['CODIGO_PAIS'] = Variable<int?>(codigoPais.value);
//     }
//     if (nomePais.present) {
//       map['NOME_PAIS'] = Variable<String?>(nomePais.value);
//     }
//     if (telefone.present) {
//       map['TELEFONE'] = Variable<String?>(telefone.value);
//     }
//     if (inscricaoEstadual.present) {
//       map['INSCRICAO_ESTADUAL'] = Variable<String?>(inscricaoEstadual.value);
//     }
//     if (inscricaoEstadualSt.present) {
//       map['INSCRICAO_ESTADUAL_ST'] =
//           Variable<String?>(inscricaoEstadualSt.value);
//     }
//     if (inscricaoMunicipal.present) {
//       map['INSCRICAO_MUNICIPAL'] = Variable<String?>(inscricaoMunicipal.value);
//     }
//     if (cnae.present) {
//       map['CNAE'] = Variable<String?>(cnae.value);
//     }
//     if (crt.present) {
//       map['CRT'] = Variable<String?>(crt.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeEmitentesCompanion(')
//           ..write('id: $id, ')
//           ..write('idNfeCabecalho: $idNfeCabecalho, ')
//           ..write('cnpj: $cnpj, ')
//           ..write('cpf: $cpf, ')
//           ..write('nome: $nome, ')
//           ..write('fantasia: $fantasia, ')
//           ..write('logradouro: $logradouro, ')
//           ..write('numero: $numero, ')
//           ..write('complemento: $complemento, ')
//           ..write('bairro: $bairro, ')
//           ..write('codigoMunicipio: $codigoMunicipio, ')
//           ..write('nomeMunicipio: $nomeMunicipio, ')
//           ..write('uf: $uf, ')
//           ..write('cep: $cep, ')
//           ..write('codigoPais: $codigoPais, ')
//           ..write('nomePais: $nomePais, ')
//           ..write('telefone: $telefone, ')
//           ..write('inscricaoEstadual: $inscricaoEstadual, ')
//           ..write('inscricaoEstadualSt: $inscricaoEstadualSt, ')
//           ..write('inscricaoMunicipal: $inscricaoMunicipal, ')
//           ..write('cnae: $cnae, ')
//           ..write('crt: $crt')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeEmitentesTable extends NfeEmitentes
//     with TableInfo<$NfeEmitentesTable, NfeEmitente> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeEmitentesTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idNfeCabecalhoMeta =
//       const VerificationMeta('idNfeCabecalho');
//   late final GeneratedColumn<int?> idNfeCabecalho = GeneratedColumn<int?>(
//       'ID_NFE_CABECALHO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES NFE_CABECALHO(ID)');
//   final VerificationMeta _cnpjMeta = const VerificationMeta('cnpj');
//   late final GeneratedColumn<String?> cnpj = GeneratedColumn<String?>(
//       'CNPJ', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cpfMeta = const VerificationMeta('cpf');
//   late final GeneratedColumn<String?> cpf = GeneratedColumn<String?>(
//       'CPF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 11),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _nomeMeta = const VerificationMeta('nome');
//   late final GeneratedColumn<String?> nome = GeneratedColumn<String?>(
//       'NOME', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _fantasiaMeta = const VerificationMeta('fantasia');
//   late final GeneratedColumn<String?> fantasia = GeneratedColumn<String?>(
//       'FANTASIA', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _logradouroMeta = const VerificationMeta('logradouro');
//   late final GeneratedColumn<String?> logradouro = GeneratedColumn<String?>(
//       'LOGRADOURO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _numeroMeta = const VerificationMeta('numero');
//   late final GeneratedColumn<String?> numero = GeneratedColumn<String?>(
//       'NUMERO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _complementoMeta =
//       const VerificationMeta('complemento');
//   late final GeneratedColumn<String?> complemento = GeneratedColumn<String?>(
//       'COMPLEMENTO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _bairroMeta = const VerificationMeta('bairro');
//   late final GeneratedColumn<String?> bairro = GeneratedColumn<String?>(
//       'BAIRRO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _codigoMunicipioMeta =
//       const VerificationMeta('codigoMunicipio');
//   late final GeneratedColumn<int?> codigoMunicipio = GeneratedColumn<int?>(
//       'CODIGO_MUNICIPIO', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _nomeMunicipioMeta =
//       const VerificationMeta('nomeMunicipio');
//   late final GeneratedColumn<String?> nomeMunicipio = GeneratedColumn<String?>(
//       'NOME_MUNICIPIO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _ufMeta = const VerificationMeta('uf');
//   late final GeneratedColumn<String?> uf = GeneratedColumn<String?>(
//       'UF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cepMeta = const VerificationMeta('cep');
//   late final GeneratedColumn<String?> cep = GeneratedColumn<String?>(
//       'CEP', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _codigoPaisMeta = const VerificationMeta('codigoPais');
//   late final GeneratedColumn<int?> codigoPais = GeneratedColumn<int?>(
//       'CODIGO_PAIS', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _nomePaisMeta = const VerificationMeta('nomePais');
//   late final GeneratedColumn<String?> nomePais = GeneratedColumn<String?>(
//       'NOME_PAIS', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _telefoneMeta = const VerificationMeta('telefone');
//   late final GeneratedColumn<String?> telefone = GeneratedColumn<String?>(
//       'TELEFONE', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _inscricaoEstadualMeta =
//       const VerificationMeta('inscricaoEstadual');
//   late final GeneratedColumn<String?> inscricaoEstadual =
//       GeneratedColumn<String?>('INSCRICAO_ESTADUAL', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 14),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _inscricaoEstadualStMeta =
//       const VerificationMeta('inscricaoEstadualSt');
//   late final GeneratedColumn<String?> inscricaoEstadualSt =
//       GeneratedColumn<String?>('INSCRICAO_ESTADUAL_ST', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 14),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _inscricaoMunicipalMeta =
//       const VerificationMeta('inscricaoMunicipal');
//   late final GeneratedColumn<String?> inscricaoMunicipal =
//       GeneratedColumn<String?>(
//           'INSCRICAO_MUNICIPAL', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 15),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _cnaeMeta = const VerificationMeta('cnae');
//   late final GeneratedColumn<String?> cnae = GeneratedColumn<String?>(
//       'CNAE', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 7),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _crtMeta = const VerificationMeta('crt');
//   late final GeneratedColumn<String?> crt = GeneratedColumn<String?>(
//       'CRT', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idNfeCabecalho,
//         cnpj,
//         cpf,
//         nome,
//         fantasia,
//         logradouro,
//         numero,
//         complemento,
//         bairro,
//         codigoMunicipio,
//         nomeMunicipio,
//         uf,
//         cep,
//         codigoPais,
//         nomePais,
//         telefone,
//         inscricaoEstadual,
//         inscricaoEstadualSt,
//         inscricaoMunicipal,
//         cnae,
//         crt
//       ];
//   @override
//   String get aliasedName => _alias ?? 'NFE_EMITENTE';
//   @override
//   String get actualTableName => 'NFE_EMITENTE';
//   @override
//   VerificationContext validateIntegrity(Insertable<NfeEmitente> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_NFE_CABECALHO')) {
//       context.handle(
//           _idNfeCabecalhoMeta,
//           idNfeCabecalho.isAcceptableOrUnknown(
//               data['ID_NFE_CABECALHO']!, _idNfeCabecalhoMeta));
//     }
//     if (data.containsKey('CNPJ')) {
//       context.handle(
//           _cnpjMeta, cnpj.isAcceptableOrUnknown(data['CNPJ']!, _cnpjMeta));
//     }
//     if (data.containsKey('CPF')) {
//       context.handle(
//           _cpfMeta, cpf.isAcceptableOrUnknown(data['CPF']!, _cpfMeta));
//     }
//     if (data.containsKey('NOME')) {
//       context.handle(
//           _nomeMeta, nome.isAcceptableOrUnknown(data['NOME']!, _nomeMeta));
//     }
//     if (data.containsKey('FANTASIA')) {
//       context.handle(_fantasiaMeta,
//           fantasia.isAcceptableOrUnknown(data['FANTASIA']!, _fantasiaMeta));
//     }
//     if (data.containsKey('LOGRADOURO')) {
//       context.handle(
//           _logradouroMeta,
//           logradouro.isAcceptableOrUnknown(
//               data['LOGRADOURO']!, _logradouroMeta));
//     }
//     if (data.containsKey('NUMERO')) {
//       context.handle(_numeroMeta,
//           numero.isAcceptableOrUnknown(data['NUMERO']!, _numeroMeta));
//     }
//     if (data.containsKey('COMPLEMENTO')) {
//       context.handle(
//           _complementoMeta,
//           complemento.isAcceptableOrUnknown(
//               data['COMPLEMENTO']!, _complementoMeta));
//     }
//     if (data.containsKey('BAIRRO')) {
//       context.handle(_bairroMeta,
//           bairro.isAcceptableOrUnknown(data['BAIRRO']!, _bairroMeta));
//     }
//     if (data.containsKey('CODIGO_MUNICIPIO')) {
//       context.handle(
//           _codigoMunicipioMeta,
//           codigoMunicipio.isAcceptableOrUnknown(
//               data['CODIGO_MUNICIPIO']!, _codigoMunicipioMeta));
//     }
//     if (data.containsKey('NOME_MUNICIPIO')) {
//       context.handle(
//           _nomeMunicipioMeta,
//           nomeMunicipio.isAcceptableOrUnknown(
//               data['NOME_MUNICIPIO']!, _nomeMunicipioMeta));
//     }
//     if (data.containsKey('UF')) {
//       context.handle(_ufMeta, uf.isAcceptableOrUnknown(data['UF']!, _ufMeta));
//     }
//     if (data.containsKey('CEP')) {
//       context.handle(
//           _cepMeta, cep.isAcceptableOrUnknown(data['CEP']!, _cepMeta));
//     }
//     if (data.containsKey('CODIGO_PAIS')) {
//       context.handle(
//           _codigoPaisMeta,
//           codigoPais.isAcceptableOrUnknown(
//               data['CODIGO_PAIS']!, _codigoPaisMeta));
//     }
//     if (data.containsKey('NOME_PAIS')) {
//       context.handle(_nomePaisMeta,
//           nomePais.isAcceptableOrUnknown(data['NOME_PAIS']!, _nomePaisMeta));
//     }
//     if (data.containsKey('TELEFONE')) {
//       context.handle(_telefoneMeta,
//           telefone.isAcceptableOrUnknown(data['TELEFONE']!, _telefoneMeta));
//     }
//     if (data.containsKey('INSCRICAO_ESTADUAL')) {
//       context.handle(
//           _inscricaoEstadualMeta,
//           inscricaoEstadual.isAcceptableOrUnknown(
//               data['INSCRICAO_ESTADUAL']!, _inscricaoEstadualMeta));
//     }
//     if (data.containsKey('INSCRICAO_ESTADUAL_ST')) {
//       context.handle(
//           _inscricaoEstadualStMeta,
//           inscricaoEstadualSt.isAcceptableOrUnknown(
//               data['INSCRICAO_ESTADUAL_ST']!, _inscricaoEstadualStMeta));
//     }
//     if (data.containsKey('INSCRICAO_MUNICIPAL')) {
//       context.handle(
//           _inscricaoMunicipalMeta,
//           inscricaoMunicipal.isAcceptableOrUnknown(
//               data['INSCRICAO_MUNICIPAL']!, _inscricaoMunicipalMeta));
//     }
//     if (data.containsKey('CNAE')) {
//       context.handle(
//           _cnaeMeta, cnae.isAcceptableOrUnknown(data['CNAE']!, _cnaeMeta));
//     }
//     if (data.containsKey('CRT')) {
//       context.handle(
//           _crtMeta, crt.isAcceptableOrUnknown(data['CRT']!, _crtMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeEmitente map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeEmitente(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idNfeCabecalho: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_NFE_CABECALHO']),
//       cnpj: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CNPJ']),
//       cpf: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CPF']),
//       nome: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NOME']),
//       fantasia: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}FANTASIA']),
//       logradouro: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}LOGRADOURO']),
//       numero: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO']),
//       complemento: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}COMPLEMENTO']),
//       bairro: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}BAIRRO']),
//       codigoMunicipio: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO_MUNICIPIO']),
//       nomeMunicipio: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NOME_MUNICIPIO']),
//       uf: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}UF']),
//       cep: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CEP']),
//       codigoPais: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO_PAIS']),
//       nomePais: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NOME_PAIS']),
//       telefone: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TELEFONE']),
//       inscricaoEstadual: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}INSCRICAO_ESTADUAL']),
//       inscricaoEstadualSt: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}INSCRICAO_ESTADUAL_ST']),
//       inscricaoMunicipal: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}INSCRICAO_MUNICIPAL']),
//       cnae: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CNAE']),
//       crt: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CRT']),
//     );
//   }

//   @override
//   $NfeEmitentesTable createAlias(String alias) {
//     return $NfeEmitentesTable(_db, alias);
//   }
// }

// class NfeExportacaosCompanion extends UpdateCompanion<NfeExportacao> {
//   final Value<int> id;
//   final Value<int?> idNfeDetalhe;
//   final Value<int?> drawback;
//   final Value<int?> numeroRegistro;
//   final Value<String?> chaveAcesso;
//   final Value<double?> quantidade;
//   const NfeExportacaosCompanion({
//     this.id = const Value.absent(),
//     this.idNfeDetalhe = const Value.absent(),
//     this.drawback = const Value.absent(),
//     this.numeroRegistro = const Value.absent(),
//     this.chaveAcesso = const Value.absent(),
//     this.quantidade = const Value.absent(),
//   });
//   NfeExportacaosCompanion.insert({
//     this.id = const Value.absent(),
//     this.idNfeDetalhe = const Value.absent(),
//     this.drawback = const Value.absent(),
//     this.numeroRegistro = const Value.absent(),
//     this.chaveAcesso = const Value.absent(),
//     this.quantidade = const Value.absent(),
//   });
//   static Insertable<NfeExportacao> custom({
//     Expression<int>? id,
//     Expression<int?>? idNfeDetalhe,
//     Expression<int?>? drawback,
//     Expression<int?>? numeroRegistro,
//     Expression<String?>? chaveAcesso,
//     Expression<double?>? quantidade,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idNfeDetalhe != null) 'ID_NFE_DETALHE': idNfeDetalhe,
//       if (drawback != null) 'DRAWBACK': drawback,
//       if (numeroRegistro != null) 'NUMERO_REGISTRO': numeroRegistro,
//       if (chaveAcesso != null) 'CHAVE_ACESSO': chaveAcesso,
//       if (quantidade != null) 'QUANTIDADE': quantidade,
//     });
//   }

//   NfeExportacaosCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idNfeDetalhe,
//       Value<int?>? drawback,
//       Value<int?>? numeroRegistro,
//       Value<String?>? chaveAcesso,
//       Value<double?>? quantidade}) {
//     return NfeExportacaosCompanion(
//       id: id ?? this.id,
//       idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
//       drawback: drawback ?? this.drawback,
//       numeroRegistro: numeroRegistro ?? this.numeroRegistro,
//       chaveAcesso: chaveAcesso ?? this.chaveAcesso,
//       quantidade: quantidade ?? this.quantidade,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idNfeDetalhe.present) {
//       map['ID_NFE_DETALHE'] = Variable<int?>(idNfeDetalhe.value);
//     }
//     if (drawback.present) {
//       map['DRAWBACK'] = Variable<int?>(drawback.value);
//     }
//     if (numeroRegistro.present) {
//       map['NUMERO_REGISTRO'] = Variable<int?>(numeroRegistro.value);
//     }
//     if (chaveAcesso.present) {
//       map['CHAVE_ACESSO'] = Variable<String?>(chaveAcesso.value);
//     }
//     if (quantidade.present) {
//       map['QUANTIDADE'] = Variable<double?>(quantidade.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeExportacaosCompanion(')
//           ..write('id: $id, ')
//           ..write('idNfeDetalhe: $idNfeDetalhe, ')
//           ..write('drawback: $drawback, ')
//           ..write('numeroRegistro: $numeroRegistro, ')
//           ..write('chaveAcesso: $chaveAcesso, ')
//           ..write('quantidade: $quantidade')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeExportacaosTable extends NfeExportacaos
//     with TableInfo<$NfeExportacaosTable, NfeExportacao> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeExportacaosTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idNfeDetalheMeta =
//       const VerificationMeta('idNfeDetalhe');
//   late final GeneratedColumn<int?> idNfeDetalhe = GeneratedColumn<int?>(
//       'ID_NFE_DETALHE', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES NFE_DETALHE(ID)');
//   final VerificationMeta _drawbackMeta = const VerificationMeta('drawback');
//   late final GeneratedColumn<int?> drawback = GeneratedColumn<int?>(
//       'DRAWBACK', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _numeroRegistroMeta =
//       const VerificationMeta('numeroRegistro');
//   late final GeneratedColumn<int?> numeroRegistro = GeneratedColumn<int?>(
//       'NUMERO_REGISTRO', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _chaveAcessoMeta =
//       const VerificationMeta('chaveAcesso');
//   late final GeneratedColumn<String?> chaveAcesso = GeneratedColumn<String?>(
//       'CHAVE_ACESSO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 44),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _quantidadeMeta = const VerificationMeta('quantidade');
//   late final GeneratedColumn<double?> quantidade = GeneratedColumn<double?>(
//       'QUANTIDADE', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns =>
//       [id, idNfeDetalhe, drawback, numeroRegistro, chaveAcesso, quantidade];
//   @override
//   String get aliasedName => _alias ?? 'NFE_EXPORTACAO';
//   @override
//   String get actualTableName => 'NFE_EXPORTACAO';
//   @override
//   VerificationContext validateIntegrity(Insertable<NfeExportacao> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_NFE_DETALHE')) {
//       context.handle(
//           _idNfeDetalheMeta,
//           idNfeDetalhe.isAcceptableOrUnknown(
//               data['ID_NFE_DETALHE']!, _idNfeDetalheMeta));
//     }
//     if (data.containsKey('DRAWBACK')) {
//       context.handle(_drawbackMeta,
//           drawback.isAcceptableOrUnknown(data['DRAWBACK']!, _drawbackMeta));
//     }
//     if (data.containsKey('NUMERO_REGISTRO')) {
//       context.handle(
//           _numeroRegistroMeta,
//           numeroRegistro.isAcceptableOrUnknown(
//               data['NUMERO_REGISTRO']!, _numeroRegistroMeta));
//     }
//     if (data.containsKey('CHAVE_ACESSO')) {
//       context.handle(
//           _chaveAcessoMeta,
//           chaveAcesso.isAcceptableOrUnknown(
//               data['CHAVE_ACESSO']!, _chaveAcessoMeta));
//     }
//     if (data.containsKey('QUANTIDADE')) {
//       context.handle(
//           _quantidadeMeta,
//           quantidade.isAcceptableOrUnknown(
//               data['QUANTIDADE']!, _quantidadeMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeExportacao map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeExportacao(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idNfeDetalhe: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_NFE_DETALHE']),
//       drawback: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DRAWBACK']),
//       numeroRegistro: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO_REGISTRO']),
//       chaveAcesso: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CHAVE_ACESSO']),
//       quantidade: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}QUANTIDADE']),
//     );
//   }

//   @override
//   $NfeExportacaosTable createAlias(String alias) {
//     return $NfeExportacaosTable(_db, alias);
//   }
// }

// class NfeFaturasCompanion extends UpdateCompanion<NfeFatura> {
//   final Value<int> id;
//   final Value<int?> idNfeCabecalho;
//   final Value<String?> numero;
//   final Value<double?> valorOriginal;
//   final Value<double?> valorDesconto;
//   final Value<double?> valorLiquido;
//   const NfeFaturasCompanion({
//     this.id = const Value.absent(),
//     this.idNfeCabecalho = const Value.absent(),
//     this.numero = const Value.absent(),
//     this.valorOriginal = const Value.absent(),
//     this.valorDesconto = const Value.absent(),
//     this.valorLiquido = const Value.absent(),
//   });
//   NfeFaturasCompanion.insert({
//     this.id = const Value.absent(),
//     this.idNfeCabecalho = const Value.absent(),
//     this.numero = const Value.absent(),
//     this.valorOriginal = const Value.absent(),
//     this.valorDesconto = const Value.absent(),
//     this.valorLiquido = const Value.absent(),
//   });
//   static Insertable<NfeFatura> custom({
//     Expression<int>? id,
//     Expression<int?>? idNfeCabecalho,
//     Expression<String?>? numero,
//     Expression<double?>? valorOriginal,
//     Expression<double?>? valorDesconto,
//     Expression<double?>? valorLiquido,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idNfeCabecalho != null) 'ID_NFE_CABECALHO': idNfeCabecalho,
//       if (numero != null) 'NUMERO': numero,
//       if (valorOriginal != null) 'VALOR_ORIGINAL': valorOriginal,
//       if (valorDesconto != null) 'VALOR_DESCONTO': valorDesconto,
//       if (valorLiquido != null) 'VALOR_LIQUIDO': valorLiquido,
//     });
//   }

//   NfeFaturasCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idNfeCabecalho,
//       Value<String?>? numero,
//       Value<double?>? valorOriginal,
//       Value<double?>? valorDesconto,
//       Value<double?>? valorLiquido}) {
//     return NfeFaturasCompanion(
//       id: id ?? this.id,
//       idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
//       numero: numero ?? this.numero,
//       valorOriginal: valorOriginal ?? this.valorOriginal,
//       valorDesconto: valorDesconto ?? this.valorDesconto,
//       valorLiquido: valorLiquido ?? this.valorLiquido,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idNfeCabecalho.present) {
//       map['ID_NFE_CABECALHO'] = Variable<int?>(idNfeCabecalho.value);
//     }
//     if (numero.present) {
//       map['NUMERO'] = Variable<String?>(numero.value);
//     }
//     if (valorOriginal.present) {
//       map['VALOR_ORIGINAL'] = Variable<double?>(valorOriginal.value);
//     }
//     if (valorDesconto.present) {
//       map['VALOR_DESCONTO'] = Variable<double?>(valorDesconto.value);
//     }
//     if (valorLiquido.present) {
//       map['VALOR_LIQUIDO'] = Variable<double?>(valorLiquido.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeFaturasCompanion(')
//           ..write('id: $id, ')
//           ..write('idNfeCabecalho: $idNfeCabecalho, ')
//           ..write('numero: $numero, ')
//           ..write('valorOriginal: $valorOriginal, ')
//           ..write('valorDesconto: $valorDesconto, ')
//           ..write('valorLiquido: $valorLiquido')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeFaturasTable extends NfeFaturas
//     with TableInfo<$NfeFaturasTable, NfeFatura> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeFaturasTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idNfeCabecalhoMeta =
//       const VerificationMeta('idNfeCabecalho');
//   late final GeneratedColumn<int?> idNfeCabecalho = GeneratedColumn<int?>(
//       'ID_NFE_CABECALHO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES NFE_CABECALHO(ID)');
//   final VerificationMeta _numeroMeta = const VerificationMeta('numero');
//   late final GeneratedColumn<String?> numero = GeneratedColumn<String?>(
//       'NUMERO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _valorOriginalMeta =
//       const VerificationMeta('valorOriginal');
//   late final GeneratedColumn<double?> valorOriginal = GeneratedColumn<double?>(
//       'VALOR_ORIGINAL', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorDescontoMeta =
//       const VerificationMeta('valorDesconto');
//   late final GeneratedColumn<double?> valorDesconto = GeneratedColumn<double?>(
//       'VALOR_DESCONTO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorLiquidoMeta =
//       const VerificationMeta('valorLiquido');
//   late final GeneratedColumn<double?> valorLiquido = GeneratedColumn<double?>(
//       'VALOR_LIQUIDO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns =>
//       [id, idNfeCabecalho, numero, valorOriginal, valorDesconto, valorLiquido];
//   @override
//   String get aliasedName => _alias ?? 'NFE_FATURA';
//   @override
//   String get actualTableName => 'NFE_FATURA';
//   @override
//   VerificationContext validateIntegrity(Insertable<NfeFatura> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_NFE_CABECALHO')) {
//       context.handle(
//           _idNfeCabecalhoMeta,
//           idNfeCabecalho.isAcceptableOrUnknown(
//               data['ID_NFE_CABECALHO']!, _idNfeCabecalhoMeta));
//     }
//     if (data.containsKey('NUMERO')) {
//       context.handle(_numeroMeta,
//           numero.isAcceptableOrUnknown(data['NUMERO']!, _numeroMeta));
//     }
//     if (data.containsKey('VALOR_ORIGINAL')) {
//       context.handle(
//           _valorOriginalMeta,
//           valorOriginal.isAcceptableOrUnknown(
//               data['VALOR_ORIGINAL']!, _valorOriginalMeta));
//     }
//     if (data.containsKey('VALOR_DESCONTO')) {
//       context.handle(
//           _valorDescontoMeta,
//           valorDesconto.isAcceptableOrUnknown(
//               data['VALOR_DESCONTO']!, _valorDescontoMeta));
//     }
//     if (data.containsKey('VALOR_LIQUIDO')) {
//       context.handle(
//           _valorLiquidoMeta,
//           valorLiquido.isAcceptableOrUnknown(
//               data['VALOR_LIQUIDO']!, _valorLiquidoMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeFatura map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeFatura(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idNfeCabecalho: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_NFE_CABECALHO']),
//       numero: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO']),
//       valorOriginal: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_ORIGINAL']),
//       valorDesconto: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_DESCONTO']),
//       valorLiquido: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_LIQUIDO']),
//     );
//   }

//   @override
//   $NfeFaturasTable createAlias(String alias) {
//     return $NfeFaturasTable(_db, alias);
//   }
// }

// class NfeImportacaoDetalhesCompanion
//     extends UpdateCompanion<NfeImportacaoDetalhe> {
//   final Value<int> id;
//   final Value<int?> idNfeDeclaracaoImportacao;
//   final Value<int?> numeroAdicao;
//   final Value<int?> numeroSequencial;
//   final Value<String?> codigoFabricanteEstrangeiro;
//   final Value<double?> valorDesconto;
//   final Value<int?> drawback;
//   const NfeImportacaoDetalhesCompanion({
//     this.id = const Value.absent(),
//     this.idNfeDeclaracaoImportacao = const Value.absent(),
//     this.numeroAdicao = const Value.absent(),
//     this.numeroSequencial = const Value.absent(),
//     this.codigoFabricanteEstrangeiro = const Value.absent(),
//     this.valorDesconto = const Value.absent(),
//     this.drawback = const Value.absent(),
//   });
//   NfeImportacaoDetalhesCompanion.insert({
//     this.id = const Value.absent(),
//     this.idNfeDeclaracaoImportacao = const Value.absent(),
//     this.numeroAdicao = const Value.absent(),
//     this.numeroSequencial = const Value.absent(),
//     this.codigoFabricanteEstrangeiro = const Value.absent(),
//     this.valorDesconto = const Value.absent(),
//     this.drawback = const Value.absent(),
//   });
//   static Insertable<NfeImportacaoDetalhe> custom({
//     Expression<int>? id,
//     Expression<int?>? idNfeDeclaracaoImportacao,
//     Expression<int?>? numeroAdicao,
//     Expression<int?>? numeroSequencial,
//     Expression<String?>? codigoFabricanteEstrangeiro,
//     Expression<double?>? valorDesconto,
//     Expression<int?>? drawback,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idNfeDeclaracaoImportacao != null)
//         'ID_NFE_DECLARACAO_IMPORTACAO': idNfeDeclaracaoImportacao,
//       if (numeroAdicao != null) 'NUMERO_ADICAO': numeroAdicao,
//       if (numeroSequencial != null) 'NUMERO_SEQUENCIAL': numeroSequencial,
//       if (codigoFabricanteEstrangeiro != null)
//         'CODIGO_FABRICANTE_ESTRANGEIRO': codigoFabricanteEstrangeiro,
//       if (valorDesconto != null) 'VALOR_DESCONTO': valorDesconto,
//       if (drawback != null) 'DRAWBACK': drawback,
//     });
//   }

//   NfeImportacaoDetalhesCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idNfeDeclaracaoImportacao,
//       Value<int?>? numeroAdicao,
//       Value<int?>? numeroSequencial,
//       Value<String?>? codigoFabricanteEstrangeiro,
//       Value<double?>? valorDesconto,
//       Value<int?>? drawback}) {
//     return NfeImportacaoDetalhesCompanion(
//       id: id ?? this.id,
//       idNfeDeclaracaoImportacao:
//           idNfeDeclaracaoImportacao ?? this.idNfeDeclaracaoImportacao,
//       numeroAdicao: numeroAdicao ?? this.numeroAdicao,
//       numeroSequencial: numeroSequencial ?? this.numeroSequencial,
//       codigoFabricanteEstrangeiro:
//           codigoFabricanteEstrangeiro ?? this.codigoFabricanteEstrangeiro,
//       valorDesconto: valorDesconto ?? this.valorDesconto,
//       drawback: drawback ?? this.drawback,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idNfeDeclaracaoImportacao.present) {
//       map['ID_NFE_DECLARACAO_IMPORTACAO'] =
//           Variable<int?>(idNfeDeclaracaoImportacao.value);
//     }
//     if (numeroAdicao.present) {
//       map['NUMERO_ADICAO'] = Variable<int?>(numeroAdicao.value);
//     }
//     if (numeroSequencial.present) {
//       map['NUMERO_SEQUENCIAL'] = Variable<int?>(numeroSequencial.value);
//     }
//     if (codigoFabricanteEstrangeiro.present) {
//       map['CODIGO_FABRICANTE_ESTRANGEIRO'] =
//           Variable<String?>(codigoFabricanteEstrangeiro.value);
//     }
//     if (valorDesconto.present) {
//       map['VALOR_DESCONTO'] = Variable<double?>(valorDesconto.value);
//     }
//     if (drawback.present) {
//       map['DRAWBACK'] = Variable<int?>(drawback.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeImportacaoDetalhesCompanion(')
//           ..write('id: $id, ')
//           ..write('idNfeDeclaracaoImportacao: $idNfeDeclaracaoImportacao, ')
//           ..write('numeroAdicao: $numeroAdicao, ')
//           ..write('numeroSequencial: $numeroSequencial, ')
//           ..write('codigoFabricanteEstrangeiro: $codigoFabricanteEstrangeiro, ')
//           ..write('valorDesconto: $valorDesconto, ')
//           ..write('drawback: $drawback')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeImportacaoDetalhesTable extends NfeImportacaoDetalhes
//     with TableInfo<$NfeImportacaoDetalhesTable, NfeImportacaoDetalhe> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeImportacaoDetalhesTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idNfeDeclaracaoImportacaoMeta =
//       const VerificationMeta('idNfeDeclaracaoImportacao');
//   late final GeneratedColumn<int?> idNfeDeclaracaoImportacao =
//       GeneratedColumn<int?>('ID_NFE_DECLARACAO_IMPORTACAO', aliasedName, true,
//           typeName: 'INTEGER',
//           requiredDuringInsert: false,
//           $customConstraints:
//               'NULLABLE REFERENCES NFE_DECLARACAO_IMPORTACAO(ID)');
//   final VerificationMeta _numeroAdicaoMeta =
//       const VerificationMeta('numeroAdicao');
//   late final GeneratedColumn<int?> numeroAdicao = GeneratedColumn<int?>(
//       'NUMERO_ADICAO', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _numeroSequencialMeta =
//       const VerificationMeta('numeroSequencial');
//   late final GeneratedColumn<int?> numeroSequencial = GeneratedColumn<int?>(
//       'NUMERO_SEQUENCIAL', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _codigoFabricanteEstrangeiroMeta =
//       const VerificationMeta('codigoFabricanteEstrangeiro');
//   late final GeneratedColumn<String?> codigoFabricanteEstrangeiro =
//       GeneratedColumn<String?>(
//           'CODIGO_FABRICANTE_ESTRANGEIRO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 60),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _valorDescontoMeta =
//       const VerificationMeta('valorDesconto');
//   late final GeneratedColumn<double?> valorDesconto = GeneratedColumn<double?>(
//       'VALOR_DESCONTO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _drawbackMeta = const VerificationMeta('drawback');
//   late final GeneratedColumn<int?> drawback = GeneratedColumn<int?>(
//       'DRAWBACK', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idNfeDeclaracaoImportacao,
//         numeroAdicao,
//         numeroSequencial,
//         codigoFabricanteEstrangeiro,
//         valorDesconto,
//         drawback
//       ];
//   @override
//   String get aliasedName => _alias ?? 'NFE_IMPORTACAO_DETALHE';
//   @override
//   String get actualTableName => 'NFE_IMPORTACAO_DETALHE';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<NfeImportacaoDetalhe> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_NFE_DECLARACAO_IMPORTACAO')) {
//       context.handle(
//           _idNfeDeclaracaoImportacaoMeta,
//           idNfeDeclaracaoImportacao.isAcceptableOrUnknown(
//               data['ID_NFE_DECLARACAO_IMPORTACAO']!,
//               _idNfeDeclaracaoImportacaoMeta));
//     }
//     if (data.containsKey('NUMERO_ADICAO')) {
//       context.handle(
//           _numeroAdicaoMeta,
//           numeroAdicao.isAcceptableOrUnknown(
//               data['NUMERO_ADICAO']!, _numeroAdicaoMeta));
//     }
//     if (data.containsKey('NUMERO_SEQUENCIAL')) {
//       context.handle(
//           _numeroSequencialMeta,
//           numeroSequencial.isAcceptableOrUnknown(
//               data['NUMERO_SEQUENCIAL']!, _numeroSequencialMeta));
//     }
//     if (data.containsKey('CODIGO_FABRICANTE_ESTRANGEIRO')) {
//       context.handle(
//           _codigoFabricanteEstrangeiroMeta,
//           codigoFabricanteEstrangeiro.isAcceptableOrUnknown(
//               data['CODIGO_FABRICANTE_ESTRANGEIRO']!,
//               _codigoFabricanteEstrangeiroMeta));
//     }
//     if (data.containsKey('VALOR_DESCONTO')) {
//       context.handle(
//           _valorDescontoMeta,
//           valorDesconto.isAcceptableOrUnknown(
//               data['VALOR_DESCONTO']!, _valorDescontoMeta));
//     }
//     if (data.containsKey('DRAWBACK')) {
//       context.handle(_drawbackMeta,
//           drawback.isAcceptableOrUnknown(data['DRAWBACK']!, _drawbackMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeImportacaoDetalhe map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeImportacaoDetalhe(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idNfeDeclaracaoImportacao: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ID_NFE_DECLARACAO_IMPORTACAO']),
//       numeroAdicao: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO_ADICAO']),
//       numeroSequencial: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO_SEQUENCIAL']),
//       codigoFabricanteEstrangeiro: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}CODIGO_FABRICANTE_ESTRANGEIRO']),
//       valorDesconto: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_DESCONTO']),
//       drawback: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DRAWBACK']),
//     );
//   }

//   @override
//   $NfeImportacaoDetalhesTable createAlias(String alias) {
//     return $NfeImportacaoDetalhesTable(_db, alias);
//   }
// }

// class NfeInformacaoPagamentosCompanion
//     extends UpdateCompanion<NfeInformacaoPagamento> {
//   final Value<int> id;
//   final Value<int?> idNfeCabecalho;
//   final Value<String?> indicadorPagamento;
//   final Value<String?> meioPagamento;
//   final Value<double?> valor;
//   final Value<String?> tipoIntegracao;
//   final Value<String?> cnpjOperadoraCartao;
//   final Value<String?> bandeira;
//   final Value<String?> numeroAutorizacao;
//   final Value<double?> troco;
//   const NfeInformacaoPagamentosCompanion({
//     this.id = const Value.absent(),
//     this.idNfeCabecalho = const Value.absent(),
//     this.indicadorPagamento = const Value.absent(),
//     this.meioPagamento = const Value.absent(),
//     this.valor = const Value.absent(),
//     this.tipoIntegracao = const Value.absent(),
//     this.cnpjOperadoraCartao = const Value.absent(),
//     this.bandeira = const Value.absent(),
//     this.numeroAutorizacao = const Value.absent(),
//     this.troco = const Value.absent(),
//   });
//   NfeInformacaoPagamentosCompanion.insert({
//     this.id = const Value.absent(),
//     this.idNfeCabecalho = const Value.absent(),
//     this.indicadorPagamento = const Value.absent(),
//     this.meioPagamento = const Value.absent(),
//     this.valor = const Value.absent(),
//     this.tipoIntegracao = const Value.absent(),
//     this.cnpjOperadoraCartao = const Value.absent(),
//     this.bandeira = const Value.absent(),
//     this.numeroAutorizacao = const Value.absent(),
//     this.troco = const Value.absent(),
//   });
//   static Insertable<NfeInformacaoPagamento> custom({
//     Expression<int>? id,
//     Expression<int?>? idNfeCabecalho,
//     Expression<String?>? indicadorPagamento,
//     Expression<String?>? meioPagamento,
//     Expression<double?>? valor,
//     Expression<String?>? tipoIntegracao,
//     Expression<String?>? cnpjOperadoraCartao,
//     Expression<String?>? bandeira,
//     Expression<String?>? numeroAutorizacao,
//     Expression<double?>? troco,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idNfeCabecalho != null) 'ID_NFE_CABECALHO': idNfeCabecalho,
//       if (indicadorPagamento != null) 'INDICADOR_PAGAMENTO': indicadorPagamento,
//       if (meioPagamento != null) 'MEIO_PAGAMENTO': meioPagamento,
//       if (valor != null) 'VALOR': valor,
//       if (tipoIntegracao != null) 'TIPO_INTEGRACAO': tipoIntegracao,
//       if (cnpjOperadoraCartao != null)
//         'CNPJ_OPERADORA_CARTAO': cnpjOperadoraCartao,
//       if (bandeira != null) 'BANDEIRA': bandeira,
//       if (numeroAutorizacao != null) 'NUMERO_AUTORIZACAO': numeroAutorizacao,
//       if (troco != null) 'TROCO': troco,
//     });
//   }

//   NfeInformacaoPagamentosCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idNfeCabecalho,
//       Value<String?>? indicadorPagamento,
//       Value<String?>? meioPagamento,
//       Value<double?>? valor,
//       Value<String?>? tipoIntegracao,
//       Value<String?>? cnpjOperadoraCartao,
//       Value<String?>? bandeira,
//       Value<String?>? numeroAutorizacao,
//       Value<double?>? troco}) {
//     return NfeInformacaoPagamentosCompanion(
//       id: id ?? this.id,
//       idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
//       indicadorPagamento: indicadorPagamento ?? this.indicadorPagamento,
//       meioPagamento: meioPagamento ?? this.meioPagamento,
//       valor: valor ?? this.valor,
//       tipoIntegracao: tipoIntegracao ?? this.tipoIntegracao,
//       cnpjOperadoraCartao: cnpjOperadoraCartao ?? this.cnpjOperadoraCartao,
//       bandeira: bandeira ?? this.bandeira,
//       numeroAutorizacao: numeroAutorizacao ?? this.numeroAutorizacao,
//       troco: troco ?? this.troco,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idNfeCabecalho.present) {
//       map['ID_NFE_CABECALHO'] = Variable<int?>(idNfeCabecalho.value);
//     }
//     if (indicadorPagamento.present) {
//       map['INDICADOR_PAGAMENTO'] = Variable<String?>(indicadorPagamento.value);
//     }
//     if (meioPagamento.present) {
//       map['MEIO_PAGAMENTO'] = Variable<String?>(meioPagamento.value);
//     }
//     if (valor.present) {
//       map['VALOR'] = Variable<double?>(valor.value);
//     }
//     if (tipoIntegracao.present) {
//       map['TIPO_INTEGRACAO'] = Variable<String?>(tipoIntegracao.value);
//     }
//     if (cnpjOperadoraCartao.present) {
//       map['CNPJ_OPERADORA_CARTAO'] =
//           Variable<String?>(cnpjOperadoraCartao.value);
//     }
//     if (bandeira.present) {
//       map['BANDEIRA'] = Variable<String?>(bandeira.value);
//     }
//     if (numeroAutorizacao.present) {
//       map['NUMERO_AUTORIZACAO'] = Variable<String?>(numeroAutorizacao.value);
//     }
//     if (troco.present) {
//       map['TROCO'] = Variable<double?>(troco.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeInformacaoPagamentosCompanion(')
//           ..write('id: $id, ')
//           ..write('idNfeCabecalho: $idNfeCabecalho, ')
//           ..write('indicadorPagamento: $indicadorPagamento, ')
//           ..write('meioPagamento: $meioPagamento, ')
//           ..write('valor: $valor, ')
//           ..write('tipoIntegracao: $tipoIntegracao, ')
//           ..write('cnpjOperadoraCartao: $cnpjOperadoraCartao, ')
//           ..write('bandeira: $bandeira, ')
//           ..write('numeroAutorizacao: $numeroAutorizacao, ')
//           ..write('troco: $troco')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeInformacaoPagamentosTable extends NfeInformacaoPagamentos
//     with TableInfo<$NfeInformacaoPagamentosTable, NfeInformacaoPagamento> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeInformacaoPagamentosTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idNfeCabecalhoMeta =
//       const VerificationMeta('idNfeCabecalho');
//   late final GeneratedColumn<int?> idNfeCabecalho = GeneratedColumn<int?>(
//       'ID_NFE_CABECALHO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES NFE_CABECALHO(ID)');
//   final VerificationMeta _indicadorPagamentoMeta =
//       const VerificationMeta('indicadorPagamento');
//   late final GeneratedColumn<String?> indicadorPagamento =
//       GeneratedColumn<String?>(
//           'INDICADOR_PAGAMENTO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _meioPagamentoMeta =
//       const VerificationMeta('meioPagamento');
//   late final GeneratedColumn<String?> meioPagamento = GeneratedColumn<String?>(
//       'MEIO_PAGAMENTO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _valorMeta = const VerificationMeta('valor');
//   late final GeneratedColumn<double?> valor = GeneratedColumn<double?>(
//       'VALOR', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _tipoIntegracaoMeta =
//       const VerificationMeta('tipoIntegracao');
//   late final GeneratedColumn<String?> tipoIntegracao = GeneratedColumn<String?>(
//       'TIPO_INTEGRACAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cnpjOperadoraCartaoMeta =
//       const VerificationMeta('cnpjOperadoraCartao');
//   late final GeneratedColumn<String?> cnpjOperadoraCartao =
//       GeneratedColumn<String?>('CNPJ_OPERADORA_CARTAO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 14),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _bandeiraMeta = const VerificationMeta('bandeira');
//   late final GeneratedColumn<String?> bandeira = GeneratedColumn<String?>(
//       'BANDEIRA', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _numeroAutorizacaoMeta =
//       const VerificationMeta('numeroAutorizacao');
//   late final GeneratedColumn<String?> numeroAutorizacao =
//       GeneratedColumn<String?>('NUMERO_AUTORIZACAO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 20),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _trocoMeta = const VerificationMeta('troco');
//   late final GeneratedColumn<double?> troco = GeneratedColumn<double?>(
//       'TROCO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idNfeCabecalho,
//         indicadorPagamento,
//         meioPagamento,
//         valor,
//         tipoIntegracao,
//         cnpjOperadoraCartao,
//         bandeira,
//         numeroAutorizacao,
//         troco
//       ];
//   @override
//   String get aliasedName => _alias ?? 'NFE_INFORMACAO_PAGAMENTO';
//   @override
//   String get actualTableName => 'NFE_INFORMACAO_PAGAMENTO';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<NfeInformacaoPagamento> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_NFE_CABECALHO')) {
//       context.handle(
//           _idNfeCabecalhoMeta,
//           idNfeCabecalho.isAcceptableOrUnknown(
//               data['ID_NFE_CABECALHO']!, _idNfeCabecalhoMeta));
//     }
//     if (data.containsKey('INDICADOR_PAGAMENTO')) {
//       context.handle(
//           _indicadorPagamentoMeta,
//           indicadorPagamento.isAcceptableOrUnknown(
//               data['INDICADOR_PAGAMENTO']!, _indicadorPagamentoMeta));
//     }
//     if (data.containsKey('MEIO_PAGAMENTO')) {
//       context.handle(
//           _meioPagamentoMeta,
//           meioPagamento.isAcceptableOrUnknown(
//               data['MEIO_PAGAMENTO']!, _meioPagamentoMeta));
//     }
//     if (data.containsKey('VALOR')) {
//       context.handle(
//           _valorMeta, valor.isAcceptableOrUnknown(data['VALOR']!, _valorMeta));
//     }
//     if (data.containsKey('TIPO_INTEGRACAO')) {
//       context.handle(
//           _tipoIntegracaoMeta,
//           tipoIntegracao.isAcceptableOrUnknown(
//               data['TIPO_INTEGRACAO']!, _tipoIntegracaoMeta));
//     }
//     if (data.containsKey('CNPJ_OPERADORA_CARTAO')) {
//       context.handle(
//           _cnpjOperadoraCartaoMeta,
//           cnpjOperadoraCartao.isAcceptableOrUnknown(
//               data['CNPJ_OPERADORA_CARTAO']!, _cnpjOperadoraCartaoMeta));
//     }
//     if (data.containsKey('BANDEIRA')) {
//       context.handle(_bandeiraMeta,
//           bandeira.isAcceptableOrUnknown(data['BANDEIRA']!, _bandeiraMeta));
//     }
//     if (data.containsKey('NUMERO_AUTORIZACAO')) {
//       context.handle(
//           _numeroAutorizacaoMeta,
//           numeroAutorizacao.isAcceptableOrUnknown(
//               data['NUMERO_AUTORIZACAO']!, _numeroAutorizacaoMeta));
//     }
//     if (data.containsKey('TROCO')) {
//       context.handle(
//           _trocoMeta, troco.isAcceptableOrUnknown(data['TROCO']!, _trocoMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeInformacaoPagamento map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeInformacaoPagamento(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idNfeCabecalho: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_NFE_CABECALHO']),
//       indicadorPagamento: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}INDICADOR_PAGAMENTO']),
//       meioPagamento: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}MEIO_PAGAMENTO']),
//       valor: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR']),
//       tipoIntegracao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TIPO_INTEGRACAO']),
//       cnpjOperadoraCartao: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}CNPJ_OPERADORA_CARTAO']),
//       bandeira: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}BANDEIRA']),
//       numeroAutorizacao: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}NUMERO_AUTORIZACAO']),
//       troco: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TROCO']),
//     );
//   }

//   @override
//   $NfeInformacaoPagamentosTable createAlias(String alias) {
//     return $NfeInformacaoPagamentosTable(_db, alias);
//   }
// }

// class NfeItemRastreadosCompanion extends UpdateCompanion<NfeItemRastreado> {
//   final Value<int> id;
//   final Value<int?> idNfeDetalhe;
//   final Value<String?> numeroLote;
//   final Value<double?> quantidadeItens;
//   final Value<DateTime?> dataFabricacao;
//   final Value<DateTime?> dataValidade;
//   final Value<String?> codigoAgregacao;
//   const NfeItemRastreadosCompanion({
//     this.id = const Value.absent(),
//     this.idNfeDetalhe = const Value.absent(),
//     this.numeroLote = const Value.absent(),
//     this.quantidadeItens = const Value.absent(),
//     this.dataFabricacao = const Value.absent(),
//     this.dataValidade = const Value.absent(),
//     this.codigoAgregacao = const Value.absent(),
//   });
//   NfeItemRastreadosCompanion.insert({
//     this.id = const Value.absent(),
//     this.idNfeDetalhe = const Value.absent(),
//     this.numeroLote = const Value.absent(),
//     this.quantidadeItens = const Value.absent(),
//     this.dataFabricacao = const Value.absent(),
//     this.dataValidade = const Value.absent(),
//     this.codigoAgregacao = const Value.absent(),
//   });
//   static Insertable<NfeItemRastreado> custom({
//     Expression<int>? id,
//     Expression<int?>? idNfeDetalhe,
//     Expression<String?>? numeroLote,
//     Expression<double?>? quantidadeItens,
//     Expression<DateTime?>? dataFabricacao,
//     Expression<DateTime?>? dataValidade,
//     Expression<String?>? codigoAgregacao,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idNfeDetalhe != null) 'ID_NFE_DETALHE': idNfeDetalhe,
//       if (numeroLote != null) 'NUMERO_LOTE': numeroLote,
//       if (quantidadeItens != null) 'QUANTIDADE_ITENS': quantidadeItens,
//       if (dataFabricacao != null) 'DATA_FABRICACAO': dataFabricacao,
//       if (dataValidade != null) 'DATA_VALIDADE': dataValidade,
//       if (codigoAgregacao != null) 'CODIGO_AGREGACAO': codigoAgregacao,
//     });
//   }

//   NfeItemRastreadosCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idNfeDetalhe,
//       Value<String?>? numeroLote,
//       Value<double?>? quantidadeItens,
//       Value<DateTime?>? dataFabricacao,
//       Value<DateTime?>? dataValidade,
//       Value<String?>? codigoAgregacao}) {
//     return NfeItemRastreadosCompanion(
//       id: id ?? this.id,
//       idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
//       numeroLote: numeroLote ?? this.numeroLote,
//       quantidadeItens: quantidadeItens ?? this.quantidadeItens,
//       dataFabricacao: dataFabricacao ?? this.dataFabricacao,
//       dataValidade: dataValidade ?? this.dataValidade,
//       codigoAgregacao: codigoAgregacao ?? this.codigoAgregacao,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idNfeDetalhe.present) {
//       map['ID_NFE_DETALHE'] = Variable<int?>(idNfeDetalhe.value);
//     }
//     if (numeroLote.present) {
//       map['NUMERO_LOTE'] = Variable<String?>(numeroLote.value);
//     }
//     if (quantidadeItens.present) {
//       map['QUANTIDADE_ITENS'] = Variable<double?>(quantidadeItens.value);
//     }
//     if (dataFabricacao.present) {
//       map['DATA_FABRICACAO'] = Variable<DateTime?>(dataFabricacao.value);
//     }
//     if (dataValidade.present) {
//       map['DATA_VALIDADE'] = Variable<DateTime?>(dataValidade.value);
//     }
//     if (codigoAgregacao.present) {
//       map['CODIGO_AGREGACAO'] = Variable<String?>(codigoAgregacao.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeItemRastreadosCompanion(')
//           ..write('id: $id, ')
//           ..write('idNfeDetalhe: $idNfeDetalhe, ')
//           ..write('numeroLote: $numeroLote, ')
//           ..write('quantidadeItens: $quantidadeItens, ')
//           ..write('dataFabricacao: $dataFabricacao, ')
//           ..write('dataValidade: $dataValidade, ')
//           ..write('codigoAgregacao: $codigoAgregacao')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeItemRastreadosTable extends NfeItemRastreados
//     with TableInfo<$NfeItemRastreadosTable, NfeItemRastreado> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeItemRastreadosTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idNfeDetalheMeta =
//       const VerificationMeta('idNfeDetalhe');
//   late final GeneratedColumn<int?> idNfeDetalhe = GeneratedColumn<int?>(
//       'ID_NFE_DETALHE', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES NFE_DETALHE(ID)');
//   final VerificationMeta _numeroLoteMeta = const VerificationMeta('numeroLote');
//   late final GeneratedColumn<String?> numeroLote = GeneratedColumn<String?>(
//       'NUMERO_LOTE', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _quantidadeItensMeta =
//       const VerificationMeta('quantidadeItens');
//   late final GeneratedColumn<double?> quantidadeItens =
//       GeneratedColumn<double?>('QUANTIDADE_ITENS', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _dataFabricacaoMeta =
//       const VerificationMeta('dataFabricacao');
//   late final GeneratedColumn<DateTime?> dataFabricacao =
//       GeneratedColumn<DateTime?>('DATA_FABRICACAO', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _dataValidadeMeta =
//       const VerificationMeta('dataValidade');
//   late final GeneratedColumn<DateTime?> dataValidade =
//       GeneratedColumn<DateTime?>('DATA_VALIDADE', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _codigoAgregacaoMeta =
//       const VerificationMeta('codigoAgregacao');
//   late final GeneratedColumn<String?> codigoAgregacao =
//       GeneratedColumn<String?>('CODIGO_AGREGACAO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 20),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idNfeDetalhe,
//         numeroLote,
//         quantidadeItens,
//         dataFabricacao,
//         dataValidade,
//         codigoAgregacao
//       ];
//   @override
//   String get aliasedName => _alias ?? 'NFE_ITEM_RASTREADO';
//   @override
//   String get actualTableName => 'NFE_ITEM_RASTREADO';
//   @override
//   VerificationContext validateIntegrity(Insertable<NfeItemRastreado> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_NFE_DETALHE')) {
//       context.handle(
//           _idNfeDetalheMeta,
//           idNfeDetalhe.isAcceptableOrUnknown(
//               data['ID_NFE_DETALHE']!, _idNfeDetalheMeta));
//     }
//     if (data.containsKey('NUMERO_LOTE')) {
//       context.handle(
//           _numeroLoteMeta,
//           numeroLote.isAcceptableOrUnknown(
//               data['NUMERO_LOTE']!, _numeroLoteMeta));
//     }
//     if (data.containsKey('QUANTIDADE_ITENS')) {
//       context.handle(
//           _quantidadeItensMeta,
//           quantidadeItens.isAcceptableOrUnknown(
//               data['QUANTIDADE_ITENS']!, _quantidadeItensMeta));
//     }
//     if (data.containsKey('DATA_FABRICACAO')) {
//       context.handle(
//           _dataFabricacaoMeta,
//           dataFabricacao.isAcceptableOrUnknown(
//               data['DATA_FABRICACAO']!, _dataFabricacaoMeta));
//     }
//     if (data.containsKey('DATA_VALIDADE')) {
//       context.handle(
//           _dataValidadeMeta,
//           dataValidade.isAcceptableOrUnknown(
//               data['DATA_VALIDADE']!, _dataValidadeMeta));
//     }
//     if (data.containsKey('CODIGO_AGREGACAO')) {
//       context.handle(
//           _codigoAgregacaoMeta,
//           codigoAgregacao.isAcceptableOrUnknown(
//               data['CODIGO_AGREGACAO']!, _codigoAgregacaoMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeItemRastreado map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeItemRastreado(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idNfeDetalhe: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_NFE_DETALHE']),
//       numeroLote: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO_LOTE']),
//       quantidadeItens: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}QUANTIDADE_ITENS']),
//       dataFabricacao: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_FABRICACAO']),
//       dataValidade: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_VALIDADE']),
//       codigoAgregacao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO_AGREGACAO']),
//     );
//   }

//   @override
//   $NfeItemRastreadosTable createAlias(String alias) {
//     return $NfeItemRastreadosTable(_db, alias);
//   }
// }

// class NfeLocalEntregasCompanion extends UpdateCompanion<NfeLocalEntrega> {
//   final Value<int> id;
//   final Value<int?> idNfeCabecalho;
//   final Value<String?> cnpj;
//   final Value<String?> cpf;
//   final Value<String?> nomeRecebedor;
//   final Value<String?> logradouro;
//   final Value<String?> numero;
//   final Value<String?> complemento;
//   final Value<String?> bairro;
//   final Value<int?> codigoMunicipio;
//   final Value<String?> nomeMunicipio;
//   final Value<String?> uf;
//   final Value<String?> cep;
//   final Value<int?> codigoPais;
//   final Value<String?> nomePais;
//   final Value<String?> telefone;
//   final Value<String?> email;
//   final Value<String?> inscricaoEstadual;
//   const NfeLocalEntregasCompanion({
//     this.id = const Value.absent(),
//     this.idNfeCabecalho = const Value.absent(),
//     this.cnpj = const Value.absent(),
//     this.cpf = const Value.absent(),
//     this.nomeRecebedor = const Value.absent(),
//     this.logradouro = const Value.absent(),
//     this.numero = const Value.absent(),
//     this.complemento = const Value.absent(),
//     this.bairro = const Value.absent(),
//     this.codigoMunicipio = const Value.absent(),
//     this.nomeMunicipio = const Value.absent(),
//     this.uf = const Value.absent(),
//     this.cep = const Value.absent(),
//     this.codigoPais = const Value.absent(),
//     this.nomePais = const Value.absent(),
//     this.telefone = const Value.absent(),
//     this.email = const Value.absent(),
//     this.inscricaoEstadual = const Value.absent(),
//   });
//   NfeLocalEntregasCompanion.insert({
//     this.id = const Value.absent(),
//     this.idNfeCabecalho = const Value.absent(),
//     this.cnpj = const Value.absent(),
//     this.cpf = const Value.absent(),
//     this.nomeRecebedor = const Value.absent(),
//     this.logradouro = const Value.absent(),
//     this.numero = const Value.absent(),
//     this.complemento = const Value.absent(),
//     this.bairro = const Value.absent(),
//     this.codigoMunicipio = const Value.absent(),
//     this.nomeMunicipio = const Value.absent(),
//     this.uf = const Value.absent(),
//     this.cep = const Value.absent(),
//     this.codigoPais = const Value.absent(),
//     this.nomePais = const Value.absent(),
//     this.telefone = const Value.absent(),
//     this.email = const Value.absent(),
//     this.inscricaoEstadual = const Value.absent(),
//   });
//   static Insertable<NfeLocalEntrega> custom({
//     Expression<int>? id,
//     Expression<int?>? idNfeCabecalho,
//     Expression<String?>? cnpj,
//     Expression<String?>? cpf,
//     Expression<String?>? nomeRecebedor,
//     Expression<String?>? logradouro,
//     Expression<String?>? numero,
//     Expression<String?>? complemento,
//     Expression<String?>? bairro,
//     Expression<int?>? codigoMunicipio,
//     Expression<String?>? nomeMunicipio,
//     Expression<String?>? uf,
//     Expression<String?>? cep,
//     Expression<int?>? codigoPais,
//     Expression<String?>? nomePais,
//     Expression<String?>? telefone,
//     Expression<String?>? email,
//     Expression<String?>? inscricaoEstadual,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idNfeCabecalho != null) 'ID_NFE_CABECALHO': idNfeCabecalho,
//       if (cnpj != null) 'CNPJ': cnpj,
//       if (cpf != null) 'CPF': cpf,
//       if (nomeRecebedor != null) 'NOME_RECEBEDOR': nomeRecebedor,
//       if (logradouro != null) 'LOGRADOURO': logradouro,
//       if (numero != null) 'NUMERO': numero,
//       if (complemento != null) 'COMPLEMENTO': complemento,
//       if (bairro != null) 'BAIRRO': bairro,
//       if (codigoMunicipio != null) 'CODIGO_MUNICIPIO': codigoMunicipio,
//       if (nomeMunicipio != null) 'NOME_MUNICIPIO': nomeMunicipio,
//       if (uf != null) 'UF': uf,
//       if (cep != null) 'CEP': cep,
//       if (codigoPais != null) 'CODIGO_PAIS': codigoPais,
//       if (nomePais != null) 'NOME_PAIS': nomePais,
//       if (telefone != null) 'TELEFONE': telefone,
//       if (email != null) 'EMAIL': email,
//       if (inscricaoEstadual != null) 'INSCRICAO_ESTADUAL': inscricaoEstadual,
//     });
//   }

//   NfeLocalEntregasCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idNfeCabecalho,
//       Value<String?>? cnpj,
//       Value<String?>? cpf,
//       Value<String?>? nomeRecebedor,
//       Value<String?>? logradouro,
//       Value<String?>? numero,
//       Value<String?>? complemento,
//       Value<String?>? bairro,
//       Value<int?>? codigoMunicipio,
//       Value<String?>? nomeMunicipio,
//       Value<String?>? uf,
//       Value<String?>? cep,
//       Value<int?>? codigoPais,
//       Value<String?>? nomePais,
//       Value<String?>? telefone,
//       Value<String?>? email,
//       Value<String?>? inscricaoEstadual}) {
//     return NfeLocalEntregasCompanion(
//       id: id ?? this.id,
//       idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
//       cnpj: cnpj ?? this.cnpj,
//       cpf: cpf ?? this.cpf,
//       nomeRecebedor: nomeRecebedor ?? this.nomeRecebedor,
//       logradouro: logradouro ?? this.logradouro,
//       numero: numero ?? this.numero,
//       complemento: complemento ?? this.complemento,
//       bairro: bairro ?? this.bairro,
//       codigoMunicipio: codigoMunicipio ?? this.codigoMunicipio,
//       nomeMunicipio: nomeMunicipio ?? this.nomeMunicipio,
//       uf: uf ?? this.uf,
//       cep: cep ?? this.cep,
//       codigoPais: codigoPais ?? this.codigoPais,
//       nomePais: nomePais ?? this.nomePais,
//       telefone: telefone ?? this.telefone,
//       email: email ?? this.email,
//       inscricaoEstadual: inscricaoEstadual ?? this.inscricaoEstadual,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idNfeCabecalho.present) {
//       map['ID_NFE_CABECALHO'] = Variable<int?>(idNfeCabecalho.value);
//     }
//     if (cnpj.present) {
//       map['CNPJ'] = Variable<String?>(cnpj.value);
//     }
//     if (cpf.present) {
//       map['CPF'] = Variable<String?>(cpf.value);
//     }
//     if (nomeRecebedor.present) {
//       map['NOME_RECEBEDOR'] = Variable<String?>(nomeRecebedor.value);
//     }
//     if (logradouro.present) {
//       map['LOGRADOURO'] = Variable<String?>(logradouro.value);
//     }
//     if (numero.present) {
//       map['NUMERO'] = Variable<String?>(numero.value);
//     }
//     if (complemento.present) {
//       map['COMPLEMENTO'] = Variable<String?>(complemento.value);
//     }
//     if (bairro.present) {
//       map['BAIRRO'] = Variable<String?>(bairro.value);
//     }
//     if (codigoMunicipio.present) {
//       map['CODIGO_MUNICIPIO'] = Variable<int?>(codigoMunicipio.value);
//     }
//     if (nomeMunicipio.present) {
//       map['NOME_MUNICIPIO'] = Variable<String?>(nomeMunicipio.value);
//     }
//     if (uf.present) {
//       map['UF'] = Variable<String?>(uf.value);
//     }
//     if (cep.present) {
//       map['CEP'] = Variable<String?>(cep.value);
//     }
//     if (codigoPais.present) {
//       map['CODIGO_PAIS'] = Variable<int?>(codigoPais.value);
//     }
//     if (nomePais.present) {
//       map['NOME_PAIS'] = Variable<String?>(nomePais.value);
//     }
//     if (telefone.present) {
//       map['TELEFONE'] = Variable<String?>(telefone.value);
//     }
//     if (email.present) {
//       map['EMAIL'] = Variable<String?>(email.value);
//     }
//     if (inscricaoEstadual.present) {
//       map['INSCRICAO_ESTADUAL'] = Variable<String?>(inscricaoEstadual.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeLocalEntregasCompanion(')
//           ..write('id: $id, ')
//           ..write('idNfeCabecalho: $idNfeCabecalho, ')
//           ..write('cnpj: $cnpj, ')
//           ..write('cpf: $cpf, ')
//           ..write('nomeRecebedor: $nomeRecebedor, ')
//           ..write('logradouro: $logradouro, ')
//           ..write('numero: $numero, ')
//           ..write('complemento: $complemento, ')
//           ..write('bairro: $bairro, ')
//           ..write('codigoMunicipio: $codigoMunicipio, ')
//           ..write('nomeMunicipio: $nomeMunicipio, ')
//           ..write('uf: $uf, ')
//           ..write('cep: $cep, ')
//           ..write('codigoPais: $codigoPais, ')
//           ..write('nomePais: $nomePais, ')
//           ..write('telefone: $telefone, ')
//           ..write('email: $email, ')
//           ..write('inscricaoEstadual: $inscricaoEstadual')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeLocalEntregasTable extends NfeLocalEntregas
//     with TableInfo<$NfeLocalEntregasTable, NfeLocalEntrega> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeLocalEntregasTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idNfeCabecalhoMeta =
//       const VerificationMeta('idNfeCabecalho');
//   late final GeneratedColumn<int?> idNfeCabecalho = GeneratedColumn<int?>(
//       'ID_NFE_CABECALHO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES NFE_CABECALHO(ID)');
//   final VerificationMeta _cnpjMeta = const VerificationMeta('cnpj');
//   late final GeneratedColumn<String?> cnpj = GeneratedColumn<String?>(
//       'CNPJ', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cpfMeta = const VerificationMeta('cpf');
//   late final GeneratedColumn<String?> cpf = GeneratedColumn<String?>(
//       'CPF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 11),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _nomeRecebedorMeta =
//       const VerificationMeta('nomeRecebedor');
//   late final GeneratedColumn<String?> nomeRecebedor = GeneratedColumn<String?>(
//       'NOME_RECEBEDOR', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _logradouroMeta = const VerificationMeta('logradouro');
//   late final GeneratedColumn<String?> logradouro = GeneratedColumn<String?>(
//       'LOGRADOURO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _numeroMeta = const VerificationMeta('numero');
//   late final GeneratedColumn<String?> numero = GeneratedColumn<String?>(
//       'NUMERO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _complementoMeta =
//       const VerificationMeta('complemento');
//   late final GeneratedColumn<String?> complemento = GeneratedColumn<String?>(
//       'COMPLEMENTO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _bairroMeta = const VerificationMeta('bairro');
//   late final GeneratedColumn<String?> bairro = GeneratedColumn<String?>(
//       'BAIRRO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _codigoMunicipioMeta =
//       const VerificationMeta('codigoMunicipio');
//   late final GeneratedColumn<int?> codigoMunicipio = GeneratedColumn<int?>(
//       'CODIGO_MUNICIPIO', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _nomeMunicipioMeta =
//       const VerificationMeta('nomeMunicipio');
//   late final GeneratedColumn<String?> nomeMunicipio = GeneratedColumn<String?>(
//       'NOME_MUNICIPIO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _ufMeta = const VerificationMeta('uf');
//   late final GeneratedColumn<String?> uf = GeneratedColumn<String?>(
//       'UF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cepMeta = const VerificationMeta('cep');
//   late final GeneratedColumn<String?> cep = GeneratedColumn<String?>(
//       'CEP', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _codigoPaisMeta = const VerificationMeta('codigoPais');
//   late final GeneratedColumn<int?> codigoPais = GeneratedColumn<int?>(
//       'CODIGO_PAIS', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _nomePaisMeta = const VerificationMeta('nomePais');
//   late final GeneratedColumn<String?> nomePais = GeneratedColumn<String?>(
//       'NOME_PAIS', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _telefoneMeta = const VerificationMeta('telefone');
//   late final GeneratedColumn<String?> telefone = GeneratedColumn<String?>(
//       'TELEFONE', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _emailMeta = const VerificationMeta('email');
//   late final GeneratedColumn<String?> email = GeneratedColumn<String?>(
//       'EMAIL', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _inscricaoEstadualMeta =
//       const VerificationMeta('inscricaoEstadual');
//   late final GeneratedColumn<String?> inscricaoEstadual =
//       GeneratedColumn<String?>('INSCRICAO_ESTADUAL', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 14),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idNfeCabecalho,
//         cnpj,
//         cpf,
//         nomeRecebedor,
//         logradouro,
//         numero,
//         complemento,
//         bairro,
//         codigoMunicipio,
//         nomeMunicipio,
//         uf,
//         cep,
//         codigoPais,
//         nomePais,
//         telefone,
//         email,
//         inscricaoEstadual
//       ];
//   @override
//   String get aliasedName => _alias ?? 'NFE_LOCAL_ENTREGA';
//   @override
//   String get actualTableName => 'NFE_LOCAL_ENTREGA';
//   @override
//   VerificationContext validateIntegrity(Insertable<NfeLocalEntrega> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_NFE_CABECALHO')) {
//       context.handle(
//           _idNfeCabecalhoMeta,
//           idNfeCabecalho.isAcceptableOrUnknown(
//               data['ID_NFE_CABECALHO']!, _idNfeCabecalhoMeta));
//     }
//     if (data.containsKey('CNPJ')) {
//       context.handle(
//           _cnpjMeta, cnpj.isAcceptableOrUnknown(data['CNPJ']!, _cnpjMeta));
//     }
//     if (data.containsKey('CPF')) {
//       context.handle(
//           _cpfMeta, cpf.isAcceptableOrUnknown(data['CPF']!, _cpfMeta));
//     }
//     if (data.containsKey('NOME_RECEBEDOR')) {
//       context.handle(
//           _nomeRecebedorMeta,
//           nomeRecebedor.isAcceptableOrUnknown(
//               data['NOME_RECEBEDOR']!, _nomeRecebedorMeta));
//     }
//     if (data.containsKey('LOGRADOURO')) {
//       context.handle(
//           _logradouroMeta,
//           logradouro.isAcceptableOrUnknown(
//               data['LOGRADOURO']!, _logradouroMeta));
//     }
//     if (data.containsKey('NUMERO')) {
//       context.handle(_numeroMeta,
//           numero.isAcceptableOrUnknown(data['NUMERO']!, _numeroMeta));
//     }
//     if (data.containsKey('COMPLEMENTO')) {
//       context.handle(
//           _complementoMeta,
//           complemento.isAcceptableOrUnknown(
//               data['COMPLEMENTO']!, _complementoMeta));
//     }
//     if (data.containsKey('BAIRRO')) {
//       context.handle(_bairroMeta,
//           bairro.isAcceptableOrUnknown(data['BAIRRO']!, _bairroMeta));
//     }
//     if (data.containsKey('CODIGO_MUNICIPIO')) {
//       context.handle(
//           _codigoMunicipioMeta,
//           codigoMunicipio.isAcceptableOrUnknown(
//               data['CODIGO_MUNICIPIO']!, _codigoMunicipioMeta));
//     }
//     if (data.containsKey('NOME_MUNICIPIO')) {
//       context.handle(
//           _nomeMunicipioMeta,
//           nomeMunicipio.isAcceptableOrUnknown(
//               data['NOME_MUNICIPIO']!, _nomeMunicipioMeta));
//     }
//     if (data.containsKey('UF')) {
//       context.handle(_ufMeta, uf.isAcceptableOrUnknown(data['UF']!, _ufMeta));
//     }
//     if (data.containsKey('CEP')) {
//       context.handle(
//           _cepMeta, cep.isAcceptableOrUnknown(data['CEP']!, _cepMeta));
//     }
//     if (data.containsKey('CODIGO_PAIS')) {
//       context.handle(
//           _codigoPaisMeta,
//           codigoPais.isAcceptableOrUnknown(
//               data['CODIGO_PAIS']!, _codigoPaisMeta));
//     }
//     if (data.containsKey('NOME_PAIS')) {
//       context.handle(_nomePaisMeta,
//           nomePais.isAcceptableOrUnknown(data['NOME_PAIS']!, _nomePaisMeta));
//     }
//     if (data.containsKey('TELEFONE')) {
//       context.handle(_telefoneMeta,
//           telefone.isAcceptableOrUnknown(data['TELEFONE']!, _telefoneMeta));
//     }
//     if (data.containsKey('EMAIL')) {
//       context.handle(
//           _emailMeta, email.isAcceptableOrUnknown(data['EMAIL']!, _emailMeta));
//     }
//     if (data.containsKey('INSCRICAO_ESTADUAL')) {
//       context.handle(
//           _inscricaoEstadualMeta,
//           inscricaoEstadual.isAcceptableOrUnknown(
//               data['INSCRICAO_ESTADUAL']!, _inscricaoEstadualMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeLocalEntrega map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeLocalEntrega(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idNfeCabecalho: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_NFE_CABECALHO']),
//       cnpj: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CNPJ']),
//       cpf: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CPF']),
//       nomeRecebedor: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NOME_RECEBEDOR']),
//       logradouro: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}LOGRADOURO']),
//       numero: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO']),
//       complemento: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}COMPLEMENTO']),
//       bairro: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}BAIRRO']),
//       codigoMunicipio: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO_MUNICIPIO']),
//       nomeMunicipio: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NOME_MUNICIPIO']),
//       uf: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}UF']),
//       cep: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CEP']),
//       codigoPais: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO_PAIS']),
//       nomePais: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NOME_PAIS']),
//       telefone: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TELEFONE']),
//       email: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}EMAIL']),
//       inscricaoEstadual: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}INSCRICAO_ESTADUAL']),
//     );
//   }

//   @override
//   $NfeLocalEntregasTable createAlias(String alias) {
//     return $NfeLocalEntregasTable(_db, alias);
//   }
// }

// class NfeLocalRetiradasCompanion extends UpdateCompanion<NfeLocalRetirada> {
//   final Value<int> id;
//   final Value<int?> idNfeCabecalho;
//   final Value<String?> cnpj;
//   final Value<String?> cpf;
//   final Value<String?> nomeExpedidor;
//   final Value<String?> logradouro;
//   final Value<String?> numero;
//   final Value<String?> complemento;
//   final Value<String?> bairro;
//   final Value<int?> codigoMunicipio;
//   final Value<String?> nomeMunicipio;
//   final Value<String?> uf;
//   final Value<String?> cep;
//   final Value<int?> codigoPais;
//   final Value<String?> nomePais;
//   final Value<String?> telefone;
//   final Value<String?> email;
//   final Value<String?> inscricaoEstadual;
//   const NfeLocalRetiradasCompanion({
//     this.id = const Value.absent(),
//     this.idNfeCabecalho = const Value.absent(),
//     this.cnpj = const Value.absent(),
//     this.cpf = const Value.absent(),
//     this.nomeExpedidor = const Value.absent(),
//     this.logradouro = const Value.absent(),
//     this.numero = const Value.absent(),
//     this.complemento = const Value.absent(),
//     this.bairro = const Value.absent(),
//     this.codigoMunicipio = const Value.absent(),
//     this.nomeMunicipio = const Value.absent(),
//     this.uf = const Value.absent(),
//     this.cep = const Value.absent(),
//     this.codigoPais = const Value.absent(),
//     this.nomePais = const Value.absent(),
//     this.telefone = const Value.absent(),
//     this.email = const Value.absent(),
//     this.inscricaoEstadual = const Value.absent(),
//   });
//   NfeLocalRetiradasCompanion.insert({
//     this.id = const Value.absent(),
//     this.idNfeCabecalho = const Value.absent(),
//     this.cnpj = const Value.absent(),
//     this.cpf = const Value.absent(),
//     this.nomeExpedidor = const Value.absent(),
//     this.logradouro = const Value.absent(),
//     this.numero = const Value.absent(),
//     this.complemento = const Value.absent(),
//     this.bairro = const Value.absent(),
//     this.codigoMunicipio = const Value.absent(),
//     this.nomeMunicipio = const Value.absent(),
//     this.uf = const Value.absent(),
//     this.cep = const Value.absent(),
//     this.codigoPais = const Value.absent(),
//     this.nomePais = const Value.absent(),
//     this.telefone = const Value.absent(),
//     this.email = const Value.absent(),
//     this.inscricaoEstadual = const Value.absent(),
//   });
//   static Insertable<NfeLocalRetirada> custom({
//     Expression<int>? id,
//     Expression<int?>? idNfeCabecalho,
//     Expression<String?>? cnpj,
//     Expression<String?>? cpf,
//     Expression<String?>? nomeExpedidor,
//     Expression<String?>? logradouro,
//     Expression<String?>? numero,
//     Expression<String?>? complemento,
//     Expression<String?>? bairro,
//     Expression<int?>? codigoMunicipio,
//     Expression<String?>? nomeMunicipio,
//     Expression<String?>? uf,
//     Expression<String?>? cep,
//     Expression<int?>? codigoPais,
//     Expression<String?>? nomePais,
//     Expression<String?>? telefone,
//     Expression<String?>? email,
//     Expression<String?>? inscricaoEstadual,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idNfeCabecalho != null) 'ID_NFE_CABECALHO': idNfeCabecalho,
//       if (cnpj != null) 'CNPJ': cnpj,
//       if (cpf != null) 'CPF': cpf,
//       if (nomeExpedidor != null) 'NOME_EXPEDIDOR': nomeExpedidor,
//       if (logradouro != null) 'LOGRADOURO': logradouro,
//       if (numero != null) 'NUMERO': numero,
//       if (complemento != null) 'COMPLEMENTO': complemento,
//       if (bairro != null) 'BAIRRO': bairro,
//       if (codigoMunicipio != null) 'CODIGO_MUNICIPIO': codigoMunicipio,
//       if (nomeMunicipio != null) 'NOME_MUNICIPIO': nomeMunicipio,
//       if (uf != null) 'UF': uf,
//       if (cep != null) 'CEP': cep,
//       if (codigoPais != null) 'CODIGO_PAIS': codigoPais,
//       if (nomePais != null) 'NOME_PAIS': nomePais,
//       if (telefone != null) 'TELEFONE': telefone,
//       if (email != null) 'EMAIL': email,
//       if (inscricaoEstadual != null) 'INSCRICAO_ESTADUAL': inscricaoEstadual,
//     });
//   }

//   NfeLocalRetiradasCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idNfeCabecalho,
//       Value<String?>? cnpj,
//       Value<String?>? cpf,
//       Value<String?>? nomeExpedidor,
//       Value<String?>? logradouro,
//       Value<String?>? numero,
//       Value<String?>? complemento,
//       Value<String?>? bairro,
//       Value<int?>? codigoMunicipio,
//       Value<String?>? nomeMunicipio,
//       Value<String?>? uf,
//       Value<String?>? cep,
//       Value<int?>? codigoPais,
//       Value<String?>? nomePais,
//       Value<String?>? telefone,
//       Value<String?>? email,
//       Value<String?>? inscricaoEstadual}) {
//     return NfeLocalRetiradasCompanion(
//       id: id ?? this.id,
//       idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
//       cnpj: cnpj ?? this.cnpj,
//       cpf: cpf ?? this.cpf,
//       nomeExpedidor: nomeExpedidor ?? this.nomeExpedidor,
//       logradouro: logradouro ?? this.logradouro,
//       numero: numero ?? this.numero,
//       complemento: complemento ?? this.complemento,
//       bairro: bairro ?? this.bairro,
//       codigoMunicipio: codigoMunicipio ?? this.codigoMunicipio,
//       nomeMunicipio: nomeMunicipio ?? this.nomeMunicipio,
//       uf: uf ?? this.uf,
//       cep: cep ?? this.cep,
//       codigoPais: codigoPais ?? this.codigoPais,
//       nomePais: nomePais ?? this.nomePais,
//       telefone: telefone ?? this.telefone,
//       email: email ?? this.email,
//       inscricaoEstadual: inscricaoEstadual ?? this.inscricaoEstadual,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idNfeCabecalho.present) {
//       map['ID_NFE_CABECALHO'] = Variable<int?>(idNfeCabecalho.value);
//     }
//     if (cnpj.present) {
//       map['CNPJ'] = Variable<String?>(cnpj.value);
//     }
//     if (cpf.present) {
//       map['CPF'] = Variable<String?>(cpf.value);
//     }
//     if (nomeExpedidor.present) {
//       map['NOME_EXPEDIDOR'] = Variable<String?>(nomeExpedidor.value);
//     }
//     if (logradouro.present) {
//       map['LOGRADOURO'] = Variable<String?>(logradouro.value);
//     }
//     if (numero.present) {
//       map['NUMERO'] = Variable<String?>(numero.value);
//     }
//     if (complemento.present) {
//       map['COMPLEMENTO'] = Variable<String?>(complemento.value);
//     }
//     if (bairro.present) {
//       map['BAIRRO'] = Variable<String?>(bairro.value);
//     }
//     if (codigoMunicipio.present) {
//       map['CODIGO_MUNICIPIO'] = Variable<int?>(codigoMunicipio.value);
//     }
//     if (nomeMunicipio.present) {
//       map['NOME_MUNICIPIO'] = Variable<String?>(nomeMunicipio.value);
//     }
//     if (uf.present) {
//       map['UF'] = Variable<String?>(uf.value);
//     }
//     if (cep.present) {
//       map['CEP'] = Variable<String?>(cep.value);
//     }
//     if (codigoPais.present) {
//       map['CODIGO_PAIS'] = Variable<int?>(codigoPais.value);
//     }
//     if (nomePais.present) {
//       map['NOME_PAIS'] = Variable<String?>(nomePais.value);
//     }
//     if (telefone.present) {
//       map['TELEFONE'] = Variable<String?>(telefone.value);
//     }
//     if (email.present) {
//       map['EMAIL'] = Variable<String?>(email.value);
//     }
//     if (inscricaoEstadual.present) {
//       map['INSCRICAO_ESTADUAL'] = Variable<String?>(inscricaoEstadual.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeLocalRetiradasCompanion(')
//           ..write('id: $id, ')
//           ..write('idNfeCabecalho: $idNfeCabecalho, ')
//           ..write('cnpj: $cnpj, ')
//           ..write('cpf: $cpf, ')
//           ..write('nomeExpedidor: $nomeExpedidor, ')
//           ..write('logradouro: $logradouro, ')
//           ..write('numero: $numero, ')
//           ..write('complemento: $complemento, ')
//           ..write('bairro: $bairro, ')
//           ..write('codigoMunicipio: $codigoMunicipio, ')
//           ..write('nomeMunicipio: $nomeMunicipio, ')
//           ..write('uf: $uf, ')
//           ..write('cep: $cep, ')
//           ..write('codigoPais: $codigoPais, ')
//           ..write('nomePais: $nomePais, ')
//           ..write('telefone: $telefone, ')
//           ..write('email: $email, ')
//           ..write('inscricaoEstadual: $inscricaoEstadual')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeLocalRetiradasTable extends NfeLocalRetiradas
//     with TableInfo<$NfeLocalRetiradasTable, NfeLocalRetirada> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeLocalRetiradasTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idNfeCabecalhoMeta =
//       const VerificationMeta('idNfeCabecalho');
//   late final GeneratedColumn<int?> idNfeCabecalho = GeneratedColumn<int?>(
//       'ID_NFE_CABECALHO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES NFE_CABECALHO(ID)');
//   final VerificationMeta _cnpjMeta = const VerificationMeta('cnpj');
//   late final GeneratedColumn<String?> cnpj = GeneratedColumn<String?>(
//       'CNPJ', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cpfMeta = const VerificationMeta('cpf');
//   late final GeneratedColumn<String?> cpf = GeneratedColumn<String?>(
//       'CPF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 11),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _nomeExpedidorMeta =
//       const VerificationMeta('nomeExpedidor');
//   late final GeneratedColumn<String?> nomeExpedidor = GeneratedColumn<String?>(
//       'NOME_EXPEDIDOR', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _logradouroMeta = const VerificationMeta('logradouro');
//   late final GeneratedColumn<String?> logradouro = GeneratedColumn<String?>(
//       'LOGRADOURO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _numeroMeta = const VerificationMeta('numero');
//   late final GeneratedColumn<String?> numero = GeneratedColumn<String?>(
//       'NUMERO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _complementoMeta =
//       const VerificationMeta('complemento');
//   late final GeneratedColumn<String?> complemento = GeneratedColumn<String?>(
//       'COMPLEMENTO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _bairroMeta = const VerificationMeta('bairro');
//   late final GeneratedColumn<String?> bairro = GeneratedColumn<String?>(
//       'BAIRRO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _codigoMunicipioMeta =
//       const VerificationMeta('codigoMunicipio');
//   late final GeneratedColumn<int?> codigoMunicipio = GeneratedColumn<int?>(
//       'CODIGO_MUNICIPIO', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _nomeMunicipioMeta =
//       const VerificationMeta('nomeMunicipio');
//   late final GeneratedColumn<String?> nomeMunicipio = GeneratedColumn<String?>(
//       'NOME_MUNICIPIO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _ufMeta = const VerificationMeta('uf');
//   late final GeneratedColumn<String?> uf = GeneratedColumn<String?>(
//       'UF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cepMeta = const VerificationMeta('cep');
//   late final GeneratedColumn<String?> cep = GeneratedColumn<String?>(
//       'CEP', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _codigoPaisMeta = const VerificationMeta('codigoPais');
//   late final GeneratedColumn<int?> codigoPais = GeneratedColumn<int?>(
//       'CODIGO_PAIS', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _nomePaisMeta = const VerificationMeta('nomePais');
//   late final GeneratedColumn<String?> nomePais = GeneratedColumn<String?>(
//       'NOME_PAIS', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _telefoneMeta = const VerificationMeta('telefone');
//   late final GeneratedColumn<String?> telefone = GeneratedColumn<String?>(
//       'TELEFONE', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _emailMeta = const VerificationMeta('email');
//   late final GeneratedColumn<String?> email = GeneratedColumn<String?>(
//       'EMAIL', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _inscricaoEstadualMeta =
//       const VerificationMeta('inscricaoEstadual');
//   late final GeneratedColumn<String?> inscricaoEstadual =
//       GeneratedColumn<String?>('INSCRICAO_ESTADUAL', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 14),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idNfeCabecalho,
//         cnpj,
//         cpf,
//         nomeExpedidor,
//         logradouro,
//         numero,
//         complemento,
//         bairro,
//         codigoMunicipio,
//         nomeMunicipio,
//         uf,
//         cep,
//         codigoPais,
//         nomePais,
//         telefone,
//         email,
//         inscricaoEstadual
//       ];
//   @override
//   String get aliasedName => _alias ?? 'NFE_LOCAL_RETIRADA';
//   @override
//   String get actualTableName => 'NFE_LOCAL_RETIRADA';
//   @override
//   VerificationContext validateIntegrity(Insertable<NfeLocalRetirada> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_NFE_CABECALHO')) {
//       context.handle(
//           _idNfeCabecalhoMeta,
//           idNfeCabecalho.isAcceptableOrUnknown(
//               data['ID_NFE_CABECALHO']!, _idNfeCabecalhoMeta));
//     }
//     if (data.containsKey('CNPJ')) {
//       context.handle(
//           _cnpjMeta, cnpj.isAcceptableOrUnknown(data['CNPJ']!, _cnpjMeta));
//     }
//     if (data.containsKey('CPF')) {
//       context.handle(
//           _cpfMeta, cpf.isAcceptableOrUnknown(data['CPF']!, _cpfMeta));
//     }
//     if (data.containsKey('NOME_EXPEDIDOR')) {
//       context.handle(
//           _nomeExpedidorMeta,
//           nomeExpedidor.isAcceptableOrUnknown(
//               data['NOME_EXPEDIDOR']!, _nomeExpedidorMeta));
//     }
//     if (data.containsKey('LOGRADOURO')) {
//       context.handle(
//           _logradouroMeta,
//           logradouro.isAcceptableOrUnknown(
//               data['LOGRADOURO']!, _logradouroMeta));
//     }
//     if (data.containsKey('NUMERO')) {
//       context.handle(_numeroMeta,
//           numero.isAcceptableOrUnknown(data['NUMERO']!, _numeroMeta));
//     }
//     if (data.containsKey('COMPLEMENTO')) {
//       context.handle(
//           _complementoMeta,
//           complemento.isAcceptableOrUnknown(
//               data['COMPLEMENTO']!, _complementoMeta));
//     }
//     if (data.containsKey('BAIRRO')) {
//       context.handle(_bairroMeta,
//           bairro.isAcceptableOrUnknown(data['BAIRRO']!, _bairroMeta));
//     }
//     if (data.containsKey('CODIGO_MUNICIPIO')) {
//       context.handle(
//           _codigoMunicipioMeta,
//           codigoMunicipio.isAcceptableOrUnknown(
//               data['CODIGO_MUNICIPIO']!, _codigoMunicipioMeta));
//     }
//     if (data.containsKey('NOME_MUNICIPIO')) {
//       context.handle(
//           _nomeMunicipioMeta,
//           nomeMunicipio.isAcceptableOrUnknown(
//               data['NOME_MUNICIPIO']!, _nomeMunicipioMeta));
//     }
//     if (data.containsKey('UF')) {
//       context.handle(_ufMeta, uf.isAcceptableOrUnknown(data['UF']!, _ufMeta));
//     }
//     if (data.containsKey('CEP')) {
//       context.handle(
//           _cepMeta, cep.isAcceptableOrUnknown(data['CEP']!, _cepMeta));
//     }
//     if (data.containsKey('CODIGO_PAIS')) {
//       context.handle(
//           _codigoPaisMeta,
//           codigoPais.isAcceptableOrUnknown(
//               data['CODIGO_PAIS']!, _codigoPaisMeta));
//     }
//     if (data.containsKey('NOME_PAIS')) {
//       context.handle(_nomePaisMeta,
//           nomePais.isAcceptableOrUnknown(data['NOME_PAIS']!, _nomePaisMeta));
//     }
//     if (data.containsKey('TELEFONE')) {
//       context.handle(_telefoneMeta,
//           telefone.isAcceptableOrUnknown(data['TELEFONE']!, _telefoneMeta));
//     }
//     if (data.containsKey('EMAIL')) {
//       context.handle(
//           _emailMeta, email.isAcceptableOrUnknown(data['EMAIL']!, _emailMeta));
//     }
//     if (data.containsKey('INSCRICAO_ESTADUAL')) {
//       context.handle(
//           _inscricaoEstadualMeta,
//           inscricaoEstadual.isAcceptableOrUnknown(
//               data['INSCRICAO_ESTADUAL']!, _inscricaoEstadualMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeLocalRetirada map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeLocalRetirada(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idNfeCabecalho: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_NFE_CABECALHO']),
//       cnpj: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CNPJ']),
//       cpf: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CPF']),
//       nomeExpedidor: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NOME_EXPEDIDOR']),
//       logradouro: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}LOGRADOURO']),
//       numero: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO']),
//       complemento: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}COMPLEMENTO']),
//       bairro: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}BAIRRO']),
//       codigoMunicipio: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO_MUNICIPIO']),
//       nomeMunicipio: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NOME_MUNICIPIO']),
//       uf: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}UF']),
//       cep: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CEP']),
//       codigoPais: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO_PAIS']),
//       nomePais: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NOME_PAIS']),
//       telefone: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TELEFONE']),
//       email: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}EMAIL']),
//       inscricaoEstadual: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}INSCRICAO_ESTADUAL']),
//     );
//   }

//   @override
//   $NfeLocalRetiradasTable createAlias(String alias) {
//     return $NfeLocalRetiradasTable(_db, alias);
//   }
// }

// class NfeNfReferenciadasCompanion extends UpdateCompanion<NfeNfReferenciada> {
//   final Value<int> id;
//   final Value<int?> idNfeCabecalho;
//   final Value<int?> codigoUf;
//   final Value<String?> anoMes;
//   final Value<String?> cnpj;
//   final Value<String?> modelo;
//   final Value<String?> serie;
//   final Value<int?> numeroNf;
//   const NfeNfReferenciadasCompanion({
//     this.id = const Value.absent(),
//     this.idNfeCabecalho = const Value.absent(),
//     this.codigoUf = const Value.absent(),
//     this.anoMes = const Value.absent(),
//     this.cnpj = const Value.absent(),
//     this.modelo = const Value.absent(),
//     this.serie = const Value.absent(),
//     this.numeroNf = const Value.absent(),
//   });
//   NfeNfReferenciadasCompanion.insert({
//     this.id = const Value.absent(),
//     this.idNfeCabecalho = const Value.absent(),
//     this.codigoUf = const Value.absent(),
//     this.anoMes = const Value.absent(),
//     this.cnpj = const Value.absent(),
//     this.modelo = const Value.absent(),
//     this.serie = const Value.absent(),
//     this.numeroNf = const Value.absent(),
//   });
//   static Insertable<NfeNfReferenciada> custom({
//     Expression<int>? id,
//     Expression<int?>? idNfeCabecalho,
//     Expression<int?>? codigoUf,
//     Expression<String?>? anoMes,
//     Expression<String?>? cnpj,
//     Expression<String?>? modelo,
//     Expression<String?>? serie,
//     Expression<int?>? numeroNf,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idNfeCabecalho != null) 'ID_NFE_CABECALHO': idNfeCabecalho,
//       if (codigoUf != null) 'CODIGO_UF': codigoUf,
//       if (anoMes != null) 'ANO_MES': anoMes,
//       if (cnpj != null) 'CNPJ': cnpj,
//       if (modelo != null) 'MODELO': modelo,
//       if (serie != null) 'SERIE': serie,
//       if (numeroNf != null) 'NUMERO_NF': numeroNf,
//     });
//   }

//   NfeNfReferenciadasCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idNfeCabecalho,
//       Value<int?>? codigoUf,
//       Value<String?>? anoMes,
//       Value<String?>? cnpj,
//       Value<String?>? modelo,
//       Value<String?>? serie,
//       Value<int?>? numeroNf}) {
//     return NfeNfReferenciadasCompanion(
//       id: id ?? this.id,
//       idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
//       codigoUf: codigoUf ?? this.codigoUf,
//       anoMes: anoMes ?? this.anoMes,
//       cnpj: cnpj ?? this.cnpj,
//       modelo: modelo ?? this.modelo,
//       serie: serie ?? this.serie,
//       numeroNf: numeroNf ?? this.numeroNf,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idNfeCabecalho.present) {
//       map['ID_NFE_CABECALHO'] = Variable<int?>(idNfeCabecalho.value);
//     }
//     if (codigoUf.present) {
//       map['CODIGO_UF'] = Variable<int?>(codigoUf.value);
//     }
//     if (anoMes.present) {
//       map['ANO_MES'] = Variable<String?>(anoMes.value);
//     }
//     if (cnpj.present) {
//       map['CNPJ'] = Variable<String?>(cnpj.value);
//     }
//     if (modelo.present) {
//       map['MODELO'] = Variable<String?>(modelo.value);
//     }
//     if (serie.present) {
//       map['SERIE'] = Variable<String?>(serie.value);
//     }
//     if (numeroNf.present) {
//       map['NUMERO_NF'] = Variable<int?>(numeroNf.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeNfReferenciadasCompanion(')
//           ..write('id: $id, ')
//           ..write('idNfeCabecalho: $idNfeCabecalho, ')
//           ..write('codigoUf: $codigoUf, ')
//           ..write('anoMes: $anoMes, ')
//           ..write('cnpj: $cnpj, ')
//           ..write('modelo: $modelo, ')
//           ..write('serie: $serie, ')
//           ..write('numeroNf: $numeroNf')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeNfReferenciadasTable extends NfeNfReferenciadas
//     with TableInfo<$NfeNfReferenciadasTable, NfeNfReferenciada> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeNfReferenciadasTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idNfeCabecalhoMeta =
//       const VerificationMeta('idNfeCabecalho');
//   late final GeneratedColumn<int?> idNfeCabecalho = GeneratedColumn<int?>(
//       'ID_NFE_CABECALHO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES NFE_CABECALHO(ID)');
//   final VerificationMeta _codigoUfMeta = const VerificationMeta('codigoUf');
//   late final GeneratedColumn<int?> codigoUf = GeneratedColumn<int?>(
//       'CODIGO_UF', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _anoMesMeta = const VerificationMeta('anoMes');
//   late final GeneratedColumn<String?> anoMes = GeneratedColumn<String?>(
//       'ANO_MES', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 4),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cnpjMeta = const VerificationMeta('cnpj');
//   late final GeneratedColumn<String?> cnpj = GeneratedColumn<String?>(
//       'CNPJ', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _modeloMeta = const VerificationMeta('modelo');
//   late final GeneratedColumn<String?> modelo = GeneratedColumn<String?>(
//       'MODELO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _serieMeta = const VerificationMeta('serie');
//   late final GeneratedColumn<String?> serie = GeneratedColumn<String?>(
//       'SERIE', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 3),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _numeroNfMeta = const VerificationMeta('numeroNf');
//   late final GeneratedColumn<int?> numeroNf = GeneratedColumn<int?>(
//       'NUMERO_NF', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns =>
//       [id, idNfeCabecalho, codigoUf, anoMes, cnpj, modelo, serie, numeroNf];
//   @override
//   String get aliasedName => _alias ?? 'NFE_NF_REFERENCIADA';
//   @override
//   String get actualTableName => 'NFE_NF_REFERENCIADA';
//   @override
//   VerificationContext validateIntegrity(Insertable<NfeNfReferenciada> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_NFE_CABECALHO')) {
//       context.handle(
//           _idNfeCabecalhoMeta,
//           idNfeCabecalho.isAcceptableOrUnknown(
//               data['ID_NFE_CABECALHO']!, _idNfeCabecalhoMeta));
//     }
//     if (data.containsKey('CODIGO_UF')) {
//       context.handle(_codigoUfMeta,
//           codigoUf.isAcceptableOrUnknown(data['CODIGO_UF']!, _codigoUfMeta));
//     }
//     if (data.containsKey('ANO_MES')) {
//       context.handle(_anoMesMeta,
//           anoMes.isAcceptableOrUnknown(data['ANO_MES']!, _anoMesMeta));
//     }
//     if (data.containsKey('CNPJ')) {
//       context.handle(
//           _cnpjMeta, cnpj.isAcceptableOrUnknown(data['CNPJ']!, _cnpjMeta));
//     }
//     if (data.containsKey('MODELO')) {
//       context.handle(_modeloMeta,
//           modelo.isAcceptableOrUnknown(data['MODELO']!, _modeloMeta));
//     }
//     if (data.containsKey('SERIE')) {
//       context.handle(
//           _serieMeta, serie.isAcceptableOrUnknown(data['SERIE']!, _serieMeta));
//     }
//     if (data.containsKey('NUMERO_NF')) {
//       context.handle(_numeroNfMeta,
//           numeroNf.isAcceptableOrUnknown(data['NUMERO_NF']!, _numeroNfMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeNfReferenciada map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeNfReferenciada(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idNfeCabecalho: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_NFE_CABECALHO']),
//       codigoUf: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO_UF']),
//       anoMes: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ANO_MES']),
//       cnpj: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CNPJ']),
//       modelo: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}MODELO']),
//       serie: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}SERIE']),
//       numeroNf: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO_NF']),
//     );
//   }

//   @override
//   $NfeNfReferenciadasTable createAlias(String alias) {
//     return $NfeNfReferenciadasTable(_db, alias);
//   }
// }

// class NfeNumerosCompanion extends UpdateCompanion<NfeNumero> {
//   final Value<int> id;
//   final Value<String?> modelo;
//   final Value<String?> serie;
//   final Value<int?> numero;
//   const NfeNumerosCompanion({
//     this.id = const Value.absent(),
//     this.modelo = const Value.absent(),
//     this.serie = const Value.absent(),
//     this.numero = const Value.absent(),
//   });
//   NfeNumerosCompanion.insert({
//     this.id = const Value.absent(),
//     this.modelo = const Value.absent(),
//     this.serie = const Value.absent(),
//     this.numero = const Value.absent(),
//   });
//   static Insertable<NfeNumero> custom({
//     Expression<int>? id,
//     Expression<String?>? modelo,
//     Expression<String?>? serie,
//     Expression<int?>? numero,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (modelo != null) 'MODELO': modelo,
//       if (serie != null) 'SERIE': serie,
//       if (numero != null) 'NUMERO': numero,
//     });
//   }

//   NfeNumerosCompanion copyWith(
//       {Value<int>? id,
//       Value<String?>? modelo,
//       Value<String?>? serie,
//       Value<int?>? numero}) {
//     return NfeNumerosCompanion(
//       id: id ?? this.id,
//       modelo: modelo ?? this.modelo,
//       serie: serie ?? this.serie,
//       numero: numero ?? this.numero,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (modelo.present) {
//       map['MODELO'] = Variable<String?>(modelo.value);
//     }
//     if (serie.present) {
//       map['SERIE'] = Variable<String?>(serie.value);
//     }
//     if (numero.present) {
//       map['NUMERO'] = Variable<int?>(numero.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeNumerosCompanion(')
//           ..write('id: $id, ')
//           ..write('modelo: $modelo, ')
//           ..write('serie: $serie, ')
//           ..write('numero: $numero')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeNumerosTable extends NfeNumeros
//     with TableInfo<$NfeNumerosTable, NfeNumero> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeNumerosTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _modeloMeta = const VerificationMeta('modelo');
//   late final GeneratedColumn<String?> modelo = GeneratedColumn<String?>(
//       'MODELO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _serieMeta = const VerificationMeta('serie');
//   late final GeneratedColumn<String?> serie = GeneratedColumn<String?>(
//       'SERIE', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 3),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _numeroMeta = const VerificationMeta('numero');
//   late final GeneratedColumn<int?> numero = GeneratedColumn<int?>(
//       'NUMERO', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [id, modelo, serie, numero];
//   @override
//   String get aliasedName => _alias ?? 'NFE_NUMERO';
//   @override
//   String get actualTableName => 'NFE_NUMERO';
//   @override
//   VerificationContext validateIntegrity(Insertable<NfeNumero> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('MODELO')) {
//       context.handle(_modeloMeta,
//           modelo.isAcceptableOrUnknown(data['MODELO']!, _modeloMeta));
//     }
//     if (data.containsKey('SERIE')) {
//       context.handle(
//           _serieMeta, serie.isAcceptableOrUnknown(data['SERIE']!, _serieMeta));
//     }
//     if (data.containsKey('NUMERO')) {
//       context.handle(_numeroMeta,
//           numero.isAcceptableOrUnknown(data['NUMERO']!, _numeroMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeNumero map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeNumero(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       modelo: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}MODELO']),
//       serie: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}SERIE']),
//       numero: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO']),
//     );
//   }

//   @override
//   $NfeNumerosTable createAlias(String alias) {
//     return $NfeNumerosTable(_db, alias);
//   }
// }

// class NfeNumeroInutilizadosCompanion
//     extends UpdateCompanion<NfeNumeroInutilizado> {
//   final Value<int> id;
//   final Value<String?> serie;
//   final Value<int?> numero;
//   final Value<DateTime?> dataInutilizacao;
//   final Value<String?> observacao;
//   const NfeNumeroInutilizadosCompanion({
//     this.id = const Value.absent(),
//     this.serie = const Value.absent(),
//     this.numero = const Value.absent(),
//     this.dataInutilizacao = const Value.absent(),
//     this.observacao = const Value.absent(),
//   });
//   NfeNumeroInutilizadosCompanion.insert({
//     this.id = const Value.absent(),
//     this.serie = const Value.absent(),
//     this.numero = const Value.absent(),
//     this.dataInutilizacao = const Value.absent(),
//     this.observacao = const Value.absent(),
//   });
//   static Insertable<NfeNumeroInutilizado> custom({
//     Expression<int>? id,
//     Expression<String?>? serie,
//     Expression<int?>? numero,
//     Expression<DateTime?>? dataInutilizacao,
//     Expression<String?>? observacao,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (serie != null) 'SERIE': serie,
//       if (numero != null) 'NUMERO': numero,
//       if (dataInutilizacao != null) 'DATA_INUTILIZACAO': dataInutilizacao,
//       if (observacao != null) 'OBSERVACAO': observacao,
//     });
//   }

//   NfeNumeroInutilizadosCompanion copyWith(
//       {Value<int>? id,
//       Value<String?>? serie,
//       Value<int?>? numero,
//       Value<DateTime?>? dataInutilizacao,
//       Value<String?>? observacao}) {
//     return NfeNumeroInutilizadosCompanion(
//       id: id ?? this.id,
//       serie: serie ?? this.serie,
//       numero: numero ?? this.numero,
//       dataInutilizacao: dataInutilizacao ?? this.dataInutilizacao,
//       observacao: observacao ?? this.observacao,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (serie.present) {
//       map['SERIE'] = Variable<String?>(serie.value);
//     }
//     if (numero.present) {
//       map['NUMERO'] = Variable<int?>(numero.value);
//     }
//     if (dataInutilizacao.present) {
//       map['DATA_INUTILIZACAO'] = Variable<DateTime?>(dataInutilizacao.value);
//     }
//     if (observacao.present) {
//       map['OBSERVACAO'] = Variable<String?>(observacao.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeNumeroInutilizadosCompanion(')
//           ..write('id: $id, ')
//           ..write('serie: $serie, ')
//           ..write('numero: $numero, ')
//           ..write('dataInutilizacao: $dataInutilizacao, ')
//           ..write('observacao: $observacao')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeNumeroInutilizadosTable extends NfeNumeroInutilizados
//     with TableInfo<$NfeNumeroInutilizadosTable, NfeNumeroInutilizado> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeNumeroInutilizadosTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _serieMeta = const VerificationMeta('serie');
//   late final GeneratedColumn<String?> serie = GeneratedColumn<String?>(
//       'SERIE', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 3),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _numeroMeta = const VerificationMeta('numero');
//   late final GeneratedColumn<int?> numero = GeneratedColumn<int?>(
//       'NUMERO', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _dataInutilizacaoMeta =
//       const VerificationMeta('dataInutilizacao');
//   late final GeneratedColumn<DateTime?> dataInutilizacao =
//       GeneratedColumn<DateTime?>('DATA_INUTILIZACAO', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _observacaoMeta = const VerificationMeta('observacao');
//   late final GeneratedColumn<String?> observacao = GeneratedColumn<String?>(
//       'OBSERVACAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns =>
//       [id, serie, numero, dataInutilizacao, observacao];
//   @override
//   String get aliasedName => _alias ?? 'NFE_NUMERO_INUTILIZADO';
//   @override
//   String get actualTableName => 'NFE_NUMERO_INUTILIZADO';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<NfeNumeroInutilizado> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('SERIE')) {
//       context.handle(
//           _serieMeta, serie.isAcceptableOrUnknown(data['SERIE']!, _serieMeta));
//     }
//     if (data.containsKey('NUMERO')) {
//       context.handle(_numeroMeta,
//           numero.isAcceptableOrUnknown(data['NUMERO']!, _numeroMeta));
//     }
//     if (data.containsKey('DATA_INUTILIZACAO')) {
//       context.handle(
//           _dataInutilizacaoMeta,
//           dataInutilizacao.isAcceptableOrUnknown(
//               data['DATA_INUTILIZACAO']!, _dataInutilizacaoMeta));
//     }
//     if (data.containsKey('OBSERVACAO')) {
//       context.handle(
//           _observacaoMeta,
//           observacao.isAcceptableOrUnknown(
//               data['OBSERVACAO']!, _observacaoMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeNumeroInutilizado map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeNumeroInutilizado(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       serie: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}SERIE']),
//       numero: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO']),
//       dataInutilizacao: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_INUTILIZACAO']),
//       observacao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}OBSERVACAO']),
//     );
//   }

//   @override
//   $NfeNumeroInutilizadosTable createAlias(String alias) {
//     return $NfeNumeroInutilizadosTable(_db, alias);
//   }
// }

// class NfeProcessoReferenciadosCompanion
//     extends UpdateCompanion<NfeProcessoReferenciado> {
//   final Value<int> id;
//   final Value<int?> idNfeCabecalho;
//   final Value<String?> identificador;
//   final Value<String?> origem;
//   const NfeProcessoReferenciadosCompanion({
//     this.id = const Value.absent(),
//     this.idNfeCabecalho = const Value.absent(),
//     this.identificador = const Value.absent(),
//     this.origem = const Value.absent(),
//   });
//   NfeProcessoReferenciadosCompanion.insert({
//     this.id = const Value.absent(),
//     this.idNfeCabecalho = const Value.absent(),
//     this.identificador = const Value.absent(),
//     this.origem = const Value.absent(),
//   });
//   static Insertable<NfeProcessoReferenciado> custom({
//     Expression<int>? id,
//     Expression<int?>? idNfeCabecalho,
//     Expression<String?>? identificador,
//     Expression<String?>? origem,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idNfeCabecalho != null) 'ID_NFE_CABECALHO': idNfeCabecalho,
//       if (identificador != null) 'IDENTIFICADOR': identificador,
//       if (origem != null) 'ORIGEM': origem,
//     });
//   }

//   NfeProcessoReferenciadosCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idNfeCabecalho,
//       Value<String?>? identificador,
//       Value<String?>? origem}) {
//     return NfeProcessoReferenciadosCompanion(
//       id: id ?? this.id,
//       idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
//       identificador: identificador ?? this.identificador,
//       origem: origem ?? this.origem,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idNfeCabecalho.present) {
//       map['ID_NFE_CABECALHO'] = Variable<int?>(idNfeCabecalho.value);
//     }
//     if (identificador.present) {
//       map['IDENTIFICADOR'] = Variable<String?>(identificador.value);
//     }
//     if (origem.present) {
//       map['ORIGEM'] = Variable<String?>(origem.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeProcessoReferenciadosCompanion(')
//           ..write('id: $id, ')
//           ..write('idNfeCabecalho: $idNfeCabecalho, ')
//           ..write('identificador: $identificador, ')
//           ..write('origem: $origem')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeProcessoReferenciadosTable extends NfeProcessoReferenciados
//     with TableInfo<$NfeProcessoReferenciadosTable, NfeProcessoReferenciado> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeProcessoReferenciadosTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idNfeCabecalhoMeta =
//       const VerificationMeta('idNfeCabecalho');
//   late final GeneratedColumn<int?> idNfeCabecalho = GeneratedColumn<int?>(
//       'ID_NFE_CABECALHO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES NFE_CABECALHO(ID)');
//   final VerificationMeta _identificadorMeta =
//       const VerificationMeta('identificador');
//   late final GeneratedColumn<String?> identificador = GeneratedColumn<String?>(
//       'IDENTIFICADOR', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _origemMeta = const VerificationMeta('origem');
//   late final GeneratedColumn<String?> origem = GeneratedColumn<String?>(
//       'ORIGEM', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns =>
//       [id, idNfeCabecalho, identificador, origem];
//   @override
//   String get aliasedName => _alias ?? 'NFE_PROCESSO_REFERENCIADO';
//   @override
//   String get actualTableName => 'NFE_PROCESSO_REFERENCIADO';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<NfeProcessoReferenciado> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_NFE_CABECALHO')) {
//       context.handle(
//           _idNfeCabecalhoMeta,
//           idNfeCabecalho.isAcceptableOrUnknown(
//               data['ID_NFE_CABECALHO']!, _idNfeCabecalhoMeta));
//     }
//     if (data.containsKey('IDENTIFICADOR')) {
//       context.handle(
//           _identificadorMeta,
//           identificador.isAcceptableOrUnknown(
//               data['IDENTIFICADOR']!, _identificadorMeta));
//     }
//     if (data.containsKey('ORIGEM')) {
//       context.handle(_origemMeta,
//           origem.isAcceptableOrUnknown(data['ORIGEM']!, _origemMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeProcessoReferenciado map(Map<String, dynamic> data,
//       {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeProcessoReferenciado(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idNfeCabecalho: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_NFE_CABECALHO']),
//       identificador: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}IDENTIFICADOR']),
//       origem: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ORIGEM']),
//     );
//   }

//   @override
//   $NfeProcessoReferenciadosTable createAlias(String alias) {
//     return $NfeProcessoReferenciadosTable(_db, alias);
//   }
// }

// class NfeProdRuralReferenciadasCompanion
//     extends UpdateCompanion<NfeProdRuralReferenciada> {
//   final Value<int> id;
//   final Value<int?> idNfeCabecalho;
//   final Value<int?> codigoUf;
//   final Value<String?> anoMes;
//   final Value<String?> cnpj;
//   final Value<String?> cpf;
//   final Value<String?> inscricaoEstadual;
//   final Value<String?> modelo;
//   final Value<String?> serie;
//   final Value<int?> numeroNf;
//   const NfeProdRuralReferenciadasCompanion({
//     this.id = const Value.absent(),
//     this.idNfeCabecalho = const Value.absent(),
//     this.codigoUf = const Value.absent(),
//     this.anoMes = const Value.absent(),
//     this.cnpj = const Value.absent(),
//     this.cpf = const Value.absent(),
//     this.inscricaoEstadual = const Value.absent(),
//     this.modelo = const Value.absent(),
//     this.serie = const Value.absent(),
//     this.numeroNf = const Value.absent(),
//   });
//   NfeProdRuralReferenciadasCompanion.insert({
//     this.id = const Value.absent(),
//     this.idNfeCabecalho = const Value.absent(),
//     this.codigoUf = const Value.absent(),
//     this.anoMes = const Value.absent(),
//     this.cnpj = const Value.absent(),
//     this.cpf = const Value.absent(),
//     this.inscricaoEstadual = const Value.absent(),
//     this.modelo = const Value.absent(),
//     this.serie = const Value.absent(),
//     this.numeroNf = const Value.absent(),
//   });
//   static Insertable<NfeProdRuralReferenciada> custom({
//     Expression<int>? id,
//     Expression<int?>? idNfeCabecalho,
//     Expression<int?>? codigoUf,
//     Expression<String?>? anoMes,
//     Expression<String?>? cnpj,
//     Expression<String?>? cpf,
//     Expression<String?>? inscricaoEstadual,
//     Expression<String?>? modelo,
//     Expression<String?>? serie,
//     Expression<int?>? numeroNf,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idNfeCabecalho != null) 'ID_NFE_CABECALHO': idNfeCabecalho,
//       if (codigoUf != null) 'CODIGO_UF': codigoUf,
//       if (anoMes != null) 'ANO_MES': anoMes,
//       if (cnpj != null) 'CNPJ': cnpj,
//       if (cpf != null) 'CPF': cpf,
//       if (inscricaoEstadual != null) 'INSCRICAO_ESTADUAL': inscricaoEstadual,
//       if (modelo != null) 'MODELO': modelo,
//       if (serie != null) 'SERIE': serie,
//       if (numeroNf != null) 'NUMERO_NF': numeroNf,
//     });
//   }

//   NfeProdRuralReferenciadasCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idNfeCabecalho,
//       Value<int?>? codigoUf,
//       Value<String?>? anoMes,
//       Value<String?>? cnpj,
//       Value<String?>? cpf,
//       Value<String?>? inscricaoEstadual,
//       Value<String?>? modelo,
//       Value<String?>? serie,
//       Value<int?>? numeroNf}) {
//     return NfeProdRuralReferenciadasCompanion(
//       id: id ?? this.id,
//       idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
//       codigoUf: codigoUf ?? this.codigoUf,
//       anoMes: anoMes ?? this.anoMes,
//       cnpj: cnpj ?? this.cnpj,
//       cpf: cpf ?? this.cpf,
//       inscricaoEstadual: inscricaoEstadual ?? this.inscricaoEstadual,
//       modelo: modelo ?? this.modelo,
//       serie: serie ?? this.serie,
//       numeroNf: numeroNf ?? this.numeroNf,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idNfeCabecalho.present) {
//       map['ID_NFE_CABECALHO'] = Variable<int?>(idNfeCabecalho.value);
//     }
//     if (codigoUf.present) {
//       map['CODIGO_UF'] = Variable<int?>(codigoUf.value);
//     }
//     if (anoMes.present) {
//       map['ANO_MES'] = Variable<String?>(anoMes.value);
//     }
//     if (cnpj.present) {
//       map['CNPJ'] = Variable<String?>(cnpj.value);
//     }
//     if (cpf.present) {
//       map['CPF'] = Variable<String?>(cpf.value);
//     }
//     if (inscricaoEstadual.present) {
//       map['INSCRICAO_ESTADUAL'] = Variable<String?>(inscricaoEstadual.value);
//     }
//     if (modelo.present) {
//       map['MODELO'] = Variable<String?>(modelo.value);
//     }
//     if (serie.present) {
//       map['SERIE'] = Variable<String?>(serie.value);
//     }
//     if (numeroNf.present) {
//       map['NUMERO_NF'] = Variable<int?>(numeroNf.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeProdRuralReferenciadasCompanion(')
//           ..write('id: $id, ')
//           ..write('idNfeCabecalho: $idNfeCabecalho, ')
//           ..write('codigoUf: $codigoUf, ')
//           ..write('anoMes: $anoMes, ')
//           ..write('cnpj: $cnpj, ')
//           ..write('cpf: $cpf, ')
//           ..write('inscricaoEstadual: $inscricaoEstadual, ')
//           ..write('modelo: $modelo, ')
//           ..write('serie: $serie, ')
//           ..write('numeroNf: $numeroNf')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeProdRuralReferenciadasTable extends NfeProdRuralReferenciadas
//     with TableInfo<$NfeProdRuralReferenciadasTable, NfeProdRuralReferenciada> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeProdRuralReferenciadasTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idNfeCabecalhoMeta =
//       const VerificationMeta('idNfeCabecalho');
//   late final GeneratedColumn<int?> idNfeCabecalho = GeneratedColumn<int?>(
//       'ID_NFE_CABECALHO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES NFE_CABECALHO(ID)');
//   final VerificationMeta _codigoUfMeta = const VerificationMeta('codigoUf');
//   late final GeneratedColumn<int?> codigoUf = GeneratedColumn<int?>(
//       'CODIGO_UF', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _anoMesMeta = const VerificationMeta('anoMes');
//   late final GeneratedColumn<String?> anoMes = GeneratedColumn<String?>(
//       'ANO_MES', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 4),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cnpjMeta = const VerificationMeta('cnpj');
//   late final GeneratedColumn<String?> cnpj = GeneratedColumn<String?>(
//       'CNPJ', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cpfMeta = const VerificationMeta('cpf');
//   late final GeneratedColumn<String?> cpf = GeneratedColumn<String?>(
//       'CPF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 11),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _inscricaoEstadualMeta =
//       const VerificationMeta('inscricaoEstadual');
//   late final GeneratedColumn<String?> inscricaoEstadual =
//       GeneratedColumn<String?>('INSCRICAO_ESTADUAL', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 14),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _modeloMeta = const VerificationMeta('modelo');
//   late final GeneratedColumn<String?> modelo = GeneratedColumn<String?>(
//       'MODELO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _serieMeta = const VerificationMeta('serie');
//   late final GeneratedColumn<String?> serie = GeneratedColumn<String?>(
//       'SERIE', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 3),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _numeroNfMeta = const VerificationMeta('numeroNf');
//   late final GeneratedColumn<int?> numeroNf = GeneratedColumn<int?>(
//       'NUMERO_NF', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idNfeCabecalho,
//         codigoUf,
//         anoMes,
//         cnpj,
//         cpf,
//         inscricaoEstadual,
//         modelo,
//         serie,
//         numeroNf
//       ];
//   @override
//   String get aliasedName => _alias ?? 'NFE_PROD_RURAL_REFERENCIADA';
//   @override
//   String get actualTableName => 'NFE_PROD_RURAL_REFERENCIADA';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<NfeProdRuralReferenciada> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_NFE_CABECALHO')) {
//       context.handle(
//           _idNfeCabecalhoMeta,
//           idNfeCabecalho.isAcceptableOrUnknown(
//               data['ID_NFE_CABECALHO']!, _idNfeCabecalhoMeta));
//     }
//     if (data.containsKey('CODIGO_UF')) {
//       context.handle(_codigoUfMeta,
//           codigoUf.isAcceptableOrUnknown(data['CODIGO_UF']!, _codigoUfMeta));
//     }
//     if (data.containsKey('ANO_MES')) {
//       context.handle(_anoMesMeta,
//           anoMes.isAcceptableOrUnknown(data['ANO_MES']!, _anoMesMeta));
//     }
//     if (data.containsKey('CNPJ')) {
//       context.handle(
//           _cnpjMeta, cnpj.isAcceptableOrUnknown(data['CNPJ']!, _cnpjMeta));
//     }
//     if (data.containsKey('CPF')) {
//       context.handle(
//           _cpfMeta, cpf.isAcceptableOrUnknown(data['CPF']!, _cpfMeta));
//     }
//     if (data.containsKey('INSCRICAO_ESTADUAL')) {
//       context.handle(
//           _inscricaoEstadualMeta,
//           inscricaoEstadual.isAcceptableOrUnknown(
//               data['INSCRICAO_ESTADUAL']!, _inscricaoEstadualMeta));
//     }
//     if (data.containsKey('MODELO')) {
//       context.handle(_modeloMeta,
//           modelo.isAcceptableOrUnknown(data['MODELO']!, _modeloMeta));
//     }
//     if (data.containsKey('SERIE')) {
//       context.handle(
//           _serieMeta, serie.isAcceptableOrUnknown(data['SERIE']!, _serieMeta));
//     }
//     if (data.containsKey('NUMERO_NF')) {
//       context.handle(_numeroNfMeta,
//           numeroNf.isAcceptableOrUnknown(data['NUMERO_NF']!, _numeroNfMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeProdRuralReferenciada map(Map<String, dynamic> data,
//       {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeProdRuralReferenciada(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idNfeCabecalho: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_NFE_CABECALHO']),
//       codigoUf: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO_UF']),
//       anoMes: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ANO_MES']),
//       cnpj: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CNPJ']),
//       cpf: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CPF']),
//       inscricaoEstadual: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}INSCRICAO_ESTADUAL']),
//       modelo: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}MODELO']),
//       serie: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}SERIE']),
//       numeroNf: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO_NF']),
//     );
//   }

//   @override
//   $NfeProdRuralReferenciadasTable createAlias(String alias) {
//     return $NfeProdRuralReferenciadasTable(_db, alias);
//   }
// }

// class NfeReferenciadasCompanion extends UpdateCompanion<NfeReferenciada> {
//   final Value<int> id;
//   final Value<int?> idNfeCabecalho;
//   final Value<String?> chaveAcesso;
//   const NfeReferenciadasCompanion({
//     this.id = const Value.absent(),
//     this.idNfeCabecalho = const Value.absent(),
//     this.chaveAcesso = const Value.absent(),
//   });
//   NfeReferenciadasCompanion.insert({
//     this.id = const Value.absent(),
//     this.idNfeCabecalho = const Value.absent(),
//     this.chaveAcesso = const Value.absent(),
//   });
//   static Insertable<NfeReferenciada> custom({
//     Expression<int>? id,
//     Expression<int?>? idNfeCabecalho,
//     Expression<String?>? chaveAcesso,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idNfeCabecalho != null) 'ID_NFE_CABECALHO': idNfeCabecalho,
//       if (chaveAcesso != null) 'CHAVE_ACESSO': chaveAcesso,
//     });
//   }

//   NfeReferenciadasCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idNfeCabecalho,
//       Value<String?>? chaveAcesso}) {
//     return NfeReferenciadasCompanion(
//       id: id ?? this.id,
//       idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
//       chaveAcesso: chaveAcesso ?? this.chaveAcesso,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idNfeCabecalho.present) {
//       map['ID_NFE_CABECALHO'] = Variable<int?>(idNfeCabecalho.value);
//     }
//     if (chaveAcesso.present) {
//       map['CHAVE_ACESSO'] = Variable<String?>(chaveAcesso.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeReferenciadasCompanion(')
//           ..write('id: $id, ')
//           ..write('idNfeCabecalho: $idNfeCabecalho, ')
//           ..write('chaveAcesso: $chaveAcesso')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeReferenciadasTable extends NfeReferenciadas
//     with TableInfo<$NfeReferenciadasTable, NfeReferenciada> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeReferenciadasTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idNfeCabecalhoMeta =
//       const VerificationMeta('idNfeCabecalho');
//   late final GeneratedColumn<int?> idNfeCabecalho = GeneratedColumn<int?>(
//       'ID_NFE_CABECALHO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES NFE_CABECALHO(ID)');
//   final VerificationMeta _chaveAcessoMeta =
//       const VerificationMeta('chaveAcesso');
//   late final GeneratedColumn<String?> chaveAcesso = GeneratedColumn<String?>(
//       'CHAVE_ACESSO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 44),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [id, idNfeCabecalho, chaveAcesso];
//   @override
//   String get aliasedName => _alias ?? 'NFE_REFERENCIADA';
//   @override
//   String get actualTableName => 'NFE_REFERENCIADA';
//   @override
//   VerificationContext validateIntegrity(Insertable<NfeReferenciada> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_NFE_CABECALHO')) {
//       context.handle(
//           _idNfeCabecalhoMeta,
//           idNfeCabecalho.isAcceptableOrUnknown(
//               data['ID_NFE_CABECALHO']!, _idNfeCabecalhoMeta));
//     }
//     if (data.containsKey('CHAVE_ACESSO')) {
//       context.handle(
//           _chaveAcessoMeta,
//           chaveAcesso.isAcceptableOrUnknown(
//               data['CHAVE_ACESSO']!, _chaveAcessoMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeReferenciada map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeReferenciada(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idNfeCabecalho: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_NFE_CABECALHO']),
//       chaveAcesso: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CHAVE_ACESSO']),
//     );
//   }

//   @override
//   $NfeReferenciadasTable createAlias(String alias) {
//     return $NfeReferenciadasTable(_db, alias);
//   }
// }

// class NfeResponsavelTecnicosCompanion
//     extends UpdateCompanion<NfeResponsavelTecnico> {
//   final Value<int> id;
//   final Value<int?> idNfeCabecalho;
//   final Value<String?> cnpj;
//   final Value<String?> contato;
//   final Value<String?> email;
//   final Value<String?> telefone;
//   final Value<String?> identificadorCsrt;
//   final Value<String?> hashCsrt;
//   const NfeResponsavelTecnicosCompanion({
//     this.id = const Value.absent(),
//     this.idNfeCabecalho = const Value.absent(),
//     this.cnpj = const Value.absent(),
//     this.contato = const Value.absent(),
//     this.email = const Value.absent(),
//     this.telefone = const Value.absent(),
//     this.identificadorCsrt = const Value.absent(),
//     this.hashCsrt = const Value.absent(),
//   });
//   NfeResponsavelTecnicosCompanion.insert({
//     this.id = const Value.absent(),
//     this.idNfeCabecalho = const Value.absent(),
//     this.cnpj = const Value.absent(),
//     this.contato = const Value.absent(),
//     this.email = const Value.absent(),
//     this.telefone = const Value.absent(),
//     this.identificadorCsrt = const Value.absent(),
//     this.hashCsrt = const Value.absent(),
//   });
//   static Insertable<NfeResponsavelTecnico> custom({
//     Expression<int>? id,
//     Expression<int?>? idNfeCabecalho,
//     Expression<String?>? cnpj,
//     Expression<String?>? contato,
//     Expression<String?>? email,
//     Expression<String?>? telefone,
//     Expression<String?>? identificadorCsrt,
//     Expression<String?>? hashCsrt,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idNfeCabecalho != null) 'ID_NFE_CABECALHO': idNfeCabecalho,
//       if (cnpj != null) 'CNPJ': cnpj,
//       if (contato != null) 'CONTATO': contato,
//       if (email != null) 'EMAIL': email,
//       if (telefone != null) 'TELEFONE': telefone,
//       if (identificadorCsrt != null) 'IDENTIFICADOR_CSRT': identificadorCsrt,
//       if (hashCsrt != null) 'HASH_CSRT': hashCsrt,
//     });
//   }

//   NfeResponsavelTecnicosCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idNfeCabecalho,
//       Value<String?>? cnpj,
//       Value<String?>? contato,
//       Value<String?>? email,
//       Value<String?>? telefone,
//       Value<String?>? identificadorCsrt,
//       Value<String?>? hashCsrt}) {
//     return NfeResponsavelTecnicosCompanion(
//       id: id ?? this.id,
//       idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
//       cnpj: cnpj ?? this.cnpj,
//       contato: contato ?? this.contato,
//       email: email ?? this.email,
//       telefone: telefone ?? this.telefone,
//       identificadorCsrt: identificadorCsrt ?? this.identificadorCsrt,
//       hashCsrt: hashCsrt ?? this.hashCsrt,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idNfeCabecalho.present) {
//       map['ID_NFE_CABECALHO'] = Variable<int?>(idNfeCabecalho.value);
//     }
//     if (cnpj.present) {
//       map['CNPJ'] = Variable<String?>(cnpj.value);
//     }
//     if (contato.present) {
//       map['CONTATO'] = Variable<String?>(contato.value);
//     }
//     if (email.present) {
//       map['EMAIL'] = Variable<String?>(email.value);
//     }
//     if (telefone.present) {
//       map['TELEFONE'] = Variable<String?>(telefone.value);
//     }
//     if (identificadorCsrt.present) {
//       map['IDENTIFICADOR_CSRT'] = Variable<String?>(identificadorCsrt.value);
//     }
//     if (hashCsrt.present) {
//       map['HASH_CSRT'] = Variable<String?>(hashCsrt.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeResponsavelTecnicosCompanion(')
//           ..write('id: $id, ')
//           ..write('idNfeCabecalho: $idNfeCabecalho, ')
//           ..write('cnpj: $cnpj, ')
//           ..write('contato: $contato, ')
//           ..write('email: $email, ')
//           ..write('telefone: $telefone, ')
//           ..write('identificadorCsrt: $identificadorCsrt, ')
//           ..write('hashCsrt: $hashCsrt')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeResponsavelTecnicosTable extends NfeResponsavelTecnicos
//     with TableInfo<$NfeResponsavelTecnicosTable, NfeResponsavelTecnico> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeResponsavelTecnicosTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idNfeCabecalhoMeta =
//       const VerificationMeta('idNfeCabecalho');
//   late final GeneratedColumn<int?> idNfeCabecalho = GeneratedColumn<int?>(
//       'ID_NFE_CABECALHO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES NFE_CABECALHO(ID)');
//   final VerificationMeta _cnpjMeta = const VerificationMeta('cnpj');
//   late final GeneratedColumn<String?> cnpj = GeneratedColumn<String?>(
//       'CNPJ', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _contatoMeta = const VerificationMeta('contato');
//   late final GeneratedColumn<String?> contato = GeneratedColumn<String?>(
//       'CONTATO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _emailMeta = const VerificationMeta('email');
//   late final GeneratedColumn<String?> email = GeneratedColumn<String?>(
//       'EMAIL', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _telefoneMeta = const VerificationMeta('telefone');
//   late final GeneratedColumn<String?> telefone = GeneratedColumn<String?>(
//       'TELEFONE', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _identificadorCsrtMeta =
//       const VerificationMeta('identificadorCsrt');
//   late final GeneratedColumn<String?> identificadorCsrt =
//       GeneratedColumn<String?>('IDENTIFICADOR_CSRT', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 2),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _hashCsrtMeta = const VerificationMeta('hashCsrt');
//   late final GeneratedColumn<String?> hashCsrt = GeneratedColumn<String?>(
//       'HASH_CSRT', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 28),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idNfeCabecalho,
//         cnpj,
//         contato,
//         email,
//         telefone,
//         identificadorCsrt,
//         hashCsrt
//       ];
//   @override
//   String get aliasedName => _alias ?? 'NFE_RESPONSAVEL_TECNICO';
//   @override
//   String get actualTableName => 'NFE_RESPONSAVEL_TECNICO';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<NfeResponsavelTecnico> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_NFE_CABECALHO')) {
//       context.handle(
//           _idNfeCabecalhoMeta,
//           idNfeCabecalho.isAcceptableOrUnknown(
//               data['ID_NFE_CABECALHO']!, _idNfeCabecalhoMeta));
//     }
//     if (data.containsKey('CNPJ')) {
//       context.handle(
//           _cnpjMeta, cnpj.isAcceptableOrUnknown(data['CNPJ']!, _cnpjMeta));
//     }
//     if (data.containsKey('CONTATO')) {
//       context.handle(_contatoMeta,
//           contato.isAcceptableOrUnknown(data['CONTATO']!, _contatoMeta));
//     }
//     if (data.containsKey('EMAIL')) {
//       context.handle(
//           _emailMeta, email.isAcceptableOrUnknown(data['EMAIL']!, _emailMeta));
//     }
//     if (data.containsKey('TELEFONE')) {
//       context.handle(_telefoneMeta,
//           telefone.isAcceptableOrUnknown(data['TELEFONE']!, _telefoneMeta));
//     }
//     if (data.containsKey('IDENTIFICADOR_CSRT')) {
//       context.handle(
//           _identificadorCsrtMeta,
//           identificadorCsrt.isAcceptableOrUnknown(
//               data['IDENTIFICADOR_CSRT']!, _identificadorCsrtMeta));
//     }
//     if (data.containsKey('HASH_CSRT')) {
//       context.handle(_hashCsrtMeta,
//           hashCsrt.isAcceptableOrUnknown(data['HASH_CSRT']!, _hashCsrtMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeResponsavelTecnico map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeResponsavelTecnico(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idNfeCabecalho: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_NFE_CABECALHO']),
//       cnpj: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CNPJ']),
//       contato: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CONTATO']),
//       email: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}EMAIL']),
//       telefone: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TELEFONE']),
//       identificadorCsrt: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}IDENTIFICADOR_CSRT']),
//       hashCsrt: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}HASH_CSRT']),
//     );
//   }

//   @override
//   $NfeResponsavelTecnicosTable createAlias(String alias) {
//     return $NfeResponsavelTecnicosTable(_db, alias);
//   }
// }

// class NfeTransportesCompanion extends UpdateCompanion<NfeTransporte> {
//   final Value<int> id;
//   final Value<int?> idNfeCabecalho;
//   final Value<String?> modalidadeFrete;
//   final Value<String?> cnpj;
//   final Value<String?> cpf;
//   final Value<String?> nome;
//   final Value<String?> inscricaoEstadual;
//   final Value<String?> endereco;
//   final Value<String?> nomeMunicipio;
//   final Value<String?> uf;
//   final Value<double?> valorServico;
//   final Value<double?> valorBcRetencaoIcms;
//   final Value<double?> aliquotaRetencaoIcms;
//   final Value<double?> valorIcmsRetido;
//   final Value<int?> cfop;
//   final Value<int?> municipio;
//   final Value<String?> placaVeiculo;
//   final Value<String?> ufVeiculo;
//   final Value<String?> rntcVeiculo;
//   const NfeTransportesCompanion({
//     this.id = const Value.absent(),
//     this.idNfeCabecalho = const Value.absent(),
//     this.modalidadeFrete = const Value.absent(),
//     this.cnpj = const Value.absent(),
//     this.cpf = const Value.absent(),
//     this.nome = const Value.absent(),
//     this.inscricaoEstadual = const Value.absent(),
//     this.endereco = const Value.absent(),
//     this.nomeMunicipio = const Value.absent(),
//     this.uf = const Value.absent(),
//     this.valorServico = const Value.absent(),
//     this.valorBcRetencaoIcms = const Value.absent(),
//     this.aliquotaRetencaoIcms = const Value.absent(),
//     this.valorIcmsRetido = const Value.absent(),
//     this.cfop = const Value.absent(),
//     this.municipio = const Value.absent(),
//     this.placaVeiculo = const Value.absent(),
//     this.ufVeiculo = const Value.absent(),
//     this.rntcVeiculo = const Value.absent(),
//   });
//   NfeTransportesCompanion.insert({
//     this.id = const Value.absent(),
//     this.idNfeCabecalho = const Value.absent(),
//     this.modalidadeFrete = const Value.absent(),
//     this.cnpj = const Value.absent(),
//     this.cpf = const Value.absent(),
//     this.nome = const Value.absent(),
//     this.inscricaoEstadual = const Value.absent(),
//     this.endereco = const Value.absent(),
//     this.nomeMunicipio = const Value.absent(),
//     this.uf = const Value.absent(),
//     this.valorServico = const Value.absent(),
//     this.valorBcRetencaoIcms = const Value.absent(),
//     this.aliquotaRetencaoIcms = const Value.absent(),
//     this.valorIcmsRetido = const Value.absent(),
//     this.cfop = const Value.absent(),
//     this.municipio = const Value.absent(),
//     this.placaVeiculo = const Value.absent(),
//     this.ufVeiculo = const Value.absent(),
//     this.rntcVeiculo = const Value.absent(),
//   });
//   static Insertable<NfeTransporte> custom({
//     Expression<int>? id,
//     Expression<int?>? idNfeCabecalho,
//     Expression<String?>? modalidadeFrete,
//     Expression<String?>? cnpj,
//     Expression<String?>? cpf,
//     Expression<String?>? nome,
//     Expression<String?>? inscricaoEstadual,
//     Expression<String?>? endereco,
//     Expression<String?>? nomeMunicipio,
//     Expression<String?>? uf,
//     Expression<double?>? valorServico,
//     Expression<double?>? valorBcRetencaoIcms,
//     Expression<double?>? aliquotaRetencaoIcms,
//     Expression<double?>? valorIcmsRetido,
//     Expression<int?>? cfop,
//     Expression<int?>? municipio,
//     Expression<String?>? placaVeiculo,
//     Expression<String?>? ufVeiculo,
//     Expression<String?>? rntcVeiculo,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idNfeCabecalho != null) 'ID_NFE_CABECALHO': idNfeCabecalho,
//       if (modalidadeFrete != null) 'MODALIDADE_FRETE': modalidadeFrete,
//       if (cnpj != null) 'CNPJ': cnpj,
//       if (cpf != null) 'CPF': cpf,
//       if (nome != null) 'NOME': nome,
//       if (inscricaoEstadual != null) 'INSCRICAO_ESTADUAL': inscricaoEstadual,
//       if (endereco != null) 'ENDERECO': endereco,
//       if (nomeMunicipio != null) 'NOME_MUNICIPIO': nomeMunicipio,
//       if (uf != null) 'UF': uf,
//       if (valorServico != null) 'VALOR_SERVICO': valorServico,
//       if (valorBcRetencaoIcms != null)
//         'VALOR_BC_RETENCAO_ICMS': valorBcRetencaoIcms,
//       if (aliquotaRetencaoIcms != null)
//         'ALIQUOTA_RETENCAO_ICMS': aliquotaRetencaoIcms,
//       if (valorIcmsRetido != null) 'VALOR_ICMS_RETIDO': valorIcmsRetido,
//       if (cfop != null) 'CFOP': cfop,
//       if (municipio != null) 'MUNICIPIO': municipio,
//       if (placaVeiculo != null) 'PLACA_VEICULO': placaVeiculo,
//       if (ufVeiculo != null) 'UF_VEICULO': ufVeiculo,
//       if (rntcVeiculo != null) 'RNTC_VEICULO': rntcVeiculo,
//     });
//   }

//   NfeTransportesCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idNfeCabecalho,
//       Value<String?>? modalidadeFrete,
//       Value<String?>? cnpj,
//       Value<String?>? cpf,
//       Value<String?>? nome,
//       Value<String?>? inscricaoEstadual,
//       Value<String?>? endereco,
//       Value<String?>? nomeMunicipio,
//       Value<String?>? uf,
//       Value<double?>? valorServico,
//       Value<double?>? valorBcRetencaoIcms,
//       Value<double?>? aliquotaRetencaoIcms,
//       Value<double?>? valorIcmsRetido,
//       Value<int?>? cfop,
//       Value<int?>? municipio,
//       Value<String?>? placaVeiculo,
//       Value<String?>? ufVeiculo,
//       Value<String?>? rntcVeiculo}) {
//     return NfeTransportesCompanion(
//       id: id ?? this.id,
//       idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
//       modalidadeFrete: modalidadeFrete ?? this.modalidadeFrete,
//       cnpj: cnpj ?? this.cnpj,
//       cpf: cpf ?? this.cpf,
//       nome: nome ?? this.nome,
//       inscricaoEstadual: inscricaoEstadual ?? this.inscricaoEstadual,
//       endereco: endereco ?? this.endereco,
//       nomeMunicipio: nomeMunicipio ?? this.nomeMunicipio,
//       uf: uf ?? this.uf,
//       valorServico: valorServico ?? this.valorServico,
//       valorBcRetencaoIcms: valorBcRetencaoIcms ?? this.valorBcRetencaoIcms,
//       aliquotaRetencaoIcms: aliquotaRetencaoIcms ?? this.aliquotaRetencaoIcms,
//       valorIcmsRetido: valorIcmsRetido ?? this.valorIcmsRetido,
//       cfop: cfop ?? this.cfop,
//       municipio: municipio ?? this.municipio,
//       placaVeiculo: placaVeiculo ?? this.placaVeiculo,
//       ufVeiculo: ufVeiculo ?? this.ufVeiculo,
//       rntcVeiculo: rntcVeiculo ?? this.rntcVeiculo,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idNfeCabecalho.present) {
//       map['ID_NFE_CABECALHO'] = Variable<int?>(idNfeCabecalho.value);
//     }
//     if (modalidadeFrete.present) {
//       map['MODALIDADE_FRETE'] = Variable<String?>(modalidadeFrete.value);
//     }
//     if (cnpj.present) {
//       map['CNPJ'] = Variable<String?>(cnpj.value);
//     }
//     if (cpf.present) {
//       map['CPF'] = Variable<String?>(cpf.value);
//     }
//     if (nome.present) {
//       map['NOME'] = Variable<String?>(nome.value);
//     }
//     if (inscricaoEstadual.present) {
//       map['INSCRICAO_ESTADUAL'] = Variable<String?>(inscricaoEstadual.value);
//     }
//     if (endereco.present) {
//       map['ENDERECO'] = Variable<String?>(endereco.value);
//     }
//     if (nomeMunicipio.present) {
//       map['NOME_MUNICIPIO'] = Variable<String?>(nomeMunicipio.value);
//     }
//     if (uf.present) {
//       map['UF'] = Variable<String?>(uf.value);
//     }
//     if (valorServico.present) {
//       map['VALOR_SERVICO'] = Variable<double?>(valorServico.value);
//     }
//     if (valorBcRetencaoIcms.present) {
//       map['VALOR_BC_RETENCAO_ICMS'] =
//           Variable<double?>(valorBcRetencaoIcms.value);
//     }
//     if (aliquotaRetencaoIcms.present) {
//       map['ALIQUOTA_RETENCAO_ICMS'] =
//           Variable<double?>(aliquotaRetencaoIcms.value);
//     }
//     if (valorIcmsRetido.present) {
//       map['VALOR_ICMS_RETIDO'] = Variable<double?>(valorIcmsRetido.value);
//     }
//     if (cfop.present) {
//       map['CFOP'] = Variable<int?>(cfop.value);
//     }
//     if (municipio.present) {
//       map['MUNICIPIO'] = Variable<int?>(municipio.value);
//     }
//     if (placaVeiculo.present) {
//       map['PLACA_VEICULO'] = Variable<String?>(placaVeiculo.value);
//     }
//     if (ufVeiculo.present) {
//       map['UF_VEICULO'] = Variable<String?>(ufVeiculo.value);
//     }
//     if (rntcVeiculo.present) {
//       map['RNTC_VEICULO'] = Variable<String?>(rntcVeiculo.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeTransportesCompanion(')
//           ..write('id: $id, ')
//           ..write('idNfeCabecalho: $idNfeCabecalho, ')
//           ..write('modalidadeFrete: $modalidadeFrete, ')
//           ..write('cnpj: $cnpj, ')
//           ..write('cpf: $cpf, ')
//           ..write('nome: $nome, ')
//           ..write('inscricaoEstadual: $inscricaoEstadual, ')
//           ..write('endereco: $endereco, ')
//           ..write('nomeMunicipio: $nomeMunicipio, ')
//           ..write('uf: $uf, ')
//           ..write('valorServico: $valorServico, ')
//           ..write('valorBcRetencaoIcms: $valorBcRetencaoIcms, ')
//           ..write('aliquotaRetencaoIcms: $aliquotaRetencaoIcms, ')
//           ..write('valorIcmsRetido: $valorIcmsRetido, ')
//           ..write('cfop: $cfop, ')
//           ..write('municipio: $municipio, ')
//           ..write('placaVeiculo: $placaVeiculo, ')
//           ..write('ufVeiculo: $ufVeiculo, ')
//           ..write('rntcVeiculo: $rntcVeiculo')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeTransportesTable extends NfeTransportes
//     with TableInfo<$NfeTransportesTable, NfeTransporte> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeTransportesTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idNfeCabecalhoMeta =
//       const VerificationMeta('idNfeCabecalho');
//   late final GeneratedColumn<int?> idNfeCabecalho = GeneratedColumn<int?>(
//       'ID_NFE_CABECALHO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES NFE_CABECALHO(ID)');
//   final VerificationMeta _modalidadeFreteMeta =
//       const VerificationMeta('modalidadeFrete');
//   late final GeneratedColumn<String?> modalidadeFrete =
//       GeneratedColumn<String?>('MODALIDADE_FRETE', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _cnpjMeta = const VerificationMeta('cnpj');
//   late final GeneratedColumn<String?> cnpj = GeneratedColumn<String?>(
//       'CNPJ', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cpfMeta = const VerificationMeta('cpf');
//   late final GeneratedColumn<String?> cpf = GeneratedColumn<String?>(
//       'CPF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 11),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _nomeMeta = const VerificationMeta('nome');
//   late final GeneratedColumn<String?> nome = GeneratedColumn<String?>(
//       'NOME', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _inscricaoEstadualMeta =
//       const VerificationMeta('inscricaoEstadual');
//   late final GeneratedColumn<String?> inscricaoEstadual =
//       GeneratedColumn<String?>('INSCRICAO_ESTADUAL', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 14),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _enderecoMeta = const VerificationMeta('endereco');
//   late final GeneratedColumn<String?> endereco = GeneratedColumn<String?>(
//       'ENDERECO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _nomeMunicipioMeta =
//       const VerificationMeta('nomeMunicipio');
//   late final GeneratedColumn<String?> nomeMunicipio = GeneratedColumn<String?>(
//       'NOME_MUNICIPIO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _ufMeta = const VerificationMeta('uf');
//   late final GeneratedColumn<String?> uf = GeneratedColumn<String?>(
//       'UF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _valorServicoMeta =
//       const VerificationMeta('valorServico');
//   late final GeneratedColumn<double?> valorServico = GeneratedColumn<double?>(
//       'VALOR_SERVICO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorBcRetencaoIcmsMeta =
//       const VerificationMeta('valorBcRetencaoIcms');
//   late final GeneratedColumn<double?> valorBcRetencaoIcms =
//       GeneratedColumn<double?>('VALOR_BC_RETENCAO_ICMS', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _aliquotaRetencaoIcmsMeta =
//       const VerificationMeta('aliquotaRetencaoIcms');
//   late final GeneratedColumn<double?> aliquotaRetencaoIcms =
//       GeneratedColumn<double?>('ALIQUOTA_RETENCAO_ICMS', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorIcmsRetidoMeta =
//       const VerificationMeta('valorIcmsRetido');
//   late final GeneratedColumn<double?> valorIcmsRetido =
//       GeneratedColumn<double?>('VALOR_ICMS_RETIDO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _cfopMeta = const VerificationMeta('cfop');
//   late final GeneratedColumn<int?> cfop = GeneratedColumn<int?>(
//       'CFOP', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _municipioMeta = const VerificationMeta('municipio');
//   late final GeneratedColumn<int?> municipio = GeneratedColumn<int?>(
//       'MUNICIPIO', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _placaVeiculoMeta =
//       const VerificationMeta('placaVeiculo');
//   late final GeneratedColumn<String?> placaVeiculo = GeneratedColumn<String?>(
//       'PLACA_VEICULO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 7),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _ufVeiculoMeta = const VerificationMeta('ufVeiculo');
//   late final GeneratedColumn<String?> ufVeiculo = GeneratedColumn<String?>(
//       'UF_VEICULO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _rntcVeiculoMeta =
//       const VerificationMeta('rntcVeiculo');
//   late final GeneratedColumn<String?> rntcVeiculo = GeneratedColumn<String?>(
//       'RNTC_VEICULO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idNfeCabecalho,
//         modalidadeFrete,
//         cnpj,
//         cpf,
//         nome,
//         inscricaoEstadual,
//         endereco,
//         nomeMunicipio,
//         uf,
//         valorServico,
//         valorBcRetencaoIcms,
//         aliquotaRetencaoIcms,
//         valorIcmsRetido,
//         cfop,
//         municipio,
//         placaVeiculo,
//         ufVeiculo,
//         rntcVeiculo
//       ];
//   @override
//   String get aliasedName => _alias ?? 'NFE_TRANSPORTE';
//   @override
//   String get actualTableName => 'NFE_TRANSPORTE';
//   @override
//   VerificationContext validateIntegrity(Insertable<NfeTransporte> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_NFE_CABECALHO')) {
//       context.handle(
//           _idNfeCabecalhoMeta,
//           idNfeCabecalho.isAcceptableOrUnknown(
//               data['ID_NFE_CABECALHO']!, _idNfeCabecalhoMeta));
//     }
//     if (data.containsKey('MODALIDADE_FRETE')) {
//       context.handle(
//           _modalidadeFreteMeta,
//           modalidadeFrete.isAcceptableOrUnknown(
//               data['MODALIDADE_FRETE']!, _modalidadeFreteMeta));
//     }
//     if (data.containsKey('CNPJ')) {
//       context.handle(
//           _cnpjMeta, cnpj.isAcceptableOrUnknown(data['CNPJ']!, _cnpjMeta));
//     }
//     if (data.containsKey('CPF')) {
//       context.handle(
//           _cpfMeta, cpf.isAcceptableOrUnknown(data['CPF']!, _cpfMeta));
//     }
//     if (data.containsKey('NOME')) {
//       context.handle(
//           _nomeMeta, nome.isAcceptableOrUnknown(data['NOME']!, _nomeMeta));
//     }
//     if (data.containsKey('INSCRICAO_ESTADUAL')) {
//       context.handle(
//           _inscricaoEstadualMeta,
//           inscricaoEstadual.isAcceptableOrUnknown(
//               data['INSCRICAO_ESTADUAL']!, _inscricaoEstadualMeta));
//     }
//     if (data.containsKey('ENDERECO')) {
//       context.handle(_enderecoMeta,
//           endereco.isAcceptableOrUnknown(data['ENDERECO']!, _enderecoMeta));
//     }
//     if (data.containsKey('NOME_MUNICIPIO')) {
//       context.handle(
//           _nomeMunicipioMeta,
//           nomeMunicipio.isAcceptableOrUnknown(
//               data['NOME_MUNICIPIO']!, _nomeMunicipioMeta));
//     }
//     if (data.containsKey('UF')) {
//       context.handle(_ufMeta, uf.isAcceptableOrUnknown(data['UF']!, _ufMeta));
//     }
//     if (data.containsKey('VALOR_SERVICO')) {
//       context.handle(
//           _valorServicoMeta,
//           valorServico.isAcceptableOrUnknown(
//               data['VALOR_SERVICO']!, _valorServicoMeta));
//     }
//     if (data.containsKey('VALOR_BC_RETENCAO_ICMS')) {
//       context.handle(
//           _valorBcRetencaoIcmsMeta,
//           valorBcRetencaoIcms.isAcceptableOrUnknown(
//               data['VALOR_BC_RETENCAO_ICMS']!, _valorBcRetencaoIcmsMeta));
//     }
//     if (data.containsKey('ALIQUOTA_RETENCAO_ICMS')) {
//       context.handle(
//           _aliquotaRetencaoIcmsMeta,
//           aliquotaRetencaoIcms.isAcceptableOrUnknown(
//               data['ALIQUOTA_RETENCAO_ICMS']!, _aliquotaRetencaoIcmsMeta));
//     }
//     if (data.containsKey('VALOR_ICMS_RETIDO')) {
//       context.handle(
//           _valorIcmsRetidoMeta,
//           valorIcmsRetido.isAcceptableOrUnknown(
//               data['VALOR_ICMS_RETIDO']!, _valorIcmsRetidoMeta));
//     }
//     if (data.containsKey('CFOP')) {
//       context.handle(
//           _cfopMeta, cfop.isAcceptableOrUnknown(data['CFOP']!, _cfopMeta));
//     }
//     if (data.containsKey('MUNICIPIO')) {
//       context.handle(_municipioMeta,
//           municipio.isAcceptableOrUnknown(data['MUNICIPIO']!, _municipioMeta));
//     }
//     if (data.containsKey('PLACA_VEICULO')) {
//       context.handle(
//           _placaVeiculoMeta,
//           placaVeiculo.isAcceptableOrUnknown(
//               data['PLACA_VEICULO']!, _placaVeiculoMeta));
//     }
//     if (data.containsKey('UF_VEICULO')) {
//       context.handle(_ufVeiculoMeta,
//           ufVeiculo.isAcceptableOrUnknown(data['UF_VEICULO']!, _ufVeiculoMeta));
//     }
//     if (data.containsKey('RNTC_VEICULO')) {
//       context.handle(
//           _rntcVeiculoMeta,
//           rntcVeiculo.isAcceptableOrUnknown(
//               data['RNTC_VEICULO']!, _rntcVeiculoMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeTransporte map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeTransporte(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idNfeCabecalho: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_NFE_CABECALHO']),
//       modalidadeFrete: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}MODALIDADE_FRETE']),
//       cnpj: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CNPJ']),
//       cpf: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CPF']),
//       nome: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NOME']),
//       inscricaoEstadual: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}INSCRICAO_ESTADUAL']),
//       endereco: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ENDERECO']),
//       nomeMunicipio: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NOME_MUNICIPIO']),
//       uf: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}UF']),
//       valorServico: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_SERVICO']),
//       valorBcRetencaoIcms: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_BC_RETENCAO_ICMS']),
//       aliquotaRetencaoIcms: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ALIQUOTA_RETENCAO_ICMS']),
//       valorIcmsRetido: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_ICMS_RETIDO']),
//       cfop: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CFOP']),
//       municipio: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}MUNICIPIO']),
//       placaVeiculo: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}PLACA_VEICULO']),
//       ufVeiculo: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}UF_VEICULO']),
//       rntcVeiculo: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}RNTC_VEICULO']),
//     );
//   }

//   @override
//   $NfeTransportesTable createAlias(String alias) {
//     return $NfeTransportesTable(_db, alias);
//   }
// }

// class NfeTransporteReboquesCompanion
//     extends UpdateCompanion<NfeTransporteReboque> {
//   final Value<int> id;
//   final Value<int?> idNfeTransporte;
//   final Value<String?> placa;
//   final Value<String?> uf;
//   final Value<String?> rntc;
//   final Value<String?> vagao;
//   final Value<String?> balsa;
//   const NfeTransporteReboquesCompanion({
//     this.id = const Value.absent(),
//     this.idNfeTransporte = const Value.absent(),
//     this.placa = const Value.absent(),
//     this.uf = const Value.absent(),
//     this.rntc = const Value.absent(),
//     this.vagao = const Value.absent(),
//     this.balsa = const Value.absent(),
//   });
//   NfeTransporteReboquesCompanion.insert({
//     this.id = const Value.absent(),
//     this.idNfeTransporte = const Value.absent(),
//     this.placa = const Value.absent(),
//     this.uf = const Value.absent(),
//     this.rntc = const Value.absent(),
//     this.vagao = const Value.absent(),
//     this.balsa = const Value.absent(),
//   });
//   static Insertable<NfeTransporteReboque> custom({
//     Expression<int>? id,
//     Expression<int?>? idNfeTransporte,
//     Expression<String?>? placa,
//     Expression<String?>? uf,
//     Expression<String?>? rntc,
//     Expression<String?>? vagao,
//     Expression<String?>? balsa,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idNfeTransporte != null) 'ID_NFE_TRANSPORTE': idNfeTransporte,
//       if (placa != null) 'PLACA': placa,
//       if (uf != null) 'UF': uf,
//       if (rntc != null) 'RNTC': rntc,
//       if (vagao != null) 'VAGAO': vagao,
//       if (balsa != null) 'BALSA': balsa,
//     });
//   }

//   NfeTransporteReboquesCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idNfeTransporte,
//       Value<String?>? placa,
//       Value<String?>? uf,
//       Value<String?>? rntc,
//       Value<String?>? vagao,
//       Value<String?>? balsa}) {
//     return NfeTransporteReboquesCompanion(
//       id: id ?? this.id,
//       idNfeTransporte: idNfeTransporte ?? this.idNfeTransporte,
//       placa: placa ?? this.placa,
//       uf: uf ?? this.uf,
//       rntc: rntc ?? this.rntc,
//       vagao: vagao ?? this.vagao,
//       balsa: balsa ?? this.balsa,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idNfeTransporte.present) {
//       map['ID_NFE_TRANSPORTE'] = Variable<int?>(idNfeTransporte.value);
//     }
//     if (placa.present) {
//       map['PLACA'] = Variable<String?>(placa.value);
//     }
//     if (uf.present) {
//       map['UF'] = Variable<String?>(uf.value);
//     }
//     if (rntc.present) {
//       map['RNTC'] = Variable<String?>(rntc.value);
//     }
//     if (vagao.present) {
//       map['VAGAO'] = Variable<String?>(vagao.value);
//     }
//     if (balsa.present) {
//       map['BALSA'] = Variable<String?>(balsa.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeTransporteReboquesCompanion(')
//           ..write('id: $id, ')
//           ..write('idNfeTransporte: $idNfeTransporte, ')
//           ..write('placa: $placa, ')
//           ..write('uf: $uf, ')
//           ..write('rntc: $rntc, ')
//           ..write('vagao: $vagao, ')
//           ..write('balsa: $balsa')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeTransporteReboquesTable extends NfeTransporteReboques
//     with TableInfo<$NfeTransporteReboquesTable, NfeTransporteReboque> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeTransporteReboquesTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idNfeTransporteMeta =
//       const VerificationMeta('idNfeTransporte');
//   late final GeneratedColumn<int?> idNfeTransporte = GeneratedColumn<int?>(
//       'ID_NFE_TRANSPORTE', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES NFE_TRANSPORTE(ID)');
//   final VerificationMeta _placaMeta = const VerificationMeta('placa');
//   late final GeneratedColumn<String?> placa = GeneratedColumn<String?>(
//       'PLACA', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _ufMeta = const VerificationMeta('uf');
//   late final GeneratedColumn<String?> uf = GeneratedColumn<String?>(
//       'UF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _rntcMeta = const VerificationMeta('rntc');
//   late final GeneratedColumn<String?> rntc = GeneratedColumn<String?>(
//       'RNTC', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _vagaoMeta = const VerificationMeta('vagao');
//   late final GeneratedColumn<String?> vagao = GeneratedColumn<String?>(
//       'VAGAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _balsaMeta = const VerificationMeta('balsa');
//   late final GeneratedColumn<String?> balsa = GeneratedColumn<String?>(
//       'BALSA', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns =>
//       [id, idNfeTransporte, placa, uf, rntc, vagao, balsa];
//   @override
//   String get aliasedName => _alias ?? 'NFE_TRANSPORTE_REBOQUE';
//   @override
//   String get actualTableName => 'NFE_TRANSPORTE_REBOQUE';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<NfeTransporteReboque> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_NFE_TRANSPORTE')) {
//       context.handle(
//           _idNfeTransporteMeta,
//           idNfeTransporte.isAcceptableOrUnknown(
//               data['ID_NFE_TRANSPORTE']!, _idNfeTransporteMeta));
//     }
//     if (data.containsKey('PLACA')) {
//       context.handle(
//           _placaMeta, placa.isAcceptableOrUnknown(data['PLACA']!, _placaMeta));
//     }
//     if (data.containsKey('UF')) {
//       context.handle(_ufMeta, uf.isAcceptableOrUnknown(data['UF']!, _ufMeta));
//     }
//     if (data.containsKey('RNTC')) {
//       context.handle(
//           _rntcMeta, rntc.isAcceptableOrUnknown(data['RNTC']!, _rntcMeta));
//     }
//     if (data.containsKey('VAGAO')) {
//       context.handle(
//           _vagaoMeta, vagao.isAcceptableOrUnknown(data['VAGAO']!, _vagaoMeta));
//     }
//     if (data.containsKey('BALSA')) {
//       context.handle(
//           _balsaMeta, balsa.isAcceptableOrUnknown(data['BALSA']!, _balsaMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeTransporteReboque map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeTransporteReboque(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idNfeTransporte: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_NFE_TRANSPORTE']),
//       placa: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}PLACA']),
//       uf: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}UF']),
//       rntc: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}RNTC']),
//       vagao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VAGAO']),
//       balsa: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}BALSA']),
//     );
//   }

//   @override
//   $NfeTransporteReboquesTable createAlias(String alias) {
//     return $NfeTransporteReboquesTable(_db, alias);
//   }
// }

// class NfeTransporteVolumesCompanion
//     extends UpdateCompanion<NfeTransporteVolume> {
//   final Value<int> id;
//   final Value<int?> idNfeTransporte;
//   final Value<int?> quantidade;
//   final Value<String?> especie;
//   final Value<String?> marca;
//   final Value<String?> numeracao;
//   final Value<double?> pesoLiquido;
//   final Value<double?> pesoBruto;
//   const NfeTransporteVolumesCompanion({
//     this.id = const Value.absent(),
//     this.idNfeTransporte = const Value.absent(),
//     this.quantidade = const Value.absent(),
//     this.especie = const Value.absent(),
//     this.marca = const Value.absent(),
//     this.numeracao = const Value.absent(),
//     this.pesoLiquido = const Value.absent(),
//     this.pesoBruto = const Value.absent(),
//   });
//   NfeTransporteVolumesCompanion.insert({
//     this.id = const Value.absent(),
//     this.idNfeTransporte = const Value.absent(),
//     this.quantidade = const Value.absent(),
//     this.especie = const Value.absent(),
//     this.marca = const Value.absent(),
//     this.numeracao = const Value.absent(),
//     this.pesoLiquido = const Value.absent(),
//     this.pesoBruto = const Value.absent(),
//   });
//   static Insertable<NfeTransporteVolume> custom({
//     Expression<int>? id,
//     Expression<int?>? idNfeTransporte,
//     Expression<int?>? quantidade,
//     Expression<String?>? especie,
//     Expression<String?>? marca,
//     Expression<String?>? numeracao,
//     Expression<double?>? pesoLiquido,
//     Expression<double?>? pesoBruto,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idNfeTransporte != null) 'ID_NFE_TRANSPORTE': idNfeTransporte,
//       if (quantidade != null) 'QUANTIDADE': quantidade,
//       if (especie != null) 'ESPECIE': especie,
//       if (marca != null) 'MARCA': marca,
//       if (numeracao != null) 'NUMERACAO': numeracao,
//       if (pesoLiquido != null) 'PESO_LIQUIDO': pesoLiquido,
//       if (pesoBruto != null) 'PESO_BRUTO': pesoBruto,
//     });
//   }

//   NfeTransporteVolumesCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idNfeTransporte,
//       Value<int?>? quantidade,
//       Value<String?>? especie,
//       Value<String?>? marca,
//       Value<String?>? numeracao,
//       Value<double?>? pesoLiquido,
//       Value<double?>? pesoBruto}) {
//     return NfeTransporteVolumesCompanion(
//       id: id ?? this.id,
//       idNfeTransporte: idNfeTransporte ?? this.idNfeTransporte,
//       quantidade: quantidade ?? this.quantidade,
//       especie: especie ?? this.especie,
//       marca: marca ?? this.marca,
//       numeracao: numeracao ?? this.numeracao,
//       pesoLiquido: pesoLiquido ?? this.pesoLiquido,
//       pesoBruto: pesoBruto ?? this.pesoBruto,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idNfeTransporte.present) {
//       map['ID_NFE_TRANSPORTE'] = Variable<int?>(idNfeTransporte.value);
//     }
//     if (quantidade.present) {
//       map['QUANTIDADE'] = Variable<int?>(quantidade.value);
//     }
//     if (especie.present) {
//       map['ESPECIE'] = Variable<String?>(especie.value);
//     }
//     if (marca.present) {
//       map['MARCA'] = Variable<String?>(marca.value);
//     }
//     if (numeracao.present) {
//       map['NUMERACAO'] = Variable<String?>(numeracao.value);
//     }
//     if (pesoLiquido.present) {
//       map['PESO_LIQUIDO'] = Variable<double?>(pesoLiquido.value);
//     }
//     if (pesoBruto.present) {
//       map['PESO_BRUTO'] = Variable<double?>(pesoBruto.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeTransporteVolumesCompanion(')
//           ..write('id: $id, ')
//           ..write('idNfeTransporte: $idNfeTransporte, ')
//           ..write('quantidade: $quantidade, ')
//           ..write('especie: $especie, ')
//           ..write('marca: $marca, ')
//           ..write('numeracao: $numeracao, ')
//           ..write('pesoLiquido: $pesoLiquido, ')
//           ..write('pesoBruto: $pesoBruto')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeTransporteVolumesTable extends NfeTransporteVolumes
//     with TableInfo<$NfeTransporteVolumesTable, NfeTransporteVolume> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeTransporteVolumesTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idNfeTransporteMeta =
//       const VerificationMeta('idNfeTransporte');
//   late final GeneratedColumn<int?> idNfeTransporte = GeneratedColumn<int?>(
//       'ID_NFE_TRANSPORTE', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES NFE_TRANSPORTE(ID)');
//   final VerificationMeta _quantidadeMeta = const VerificationMeta('quantidade');
//   late final GeneratedColumn<int?> quantidade = GeneratedColumn<int?>(
//       'QUANTIDADE', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _especieMeta = const VerificationMeta('especie');
//   late final GeneratedColumn<String?> especie = GeneratedColumn<String?>(
//       'ESPECIE', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _marcaMeta = const VerificationMeta('marca');
//   late final GeneratedColumn<String?> marca = GeneratedColumn<String?>(
//       'MARCA', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _numeracaoMeta = const VerificationMeta('numeracao');
//   late final GeneratedColumn<String?> numeracao = GeneratedColumn<String?>(
//       'NUMERACAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _pesoLiquidoMeta =
//       const VerificationMeta('pesoLiquido');
//   late final GeneratedColumn<double?> pesoLiquido = GeneratedColumn<double?>(
//       'PESO_LIQUIDO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _pesoBrutoMeta = const VerificationMeta('pesoBruto');
//   late final GeneratedColumn<double?> pesoBruto = GeneratedColumn<double?>(
//       'PESO_BRUTO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idNfeTransporte,
//         quantidade,
//         especie,
//         marca,
//         numeracao,
//         pesoLiquido,
//         pesoBruto
//       ];
//   @override
//   String get aliasedName => _alias ?? 'NFE_TRANSPORTE_VOLUME';
//   @override
//   String get actualTableName => 'NFE_TRANSPORTE_VOLUME';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<NfeTransporteVolume> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_NFE_TRANSPORTE')) {
//       context.handle(
//           _idNfeTransporteMeta,
//           idNfeTransporte.isAcceptableOrUnknown(
//               data['ID_NFE_TRANSPORTE']!, _idNfeTransporteMeta));
//     }
//     if (data.containsKey('QUANTIDADE')) {
//       context.handle(
//           _quantidadeMeta,
//           quantidade.isAcceptableOrUnknown(
//               data['QUANTIDADE']!, _quantidadeMeta));
//     }
//     if (data.containsKey('ESPECIE')) {
//       context.handle(_especieMeta,
//           especie.isAcceptableOrUnknown(data['ESPECIE']!, _especieMeta));
//     }
//     if (data.containsKey('MARCA')) {
//       context.handle(
//           _marcaMeta, marca.isAcceptableOrUnknown(data['MARCA']!, _marcaMeta));
//     }
//     if (data.containsKey('NUMERACAO')) {
//       context.handle(_numeracaoMeta,
//           numeracao.isAcceptableOrUnknown(data['NUMERACAO']!, _numeracaoMeta));
//     }
//     if (data.containsKey('PESO_LIQUIDO')) {
//       context.handle(
//           _pesoLiquidoMeta,
//           pesoLiquido.isAcceptableOrUnknown(
//               data['PESO_LIQUIDO']!, _pesoLiquidoMeta));
//     }
//     if (data.containsKey('PESO_BRUTO')) {
//       context.handle(_pesoBrutoMeta,
//           pesoBruto.isAcceptableOrUnknown(data['PESO_BRUTO']!, _pesoBrutoMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeTransporteVolume map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeTransporteVolume(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idNfeTransporte: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_NFE_TRANSPORTE']),
//       quantidade: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}QUANTIDADE']),
//       especie: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ESPECIE']),
//       marca: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}MARCA']),
//       numeracao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NUMERACAO']),
//       pesoLiquido: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}PESO_LIQUIDO']),
//       pesoBruto: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}PESO_BRUTO']),
//     );
//   }

//   @override
//   $NfeTransporteVolumesTable createAlias(String alias) {
//     return $NfeTransporteVolumesTable(_db, alias);
//   }
// }

// class NfeTransporteVolumeLacresCompanion
//     extends UpdateCompanion<NfeTransporteVolumeLacre> {
//   final Value<int> id;
//   final Value<int?> idNfeTransporteVolume;
//   final Value<String?> numero;
//   const NfeTransporteVolumeLacresCompanion({
//     this.id = const Value.absent(),
//     this.idNfeTransporteVolume = const Value.absent(),
//     this.numero = const Value.absent(),
//   });
//   NfeTransporteVolumeLacresCompanion.insert({
//     this.id = const Value.absent(),
//     this.idNfeTransporteVolume = const Value.absent(),
//     this.numero = const Value.absent(),
//   });
//   static Insertable<NfeTransporteVolumeLacre> custom({
//     Expression<int>? id,
//     Expression<int?>? idNfeTransporteVolume,
//     Expression<String?>? numero,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idNfeTransporteVolume != null)
//         'ID_NFE_TRANSPORTE_VOLUME': idNfeTransporteVolume,
//       if (numero != null) 'NUMERO': numero,
//     });
//   }

//   NfeTransporteVolumeLacresCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idNfeTransporteVolume,
//       Value<String?>? numero}) {
//     return NfeTransporteVolumeLacresCompanion(
//       id: id ?? this.id,
//       idNfeTransporteVolume:
//           idNfeTransporteVolume ?? this.idNfeTransporteVolume,
//       numero: numero ?? this.numero,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idNfeTransporteVolume.present) {
//       map['ID_NFE_TRANSPORTE_VOLUME'] =
//           Variable<int?>(idNfeTransporteVolume.value);
//     }
//     if (numero.present) {
//       map['NUMERO'] = Variable<String?>(numero.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('NfeTransporteVolumeLacresCompanion(')
//           ..write('id: $id, ')
//           ..write('idNfeTransporteVolume: $idNfeTransporteVolume, ')
//           ..write('numero: $numero')
//           ..write(')'))
//         .toString();
//   }
// }

// class $NfeTransporteVolumeLacresTable extends NfeTransporteVolumeLacres
//     with TableInfo<$NfeTransporteVolumeLacresTable, NfeTransporteVolumeLacre> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $NfeTransporteVolumeLacresTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idNfeTransporteVolumeMeta =
//       const VerificationMeta('idNfeTransporteVolume');
//   late final GeneratedColumn<int?> idNfeTransporteVolume =
//       GeneratedColumn<int?>('ID_NFE_TRANSPORTE_VOLUME', aliasedName, true,
//           typeName: 'INTEGER',
//           requiredDuringInsert: false,
//           $customConstraints: 'NULLABLE REFERENCES NFE_TRANSPORTE_VOLUME(ID)');
//   final VerificationMeta _numeroMeta = const VerificationMeta('numero');
//   late final GeneratedColumn<String?> numero = GeneratedColumn<String?>(
//       'NUMERO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [id, idNfeTransporteVolume, numero];
//   @override
//   String get aliasedName => _alias ?? 'NFE_TRANSPORTE_VOLUME_LACRE';
//   @override
//   String get actualTableName => 'NFE_TRANSPORTE_VOLUME_LACRE';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<NfeTransporteVolumeLacre> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_NFE_TRANSPORTE_VOLUME')) {
//       context.handle(
//           _idNfeTransporteVolumeMeta,
//           idNfeTransporteVolume.isAcceptableOrUnknown(
//               data['ID_NFE_TRANSPORTE_VOLUME']!, _idNfeTransporteVolumeMeta));
//     }
//     if (data.containsKey('NUMERO')) {
//       context.handle(_numeroMeta,
//           numero.isAcceptableOrUnknown(data['NUMERO']!, _numeroMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   NfeTransporteVolumeLacre map(Map<String, dynamic> data,
//       {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return NfeTransporteVolumeLacre(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idNfeTransporteVolume: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ID_NFE_TRANSPORTE_VOLUME']),
//       numero: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO']),
//     );
//   }

//   @override
//   $NfeTransporteVolumeLacresTable createAlias(String alias) {
//     return $NfeTransporteVolumeLacresTable(_db, alias);
//   }
// }

// class PdvCaixasCompanion extends UpdateCompanion<PdvCaixa> {
//   final Value<int> id;
//   final Value<String?> nome;
//   final Value<DateTime?> dataCadastro;
//   const PdvCaixasCompanion({
//     this.id = const Value.absent(),
//     this.nome = const Value.absent(),
//     this.dataCadastro = const Value.absent(),
//   });
//   PdvCaixasCompanion.insert({
//     this.id = const Value.absent(),
//     this.nome = const Value.absent(),
//     this.dataCadastro = const Value.absent(),
//   });
//   static Insertable<PdvCaixa> custom({
//     Expression<int>? id,
//     Expression<String?>? nome,
//     Expression<DateTime?>? dataCadastro,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (nome != null) 'NOME': nome,
//       if (dataCadastro != null) 'DATA_CADASTRO': dataCadastro,
//     });
//   }

//   PdvCaixasCompanion copyWith(
//       {Value<int>? id, Value<String?>? nome, Value<DateTime?>? dataCadastro}) {
//     return PdvCaixasCompanion(
//       id: id ?? this.id,
//       nome: nome ?? this.nome,
//       dataCadastro: dataCadastro ?? this.dataCadastro,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (nome.present) {
//       map['NOME'] = Variable<String?>(nome.value);
//     }
//     if (dataCadastro.present) {
//       map['DATA_CADASTRO'] = Variable<DateTime?>(dataCadastro.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('PdvCaixasCompanion(')
//           ..write('id: $id, ')
//           ..write('nome: $nome, ')
//           ..write('dataCadastro: $dataCadastro')
//           ..write(')'))
//         .toString();
//   }
// }

// class $PdvCaixasTable extends PdvCaixas
//     with TableInfo<$PdvCaixasTable, PdvCaixa> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $PdvCaixasTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _nomeMeta = const VerificationMeta('nome');
//   late final GeneratedColumn<String?> nome = GeneratedColumn<String?>(
//       'NOME', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 30),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _dataCadastroMeta =
//       const VerificationMeta('dataCadastro');
//   late final GeneratedColumn<DateTime?> dataCadastro =
//       GeneratedColumn<DateTime?>('DATA_CADASTRO', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [id, nome, dataCadastro];
//   @override
//   String get aliasedName => _alias ?? 'PDV_CAIXA';
//   @override
//   String get actualTableName => 'PDV_CAIXA';
//   @override
//   VerificationContext validateIntegrity(Insertable<PdvCaixa> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('NOME')) {
//       context.handle(
//           _nomeMeta, nome.isAcceptableOrUnknown(data['NOME']!, _nomeMeta));
//     }
//     if (data.containsKey('DATA_CADASTRO')) {
//       context.handle(
//           _dataCadastroMeta,
//           dataCadastro.isAcceptableOrUnknown(
//               data['DATA_CADASTRO']!, _dataCadastroMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   PdvCaixa map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return PdvCaixa(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       nome: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NOME']),
//       dataCadastro: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_CADASTRO']),
//     );
//   }

//   @override
//   $PdvCaixasTable createAlias(String alias) {
//     return $PdvCaixasTable(_db, alias);
//   }
// }

// class PdvConfiguracaosCompanion extends UpdateCompanion<PdvConfiguracao> {
//   final Value<int> id;
//   final Value<int?> idEcfImpressora;
//   final Value<int?> idPdvCaixa;
//   final Value<int?> idTributOperacaoFiscalPadrao;
//   final Value<String?> mensagemCupom;
//   final Value<String?> portaEcf;
//   final Value<String?> ipServidor;
//   final Value<String?> ipSitef;
//   final Value<String?> tipoTef;
//   final Value<String?> tituloTelaCaixa;
//   final Value<String?> caminhoImagensProdutos;
//   final Value<String?> caminhoImagensMarketing;
//   final Value<String?> corJanelasInternas;
//   final Value<String?> marketingAtivo;
//   final Value<int?> cfopEcf;
//   final Value<int?> timeoutEcf;
//   final Value<int?> intervaloEcf;
//   final Value<String?> descricaoSuprimento;
//   final Value<String?> descricaoSangria;
//   final Value<int?> tefTipoGp;
//   final Value<int?> tefTempoEspera;
//   final Value<int?> tefEsperaSts;
//   final Value<int?> tefNumeroVias;
//   final Value<int?> decimaisQuantidade;
//   final Value<int?> decimaisValor;
//   final Value<int?> bitsPorSegundo;
//   final Value<int?> quantidadeMaximaCartoes;
//   final Value<String?> pesquisaParte;
//   final Value<String?> laudo;
//   final Value<DateTime?> dataAtualizacaoEstoque;
//   final Value<String?> pedeCpfCupom;
//   final Value<int?> tipoIntegracao;
//   final Value<int?> timerIntegracao;
//   final Value<String?> gavetaSinalInvertido;
//   final Value<int?> gavetaUtilizacao;
//   final Value<String?> usaTecladoReduzido;
//   final Value<String?> modulo;
//   final Value<String?> plano;
//   final Value<double?> planoValor;
//   final Value<String?> planoSituacao;
//   final Value<String?> reciboFormatoPagina;
//   final Value<double?> reciboLarguraPagina;
//   final Value<double?> reciboMargemPagina;
//   final Value<String?> encerraMovimentoAuto;
//   final Value<String?> permiteEstoqueNegativo;
//   final Value<String?> moduloFiscalPrincipal;
//   final Value<String?> moduloFiscalContingencia;
//   final Value<String?> acbrMonitorEndereco;
//   final Value<int?> acbrMonitorPorta;
//   const PdvConfiguracaosCompanion({
//     this.id = const Value.absent(),
//     this.idEcfImpressora = const Value.absent(),
//     this.idPdvCaixa = const Value.absent(),
//     this.idTributOperacaoFiscalPadrao = const Value.absent(),
//     this.mensagemCupom = const Value.absent(),
//     this.portaEcf = const Value.absent(),
//     this.ipServidor = const Value.absent(),
//     this.ipSitef = const Value.absent(),
//     this.tipoTef = const Value.absent(),
//     this.tituloTelaCaixa = const Value.absent(),
//     this.caminhoImagensProdutos = const Value.absent(),
//     this.caminhoImagensMarketing = const Value.absent(),
//     this.corJanelasInternas = const Value.absent(),
//     this.marketingAtivo = const Value.absent(),
//     this.cfopEcf = const Value.absent(),
//     this.timeoutEcf = const Value.absent(),
//     this.intervaloEcf = const Value.absent(),
//     this.descricaoSuprimento = const Value.absent(),
//     this.descricaoSangria = const Value.absent(),
//     this.tefTipoGp = const Value.absent(),
//     this.tefTempoEspera = const Value.absent(),
//     this.tefEsperaSts = const Value.absent(),
//     this.tefNumeroVias = const Value.absent(),
//     this.decimaisQuantidade = const Value.absent(),
//     this.decimaisValor = const Value.absent(),
//     this.bitsPorSegundo = const Value.absent(),
//     this.quantidadeMaximaCartoes = const Value.absent(),
//     this.pesquisaParte = const Value.absent(),
//     this.laudo = const Value.absent(),
//     this.dataAtualizacaoEstoque = const Value.absent(),
//     this.pedeCpfCupom = const Value.absent(),
//     this.tipoIntegracao = const Value.absent(),
//     this.timerIntegracao = const Value.absent(),
//     this.gavetaSinalInvertido = const Value.absent(),
//     this.gavetaUtilizacao = const Value.absent(),
//     this.usaTecladoReduzido = const Value.absent(),
//     this.modulo = const Value.absent(),
//     this.plano = const Value.absent(),
//     this.planoValor = const Value.absent(),
//     this.planoSituacao = const Value.absent(),
//     this.reciboFormatoPagina = const Value.absent(),
//     this.reciboLarguraPagina = const Value.absent(),
//     this.reciboMargemPagina = const Value.absent(),
//     this.encerraMovimentoAuto = const Value.absent(),
//     this.permiteEstoqueNegativo = const Value.absent(),
//     this.moduloFiscalPrincipal = const Value.absent(),
//     this.moduloFiscalContingencia = const Value.absent(),
//     this.acbrMonitorEndereco = const Value.absent(),
//     this.acbrMonitorPorta = const Value.absent(),
//   });
//   PdvConfiguracaosCompanion.insert({
//     this.id = const Value.absent(),
//     this.idEcfImpressora = const Value.absent(),
//     this.idPdvCaixa = const Value.absent(),
//     this.idTributOperacaoFiscalPadrao = const Value.absent(),
//     this.mensagemCupom = const Value.absent(),
//     this.portaEcf = const Value.absent(),
//     this.ipServidor = const Value.absent(),
//     this.ipSitef = const Value.absent(),
//     this.tipoTef = const Value.absent(),
//     this.tituloTelaCaixa = const Value.absent(),
//     this.caminhoImagensProdutos = const Value.absent(),
//     this.caminhoImagensMarketing = const Value.absent(),
//     this.corJanelasInternas = const Value.absent(),
//     this.marketingAtivo = const Value.absent(),
//     this.cfopEcf = const Value.absent(),
//     this.timeoutEcf = const Value.absent(),
//     this.intervaloEcf = const Value.absent(),
//     this.descricaoSuprimento = const Value.absent(),
//     this.descricaoSangria = const Value.absent(),
//     this.tefTipoGp = const Value.absent(),
//     this.tefTempoEspera = const Value.absent(),
//     this.tefEsperaSts = const Value.absent(),
//     this.tefNumeroVias = const Value.absent(),
//     this.decimaisQuantidade = const Value.absent(),
//     this.decimaisValor = const Value.absent(),
//     this.bitsPorSegundo = const Value.absent(),
//     this.quantidadeMaximaCartoes = const Value.absent(),
//     this.pesquisaParte = const Value.absent(),
//     this.laudo = const Value.absent(),
//     this.dataAtualizacaoEstoque = const Value.absent(),
//     this.pedeCpfCupom = const Value.absent(),
//     this.tipoIntegracao = const Value.absent(),
//     this.timerIntegracao = const Value.absent(),
//     this.gavetaSinalInvertido = const Value.absent(),
//     this.gavetaUtilizacao = const Value.absent(),
//     this.usaTecladoReduzido = const Value.absent(),
//     this.modulo = const Value.absent(),
//     this.plano = const Value.absent(),
//     this.planoValor = const Value.absent(),
//     this.planoSituacao = const Value.absent(),
//     this.reciboFormatoPagina = const Value.absent(),
//     this.reciboLarguraPagina = const Value.absent(),
//     this.reciboMargemPagina = const Value.absent(),
//     this.encerraMovimentoAuto = const Value.absent(),
//     this.permiteEstoqueNegativo = const Value.absent(),
//     this.moduloFiscalPrincipal = const Value.absent(),
//     this.moduloFiscalContingencia = const Value.absent(),
//     this.acbrMonitorEndereco = const Value.absent(),
//     this.acbrMonitorPorta = const Value.absent(),
//   });
//   static Insertable<PdvConfiguracao> custom({
//     Expression<int>? id,
//     Expression<int?>? idEcfImpressora,
//     Expression<int?>? idPdvCaixa,
//     Expression<int?>? idTributOperacaoFiscalPadrao,
//     Expression<String?>? mensagemCupom,
//     Expression<String?>? portaEcf,
//     Expression<String?>? ipServidor,
//     Expression<String?>? ipSitef,
//     Expression<String?>? tipoTef,
//     Expression<String?>? tituloTelaCaixa,
//     Expression<String?>? caminhoImagensProdutos,
//     Expression<String?>? caminhoImagensMarketing,
//     Expression<String?>? corJanelasInternas,
//     Expression<String?>? marketingAtivo,
//     Expression<int?>? cfopEcf,
//     Expression<int?>? timeoutEcf,
//     Expression<int?>? intervaloEcf,
//     Expression<String?>? descricaoSuprimento,
//     Expression<String?>? descricaoSangria,
//     Expression<int?>? tefTipoGp,
//     Expression<int?>? tefTempoEspera,
//     Expression<int?>? tefEsperaSts,
//     Expression<int?>? tefNumeroVias,
//     Expression<int?>? decimaisQuantidade,
//     Expression<int?>? decimaisValor,
//     Expression<int?>? bitsPorSegundo,
//     Expression<int?>? quantidadeMaximaCartoes,
//     Expression<String?>? pesquisaParte,
//     Expression<String?>? laudo,
//     Expression<DateTime?>? dataAtualizacaoEstoque,
//     Expression<String?>? pedeCpfCupom,
//     Expression<int?>? tipoIntegracao,
//     Expression<int?>? timerIntegracao,
//     Expression<String?>? gavetaSinalInvertido,
//     Expression<int?>? gavetaUtilizacao,
//     Expression<String?>? usaTecladoReduzido,
//     Expression<String?>? modulo,
//     Expression<String?>? plano,
//     Expression<double?>? planoValor,
//     Expression<String?>? planoSituacao,
//     Expression<String?>? reciboFormatoPagina,
//     Expression<double?>? reciboLarguraPagina,
//     Expression<double?>? reciboMargemPagina,
//     Expression<String?>? encerraMovimentoAuto,
//     Expression<String?>? permiteEstoqueNegativo,
//     Expression<String?>? moduloFiscalPrincipal,
//     Expression<String?>? moduloFiscalContingencia,
//     Expression<String?>? acbrMonitorEndereco,
//     Expression<int?>? acbrMonitorPorta,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idEcfImpressora != null) 'ID_ECF_IMPRESSORA': idEcfImpressora,
//       if (idPdvCaixa != null) 'ID_PDV_CAIXA': idPdvCaixa,
//       if (idTributOperacaoFiscalPadrao != null)
//         'ID_TRIBUT_OPERACAO_FISCAL_PADRAO': idTributOperacaoFiscalPadrao,
//       if (mensagemCupom != null) 'MENSAGEM_CUPOM': mensagemCupom,
//       if (portaEcf != null) 'PORTA_ECF': portaEcf,
//       if (ipServidor != null) 'IP_SERVIDOR': ipServidor,
//       if (ipSitef != null) 'IP_SITEF': ipSitef,
//       if (tipoTef != null) 'TIPO_TEF': tipoTef,
//       if (tituloTelaCaixa != null) 'TITULO_TELA_CAIXA': tituloTelaCaixa,
//       if (caminhoImagensProdutos != null)
//         'CAMINHO_IMAGENS_PRODUTOS': caminhoImagensProdutos,
//       if (caminhoImagensMarketing != null)
//         'CAMINHO_IMAGENS_MARKETING': caminhoImagensMarketing,
//       if (corJanelasInternas != null)
//         'COR_JANELAS_INTERNAS': corJanelasInternas,
//       if (marketingAtivo != null) 'MARKETING_ATIVO': marketingAtivo,
//       if (cfopEcf != null) 'CFOP_ECF': cfopEcf,
//       if (timeoutEcf != null) 'TIMEOUT_ECF': timeoutEcf,
//       if (intervaloEcf != null) 'INTERVALO_ECF': intervaloEcf,
//       if (descricaoSuprimento != null)
//         'DESCRICAO_SUPRIMENTO': descricaoSuprimento,
//       if (descricaoSangria != null) 'DESCRICAO_SANGRIA': descricaoSangria,
//       if (tefTipoGp != null) 'TEF_TIPO_GP': tefTipoGp,
//       if (tefTempoEspera != null) 'TEF_TEMPO_ESPERA': tefTempoEspera,
//       if (tefEsperaSts != null) 'TEF_ESPERA_STS': tefEsperaSts,
//       if (tefNumeroVias != null) 'TEF_NUMERO_VIAS': tefNumeroVias,
//       if (decimaisQuantidade != null) 'DECIMAIS_QUANTIDADE': decimaisQuantidade,
//       if (decimaisValor != null) 'DECIMAIS_VALOR': decimaisValor,
//       if (bitsPorSegundo != null) 'BITS_POR_SEGUNDO': bitsPorSegundo,
//       if (quantidadeMaximaCartoes != null)
//         'QUANTIDADE_MAXIMA_CARTOES': quantidadeMaximaCartoes,
//       if (pesquisaParte != null) 'PESQUISA_PARTE': pesquisaParte,
//       if (laudo != null) 'LAUDO': laudo,
//       if (dataAtualizacaoEstoque != null)
//         'DATA_ATUALIZACAO_ESTOQUE': dataAtualizacaoEstoque,
//       if (pedeCpfCupom != null) 'PEDE_CPF_CUPOM': pedeCpfCupom,
//       if (tipoIntegracao != null) 'TIPO_INTEGRACAO': tipoIntegracao,
//       if (timerIntegracao != null) 'TIMER_INTEGRACAO': timerIntegracao,
//       if (gavetaSinalInvertido != null)
//         'GAVETA_SINAL_INVERTIDO': gavetaSinalInvertido,
//       if (gavetaUtilizacao != null) 'GAVETA_UTILIZACAO': gavetaUtilizacao,
//       if (usaTecladoReduzido != null)
//         'USA_TECLADO_REDUZIDO': usaTecladoReduzido,
//       if (modulo != null) 'MODULO': modulo,
//       if (plano != null) 'PLANO': plano,
//       if (planoValor != null) 'PLANO_VALOR': planoValor,
//       if (planoSituacao != null) 'PLANO_SITUACAO': planoSituacao,
//       if (reciboFormatoPagina != null)
//         'RECIBO_FORMATO_PAGINA': reciboFormatoPagina,
//       if (reciboLarguraPagina != null)
//         'RECIBO_LARGURA_PAGINA': reciboLarguraPagina,
//       if (reciboMargemPagina != null)
//         'RECIBO_MARGEM_PAGINA': reciboMargemPagina,
//       if (encerraMovimentoAuto != null)
//         'ENCERRA_MOVIMENTO_AUTO': encerraMovimentoAuto,
//       if (permiteEstoqueNegativo != null)
//         'PERMITE_ESTOQUE_NEGATIVO': permiteEstoqueNegativo,
//       if (moduloFiscalPrincipal != null)
//         'MODULO_FISCAL_PRINCIPAL': moduloFiscalPrincipal,
//       if (moduloFiscalContingencia != null)
//         'MODULO_FISCAL_CONTINGENCIA': moduloFiscalContingencia,
//       if (acbrMonitorEndereco != null)
//         'ACBR_MONITOR_ENDERECO': acbrMonitorEndereco,
//       if (acbrMonitorPorta != null) 'ACBR_MONITOR_PORTA': acbrMonitorPorta,
//     });
//   }

//   PdvConfiguracaosCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idEcfImpressora,
//       Value<int?>? idPdvCaixa,
//       Value<int?>? idTributOperacaoFiscalPadrao,
//       Value<String?>? mensagemCupom,
//       Value<String?>? portaEcf,
//       Value<String?>? ipServidor,
//       Value<String?>? ipSitef,
//       Value<String?>? tipoTef,
//       Value<String?>? tituloTelaCaixa,
//       Value<String?>? caminhoImagensProdutos,
//       Value<String?>? caminhoImagensMarketing,
//       Value<String?>? corJanelasInternas,
//       Value<String?>? marketingAtivo,
//       Value<int?>? cfopEcf,
//       Value<int?>? timeoutEcf,
//       Value<int?>? intervaloEcf,
//       Value<String?>? descricaoSuprimento,
//       Value<String?>? descricaoSangria,
//       Value<int?>? tefTipoGp,
//       Value<int?>? tefTempoEspera,
//       Value<int?>? tefEsperaSts,
//       Value<int?>? tefNumeroVias,
//       Value<int?>? decimaisQuantidade,
//       Value<int?>? decimaisValor,
//       Value<int?>? bitsPorSegundo,
//       Value<int?>? quantidadeMaximaCartoes,
//       Value<String?>? pesquisaParte,
//       Value<String?>? laudo,
//       Value<DateTime?>? dataAtualizacaoEstoque,
//       Value<String?>? pedeCpfCupom,
//       Value<int?>? tipoIntegracao,
//       Value<int?>? timerIntegracao,
//       Value<String?>? gavetaSinalInvertido,
//       Value<int?>? gavetaUtilizacao,
//       Value<String?>? usaTecladoReduzido,
//       Value<String?>? modulo,
//       Value<String?>? plano,
//       Value<double?>? planoValor,
//       Value<String?>? planoSituacao,
//       Value<String?>? reciboFormatoPagina,
//       Value<double?>? reciboLarguraPagina,
//       Value<double?>? reciboMargemPagina,
//       Value<String?>? encerraMovimentoAuto,
//       Value<String?>? permiteEstoqueNegativo,
//       Value<String?>? moduloFiscalPrincipal,
//       Value<String?>? moduloFiscalContingencia,
//       Value<String?>? acbrMonitorEndereco,
//       Value<int?>? acbrMonitorPorta}) {
//     return PdvConfiguracaosCompanion(
//       id: id ?? this.id,
//       idEcfImpressora: idEcfImpressora ?? this.idEcfImpressora,
//       idPdvCaixa: idPdvCaixa ?? this.idPdvCaixa,
//       idTributOperacaoFiscalPadrao:
//           idTributOperacaoFiscalPadrao ?? this.idTributOperacaoFiscalPadrao,
//       mensagemCupom: mensagemCupom ?? this.mensagemCupom,
//       portaEcf: portaEcf ?? this.portaEcf,
//       ipServidor: ipServidor ?? this.ipServidor,
//       ipSitef: ipSitef ?? this.ipSitef,
//       tipoTef: tipoTef ?? this.tipoTef,
//       tituloTelaCaixa: tituloTelaCaixa ?? this.tituloTelaCaixa,
//       caminhoImagensProdutos:
//           caminhoImagensProdutos ?? this.caminhoImagensProdutos,
//       caminhoImagensMarketing:
//           caminhoImagensMarketing ?? this.caminhoImagensMarketing,
//       corJanelasInternas: corJanelasInternas ?? this.corJanelasInternas,
//       marketingAtivo: marketingAtivo ?? this.marketingAtivo,
//       cfopEcf: cfopEcf ?? this.cfopEcf,
//       timeoutEcf: timeoutEcf ?? this.timeoutEcf,
//       intervaloEcf: intervaloEcf ?? this.intervaloEcf,
//       descricaoSuprimento: descricaoSuprimento ?? this.descricaoSuprimento,
//       descricaoSangria: descricaoSangria ?? this.descricaoSangria,
//       tefTipoGp: tefTipoGp ?? this.tefTipoGp,
//       tefTempoEspera: tefTempoEspera ?? this.tefTempoEspera,
//       tefEsperaSts: tefEsperaSts ?? this.tefEsperaSts,
//       tefNumeroVias: tefNumeroVias ?? this.tefNumeroVias,
//       decimaisQuantidade: decimaisQuantidade ?? this.decimaisQuantidade,
//       decimaisValor: decimaisValor ?? this.decimaisValor,
//       bitsPorSegundo: bitsPorSegundo ?? this.bitsPorSegundo,
//       quantidadeMaximaCartoes:
//           quantidadeMaximaCartoes ?? this.quantidadeMaximaCartoes,
//       pesquisaParte: pesquisaParte ?? this.pesquisaParte,
//       laudo: laudo ?? this.laudo,
//       dataAtualizacaoEstoque:
//           dataAtualizacaoEstoque ?? this.dataAtualizacaoEstoque,
//       pedeCpfCupom: pedeCpfCupom ?? this.pedeCpfCupom,
//       tipoIntegracao: tipoIntegracao ?? this.tipoIntegracao,
//       timerIntegracao: timerIntegracao ?? this.timerIntegracao,
//       gavetaSinalInvertido: gavetaSinalInvertido ?? this.gavetaSinalInvertido,
//       gavetaUtilizacao: gavetaUtilizacao ?? this.gavetaUtilizacao,
//       usaTecladoReduzido: usaTecladoReduzido ?? this.usaTecladoReduzido,
//       modulo: modulo ?? this.modulo,
//       plano: plano ?? this.plano,
//       planoValor: planoValor ?? this.planoValor,
//       planoSituacao: planoSituacao ?? this.planoSituacao,
//       reciboFormatoPagina: reciboFormatoPagina ?? this.reciboFormatoPagina,
//       reciboLarguraPagina: reciboLarguraPagina ?? this.reciboLarguraPagina,
//       reciboMargemPagina: reciboMargemPagina ?? this.reciboMargemPagina,
//       encerraMovimentoAuto: encerraMovimentoAuto ?? this.encerraMovimentoAuto,
//       permiteEstoqueNegativo:
//           permiteEstoqueNegativo ?? this.permiteEstoqueNegativo,
//       moduloFiscalPrincipal:
//           moduloFiscalPrincipal ?? this.moduloFiscalPrincipal,
//       moduloFiscalContingencia:
//           moduloFiscalContingencia ?? this.moduloFiscalContingencia,
//       acbrMonitorEndereco: acbrMonitorEndereco ?? this.acbrMonitorEndereco,
//       acbrMonitorPorta: acbrMonitorPorta ?? this.acbrMonitorPorta,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idEcfImpressora.present) {
//       map['ID_ECF_IMPRESSORA'] = Variable<int?>(idEcfImpressora.value);
//     }
//     if (idPdvCaixa.present) {
//       map['ID_PDV_CAIXA'] = Variable<int?>(idPdvCaixa.value);
//     }
//     if (idTributOperacaoFiscalPadrao.present) {
//       map['ID_TRIBUT_OPERACAO_FISCAL_PADRAO'] =
//           Variable<int?>(idTributOperacaoFiscalPadrao.value);
//     }
//     if (mensagemCupom.present) {
//       map['MENSAGEM_CUPOM'] = Variable<String?>(mensagemCupom.value);
//     }
//     if (portaEcf.present) {
//       map['PORTA_ECF'] = Variable<String?>(portaEcf.value);
//     }
//     if (ipServidor.present) {
//       map['IP_SERVIDOR'] = Variable<String?>(ipServidor.value);
//     }
//     if (ipSitef.present) {
//       map['IP_SITEF'] = Variable<String?>(ipSitef.value);
//     }
//     if (tipoTef.present) {
//       map['TIPO_TEF'] = Variable<String?>(tipoTef.value);
//     }
//     if (tituloTelaCaixa.present) {
//       map['TITULO_TELA_CAIXA'] = Variable<String?>(tituloTelaCaixa.value);
//     }
//     if (caminhoImagensProdutos.present) {
//       map['CAMINHO_IMAGENS_PRODUTOS'] =
//           Variable<String?>(caminhoImagensProdutos.value);
//     }
//     if (caminhoImagensMarketing.present) {
//       map['CAMINHO_IMAGENS_MARKETING'] =
//           Variable<String?>(caminhoImagensMarketing.value);
//     }
//     if (corJanelasInternas.present) {
//       map['COR_JANELAS_INTERNAS'] = Variable<String?>(corJanelasInternas.value);
//     }
//     if (marketingAtivo.present) {
//       map['MARKETING_ATIVO'] = Variable<String?>(marketingAtivo.value);
//     }
//     if (cfopEcf.present) {
//       map['CFOP_ECF'] = Variable<int?>(cfopEcf.value);
//     }
//     if (timeoutEcf.present) {
//       map['TIMEOUT_ECF'] = Variable<int?>(timeoutEcf.value);
//     }
//     if (intervaloEcf.present) {
//       map['INTERVALO_ECF'] = Variable<int?>(intervaloEcf.value);
//     }
//     if (descricaoSuprimento.present) {
//       map['DESCRICAO_SUPRIMENTO'] =
//           Variable<String?>(descricaoSuprimento.value);
//     }
//     if (descricaoSangria.present) {
//       map['DESCRICAO_SANGRIA'] = Variable<String?>(descricaoSangria.value);
//     }
//     if (tefTipoGp.present) {
//       map['TEF_TIPO_GP'] = Variable<int?>(tefTipoGp.value);
//     }
//     if (tefTempoEspera.present) {
//       map['TEF_TEMPO_ESPERA'] = Variable<int?>(tefTempoEspera.value);
//     }
//     if (tefEsperaSts.present) {
//       map['TEF_ESPERA_STS'] = Variable<int?>(tefEsperaSts.value);
//     }
//     if (tefNumeroVias.present) {
//       map['TEF_NUMERO_VIAS'] = Variable<int?>(tefNumeroVias.value);
//     }
//     if (decimaisQuantidade.present) {
//       map['DECIMAIS_QUANTIDADE'] = Variable<int?>(decimaisQuantidade.value);
//     }
//     if (decimaisValor.present) {
//       map['DECIMAIS_VALOR'] = Variable<int?>(decimaisValor.value);
//     }
//     if (bitsPorSegundo.present) {
//       map['BITS_POR_SEGUNDO'] = Variable<int?>(bitsPorSegundo.value);
//     }
//     if (quantidadeMaximaCartoes.present) {
//       map['QUANTIDADE_MAXIMA_CARTOES'] =
//           Variable<int?>(quantidadeMaximaCartoes.value);
//     }
//     if (pesquisaParte.present) {
//       map['PESQUISA_PARTE'] = Variable<String?>(pesquisaParte.value);
//     }
//     if (laudo.present) {
//       map['LAUDO'] = Variable<String?>(laudo.value);
//     }
//     if (dataAtualizacaoEstoque.present) {
//       map['DATA_ATUALIZACAO_ESTOQUE'] =
//           Variable<DateTime?>(dataAtualizacaoEstoque.value);
//     }
//     if (pedeCpfCupom.present) {
//       map['PEDE_CPF_CUPOM'] = Variable<String?>(pedeCpfCupom.value);
//     }
//     if (tipoIntegracao.present) {
//       map['TIPO_INTEGRACAO'] = Variable<int?>(tipoIntegracao.value);
//     }
//     if (timerIntegracao.present) {
//       map['TIMER_INTEGRACAO'] = Variable<int?>(timerIntegracao.value);
//     }
//     if (gavetaSinalInvertido.present) {
//       map['GAVETA_SINAL_INVERTIDO'] =
//           Variable<String?>(gavetaSinalInvertido.value);
//     }
//     if (gavetaUtilizacao.present) {
//       map['GAVETA_UTILIZACAO'] = Variable<int?>(gavetaUtilizacao.value);
//     }
//     if (usaTecladoReduzido.present) {
//       map['USA_TECLADO_REDUZIDO'] = Variable<String?>(usaTecladoReduzido.value);
//     }
//     if (modulo.present) {
//       map['MODULO'] = Variable<String?>(modulo.value);
//     }
//     if (plano.present) {
//       map['PLANO'] = Variable<String?>(plano.value);
//     }
//     if (planoValor.present) {
//       map['PLANO_VALOR'] = Variable<double?>(planoValor.value);
//     }
//     if (planoSituacao.present) {
//       map['PLANO_SITUACAO'] = Variable<String?>(planoSituacao.value);
//     }
//     if (reciboFormatoPagina.present) {
//       map['RECIBO_FORMATO_PAGINA'] =
//           Variable<String?>(reciboFormatoPagina.value);
//     }
//     if (reciboLarguraPagina.present) {
//       map['RECIBO_LARGURA_PAGINA'] =
//           Variable<double?>(reciboLarguraPagina.value);
//     }
//     if (reciboMargemPagina.present) {
//       map['RECIBO_MARGEM_PAGINA'] = Variable<double?>(reciboMargemPagina.value);
//     }
//     if (encerraMovimentoAuto.present) {
//       map['ENCERRA_MOVIMENTO_AUTO'] =
//           Variable<String?>(encerraMovimentoAuto.value);
//     }
//     if (permiteEstoqueNegativo.present) {
//       map['PERMITE_ESTOQUE_NEGATIVO'] =
//           Variable<String?>(permiteEstoqueNegativo.value);
//     }
//     if (moduloFiscalPrincipal.present) {
//       map['MODULO_FISCAL_PRINCIPAL'] =
//           Variable<String?>(moduloFiscalPrincipal.value);
//     }
//     if (moduloFiscalContingencia.present) {
//       map['MODULO_FISCAL_CONTINGENCIA'] =
//           Variable<String?>(moduloFiscalContingencia.value);
//     }
//     if (acbrMonitorEndereco.present) {
//       map['ACBR_MONITOR_ENDERECO'] =
//           Variable<String?>(acbrMonitorEndereco.value);
//     }
//     if (acbrMonitorPorta.present) {
//       map['ACBR_MONITOR_PORTA'] = Variable<int?>(acbrMonitorPorta.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('PdvConfiguracaosCompanion(')
//           ..write('id: $id, ')
//           ..write('idEcfImpressora: $idEcfImpressora, ')
//           ..write('idPdvCaixa: $idPdvCaixa, ')
//           ..write(
//               'idTributOperacaoFiscalPadrao: $idTributOperacaoFiscalPadrao, ')
//           ..write('mensagemCupom: $mensagemCupom, ')
//           ..write('portaEcf: $portaEcf, ')
//           ..write('ipServidor: $ipServidor, ')
//           ..write('ipSitef: $ipSitef, ')
//           ..write('tipoTef: $tipoTef, ')
//           ..write('tituloTelaCaixa: $tituloTelaCaixa, ')
//           ..write('caminhoImagensProdutos: $caminhoImagensProdutos, ')
//           ..write('caminhoImagensMarketing: $caminhoImagensMarketing, ')
//           ..write('corJanelasInternas: $corJanelasInternas, ')
//           ..write('marketingAtivo: $marketingAtivo, ')
//           ..write('cfopEcf: $cfopEcf, ')
//           ..write('timeoutEcf: $timeoutEcf, ')
//           ..write('intervaloEcf: $intervaloEcf, ')
//           ..write('descricaoSuprimento: $descricaoSuprimento, ')
//           ..write('descricaoSangria: $descricaoSangria, ')
//           ..write('tefTipoGp: $tefTipoGp, ')
//           ..write('tefTempoEspera: $tefTempoEspera, ')
//           ..write('tefEsperaSts: $tefEsperaSts, ')
//           ..write('tefNumeroVias: $tefNumeroVias, ')
//           ..write('decimaisQuantidade: $decimaisQuantidade, ')
//           ..write('decimaisValor: $decimaisValor, ')
//           ..write('bitsPorSegundo: $bitsPorSegundo, ')
//           ..write('quantidadeMaximaCartoes: $quantidadeMaximaCartoes, ')
//           ..write('pesquisaParte: $pesquisaParte, ')
//           ..write('laudo: $laudo, ')
//           ..write('dataAtualizacaoEstoque: $dataAtualizacaoEstoque, ')
//           ..write('pedeCpfCupom: $pedeCpfCupom, ')
//           ..write('tipoIntegracao: $tipoIntegracao, ')
//           ..write('timerIntegracao: $timerIntegracao, ')
//           ..write('gavetaSinalInvertido: $gavetaSinalInvertido, ')
//           ..write('gavetaUtilizacao: $gavetaUtilizacao, ')
//           ..write('usaTecladoReduzido: $usaTecladoReduzido, ')
//           ..write('modulo: $modulo, ')
//           ..write('plano: $plano, ')
//           ..write('planoValor: $planoValor, ')
//           ..write('planoSituacao: $planoSituacao, ')
//           ..write('reciboFormatoPagina: $reciboFormatoPagina, ')
//           ..write('reciboLarguraPagina: $reciboLarguraPagina, ')
//           ..write('reciboMargemPagina: $reciboMargemPagina, ')
//           ..write('encerraMovimentoAuto: $encerraMovimentoAuto, ')
//           ..write('permiteEstoqueNegativo: $permiteEstoqueNegativo, ')
//           ..write('moduloFiscalPrincipal: $moduloFiscalPrincipal, ')
//           ..write('moduloFiscalContingencia: $moduloFiscalContingencia, ')
//           ..write('acbrMonitorEndereco: $acbrMonitorEndereco, ')
//           ..write('acbrMonitorPorta: $acbrMonitorPorta')
//           ..write(')'))
//         .toString();
//   }
// }

// class $PdvConfiguracaosTable extends PdvConfiguracaos
//     with TableInfo<$PdvConfiguracaosTable, PdvConfiguracao> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $PdvConfiguracaosTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idEcfImpressoraMeta =
//       const VerificationMeta('idEcfImpressora');
//   late final GeneratedColumn<int?> idEcfImpressora = GeneratedColumn<int?>(
//       'ID_ECF_IMPRESSORA', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES ECF_IMPRESSORA(ID)');
//   final VerificationMeta _idPdvCaixaMeta = const VerificationMeta('idPdvCaixa');
//   late final GeneratedColumn<int?> idPdvCaixa = GeneratedColumn<int?>(
//       'ID_PDV_CAIXA', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES PDV_CAIXA(ID)');
//   final VerificationMeta _idTributOperacaoFiscalPadraoMeta =
//       const VerificationMeta('idTributOperacaoFiscalPadrao');
//   late final GeneratedColumn<int?> idTributOperacaoFiscalPadrao =
//       GeneratedColumn<int?>(
//           'ID_TRIBUT_OPERACAO_FISCAL_PADRAO', aliasedName, true,
//           typeName: 'INTEGER',
//           requiredDuringInsert: false,
//           $customConstraints:
//               'NULLABLE REFERENCES TRIBUT_OPERACAO_FISCAL_PADRAO(ID)');
//   final VerificationMeta _mensagemCupomMeta =
//       const VerificationMeta('mensagemCupom');
//   late final GeneratedColumn<String?> mensagemCupom = GeneratedColumn<String?>(
//       'MENSAGEM_CUPOM', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _portaEcfMeta = const VerificationMeta('portaEcf');
//   late final GeneratedColumn<String?> portaEcf = GeneratedColumn<String?>(
//       'PORTA_ECF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 10),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _ipServidorMeta = const VerificationMeta('ipServidor');
//   late final GeneratedColumn<String?> ipServidor = GeneratedColumn<String?>(
//       'IP_SERVIDOR', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 15),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _ipSitefMeta = const VerificationMeta('ipSitef');
//   late final GeneratedColumn<String?> ipSitef = GeneratedColumn<String?>(
//       'IP_SITEF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 15),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _tipoTefMeta = const VerificationMeta('tipoTef');
//   late final GeneratedColumn<String?> tipoTef = GeneratedColumn<String?>(
//       'TIPO_TEF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _tituloTelaCaixaMeta =
//       const VerificationMeta('tituloTelaCaixa');
//   late final GeneratedColumn<String?> tituloTelaCaixa =
//       GeneratedColumn<String?>('TITULO_TELA_CAIXA', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 100),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _caminhoImagensProdutosMeta =
//       const VerificationMeta('caminhoImagensProdutos');
//   late final GeneratedColumn<String?> caminhoImagensProdutos =
//       GeneratedColumn<String?>('CAMINHO_IMAGENS_PRODUTOS', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 250),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _caminhoImagensMarketingMeta =
//       const VerificationMeta('caminhoImagensMarketing');
//   late final GeneratedColumn<String?> caminhoImagensMarketing =
//       GeneratedColumn<String?>('CAMINHO_IMAGENS_MARKETING', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 250),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _corJanelasInternasMeta =
//       const VerificationMeta('corJanelasInternas');
//   late final GeneratedColumn<String?> corJanelasInternas =
//       GeneratedColumn<String?>(
//           'COR_JANELAS_INTERNAS', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 20),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _marketingAtivoMeta =
//       const VerificationMeta('marketingAtivo');
//   late final GeneratedColumn<String?> marketingAtivo = GeneratedColumn<String?>(
//       'MARKETING_ATIVO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cfopEcfMeta = const VerificationMeta('cfopEcf');
//   late final GeneratedColumn<int?> cfopEcf = GeneratedColumn<int?>(
//       'CFOP_ECF', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _timeoutEcfMeta = const VerificationMeta('timeoutEcf');
//   late final GeneratedColumn<int?> timeoutEcf = GeneratedColumn<int?>(
//       'TIMEOUT_ECF', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _intervaloEcfMeta =
//       const VerificationMeta('intervaloEcf');
//   late final GeneratedColumn<int?> intervaloEcf = GeneratedColumn<int?>(
//       'INTERVALO_ECF', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _descricaoSuprimentoMeta =
//       const VerificationMeta('descricaoSuprimento');
//   late final GeneratedColumn<String?> descricaoSuprimento =
//       GeneratedColumn<String?>('DESCRICAO_SUPRIMENTO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 20),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _descricaoSangriaMeta =
//       const VerificationMeta('descricaoSangria');
//   late final GeneratedColumn<String?> descricaoSangria =
//       GeneratedColumn<String?>('DESCRICAO_SANGRIA', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 20),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _tefTipoGpMeta = const VerificationMeta('tefTipoGp');
//   late final GeneratedColumn<int?> tefTipoGp = GeneratedColumn<int?>(
//       'TEF_TIPO_GP', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _tefTempoEsperaMeta =
//       const VerificationMeta('tefTempoEspera');
//   late final GeneratedColumn<int?> tefTempoEspera = GeneratedColumn<int?>(
//       'TEF_TEMPO_ESPERA', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _tefEsperaStsMeta =
//       const VerificationMeta('tefEsperaSts');
//   late final GeneratedColumn<int?> tefEsperaSts = GeneratedColumn<int?>(
//       'TEF_ESPERA_STS', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _tefNumeroViasMeta =
//       const VerificationMeta('tefNumeroVias');
//   late final GeneratedColumn<int?> tefNumeroVias = GeneratedColumn<int?>(
//       'TEF_NUMERO_VIAS', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _decimaisQuantidadeMeta =
//       const VerificationMeta('decimaisQuantidade');
//   late final GeneratedColumn<int?> decimaisQuantidade = GeneratedColumn<int?>(
//       'DECIMAIS_QUANTIDADE', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _decimaisValorMeta =
//       const VerificationMeta('decimaisValor');
//   late final GeneratedColumn<int?> decimaisValor = GeneratedColumn<int?>(
//       'DECIMAIS_VALOR', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _bitsPorSegundoMeta =
//       const VerificationMeta('bitsPorSegundo');
//   late final GeneratedColumn<int?> bitsPorSegundo = GeneratedColumn<int?>(
//       'BITS_POR_SEGUNDO', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _quantidadeMaximaCartoesMeta =
//       const VerificationMeta('quantidadeMaximaCartoes');
//   late final GeneratedColumn<int?> quantidadeMaximaCartoes =
//       GeneratedColumn<int?>('QUANTIDADE_MAXIMA_CARTOES', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _pesquisaParteMeta =
//       const VerificationMeta('pesquisaParte');
//   late final GeneratedColumn<String?> pesquisaParte = GeneratedColumn<String?>(
//       'PESQUISA_PARTE', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _laudoMeta = const VerificationMeta('laudo');
//   late final GeneratedColumn<String?> laudo = GeneratedColumn<String?>(
//       'LAUDO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 10),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _dataAtualizacaoEstoqueMeta =
//       const VerificationMeta('dataAtualizacaoEstoque');
//   late final GeneratedColumn<DateTime?> dataAtualizacaoEstoque =
//       GeneratedColumn<DateTime?>('DATA_ATUALIZACAO_ESTOQUE', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _pedeCpfCupomMeta =
//       const VerificationMeta('pedeCpfCupom');
//   late final GeneratedColumn<String?> pedeCpfCupom = GeneratedColumn<String?>(
//       'PEDE_CPF_CUPOM', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _tipoIntegracaoMeta =
//       const VerificationMeta('tipoIntegracao');
//   late final GeneratedColumn<int?> tipoIntegracao = GeneratedColumn<int?>(
//       'TIPO_INTEGRACAO', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _timerIntegracaoMeta =
//       const VerificationMeta('timerIntegracao');
//   late final GeneratedColumn<int?> timerIntegracao = GeneratedColumn<int?>(
//       'TIMER_INTEGRACAO', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _gavetaSinalInvertidoMeta =
//       const VerificationMeta('gavetaSinalInvertido');
//   late final GeneratedColumn<String?> gavetaSinalInvertido =
//       GeneratedColumn<String?>('GAVETA_SINAL_INVERTIDO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _gavetaUtilizacaoMeta =
//       const VerificationMeta('gavetaUtilizacao');
//   late final GeneratedColumn<int?> gavetaUtilizacao = GeneratedColumn<int?>(
//       'GAVETA_UTILIZACAO', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _usaTecladoReduzidoMeta =
//       const VerificationMeta('usaTecladoReduzido');
//   late final GeneratedColumn<String?> usaTecladoReduzido =
//       GeneratedColumn<String?>(
//           'USA_TECLADO_REDUZIDO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _moduloMeta = const VerificationMeta('modulo');
//   late final GeneratedColumn<String?> modulo = GeneratedColumn<String?>(
//       'MODULO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _planoMeta = const VerificationMeta('plano');
//   late final GeneratedColumn<String?> plano = GeneratedColumn<String?>(
//       'PLANO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _planoValorMeta = const VerificationMeta('planoValor');
//   late final GeneratedColumn<double?> planoValor = GeneratedColumn<double?>(
//       'PLANO_VALOR', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _planoSituacaoMeta =
//       const VerificationMeta('planoSituacao');
//   late final GeneratedColumn<String?> planoSituacao = GeneratedColumn<String?>(
//       'PLANO_SITUACAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _reciboFormatoPaginaMeta =
//       const VerificationMeta('reciboFormatoPagina');
//   late final GeneratedColumn<String?> reciboFormatoPagina =
//       GeneratedColumn<String?>('RECIBO_FORMATO_PAGINA', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 2),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _reciboLarguraPaginaMeta =
//       const VerificationMeta('reciboLarguraPagina');
//   late final GeneratedColumn<double?> reciboLarguraPagina =
//       GeneratedColumn<double?>('RECIBO_LARGURA_PAGINA', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _reciboMargemPaginaMeta =
//       const VerificationMeta('reciboMargemPagina');
//   late final GeneratedColumn<double?> reciboMargemPagina =
//       GeneratedColumn<double?>('RECIBO_MARGEM_PAGINA', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _encerraMovimentoAutoMeta =
//       const VerificationMeta('encerraMovimentoAuto');
//   late final GeneratedColumn<String?> encerraMovimentoAuto =
//       GeneratedColumn<String?>('ENCERRA_MOVIMENTO_AUTO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _permiteEstoqueNegativoMeta =
//       const VerificationMeta('permiteEstoqueNegativo');
//   late final GeneratedColumn<String?> permiteEstoqueNegativo =
//       GeneratedColumn<String?>('PERMITE_ESTOQUE_NEGATIVO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _moduloFiscalPrincipalMeta =
//       const VerificationMeta('moduloFiscalPrincipal');
//   late final GeneratedColumn<String?> moduloFiscalPrincipal =
//       GeneratedColumn<String?>('MODULO_FISCAL_PRINCIPAL', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 5),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _moduloFiscalContingenciaMeta =
//       const VerificationMeta('moduloFiscalContingencia');
//   late final GeneratedColumn<String?> moduloFiscalContingencia =
//       GeneratedColumn<String?>('MODULO_FISCAL_CONTINGENCIA', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 5),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _acbrMonitorEnderecoMeta =
//       const VerificationMeta('acbrMonitorEndereco');
//   late final GeneratedColumn<String?> acbrMonitorEndereco =
//       GeneratedColumn<String?>('ACBR_MONITOR_ENDERECO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 250),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _acbrMonitorPortaMeta =
//       const VerificationMeta('acbrMonitorPorta');
//   late final GeneratedColumn<int?> acbrMonitorPorta = GeneratedColumn<int?>(
//       'ACBR_MONITOR_PORTA', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idEcfImpressora,
//         idPdvCaixa,
//         idTributOperacaoFiscalPadrao,
//         mensagemCupom,
//         portaEcf,
//         ipServidor,
//         ipSitef,
//         tipoTef,
//         tituloTelaCaixa,
//         caminhoImagensProdutos,
//         caminhoImagensMarketing,
//         corJanelasInternas,
//         marketingAtivo,
//         cfopEcf,
//         timeoutEcf,
//         intervaloEcf,
//         descricaoSuprimento,
//         descricaoSangria,
//         tefTipoGp,
//         tefTempoEspera,
//         tefEsperaSts,
//         tefNumeroVias,
//         decimaisQuantidade,
//         decimaisValor,
//         bitsPorSegundo,
//         quantidadeMaximaCartoes,
//         pesquisaParte,
//         laudo,
//         dataAtualizacaoEstoque,
//         pedeCpfCupom,
//         tipoIntegracao,
//         timerIntegracao,
//         gavetaSinalInvertido,
//         gavetaUtilizacao,
//         usaTecladoReduzido,
//         modulo,
//         plano,
//         planoValor,
//         planoSituacao,
//         reciboFormatoPagina,
//         reciboLarguraPagina,
//         reciboMargemPagina,
//         encerraMovimentoAuto,
//         permiteEstoqueNegativo,
//         moduloFiscalPrincipal,
//         moduloFiscalContingencia,
//         acbrMonitorEndereco,
//         acbrMonitorPorta
//       ];
//   @override
//   String get aliasedName => _alias ?? 'PDV_CONFIGURACAO';
//   @override
//   String get actualTableName => 'PDV_CONFIGURACAO';
//   @override
//   VerificationContext validateIntegrity(Insertable<PdvConfiguracao> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_ECF_IMPRESSORA')) {
//       context.handle(
//           _idEcfImpressoraMeta,
//           idEcfImpressora.isAcceptableOrUnknown(
//               data['ID_ECF_IMPRESSORA']!, _idEcfImpressoraMeta));
//     }
//     if (data.containsKey('ID_PDV_CAIXA')) {
//       context.handle(
//           _idPdvCaixaMeta,
//           idPdvCaixa.isAcceptableOrUnknown(
//               data['ID_PDV_CAIXA']!, _idPdvCaixaMeta));
//     }
//     if (data.containsKey('ID_TRIBUT_OPERACAO_FISCAL_PADRAO')) {
//       context.handle(
//           _idTributOperacaoFiscalPadraoMeta,
//           idTributOperacaoFiscalPadrao.isAcceptableOrUnknown(
//               data['ID_TRIBUT_OPERACAO_FISCAL_PADRAO']!,
//               _idTributOperacaoFiscalPadraoMeta));
//     }
//     if (data.containsKey('MENSAGEM_CUPOM')) {
//       context.handle(
//           _mensagemCupomMeta,
//           mensagemCupom.isAcceptableOrUnknown(
//               data['MENSAGEM_CUPOM']!, _mensagemCupomMeta));
//     }
//     if (data.containsKey('PORTA_ECF')) {
//       context.handle(_portaEcfMeta,
//           portaEcf.isAcceptableOrUnknown(data['PORTA_ECF']!, _portaEcfMeta));
//     }
//     if (data.containsKey('IP_SERVIDOR')) {
//       context.handle(
//           _ipServidorMeta,
//           ipServidor.isAcceptableOrUnknown(
//               data['IP_SERVIDOR']!, _ipServidorMeta));
//     }
//     if (data.containsKey('IP_SITEF')) {
//       context.handle(_ipSitefMeta,
//           ipSitef.isAcceptableOrUnknown(data['IP_SITEF']!, _ipSitefMeta));
//     }
//     if (data.containsKey('TIPO_TEF')) {
//       context.handle(_tipoTefMeta,
//           tipoTef.isAcceptableOrUnknown(data['TIPO_TEF']!, _tipoTefMeta));
//     }
//     if (data.containsKey('TITULO_TELA_CAIXA')) {
//       context.handle(
//           _tituloTelaCaixaMeta,
//           tituloTelaCaixa.isAcceptableOrUnknown(
//               data['TITULO_TELA_CAIXA']!, _tituloTelaCaixaMeta));
//     }
//     if (data.containsKey('CAMINHO_IMAGENS_PRODUTOS')) {
//       context.handle(
//           _caminhoImagensProdutosMeta,
//           caminhoImagensProdutos.isAcceptableOrUnknown(
//               data['CAMINHO_IMAGENS_PRODUTOS']!, _caminhoImagensProdutosMeta));
//     }
//     if (data.containsKey('CAMINHO_IMAGENS_MARKETING')) {
//       context.handle(
//           _caminhoImagensMarketingMeta,
//           caminhoImagensMarketing.isAcceptableOrUnknown(
//               data['CAMINHO_IMAGENS_MARKETING']!,
//               _caminhoImagensMarketingMeta));
//     }
//     if (data.containsKey('COR_JANELAS_INTERNAS')) {
//       context.handle(
//           _corJanelasInternasMeta,
//           corJanelasInternas.isAcceptableOrUnknown(
//               data['COR_JANELAS_INTERNAS']!, _corJanelasInternasMeta));
//     }
//     if (data.containsKey('MARKETING_ATIVO')) {
//       context.handle(
//           _marketingAtivoMeta,
//           marketingAtivo.isAcceptableOrUnknown(
//               data['MARKETING_ATIVO']!, _marketingAtivoMeta));
//     }
//     if (data.containsKey('CFOP_ECF')) {
//       context.handle(_cfopEcfMeta,
//           cfopEcf.isAcceptableOrUnknown(data['CFOP_ECF']!, _cfopEcfMeta));
//     }
//     if (data.containsKey('TIMEOUT_ECF')) {
//       context.handle(
//           _timeoutEcfMeta,
//           timeoutEcf.isAcceptableOrUnknown(
//               data['TIMEOUT_ECF']!, _timeoutEcfMeta));
//     }
//     if (data.containsKey('INTERVALO_ECF')) {
//       context.handle(
//           _intervaloEcfMeta,
//           intervaloEcf.isAcceptableOrUnknown(
//               data['INTERVALO_ECF']!, _intervaloEcfMeta));
//     }
//     if (data.containsKey('DESCRICAO_SUPRIMENTO')) {
//       context.handle(
//           _descricaoSuprimentoMeta,
//           descricaoSuprimento.isAcceptableOrUnknown(
//               data['DESCRICAO_SUPRIMENTO']!, _descricaoSuprimentoMeta));
//     }
//     if (data.containsKey('DESCRICAO_SANGRIA')) {
//       context.handle(
//           _descricaoSangriaMeta,
//           descricaoSangria.isAcceptableOrUnknown(
//               data['DESCRICAO_SANGRIA']!, _descricaoSangriaMeta));
//     }
//     if (data.containsKey('TEF_TIPO_GP')) {
//       context.handle(
//           _tefTipoGpMeta,
//           tefTipoGp.isAcceptableOrUnknown(
//               data['TEF_TIPO_GP']!, _tefTipoGpMeta));
//     }
//     if (data.containsKey('TEF_TEMPO_ESPERA')) {
//       context.handle(
//           _tefTempoEsperaMeta,
//           tefTempoEspera.isAcceptableOrUnknown(
//               data['TEF_TEMPO_ESPERA']!, _tefTempoEsperaMeta));
//     }
//     if (data.containsKey('TEF_ESPERA_STS')) {
//       context.handle(
//           _tefEsperaStsMeta,
//           tefEsperaSts.isAcceptableOrUnknown(
//               data['TEF_ESPERA_STS']!, _tefEsperaStsMeta));
//     }
//     if (data.containsKey('TEF_NUMERO_VIAS')) {
//       context.handle(
//           _tefNumeroViasMeta,
//           tefNumeroVias.isAcceptableOrUnknown(
//               data['TEF_NUMERO_VIAS']!, _tefNumeroViasMeta));
//     }
//     if (data.containsKey('DECIMAIS_QUANTIDADE')) {
//       context.handle(
//           _decimaisQuantidadeMeta,
//           decimaisQuantidade.isAcceptableOrUnknown(
//               data['DECIMAIS_QUANTIDADE']!, _decimaisQuantidadeMeta));
//     }
//     if (data.containsKey('DECIMAIS_VALOR')) {
//       context.handle(
//           _decimaisValorMeta,
//           decimaisValor.isAcceptableOrUnknown(
//               data['DECIMAIS_VALOR']!, _decimaisValorMeta));
//     }
//     if (data.containsKey('BITS_POR_SEGUNDO')) {
//       context.handle(
//           _bitsPorSegundoMeta,
//           bitsPorSegundo.isAcceptableOrUnknown(
//               data['BITS_POR_SEGUNDO']!, _bitsPorSegundoMeta));
//     }
//     if (data.containsKey('QUANTIDADE_MAXIMA_CARTOES')) {
//       context.handle(
//           _quantidadeMaximaCartoesMeta,
//           quantidadeMaximaCartoes.isAcceptableOrUnknown(
//               data['QUANTIDADE_MAXIMA_CARTOES']!,
//               _quantidadeMaximaCartoesMeta));
//     }
//     if (data.containsKey('PESQUISA_PARTE')) {
//       context.handle(
//           _pesquisaParteMeta,
//           pesquisaParte.isAcceptableOrUnknown(
//               data['PESQUISA_PARTE']!, _pesquisaParteMeta));
//     }
//     if (data.containsKey('LAUDO')) {
//       context.handle(
//           _laudoMeta, laudo.isAcceptableOrUnknown(data['LAUDO']!, _laudoMeta));
//     }
//     if (data.containsKey('DATA_ATUALIZACAO_ESTOQUE')) {
//       context.handle(
//           _dataAtualizacaoEstoqueMeta,
//           dataAtualizacaoEstoque.isAcceptableOrUnknown(
//               data['DATA_ATUALIZACAO_ESTOQUE']!, _dataAtualizacaoEstoqueMeta));
//     }
//     if (data.containsKey('PEDE_CPF_CUPOM')) {
//       context.handle(
//           _pedeCpfCupomMeta,
//           pedeCpfCupom.isAcceptableOrUnknown(
//               data['PEDE_CPF_CUPOM']!, _pedeCpfCupomMeta));
//     }
//     if (data.containsKey('TIPO_INTEGRACAO')) {
//       context.handle(
//           _tipoIntegracaoMeta,
//           tipoIntegracao.isAcceptableOrUnknown(
//               data['TIPO_INTEGRACAO']!, _tipoIntegracaoMeta));
//     }
//     if (data.containsKey('TIMER_INTEGRACAO')) {
//       context.handle(
//           _timerIntegracaoMeta,
//           timerIntegracao.isAcceptableOrUnknown(
//               data['TIMER_INTEGRACAO']!, _timerIntegracaoMeta));
//     }
//     if (data.containsKey('GAVETA_SINAL_INVERTIDO')) {
//       context.handle(
//           _gavetaSinalInvertidoMeta,
//           gavetaSinalInvertido.isAcceptableOrUnknown(
//               data['GAVETA_SINAL_INVERTIDO']!, _gavetaSinalInvertidoMeta));
//     }
//     if (data.containsKey('GAVETA_UTILIZACAO')) {
//       context.handle(
//           _gavetaUtilizacaoMeta,
//           gavetaUtilizacao.isAcceptableOrUnknown(
//               data['GAVETA_UTILIZACAO']!, _gavetaUtilizacaoMeta));
//     }
//     if (data.containsKey('USA_TECLADO_REDUZIDO')) {
//       context.handle(
//           _usaTecladoReduzidoMeta,
//           usaTecladoReduzido.isAcceptableOrUnknown(
//               data['USA_TECLADO_REDUZIDO']!, _usaTecladoReduzidoMeta));
//     }
//     if (data.containsKey('MODULO')) {
//       context.handle(_moduloMeta,
//           modulo.isAcceptableOrUnknown(data['MODULO']!, _moduloMeta));
//     }
//     if (data.containsKey('PLANO')) {
//       context.handle(
//           _planoMeta, plano.isAcceptableOrUnknown(data['PLANO']!, _planoMeta));
//     }
//     if (data.containsKey('PLANO_VALOR')) {
//       context.handle(
//           _planoValorMeta,
//           planoValor.isAcceptableOrUnknown(
//               data['PLANO_VALOR']!, _planoValorMeta));
//     }
//     if (data.containsKey('PLANO_SITUACAO')) {
//       context.handle(
//           _planoSituacaoMeta,
//           planoSituacao.isAcceptableOrUnknown(
//               data['PLANO_SITUACAO']!, _planoSituacaoMeta));
//     }
//     if (data.containsKey('RECIBO_FORMATO_PAGINA')) {
//       context.handle(
//           _reciboFormatoPaginaMeta,
//           reciboFormatoPagina.isAcceptableOrUnknown(
//               data['RECIBO_FORMATO_PAGINA']!, _reciboFormatoPaginaMeta));
//     }
//     if (data.containsKey('RECIBO_LARGURA_PAGINA')) {
//       context.handle(
//           _reciboLarguraPaginaMeta,
//           reciboLarguraPagina.isAcceptableOrUnknown(
//               data['RECIBO_LARGURA_PAGINA']!, _reciboLarguraPaginaMeta));
//     }
//     if (data.containsKey('RECIBO_MARGEM_PAGINA')) {
//       context.handle(
//           _reciboMargemPaginaMeta,
//           reciboMargemPagina.isAcceptableOrUnknown(
//               data['RECIBO_MARGEM_PAGINA']!, _reciboMargemPaginaMeta));
//     }
//     if (data.containsKey('ENCERRA_MOVIMENTO_AUTO')) {
//       context.handle(
//           _encerraMovimentoAutoMeta,
//           encerraMovimentoAuto.isAcceptableOrUnknown(
//               data['ENCERRA_MOVIMENTO_AUTO']!, _encerraMovimentoAutoMeta));
//     }
//     if (data.containsKey('PERMITE_ESTOQUE_NEGATIVO')) {
//       context.handle(
//           _permiteEstoqueNegativoMeta,
//           permiteEstoqueNegativo.isAcceptableOrUnknown(
//               data['PERMITE_ESTOQUE_NEGATIVO']!, _permiteEstoqueNegativoMeta));
//     }
//     if (data.containsKey('MODULO_FISCAL_PRINCIPAL')) {
//       context.handle(
//           _moduloFiscalPrincipalMeta,
//           moduloFiscalPrincipal.isAcceptableOrUnknown(
//               data['MODULO_FISCAL_PRINCIPAL']!, _moduloFiscalPrincipalMeta));
//     }
//     if (data.containsKey('MODULO_FISCAL_CONTINGENCIA')) {
//       context.handle(
//           _moduloFiscalContingenciaMeta,
//           moduloFiscalContingencia.isAcceptableOrUnknown(
//               data['MODULO_FISCAL_CONTINGENCIA']!,
//               _moduloFiscalContingenciaMeta));
//     }
//     if (data.containsKey('ACBR_MONITOR_ENDERECO')) {
//       context.handle(
//           _acbrMonitorEnderecoMeta,
//           acbrMonitorEndereco.isAcceptableOrUnknown(
//               data['ACBR_MONITOR_ENDERECO']!, _acbrMonitorEnderecoMeta));
//     }
//     if (data.containsKey('ACBR_MONITOR_PORTA')) {
//       context.handle(
//           _acbrMonitorPortaMeta,
//           acbrMonitorPorta.isAcceptableOrUnknown(
//               data['ACBR_MONITOR_PORTA']!, _acbrMonitorPortaMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   PdvConfiguracao map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return PdvConfiguracao(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idEcfImpressora: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_ECF_IMPRESSORA']),
//       idPdvCaixa: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_PDV_CAIXA']),
//       idTributOperacaoFiscalPadrao: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ID_TRIBUT_OPERACAO_FISCAL_PADRAO']),
//       mensagemCupom: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}MENSAGEM_CUPOM']),
//       portaEcf: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}PORTA_ECF']),
//       ipServidor: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}IP_SERVIDOR']),
//       ipSitef: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}IP_SITEF']),
//       tipoTef: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TIPO_TEF']),
//       tituloTelaCaixa: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TITULO_TELA_CAIXA']),
//       caminhoImagensProdutos: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}CAMINHO_IMAGENS_PRODUTOS']),
//       caminhoImagensMarketing: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}CAMINHO_IMAGENS_MARKETING']),
//       corJanelasInternas: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}COR_JANELAS_INTERNAS']),
//       marketingAtivo: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}MARKETING_ATIVO']),
//       cfopEcf: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CFOP_ECF']),
//       timeoutEcf: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TIMEOUT_ECF']),
//       intervaloEcf: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}INTERVALO_ECF']),
//       descricaoSuprimento: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}DESCRICAO_SUPRIMENTO']),
//       descricaoSangria: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DESCRICAO_SANGRIA']),
//       tefTipoGp: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TEF_TIPO_GP']),
//       tefTempoEspera: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TEF_TEMPO_ESPERA']),
//       tefEsperaSts: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TEF_ESPERA_STS']),
//       tefNumeroVias: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TEF_NUMERO_VIAS']),
//       decimaisQuantidade: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}DECIMAIS_QUANTIDADE']),
//       decimaisValor: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DECIMAIS_VALOR']),
//       bitsPorSegundo: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}BITS_POR_SEGUNDO']),
//       quantidadeMaximaCartoes: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}QUANTIDADE_MAXIMA_CARTOES']),
//       pesquisaParte: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}PESQUISA_PARTE']),
//       laudo: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}LAUDO']),
//       dataAtualizacaoEstoque: const DateTimeType().mapFromDatabaseResponse(
//           data['${effectivePrefix}DATA_ATUALIZACAO_ESTOQUE']),
//       pedeCpfCupom: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}PEDE_CPF_CUPOM']),
//       tipoIntegracao: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TIPO_INTEGRACAO']),
//       timerIntegracao: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TIMER_INTEGRACAO']),
//       gavetaSinalInvertido: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}GAVETA_SINAL_INVERTIDO']),
//       gavetaUtilizacao: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}GAVETA_UTILIZACAO']),
//       usaTecladoReduzido: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}USA_TECLADO_REDUZIDO']),
//       modulo: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}MODULO']),
//       plano: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}PLANO']),
//       planoValor: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}PLANO_VALOR']),
//       planoSituacao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}PLANO_SITUACAO']),
//       reciboFormatoPagina: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}RECIBO_FORMATO_PAGINA']),
//       reciboLarguraPagina: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}RECIBO_LARGURA_PAGINA']),
//       reciboMargemPagina: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}RECIBO_MARGEM_PAGINA']),
//       encerraMovimentoAuto: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ENCERRA_MOVIMENTO_AUTO']),
//       permiteEstoqueNegativo: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}PERMITE_ESTOQUE_NEGATIVO']),
//       moduloFiscalPrincipal: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}MODULO_FISCAL_PRINCIPAL']),
//       moduloFiscalContingencia: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}MODULO_FISCAL_CONTINGENCIA']),
//       acbrMonitorEndereco: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ACBR_MONITOR_ENDERECO']),
//       acbrMonitorPorta: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ACBR_MONITOR_PORTA']),
//     );
//   }

//   @override
//   $PdvConfiguracaosTable createAlias(String alias) {
//     return $PdvConfiguracaosTable(_db, alias);
//   }
// }

// class PdvConfiguracaoBalancasCompanion
//     extends UpdateCompanion<PdvConfiguracaoBalanca> {
//   final Value<int> id;
//   final Value<int?> idPdvConfiguracao;
//   final Value<int?> modelo;
//   final Value<String?> identificador;
//   final Value<int?> handShake;
//   final Value<int?> parity;
//   final Value<int?> stopBits;
//   final Value<int?> dataBits;
//   final Value<int?> baudRate;
//   final Value<String?> porta;
//   final Value<int?> timeout;
//   final Value<String?> tipoConfiguracao;
//   const PdvConfiguracaoBalancasCompanion({
//     this.id = const Value.absent(),
//     this.idPdvConfiguracao = const Value.absent(),
//     this.modelo = const Value.absent(),
//     this.identificador = const Value.absent(),
//     this.handShake = const Value.absent(),
//     this.parity = const Value.absent(),
//     this.stopBits = const Value.absent(),
//     this.dataBits = const Value.absent(),
//     this.baudRate = const Value.absent(),
//     this.porta = const Value.absent(),
//     this.timeout = const Value.absent(),
//     this.tipoConfiguracao = const Value.absent(),
//   });
//   PdvConfiguracaoBalancasCompanion.insert({
//     this.id = const Value.absent(),
//     this.idPdvConfiguracao = const Value.absent(),
//     this.modelo = const Value.absent(),
//     this.identificador = const Value.absent(),
//     this.handShake = const Value.absent(),
//     this.parity = const Value.absent(),
//     this.stopBits = const Value.absent(),
//     this.dataBits = const Value.absent(),
//     this.baudRate = const Value.absent(),
//     this.porta = const Value.absent(),
//     this.timeout = const Value.absent(),
//     this.tipoConfiguracao = const Value.absent(),
//   });
//   static Insertable<PdvConfiguracaoBalanca> custom({
//     Expression<int>? id,
//     Expression<int?>? idPdvConfiguracao,
//     Expression<int?>? modelo,
//     Expression<String?>? identificador,
//     Expression<int?>? handShake,
//     Expression<int?>? parity,
//     Expression<int?>? stopBits,
//     Expression<int?>? dataBits,
//     Expression<int?>? baudRate,
//     Expression<String?>? porta,
//     Expression<int?>? timeout,
//     Expression<String?>? tipoConfiguracao,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idPdvConfiguracao != null) 'ID_PDV_CONFIGURACAO': idPdvConfiguracao,
//       if (modelo != null) 'MODELO': modelo,
//       if (identificador != null) 'IDENTIFICADOR': identificador,
//       if (handShake != null) 'HAND_SHAKE': handShake,
//       if (parity != null) 'PARITY': parity,
//       if (stopBits != null) 'STOP_BITS': stopBits,
//       if (dataBits != null) 'DATA_BITS': dataBits,
//       if (baudRate != null) 'BAUD_RATE': baudRate,
//       if (porta != null) 'PORTA': porta,
//       if (timeout != null) 'TIMEOUT': timeout,
//       if (tipoConfiguracao != null) 'TIPO_CONFIGURACAO': tipoConfiguracao,
//     });
//   }

//   PdvConfiguracaoBalancasCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idPdvConfiguracao,
//       Value<int?>? modelo,
//       Value<String?>? identificador,
//       Value<int?>? handShake,
//       Value<int?>? parity,
//       Value<int?>? stopBits,
//       Value<int?>? dataBits,
//       Value<int?>? baudRate,
//       Value<String?>? porta,
//       Value<int?>? timeout,
//       Value<String?>? tipoConfiguracao}) {
//     return PdvConfiguracaoBalancasCompanion(
//       id: id ?? this.id,
//       idPdvConfiguracao: idPdvConfiguracao ?? this.idPdvConfiguracao,
//       modelo: modelo ?? this.modelo,
//       identificador: identificador ?? this.identificador,
//       handShake: handShake ?? this.handShake,
//       parity: parity ?? this.parity,
//       stopBits: stopBits ?? this.stopBits,
//       dataBits: dataBits ?? this.dataBits,
//       baudRate: baudRate ?? this.baudRate,
//       porta: porta ?? this.porta,
//       timeout: timeout ?? this.timeout,
//       tipoConfiguracao: tipoConfiguracao ?? this.tipoConfiguracao,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idPdvConfiguracao.present) {
//       map['ID_PDV_CONFIGURACAO'] = Variable<int?>(idPdvConfiguracao.value);
//     }
//     if (modelo.present) {
//       map['MODELO'] = Variable<int?>(modelo.value);
//     }
//     if (identificador.present) {
//       map['IDENTIFICADOR'] = Variable<String?>(identificador.value);
//     }
//     if (handShake.present) {
//       map['HAND_SHAKE'] = Variable<int?>(handShake.value);
//     }
//     if (parity.present) {
//       map['PARITY'] = Variable<int?>(parity.value);
//     }
//     if (stopBits.present) {
//       map['STOP_BITS'] = Variable<int?>(stopBits.value);
//     }
//     if (dataBits.present) {
//       map['DATA_BITS'] = Variable<int?>(dataBits.value);
//     }
//     if (baudRate.present) {
//       map['BAUD_RATE'] = Variable<int?>(baudRate.value);
//     }
//     if (porta.present) {
//       map['PORTA'] = Variable<String?>(porta.value);
//     }
//     if (timeout.present) {
//       map['TIMEOUT'] = Variable<int?>(timeout.value);
//     }
//     if (tipoConfiguracao.present) {
//       map['TIPO_CONFIGURACAO'] = Variable<String?>(tipoConfiguracao.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('PdvConfiguracaoBalancasCompanion(')
//           ..write('id: $id, ')
//           ..write('idPdvConfiguracao: $idPdvConfiguracao, ')
//           ..write('modelo: $modelo, ')
//           ..write('identificador: $identificador, ')
//           ..write('handShake: $handShake, ')
//           ..write('parity: $parity, ')
//           ..write('stopBits: $stopBits, ')
//           ..write('dataBits: $dataBits, ')
//           ..write('baudRate: $baudRate, ')
//           ..write('porta: $porta, ')
//           ..write('timeout: $timeout, ')
//           ..write('tipoConfiguracao: $tipoConfiguracao')
//           ..write(')'))
//         .toString();
//   }
// }

// class $PdvConfiguracaoBalancasTable extends PdvConfiguracaoBalancas
//     with TableInfo<$PdvConfiguracaoBalancasTable, PdvConfiguracaoBalanca> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $PdvConfiguracaoBalancasTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idPdvConfiguracaoMeta =
//       const VerificationMeta('idPdvConfiguracao');
//   late final GeneratedColumn<int?> idPdvConfiguracao = GeneratedColumn<int?>(
//       'ID_PDV_CONFIGURACAO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES PDV_CONFIGURACAO(ID)');
//   final VerificationMeta _modeloMeta = const VerificationMeta('modelo');
//   late final GeneratedColumn<int?> modelo = GeneratedColumn<int?>(
//       'MODELO', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _identificadorMeta =
//       const VerificationMeta('identificador');
//   late final GeneratedColumn<String?> identificador = GeneratedColumn<String?>(
//       'IDENTIFICADOR', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _handShakeMeta = const VerificationMeta('handShake');
//   late final GeneratedColumn<int?> handShake = GeneratedColumn<int?>(
//       'HAND_SHAKE', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _parityMeta = const VerificationMeta('parity');
//   late final GeneratedColumn<int?> parity = GeneratedColumn<int?>(
//       'PARITY', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _stopBitsMeta = const VerificationMeta('stopBits');
//   late final GeneratedColumn<int?> stopBits = GeneratedColumn<int?>(
//       'STOP_BITS', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _dataBitsMeta = const VerificationMeta('dataBits');
//   late final GeneratedColumn<int?> dataBits = GeneratedColumn<int?>(
//       'DATA_BITS', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _baudRateMeta = const VerificationMeta('baudRate');
//   late final GeneratedColumn<int?> baudRate = GeneratedColumn<int?>(
//       'BAUD_RATE', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _portaMeta = const VerificationMeta('porta');
//   late final GeneratedColumn<String?> porta = GeneratedColumn<String?>(
//       'PORTA', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 4),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _timeoutMeta = const VerificationMeta('timeout');
//   late final GeneratedColumn<int?> timeout = GeneratedColumn<int?>(
//       'TIMEOUT', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _tipoConfiguracaoMeta =
//       const VerificationMeta('tipoConfiguracao');
//   late final GeneratedColumn<String?> tipoConfiguracao =
//       GeneratedColumn<String?>('TIPO_CONFIGURACAO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 20),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idPdvConfiguracao,
//         modelo,
//         identificador,
//         handShake,
//         parity,
//         stopBits,
//         dataBits,
//         baudRate,
//         porta,
//         timeout,
//         tipoConfiguracao
//       ];
//   @override
//   String get aliasedName => _alias ?? 'PDV_CONFIGURACAO_BALANCA';
//   @override
//   String get actualTableName => 'PDV_CONFIGURACAO_BALANCA';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<PdvConfiguracaoBalanca> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_PDV_CONFIGURACAO')) {
//       context.handle(
//           _idPdvConfiguracaoMeta,
//           idPdvConfiguracao.isAcceptableOrUnknown(
//               data['ID_PDV_CONFIGURACAO']!, _idPdvConfiguracaoMeta));
//     }
//     if (data.containsKey('MODELO')) {
//       context.handle(_modeloMeta,
//           modelo.isAcceptableOrUnknown(data['MODELO']!, _modeloMeta));
//     }
//     if (data.containsKey('IDENTIFICADOR')) {
//       context.handle(
//           _identificadorMeta,
//           identificador.isAcceptableOrUnknown(
//               data['IDENTIFICADOR']!, _identificadorMeta));
//     }
//     if (data.containsKey('HAND_SHAKE')) {
//       context.handle(_handShakeMeta,
//           handShake.isAcceptableOrUnknown(data['HAND_SHAKE']!, _handShakeMeta));
//     }
//     if (data.containsKey('PARITY')) {
//       context.handle(_parityMeta,
//           parity.isAcceptableOrUnknown(data['PARITY']!, _parityMeta));
//     }
//     if (data.containsKey('STOP_BITS')) {
//       context.handle(_stopBitsMeta,
//           stopBits.isAcceptableOrUnknown(data['STOP_BITS']!, _stopBitsMeta));
//     }
//     if (data.containsKey('DATA_BITS')) {
//       context.handle(_dataBitsMeta,
//           dataBits.isAcceptableOrUnknown(data['DATA_BITS']!, _dataBitsMeta));
//     }
//     if (data.containsKey('BAUD_RATE')) {
//       context.handle(_baudRateMeta,
//           baudRate.isAcceptableOrUnknown(data['BAUD_RATE']!, _baudRateMeta));
//     }
//     if (data.containsKey('PORTA')) {
//       context.handle(
//           _portaMeta, porta.isAcceptableOrUnknown(data['PORTA']!, _portaMeta));
//     }
//     if (data.containsKey('TIMEOUT')) {
//       context.handle(_timeoutMeta,
//           timeout.isAcceptableOrUnknown(data['TIMEOUT']!, _timeoutMeta));
//     }
//     if (data.containsKey('TIPO_CONFIGURACAO')) {
//       context.handle(
//           _tipoConfiguracaoMeta,
//           tipoConfiguracao.isAcceptableOrUnknown(
//               data['TIPO_CONFIGURACAO']!, _tipoConfiguracaoMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   PdvConfiguracaoBalanca map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return PdvConfiguracaoBalanca(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idPdvConfiguracao: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ID_PDV_CONFIGURACAO']),
//       modelo: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}MODELO']),
//       identificador: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}IDENTIFICADOR']),
//       handShake: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}HAND_SHAKE']),
//       parity: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}PARITY']),
//       stopBits: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}STOP_BITS']),
//       dataBits: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_BITS']),
//       baudRate: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}BAUD_RATE']),
//       porta: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}PORTA']),
//       timeout: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TIMEOUT']),
//       tipoConfiguracao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TIPO_CONFIGURACAO']),
//     );
//   }

//   @override
//   $PdvConfiguracaoBalancasTable createAlias(String alias) {
//     return $PdvConfiguracaoBalancasTable(_db, alias);
//   }
// }

// class PdvConfiguracaoLeitorSerialsCompanion
//     extends UpdateCompanion<PdvConfiguracaoLeitorSerial> {
//   final Value<int> id;
//   final Value<int?> idPdvConfiguracao;
//   final Value<String?> usa;
//   final Value<String?> porta;
//   final Value<int?> baud;
//   final Value<int?> handShake;
//   final Value<int?> parity;
//   final Value<int?> stopBits;
//   final Value<int?> dataBits;
//   final Value<int?> intervalo;
//   final Value<String?> usarFila;
//   final Value<String?> hardFlow;
//   final Value<String?> softFlow;
//   final Value<String?> sufixo;
//   final Value<String?> excluirSufixo;
//   const PdvConfiguracaoLeitorSerialsCompanion({
//     this.id = const Value.absent(),
//     this.idPdvConfiguracao = const Value.absent(),
//     this.usa = const Value.absent(),
//     this.porta = const Value.absent(),
//     this.baud = const Value.absent(),
//     this.handShake = const Value.absent(),
//     this.parity = const Value.absent(),
//     this.stopBits = const Value.absent(),
//     this.dataBits = const Value.absent(),
//     this.intervalo = const Value.absent(),
//     this.usarFila = const Value.absent(),
//     this.hardFlow = const Value.absent(),
//     this.softFlow = const Value.absent(),
//     this.sufixo = const Value.absent(),
//     this.excluirSufixo = const Value.absent(),
//   });
//   PdvConfiguracaoLeitorSerialsCompanion.insert({
//     this.id = const Value.absent(),
//     this.idPdvConfiguracao = const Value.absent(),
//     this.usa = const Value.absent(),
//     this.porta = const Value.absent(),
//     this.baud = const Value.absent(),
//     this.handShake = const Value.absent(),
//     this.parity = const Value.absent(),
//     this.stopBits = const Value.absent(),
//     this.dataBits = const Value.absent(),
//     this.intervalo = const Value.absent(),
//     this.usarFila = const Value.absent(),
//     this.hardFlow = const Value.absent(),
//     this.softFlow = const Value.absent(),
//     this.sufixo = const Value.absent(),
//     this.excluirSufixo = const Value.absent(),
//   });
//   static Insertable<PdvConfiguracaoLeitorSerial> custom({
//     Expression<int>? id,
//     Expression<int?>? idPdvConfiguracao,
//     Expression<String?>? usa,
//     Expression<String?>? porta,
//     Expression<int?>? baud,
//     Expression<int?>? handShake,
//     Expression<int?>? parity,
//     Expression<int?>? stopBits,
//     Expression<int?>? dataBits,
//     Expression<int?>? intervalo,
//     Expression<String?>? usarFila,
//     Expression<String?>? hardFlow,
//     Expression<String?>? softFlow,
//     Expression<String?>? sufixo,
//     Expression<String?>? excluirSufixo,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idPdvConfiguracao != null) 'ID_PDV_CONFIGURACAO': idPdvConfiguracao,
//       if (usa != null) 'USA': usa,
//       if (porta != null) 'PORTA': porta,
//       if (baud != null) 'BAUD': baud,
//       if (handShake != null) 'HAND_SHAKE': handShake,
//       if (parity != null) 'PARITY': parity,
//       if (stopBits != null) 'STOP_BITS': stopBits,
//       if (dataBits != null) 'DATA_BITS': dataBits,
//       if (intervalo != null) 'INTERVALO': intervalo,
//       if (usarFila != null) 'USAR_FILA': usarFila,
//       if (hardFlow != null) 'HARD_FLOW': hardFlow,
//       if (softFlow != null) 'SOFT_FLOW': softFlow,
//       if (sufixo != null) 'SUFIXO': sufixo,
//       if (excluirSufixo != null) 'EXCLUIR_SUFIXO': excluirSufixo,
//     });
//   }

//   PdvConfiguracaoLeitorSerialsCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idPdvConfiguracao,
//       Value<String?>? usa,
//       Value<String?>? porta,
//       Value<int?>? baud,
//       Value<int?>? handShake,
//       Value<int?>? parity,
//       Value<int?>? stopBits,
//       Value<int?>? dataBits,
//       Value<int?>? intervalo,
//       Value<String?>? usarFila,
//       Value<String?>? hardFlow,
//       Value<String?>? softFlow,
//       Value<String?>? sufixo,
//       Value<String?>? excluirSufixo}) {
//     return PdvConfiguracaoLeitorSerialsCompanion(
//       id: id ?? this.id,
//       idPdvConfiguracao: idPdvConfiguracao ?? this.idPdvConfiguracao,
//       usa: usa ?? this.usa,
//       porta: porta ?? this.porta,
//       baud: baud ?? this.baud,
//       handShake: handShake ?? this.handShake,
//       parity: parity ?? this.parity,
//       stopBits: stopBits ?? this.stopBits,
//       dataBits: dataBits ?? this.dataBits,
//       intervalo: intervalo ?? this.intervalo,
//       usarFila: usarFila ?? this.usarFila,
//       hardFlow: hardFlow ?? this.hardFlow,
//       softFlow: softFlow ?? this.softFlow,
//       sufixo: sufixo ?? this.sufixo,
//       excluirSufixo: excluirSufixo ?? this.excluirSufixo,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idPdvConfiguracao.present) {
//       map['ID_PDV_CONFIGURACAO'] = Variable<int?>(idPdvConfiguracao.value);
//     }
//     if (usa.present) {
//       map['USA'] = Variable<String?>(usa.value);
//     }
//     if (porta.present) {
//       map['PORTA'] = Variable<String?>(porta.value);
//     }
//     if (baud.present) {
//       map['BAUD'] = Variable<int?>(baud.value);
//     }
//     if (handShake.present) {
//       map['HAND_SHAKE'] = Variable<int?>(handShake.value);
//     }
//     if (parity.present) {
//       map['PARITY'] = Variable<int?>(parity.value);
//     }
//     if (stopBits.present) {
//       map['STOP_BITS'] = Variable<int?>(stopBits.value);
//     }
//     if (dataBits.present) {
//       map['DATA_BITS'] = Variable<int?>(dataBits.value);
//     }
//     if (intervalo.present) {
//       map['INTERVALO'] = Variable<int?>(intervalo.value);
//     }
//     if (usarFila.present) {
//       map['USAR_FILA'] = Variable<String?>(usarFila.value);
//     }
//     if (hardFlow.present) {
//       map['HARD_FLOW'] = Variable<String?>(hardFlow.value);
//     }
//     if (softFlow.present) {
//       map['SOFT_FLOW'] = Variable<String?>(softFlow.value);
//     }
//     if (sufixo.present) {
//       map['SUFIXO'] = Variable<String?>(sufixo.value);
//     }
//     if (excluirSufixo.present) {
//       map['EXCLUIR_SUFIXO'] = Variable<String?>(excluirSufixo.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('PdvConfiguracaoLeitorSerialsCompanion(')
//           ..write('id: $id, ')
//           ..write('idPdvConfiguracao: $idPdvConfiguracao, ')
//           ..write('usa: $usa, ')
//           ..write('porta: $porta, ')
//           ..write('baud: $baud, ')
//           ..write('handShake: $handShake, ')
//           ..write('parity: $parity, ')
//           ..write('stopBits: $stopBits, ')
//           ..write('dataBits: $dataBits, ')
//           ..write('intervalo: $intervalo, ')
//           ..write('usarFila: $usarFila, ')
//           ..write('hardFlow: $hardFlow, ')
//           ..write('softFlow: $softFlow, ')
//           ..write('sufixo: $sufixo, ')
//           ..write('excluirSufixo: $excluirSufixo')
//           ..write(')'))
//         .toString();
//   }
// }

// class $PdvConfiguracaoLeitorSerialsTable extends PdvConfiguracaoLeitorSerials
//     with
//         TableInfo<$PdvConfiguracaoLeitorSerialsTable,
//             PdvConfiguracaoLeitorSerial> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $PdvConfiguracaoLeitorSerialsTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idPdvConfiguracaoMeta =
//       const VerificationMeta('idPdvConfiguracao');
//   late final GeneratedColumn<int?> idPdvConfiguracao = GeneratedColumn<int?>(
//       'ID_PDV_CONFIGURACAO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES PDV_CONFIGURACAO(ID)');
//   final VerificationMeta _usaMeta = const VerificationMeta('usa');
//   late final GeneratedColumn<String?> usa = GeneratedColumn<String?>(
//       'USA', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _portaMeta = const VerificationMeta('porta');
//   late final GeneratedColumn<String?> porta = GeneratedColumn<String?>(
//       'PORTA', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 4),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _baudMeta = const VerificationMeta('baud');
//   late final GeneratedColumn<int?> baud = GeneratedColumn<int?>(
//       'BAUD', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _handShakeMeta = const VerificationMeta('handShake');
//   late final GeneratedColumn<int?> handShake = GeneratedColumn<int?>(
//       'HAND_SHAKE', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _parityMeta = const VerificationMeta('parity');
//   late final GeneratedColumn<int?> parity = GeneratedColumn<int?>(
//       'PARITY', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _stopBitsMeta = const VerificationMeta('stopBits');
//   late final GeneratedColumn<int?> stopBits = GeneratedColumn<int?>(
//       'STOP_BITS', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _dataBitsMeta = const VerificationMeta('dataBits');
//   late final GeneratedColumn<int?> dataBits = GeneratedColumn<int?>(
//       'DATA_BITS', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _intervaloMeta = const VerificationMeta('intervalo');
//   late final GeneratedColumn<int?> intervalo = GeneratedColumn<int?>(
//       'INTERVALO', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _usarFilaMeta = const VerificationMeta('usarFila');
//   late final GeneratedColumn<String?> usarFila = GeneratedColumn<String?>(
//       'USAR_FILA', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _hardFlowMeta = const VerificationMeta('hardFlow');
//   late final GeneratedColumn<String?> hardFlow = GeneratedColumn<String?>(
//       'HARD_FLOW', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _softFlowMeta = const VerificationMeta('softFlow');
//   late final GeneratedColumn<String?> softFlow = GeneratedColumn<String?>(
//       'SOFT_FLOW', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _sufixoMeta = const VerificationMeta('sufixo');
//   late final GeneratedColumn<String?> sufixo = GeneratedColumn<String?>(
//       'SUFIXO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _excluirSufixoMeta =
//       const VerificationMeta('excluirSufixo');
//   late final GeneratedColumn<String?> excluirSufixo = GeneratedColumn<String?>(
//       'EXCLUIR_SUFIXO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idPdvConfiguracao,
//         usa,
//         porta,
//         baud,
//         handShake,
//         parity,
//         stopBits,
//         dataBits,
//         intervalo,
//         usarFila,
//         hardFlow,
//         softFlow,
//         sufixo,
//         excluirSufixo
//       ];
//   @override
//   String get aliasedName => _alias ?? 'PDV_CONFIGURACAO_LEITOR_SERIAL';
//   @override
//   String get actualTableName => 'PDV_CONFIGURACAO_LEITOR_SERIAL';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<PdvConfiguracaoLeitorSerial> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_PDV_CONFIGURACAO')) {
//       context.handle(
//           _idPdvConfiguracaoMeta,
//           idPdvConfiguracao.isAcceptableOrUnknown(
//               data['ID_PDV_CONFIGURACAO']!, _idPdvConfiguracaoMeta));
//     }
//     if (data.containsKey('USA')) {
//       context.handle(
//           _usaMeta, usa.isAcceptableOrUnknown(data['USA']!, _usaMeta));
//     }
//     if (data.containsKey('PORTA')) {
//       context.handle(
//           _portaMeta, porta.isAcceptableOrUnknown(data['PORTA']!, _portaMeta));
//     }
//     if (data.containsKey('BAUD')) {
//       context.handle(
//           _baudMeta, baud.isAcceptableOrUnknown(data['BAUD']!, _baudMeta));
//     }
//     if (data.containsKey('HAND_SHAKE')) {
//       context.handle(_handShakeMeta,
//           handShake.isAcceptableOrUnknown(data['HAND_SHAKE']!, _handShakeMeta));
//     }
//     if (data.containsKey('PARITY')) {
//       context.handle(_parityMeta,
//           parity.isAcceptableOrUnknown(data['PARITY']!, _parityMeta));
//     }
//     if (data.containsKey('STOP_BITS')) {
//       context.handle(_stopBitsMeta,
//           stopBits.isAcceptableOrUnknown(data['STOP_BITS']!, _stopBitsMeta));
//     }
//     if (data.containsKey('DATA_BITS')) {
//       context.handle(_dataBitsMeta,
//           dataBits.isAcceptableOrUnknown(data['DATA_BITS']!, _dataBitsMeta));
//     }
//     if (data.containsKey('INTERVALO')) {
//       context.handle(_intervaloMeta,
//           intervalo.isAcceptableOrUnknown(data['INTERVALO']!, _intervaloMeta));
//     }
//     if (data.containsKey('USAR_FILA')) {
//       context.handle(_usarFilaMeta,
//           usarFila.isAcceptableOrUnknown(data['USAR_FILA']!, _usarFilaMeta));
//     }
//     if (data.containsKey('HARD_FLOW')) {
//       context.handle(_hardFlowMeta,
//           hardFlow.isAcceptableOrUnknown(data['HARD_FLOW']!, _hardFlowMeta));
//     }
//     if (data.containsKey('SOFT_FLOW')) {
//       context.handle(_softFlowMeta,
//           softFlow.isAcceptableOrUnknown(data['SOFT_FLOW']!, _softFlowMeta));
//     }
//     if (data.containsKey('SUFIXO')) {
//       context.handle(_sufixoMeta,
//           sufixo.isAcceptableOrUnknown(data['SUFIXO']!, _sufixoMeta));
//     }
//     if (data.containsKey('EXCLUIR_SUFIXO')) {
//       context.handle(
//           _excluirSufixoMeta,
//           excluirSufixo.isAcceptableOrUnknown(
//               data['EXCLUIR_SUFIXO']!, _excluirSufixoMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   PdvConfiguracaoLeitorSerial map(Map<String, dynamic> data,
//       {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return PdvConfiguracaoLeitorSerial(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idPdvConfiguracao: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ID_PDV_CONFIGURACAO']),
//       usa: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}USA']),
//       porta: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}PORTA']),
//       baud: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}BAUD']),
//       handShake: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}HAND_SHAKE']),
//       parity: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}PARITY']),
//       stopBits: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}STOP_BITS']),
//       dataBits: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_BITS']),
//       intervalo: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}INTERVALO']),
//       usarFila: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}USAR_FILA']),
//       hardFlow: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}HARD_FLOW']),
//       softFlow: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}SOFT_FLOW']),
//       sufixo: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}SUFIXO']),
//       excluirSufixo: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}EXCLUIR_SUFIXO']),
//     );
//   }

//   @override
//   $PdvConfiguracaoLeitorSerialsTable createAlias(String alias) {
//     return $PdvConfiguracaoLeitorSerialsTable(_db, alias);
//   }
// }

// class PdvFechamentosCompanion extends UpdateCompanion<PdvFechamento> {
//   final Value<int> id;
//   final Value<int?> idPdvMovimento;
//   final Value<int?> idPdvTipoPagamento;
//   final Value<double?> valor;
//   const PdvFechamentosCompanion({
//     this.id = const Value.absent(),
//     this.idPdvMovimento = const Value.absent(),
//     this.idPdvTipoPagamento = const Value.absent(),
//     this.valor = const Value.absent(),
//   });
//   PdvFechamentosCompanion.insert({
//     this.id = const Value.absent(),
//     this.idPdvMovimento = const Value.absent(),
//     this.idPdvTipoPagamento = const Value.absent(),
//     this.valor = const Value.absent(),
//   });
//   static Insertable<PdvFechamento> custom({
//     Expression<int>? id,
//     Expression<int?>? idPdvMovimento,
//     Expression<int?>? idPdvTipoPagamento,
//     Expression<double?>? valor,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idPdvMovimento != null) 'ID_PDV_MOVIMENTO': idPdvMovimento,
//       if (idPdvTipoPagamento != null)
//         'ID_PDV_TIPO_PAGAMENTO': idPdvTipoPagamento,
//       if (valor != null) 'VALOR': valor,
//     });
//   }

//   PdvFechamentosCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idPdvMovimento,
//       Value<int?>? idPdvTipoPagamento,
//       Value<double?>? valor}) {
//     return PdvFechamentosCompanion(
//       id: id ?? this.id,
//       idPdvMovimento: idPdvMovimento ?? this.idPdvMovimento,
//       idPdvTipoPagamento: idPdvTipoPagamento ?? this.idPdvTipoPagamento,
//       valor: valor ?? this.valor,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idPdvMovimento.present) {
//       map['ID_PDV_MOVIMENTO'] = Variable<int?>(idPdvMovimento.value);
//     }
//     if (idPdvTipoPagamento.present) {
//       map['ID_PDV_TIPO_PAGAMENTO'] = Variable<int?>(idPdvTipoPagamento.value);
//     }
//     if (valor.present) {
//       map['VALOR'] = Variable<double?>(valor.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('PdvFechamentosCompanion(')
//           ..write('id: $id, ')
//           ..write('idPdvMovimento: $idPdvMovimento, ')
//           ..write('idPdvTipoPagamento: $idPdvTipoPagamento, ')
//           ..write('valor: $valor')
//           ..write(')'))
//         .toString();
//   }
// }

// class $PdvFechamentosTable extends PdvFechamentos
//     with TableInfo<$PdvFechamentosTable, PdvFechamento> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $PdvFechamentosTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idPdvMovimentoMeta =
//       const VerificationMeta('idPdvMovimento');
//   late final GeneratedColumn<int?> idPdvMovimento = GeneratedColumn<int?>(
//       'ID_PDV_MOVIMENTO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES PDV_MOVIMENTO(ID)');
//   final VerificationMeta _idPdvTipoPagamentoMeta =
//       const VerificationMeta('idPdvTipoPagamento');
//   late final GeneratedColumn<int?> idPdvTipoPagamento = GeneratedColumn<int?>(
//       'ID_PDV_TIPO_PAGAMENTO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES PDV_TIPO_PAGAMENTO(ID)');
//   final VerificationMeta _valorMeta = const VerificationMeta('valor');
//   late final GeneratedColumn<double?> valor = GeneratedColumn<double?>(
//       'VALOR', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns =>
//       [id, idPdvMovimento, idPdvTipoPagamento, valor];
//   @override
//   String get aliasedName => _alias ?? 'PDV_FECHAMENTO';
//   @override
//   String get actualTableName => 'PDV_FECHAMENTO';
//   @override
//   VerificationContext validateIntegrity(Insertable<PdvFechamento> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_PDV_MOVIMENTO')) {
//       context.handle(
//           _idPdvMovimentoMeta,
//           idPdvMovimento.isAcceptableOrUnknown(
//               data['ID_PDV_MOVIMENTO']!, _idPdvMovimentoMeta));
//     }
//     if (data.containsKey('ID_PDV_TIPO_PAGAMENTO')) {
//       context.handle(
//           _idPdvTipoPagamentoMeta,
//           idPdvTipoPagamento.isAcceptableOrUnknown(
//               data['ID_PDV_TIPO_PAGAMENTO']!, _idPdvTipoPagamentoMeta));
//     }
//     if (data.containsKey('VALOR')) {
//       context.handle(
//           _valorMeta, valor.isAcceptableOrUnknown(data['VALOR']!, _valorMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   PdvFechamento map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return PdvFechamento(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idPdvMovimento: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_PDV_MOVIMENTO']),
//       idPdvTipoPagamento: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ID_PDV_TIPO_PAGAMENTO']),
//       valor: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR']),
//     );
//   }

//   @override
//   $PdvFechamentosTable createAlias(String alias) {
//     return $PdvFechamentosTable(_db, alias);
//   }
// }

// class PdvMovimentosCompanion extends UpdateCompanion<PdvMovimento> {
//   final Value<int> id;
//   final Value<int?> idEcfImpressora;
//   final Value<int?> idPdvOperador;
//   final Value<int?> idPdvCaixa;
//   final Value<int?> idGerenteSupervisor;
//   final Value<DateTime?> dataAbertura;
//   final Value<String?> horaAbertura;
//   final Value<DateTime?> dataFechamento;
//   final Value<String?> horaFechamento;
//   final Value<double?> totalSuprimento;
//   final Value<double?> totalSangria;
//   final Value<double?> totalNaoFiscal;
//   final Value<double?> totalVenda;
//   final Value<double?> totalDesconto;
//   final Value<double?> totalAcrescimo;
//   final Value<double?> totalFinal;
//   final Value<double?> totalRecebido;
//   final Value<double?> totalTroco;
//   final Value<double?> totalCancelado;
//   final Value<String?> statusMovimento;
//   const PdvMovimentosCompanion({
//     this.id = const Value.absent(),
//     this.idEcfImpressora = const Value.absent(),
//     this.idPdvOperador = const Value.absent(),
//     this.idPdvCaixa = const Value.absent(),
//     this.idGerenteSupervisor = const Value.absent(),
//     this.dataAbertura = const Value.absent(),
//     this.horaAbertura = const Value.absent(),
//     this.dataFechamento = const Value.absent(),
//     this.horaFechamento = const Value.absent(),
//     this.totalSuprimento = const Value.absent(),
//     this.totalSangria = const Value.absent(),
//     this.totalNaoFiscal = const Value.absent(),
//     this.totalVenda = const Value.absent(),
//     this.totalDesconto = const Value.absent(),
//     this.totalAcrescimo = const Value.absent(),
//     this.totalFinal = const Value.absent(),
//     this.totalRecebido = const Value.absent(),
//     this.totalTroco = const Value.absent(),
//     this.totalCancelado = const Value.absent(),
//     this.statusMovimento = const Value.absent(),
//   });
//   PdvMovimentosCompanion.insert({
//     this.id = const Value.absent(),
//     this.idEcfImpressora = const Value.absent(),
//     this.idPdvOperador = const Value.absent(),
//     this.idPdvCaixa = const Value.absent(),
//     this.idGerenteSupervisor = const Value.absent(),
//     this.dataAbertura = const Value.absent(),
//     this.horaAbertura = const Value.absent(),
//     this.dataFechamento = const Value.absent(),
//     this.horaFechamento = const Value.absent(),
//     this.totalSuprimento = const Value.absent(),
//     this.totalSangria = const Value.absent(),
//     this.totalNaoFiscal = const Value.absent(),
//     this.totalVenda = const Value.absent(),
//     this.totalDesconto = const Value.absent(),
//     this.totalAcrescimo = const Value.absent(),
//     this.totalFinal = const Value.absent(),
//     this.totalRecebido = const Value.absent(),
//     this.totalTroco = const Value.absent(),
//     this.totalCancelado = const Value.absent(),
//     this.statusMovimento = const Value.absent(),
//   });
//   static Insertable<PdvMovimento> custom({
//     Expression<int>? id,
//     Expression<int?>? idEcfImpressora,
//     Expression<int?>? idPdvOperador,
//     Expression<int?>? idPdvCaixa,
//     Expression<int?>? idGerenteSupervisor,
//     Expression<DateTime?>? dataAbertura,
//     Expression<String?>? horaAbertura,
//     Expression<DateTime?>? dataFechamento,
//     Expression<String?>? horaFechamento,
//     Expression<double?>? totalSuprimento,
//     Expression<double?>? totalSangria,
//     Expression<double?>? totalNaoFiscal,
//     Expression<double?>? totalVenda,
//     Expression<double?>? totalDesconto,
//     Expression<double?>? totalAcrescimo,
//     Expression<double?>? totalFinal,
//     Expression<double?>? totalRecebido,
//     Expression<double?>? totalTroco,
//     Expression<double?>? totalCancelado,
//     Expression<String?>? statusMovimento,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idEcfImpressora != null) 'ID_ECF_IMPRESSORA': idEcfImpressora,
//       if (idPdvOperador != null) 'ID_PDV_OPERADOR': idPdvOperador,
//       if (idPdvCaixa != null) 'ID_PDV_CAIXA': idPdvCaixa,
//       if (idGerenteSupervisor != null)
//         'ID_GERENTE_SUPERVISOR': idGerenteSupervisor,
//       if (dataAbertura != null) 'DATA_ABERTURA': dataAbertura,
//       if (horaAbertura != null) 'HORA_ABERTURA': horaAbertura,
//       if (dataFechamento != null) 'DATA_FECHAMENTO': dataFechamento,
//       if (horaFechamento != null) 'HORA_FECHAMENTO': horaFechamento,
//       if (totalSuprimento != null) 'TOTAL_SUPRIMENTO': totalSuprimento,
//       if (totalSangria != null) 'TOTAL_SANGRIA': totalSangria,
//       if (totalNaoFiscal != null) 'TOTAL_NAO_FISCAL': totalNaoFiscal,
//       if (totalVenda != null) 'TOTAL_VENDA': totalVenda,
//       if (totalDesconto != null) 'TOTAL_DESCONTO': totalDesconto,
//       if (totalAcrescimo != null) 'TOTAL_ACRESCIMO': totalAcrescimo,
//       if (totalFinal != null) 'TOTAL_FINAL': totalFinal,
//       if (totalRecebido != null) 'TOTAL_RECEBIDO': totalRecebido,
//       if (totalTroco != null) 'TOTAL_TROCO': totalTroco,
//       if (totalCancelado != null) 'TOTAL_CANCELADO': totalCancelado,
//       if (statusMovimento != null) 'STATUS_MOVIMENTO': statusMovimento,
//     });
//   }

//   PdvMovimentosCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idEcfImpressora,
//       Value<int?>? idPdvOperador,
//       Value<int?>? idPdvCaixa,
//       Value<int?>? idGerenteSupervisor,
//       Value<DateTime?>? dataAbertura,
//       Value<String?>? horaAbertura,
//       Value<DateTime?>? dataFechamento,
//       Value<String?>? horaFechamento,
//       Value<double?>? totalSuprimento,
//       Value<double?>? totalSangria,
//       Value<double?>? totalNaoFiscal,
//       Value<double?>? totalVenda,
//       Value<double?>? totalDesconto,
//       Value<double?>? totalAcrescimo,
//       Value<double?>? totalFinal,
//       Value<double?>? totalRecebido,
//       Value<double?>? totalTroco,
//       Value<double?>? totalCancelado,
//       Value<String?>? statusMovimento}) {
//     return PdvMovimentosCompanion(
//       id: id ?? this.id,
//       idEcfImpressora: idEcfImpressora ?? this.idEcfImpressora,
//       idPdvOperador: idPdvOperador ?? this.idPdvOperador,
//       idPdvCaixa: idPdvCaixa ?? this.idPdvCaixa,
//       idGerenteSupervisor: idGerenteSupervisor ?? this.idGerenteSupervisor,
//       dataAbertura: dataAbertura ?? this.dataAbertura,
//       horaAbertura: horaAbertura ?? this.horaAbertura,
//       dataFechamento: dataFechamento ?? this.dataFechamento,
//       horaFechamento: horaFechamento ?? this.horaFechamento,
//       totalSuprimento: totalSuprimento ?? this.totalSuprimento,
//       totalSangria: totalSangria ?? this.totalSangria,
//       totalNaoFiscal: totalNaoFiscal ?? this.totalNaoFiscal,
//       totalVenda: totalVenda ?? this.totalVenda,
//       totalDesconto: totalDesconto ?? this.totalDesconto,
//       totalAcrescimo: totalAcrescimo ?? this.totalAcrescimo,
//       totalFinal: totalFinal ?? this.totalFinal,
//       totalRecebido: totalRecebido ?? this.totalRecebido,
//       totalTroco: totalTroco ?? this.totalTroco,
//       totalCancelado: totalCancelado ?? this.totalCancelado,
//       statusMovimento: statusMovimento ?? this.statusMovimento,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idEcfImpressora.present) {
//       map['ID_ECF_IMPRESSORA'] = Variable<int?>(idEcfImpressora.value);
//     }
//     if (idPdvOperador.present) {
//       map['ID_PDV_OPERADOR'] = Variable<int?>(idPdvOperador.value);
//     }
//     if (idPdvCaixa.present) {
//       map['ID_PDV_CAIXA'] = Variable<int?>(idPdvCaixa.value);
//     }
//     if (idGerenteSupervisor.present) {
//       map['ID_GERENTE_SUPERVISOR'] = Variable<int?>(idGerenteSupervisor.value);
//     }
//     if (dataAbertura.present) {
//       map['DATA_ABERTURA'] = Variable<DateTime?>(dataAbertura.value);
//     }
//     if (horaAbertura.present) {
//       map['HORA_ABERTURA'] = Variable<String?>(horaAbertura.value);
//     }
//     if (dataFechamento.present) {
//       map['DATA_FECHAMENTO'] = Variable<DateTime?>(dataFechamento.value);
//     }
//     if (horaFechamento.present) {
//       map['HORA_FECHAMENTO'] = Variable<String?>(horaFechamento.value);
//     }
//     if (totalSuprimento.present) {
//       map['TOTAL_SUPRIMENTO'] = Variable<double?>(totalSuprimento.value);
//     }
//     if (totalSangria.present) {
//       map['TOTAL_SANGRIA'] = Variable<double?>(totalSangria.value);
//     }
//     if (totalNaoFiscal.present) {
//       map['TOTAL_NAO_FISCAL'] = Variable<double?>(totalNaoFiscal.value);
//     }
//     if (totalVenda.present) {
//       map['TOTAL_VENDA'] = Variable<double?>(totalVenda.value);
//     }
//     if (totalDesconto.present) {
//       map['TOTAL_DESCONTO'] = Variable<double?>(totalDesconto.value);
//     }
//     if (totalAcrescimo.present) {
//       map['TOTAL_ACRESCIMO'] = Variable<double?>(totalAcrescimo.value);
//     }
//     if (totalFinal.present) {
//       map['TOTAL_FINAL'] = Variable<double?>(totalFinal.value);
//     }
//     if (totalRecebido.present) {
//       map['TOTAL_RECEBIDO'] = Variable<double?>(totalRecebido.value);
//     }
//     if (totalTroco.present) {
//       map['TOTAL_TROCO'] = Variable<double?>(totalTroco.value);
//     }
//     if (totalCancelado.present) {
//       map['TOTAL_CANCELADO'] = Variable<double?>(totalCancelado.value);
//     }
//     if (statusMovimento.present) {
//       map['STATUS_MOVIMENTO'] = Variable<String?>(statusMovimento.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('PdvMovimentosCompanion(')
//           ..write('id: $id, ')
//           ..write('idEcfImpressora: $idEcfImpressora, ')
//           ..write('idPdvOperador: $idPdvOperador, ')
//           ..write('idPdvCaixa: $idPdvCaixa, ')
//           ..write('idGerenteSupervisor: $idGerenteSupervisor, ')
//           ..write('dataAbertura: $dataAbertura, ')
//           ..write('horaAbertura: $horaAbertura, ')
//           ..write('dataFechamento: $dataFechamento, ')
//           ..write('horaFechamento: $horaFechamento, ')
//           ..write('totalSuprimento: $totalSuprimento, ')
//           ..write('totalSangria: $totalSangria, ')
//           ..write('totalNaoFiscal: $totalNaoFiscal, ')
//           ..write('totalVenda: $totalVenda, ')
//           ..write('totalDesconto: $totalDesconto, ')
//           ..write('totalAcrescimo: $totalAcrescimo, ')
//           ..write('totalFinal: $totalFinal, ')
//           ..write('totalRecebido: $totalRecebido, ')
//           ..write('totalTroco: $totalTroco, ')
//           ..write('totalCancelado: $totalCancelado, ')
//           ..write('statusMovimento: $statusMovimento')
//           ..write(')'))
//         .toString();
//   }
// }

// class $PdvMovimentosTable extends PdvMovimentos
//     with TableInfo<$PdvMovimentosTable, PdvMovimento> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $PdvMovimentosTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idEcfImpressoraMeta =
//       const VerificationMeta('idEcfImpressora');
//   late final GeneratedColumn<int?> idEcfImpressora = GeneratedColumn<int?>(
//       'ID_ECF_IMPRESSORA', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES ECF_IMPRESSORA(ID)');
//   final VerificationMeta _idPdvOperadorMeta =
//       const VerificationMeta('idPdvOperador');
//   late final GeneratedColumn<int?> idPdvOperador = GeneratedColumn<int?>(
//       'ID_PDV_OPERADOR', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES PDV_OPERADOR(ID)');
//   final VerificationMeta _idPdvCaixaMeta = const VerificationMeta('idPdvCaixa');
//   late final GeneratedColumn<int?> idPdvCaixa = GeneratedColumn<int?>(
//       'ID_PDV_CAIXA', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES PDV_CAIXA(ID)');
//   final VerificationMeta _idGerenteSupervisorMeta =
//       const VerificationMeta('idGerenteSupervisor');
//   late final GeneratedColumn<int?> idGerenteSupervisor = GeneratedColumn<int?>(
//       'ID_GERENTE_SUPERVISOR', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES GERENTE_SUPERVISOR(ID)');
//   final VerificationMeta _dataAberturaMeta =
//       const VerificationMeta('dataAbertura');
//   late final GeneratedColumn<DateTime?> dataAbertura =
//       GeneratedColumn<DateTime?>('DATA_ABERTURA', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _horaAberturaMeta =
//       const VerificationMeta('horaAbertura');
//   late final GeneratedColumn<String?> horaAbertura = GeneratedColumn<String?>(
//       'HORA_ABERTURA', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _dataFechamentoMeta =
//       const VerificationMeta('dataFechamento');
//   late final GeneratedColumn<DateTime?> dataFechamento =
//       GeneratedColumn<DateTime?>('DATA_FECHAMENTO', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _horaFechamentoMeta =
//       const VerificationMeta('horaFechamento');
//   late final GeneratedColumn<String?> horaFechamento = GeneratedColumn<String?>(
//       'HORA_FECHAMENTO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _totalSuprimentoMeta =
//       const VerificationMeta('totalSuprimento');
//   late final GeneratedColumn<double?> totalSuprimento =
//       GeneratedColumn<double?>('TOTAL_SUPRIMENTO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _totalSangriaMeta =
//       const VerificationMeta('totalSangria');
//   late final GeneratedColumn<double?> totalSangria = GeneratedColumn<double?>(
//       'TOTAL_SANGRIA', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _totalNaoFiscalMeta =
//       const VerificationMeta('totalNaoFiscal');
//   late final GeneratedColumn<double?> totalNaoFiscal = GeneratedColumn<double?>(
//       'TOTAL_NAO_FISCAL', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _totalVendaMeta = const VerificationMeta('totalVenda');
//   late final GeneratedColumn<double?> totalVenda = GeneratedColumn<double?>(
//       'TOTAL_VENDA', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _totalDescontoMeta =
//       const VerificationMeta('totalDesconto');
//   late final GeneratedColumn<double?> totalDesconto = GeneratedColumn<double?>(
//       'TOTAL_DESCONTO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _totalAcrescimoMeta =
//       const VerificationMeta('totalAcrescimo');
//   late final GeneratedColumn<double?> totalAcrescimo = GeneratedColumn<double?>(
//       'TOTAL_ACRESCIMO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _totalFinalMeta = const VerificationMeta('totalFinal');
//   late final GeneratedColumn<double?> totalFinal = GeneratedColumn<double?>(
//       'TOTAL_FINAL', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _totalRecebidoMeta =
//       const VerificationMeta('totalRecebido');
//   late final GeneratedColumn<double?> totalRecebido = GeneratedColumn<double?>(
//       'TOTAL_RECEBIDO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _totalTrocoMeta = const VerificationMeta('totalTroco');
//   late final GeneratedColumn<double?> totalTroco = GeneratedColumn<double?>(
//       'TOTAL_TROCO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _totalCanceladoMeta =
//       const VerificationMeta('totalCancelado');
//   late final GeneratedColumn<double?> totalCancelado = GeneratedColumn<double?>(
//       'TOTAL_CANCELADO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _statusMovimentoMeta =
//       const VerificationMeta('statusMovimento');
//   late final GeneratedColumn<String?> statusMovimento =
//       GeneratedColumn<String?>('STATUS_MOVIMENTO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idEcfImpressora,
//         idPdvOperador,
//         idPdvCaixa,
//         idGerenteSupervisor,
//         dataAbertura,
//         horaAbertura,
//         dataFechamento,
//         horaFechamento,
//         totalSuprimento,
//         totalSangria,
//         totalNaoFiscal,
//         totalVenda,
//         totalDesconto,
//         totalAcrescimo,
//         totalFinal,
//         totalRecebido,
//         totalTroco,
//         totalCancelado,
//         statusMovimento
//       ];
//   @override
//   String get aliasedName => _alias ?? 'PDV_MOVIMENTO';
//   @override
//   String get actualTableName => 'PDV_MOVIMENTO';
//   @override
//   VerificationContext validateIntegrity(Insertable<PdvMovimento> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_ECF_IMPRESSORA')) {
//       context.handle(
//           _idEcfImpressoraMeta,
//           idEcfImpressora.isAcceptableOrUnknown(
//               data['ID_ECF_IMPRESSORA']!, _idEcfImpressoraMeta));
//     }
//     if (data.containsKey('ID_PDV_OPERADOR')) {
//       context.handle(
//           _idPdvOperadorMeta,
//           idPdvOperador.isAcceptableOrUnknown(
//               data['ID_PDV_OPERADOR']!, _idPdvOperadorMeta));
//     }
//     if (data.containsKey('ID_PDV_CAIXA')) {
//       context.handle(
//           _idPdvCaixaMeta,
//           idPdvCaixa.isAcceptableOrUnknown(
//               data['ID_PDV_CAIXA']!, _idPdvCaixaMeta));
//     }
//     if (data.containsKey('ID_GERENTE_SUPERVISOR')) {
//       context.handle(
//           _idGerenteSupervisorMeta,
//           idGerenteSupervisor.isAcceptableOrUnknown(
//               data['ID_GERENTE_SUPERVISOR']!, _idGerenteSupervisorMeta));
//     }
//     if (data.containsKey('DATA_ABERTURA')) {
//       context.handle(
//           _dataAberturaMeta,
//           dataAbertura.isAcceptableOrUnknown(
//               data['DATA_ABERTURA']!, _dataAberturaMeta));
//     }
//     if (data.containsKey('HORA_ABERTURA')) {
//       context.handle(
//           _horaAberturaMeta,
//           horaAbertura.isAcceptableOrUnknown(
//               data['HORA_ABERTURA']!, _horaAberturaMeta));
//     }
//     if (data.containsKey('DATA_FECHAMENTO')) {
//       context.handle(
//           _dataFechamentoMeta,
//           dataFechamento.isAcceptableOrUnknown(
//               data['DATA_FECHAMENTO']!, _dataFechamentoMeta));
//     }
//     if (data.containsKey('HORA_FECHAMENTO')) {
//       context.handle(
//           _horaFechamentoMeta,
//           horaFechamento.isAcceptableOrUnknown(
//               data['HORA_FECHAMENTO']!, _horaFechamentoMeta));
//     }
//     if (data.containsKey('TOTAL_SUPRIMENTO')) {
//       context.handle(
//           _totalSuprimentoMeta,
//           totalSuprimento.isAcceptableOrUnknown(
//               data['TOTAL_SUPRIMENTO']!, _totalSuprimentoMeta));
//     }
//     if (data.containsKey('TOTAL_SANGRIA')) {
//       context.handle(
//           _totalSangriaMeta,
//           totalSangria.isAcceptableOrUnknown(
//               data['TOTAL_SANGRIA']!, _totalSangriaMeta));
//     }
//     if (data.containsKey('TOTAL_NAO_FISCAL')) {
//       context.handle(
//           _totalNaoFiscalMeta,
//           totalNaoFiscal.isAcceptableOrUnknown(
//               data['TOTAL_NAO_FISCAL']!, _totalNaoFiscalMeta));
//     }
//     if (data.containsKey('TOTAL_VENDA')) {
//       context.handle(
//           _totalVendaMeta,
//           totalVenda.isAcceptableOrUnknown(
//               data['TOTAL_VENDA']!, _totalVendaMeta));
//     }
//     if (data.containsKey('TOTAL_DESCONTO')) {
//       context.handle(
//           _totalDescontoMeta,
//           totalDesconto.isAcceptableOrUnknown(
//               data['TOTAL_DESCONTO']!, _totalDescontoMeta));
//     }
//     if (data.containsKey('TOTAL_ACRESCIMO')) {
//       context.handle(
//           _totalAcrescimoMeta,
//           totalAcrescimo.isAcceptableOrUnknown(
//               data['TOTAL_ACRESCIMO']!, _totalAcrescimoMeta));
//     }
//     if (data.containsKey('TOTAL_FINAL')) {
//       context.handle(
//           _totalFinalMeta,
//           totalFinal.isAcceptableOrUnknown(
//               data['TOTAL_FINAL']!, _totalFinalMeta));
//     }
//     if (data.containsKey('TOTAL_RECEBIDO')) {
//       context.handle(
//           _totalRecebidoMeta,
//           totalRecebido.isAcceptableOrUnknown(
//               data['TOTAL_RECEBIDO']!, _totalRecebidoMeta));
//     }
//     if (data.containsKey('TOTAL_TROCO')) {
//       context.handle(
//           _totalTrocoMeta,
//           totalTroco.isAcceptableOrUnknown(
//               data['TOTAL_TROCO']!, _totalTrocoMeta));
//     }
//     if (data.containsKey('TOTAL_CANCELADO')) {
//       context.handle(
//           _totalCanceladoMeta,
//           totalCancelado.isAcceptableOrUnknown(
//               data['TOTAL_CANCELADO']!, _totalCanceladoMeta));
//     }
//     if (data.containsKey('STATUS_MOVIMENTO')) {
//       context.handle(
//           _statusMovimentoMeta,
//           statusMovimento.isAcceptableOrUnknown(
//               data['STATUS_MOVIMENTO']!, _statusMovimentoMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   PdvMovimento map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return PdvMovimento(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idEcfImpressora: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_ECF_IMPRESSORA']),
//       idPdvOperador: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_PDV_OPERADOR']),
//       idPdvCaixa: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_PDV_CAIXA']),
//       idGerenteSupervisor: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ID_GERENTE_SUPERVISOR']),
//       dataAbertura: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_ABERTURA']),
//       horaAbertura: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}HORA_ABERTURA']),
//       dataFechamento: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_FECHAMENTO']),
//       horaFechamento: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}HORA_FECHAMENTO']),
//       totalSuprimento: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TOTAL_SUPRIMENTO']),
//       totalSangria: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TOTAL_SANGRIA']),
//       totalNaoFiscal: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TOTAL_NAO_FISCAL']),
//       totalVenda: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TOTAL_VENDA']),
//       totalDesconto: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TOTAL_DESCONTO']),
//       totalAcrescimo: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TOTAL_ACRESCIMO']),
//       totalFinal: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TOTAL_FINAL']),
//       totalRecebido: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TOTAL_RECEBIDO']),
//       totalTroco: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TOTAL_TROCO']),
//       totalCancelado: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TOTAL_CANCELADO']),
//       statusMovimento: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}STATUS_MOVIMENTO']),
//     );
//   }

//   @override
//   $PdvMovimentosTable createAlias(String alias) {
//     return $PdvMovimentosTable(_db, alias);
//   }
// }

// class PdvOperadorsCompanion extends UpdateCompanion<PdvOperador> {
//   final Value<int> id;
//   final Value<int?> idColaborador;
//   final Value<String?> login;
//   final Value<String?> senha;
//   const PdvOperadorsCompanion({
//     this.id = const Value.absent(),
//     this.idColaborador = const Value.absent(),
//     this.login = const Value.absent(),
//     this.senha = const Value.absent(),
//   });
//   PdvOperadorsCompanion.insert({
//     this.id = const Value.absent(),
//     this.idColaborador = const Value.absent(),
//     this.login = const Value.absent(),
//     this.senha = const Value.absent(),
//   });
//   static Insertable<PdvOperador> custom({
//     Expression<int>? id,
//     Expression<int?>? idColaborador,
//     Expression<String?>? login,
//     Expression<String?>? senha,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idColaborador != null) 'ID_COLABORADOR': idColaborador,
//       if (login != null) 'LOGIN': login,
//       if (senha != null) 'SENHA': senha,
//     });
//   }

//   PdvOperadorsCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idColaborador,
//       Value<String?>? login,
//       Value<String?>? senha}) {
//     return PdvOperadorsCompanion(
//       id: id ?? this.id,
//       idColaborador: idColaborador ?? this.idColaborador,
//       login: login ?? this.login,
//       senha: senha ?? this.senha,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idColaborador.present) {
//       map['ID_COLABORADOR'] = Variable<int?>(idColaborador.value);
//     }
//     if (login.present) {
//       map['LOGIN'] = Variable<String?>(login.value);
//     }
//     if (senha.present) {
//       map['SENHA'] = Variable<String?>(senha.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('PdvOperadorsCompanion(')
//           ..write('id: $id, ')
//           ..write('idColaborador: $idColaborador, ')
//           ..write('login: $login, ')
//           ..write('senha: $senha')
//           ..write(')'))
//         .toString();
//   }
// }

// class $PdvOperadorsTable extends PdvOperadors
//     with TableInfo<$PdvOperadorsTable, PdvOperador> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $PdvOperadorsTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idColaboradorMeta =
//       const VerificationMeta('idColaborador');
//   late final GeneratedColumn<int?> idColaborador = GeneratedColumn<int?>(
//       'ID_COLABORADOR', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES COLABORADOR(ID)');
//   final VerificationMeta _loginMeta = const VerificationMeta('login');
//   late final GeneratedColumn<String?> login = GeneratedColumn<String?>(
//       'LOGIN', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _senhaMeta = const VerificationMeta('senha');
//   late final GeneratedColumn<String?> senha = GeneratedColumn<String?>(
//       'SENHA', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [id, idColaborador, login, senha];
//   @override
//   String get aliasedName => _alias ?? 'PDV_OPERADOR';
//   @override
//   String get actualTableName => 'PDV_OPERADOR';
//   @override
//   VerificationContext validateIntegrity(Insertable<PdvOperador> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_COLABORADOR')) {
//       context.handle(
//           _idColaboradorMeta,
//           idColaborador.isAcceptableOrUnknown(
//               data['ID_COLABORADOR']!, _idColaboradorMeta));
//     }
//     if (data.containsKey('LOGIN')) {
//       context.handle(
//           _loginMeta, login.isAcceptableOrUnknown(data['LOGIN']!, _loginMeta));
//     }
//     if (data.containsKey('SENHA')) {
//       context.handle(
//           _senhaMeta, senha.isAcceptableOrUnknown(data['SENHA']!, _senhaMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   PdvOperador map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return PdvOperador(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idColaborador: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_COLABORADOR']),
//       login: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}LOGIN']),
//       senha: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}SENHA']),
//     );
//   }

//   @override
//   $PdvOperadorsTable createAlias(String alias) {
//     return $PdvOperadorsTable(_db, alias);
//   }
// }

// class PdvSangriasCompanion extends UpdateCompanion<PdvSangria> {
//   final Value<int> id;
//   final Value<int?> idPdvMovimento;
//   final Value<DateTime?> dataSangria;
//   final Value<String?> horaSangria;
//   final Value<double?> valor;
//   final Value<String?> observacao;
//   const PdvSangriasCompanion({
//     this.id = const Value.absent(),
//     this.idPdvMovimento = const Value.absent(),
//     this.dataSangria = const Value.absent(),
//     this.horaSangria = const Value.absent(),
//     this.valor = const Value.absent(),
//     this.observacao = const Value.absent(),
//   });
//   PdvSangriasCompanion.insert({
//     this.id = const Value.absent(),
//     this.idPdvMovimento = const Value.absent(),
//     this.dataSangria = const Value.absent(),
//     this.horaSangria = const Value.absent(),
//     this.valor = const Value.absent(),
//     this.observacao = const Value.absent(),
//   });
//   static Insertable<PdvSangria> custom({
//     Expression<int>? id,
//     Expression<int?>? idPdvMovimento,
//     Expression<DateTime?>? dataSangria,
//     Expression<String?>? horaSangria,
//     Expression<double?>? valor,
//     Expression<String?>? observacao,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idPdvMovimento != null) 'ID_PDV_MOVIMENTO': idPdvMovimento,
//       if (dataSangria != null) 'DATA_SANGRIA': dataSangria,
//       if (horaSangria != null) 'HORA_SANGRIA': horaSangria,
//       if (valor != null) 'VALOR': valor,
//       if (observacao != null) 'OBSERVACAO': observacao,
//     });
//   }

//   PdvSangriasCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idPdvMovimento,
//       Value<DateTime?>? dataSangria,
//       Value<String?>? horaSangria,
//       Value<double?>? valor,
//       Value<String?>? observacao}) {
//     return PdvSangriasCompanion(
//       id: id ?? this.id,
//       idPdvMovimento: idPdvMovimento ?? this.idPdvMovimento,
//       dataSangria: dataSangria ?? this.dataSangria,
//       horaSangria: horaSangria ?? this.horaSangria,
//       valor: valor ?? this.valor,
//       observacao: observacao ?? this.observacao,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idPdvMovimento.present) {
//       map['ID_PDV_MOVIMENTO'] = Variable<int?>(idPdvMovimento.value);
//     }
//     if (dataSangria.present) {
//       map['DATA_SANGRIA'] = Variable<DateTime?>(dataSangria.value);
//     }
//     if (horaSangria.present) {
//       map['HORA_SANGRIA'] = Variable<String?>(horaSangria.value);
//     }
//     if (valor.present) {
//       map['VALOR'] = Variable<double?>(valor.value);
//     }
//     if (observacao.present) {
//       map['OBSERVACAO'] = Variable<String?>(observacao.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('PdvSangriasCompanion(')
//           ..write('id: $id, ')
//           ..write('idPdvMovimento: $idPdvMovimento, ')
//           ..write('dataSangria: $dataSangria, ')
//           ..write('horaSangria: $horaSangria, ')
//           ..write('valor: $valor, ')
//           ..write('observacao: $observacao')
//           ..write(')'))
//         .toString();
//   }
// }

// class $PdvSangriasTable extends PdvSangrias
//     with TableInfo<$PdvSangriasTable, PdvSangria> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $PdvSangriasTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idPdvMovimentoMeta =
//       const VerificationMeta('idPdvMovimento');
//   late final GeneratedColumn<int?> idPdvMovimento = GeneratedColumn<int?>(
//       'ID_PDV_MOVIMENTO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES PDV_MOVIMENTO(ID)');
//   final VerificationMeta _dataSangriaMeta =
//       const VerificationMeta('dataSangria');
//   late final GeneratedColumn<DateTime?> dataSangria =
//       GeneratedColumn<DateTime?>('DATA_SANGRIA', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _horaSangriaMeta =
//       const VerificationMeta('horaSangria');
//   late final GeneratedColumn<String?> horaSangria = GeneratedColumn<String?>(
//       'HORA_SANGRIA', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _valorMeta = const VerificationMeta('valor');
//   late final GeneratedColumn<double?> valor = GeneratedColumn<double?>(
//       'VALOR', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _observacaoMeta = const VerificationMeta('observacao');
//   late final GeneratedColumn<String?> observacao = GeneratedColumn<String?>(
//       'OBSERVACAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns =>
//       [id, idPdvMovimento, dataSangria, horaSangria, valor, observacao];
//   @override
//   String get aliasedName => _alias ?? 'PDV_SANGRIA';
//   @override
//   String get actualTableName => 'PDV_SANGRIA';
//   @override
//   VerificationContext validateIntegrity(Insertable<PdvSangria> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_PDV_MOVIMENTO')) {
//       context.handle(
//           _idPdvMovimentoMeta,
//           idPdvMovimento.isAcceptableOrUnknown(
//               data['ID_PDV_MOVIMENTO']!, _idPdvMovimentoMeta));
//     }
//     if (data.containsKey('DATA_SANGRIA')) {
//       context.handle(
//           _dataSangriaMeta,
//           dataSangria.isAcceptableOrUnknown(
//               data['DATA_SANGRIA']!, _dataSangriaMeta));
//     }
//     if (data.containsKey('HORA_SANGRIA')) {
//       context.handle(
//           _horaSangriaMeta,
//           horaSangria.isAcceptableOrUnknown(
//               data['HORA_SANGRIA']!, _horaSangriaMeta));
//     }
//     if (data.containsKey('VALOR')) {
//       context.handle(
//           _valorMeta, valor.isAcceptableOrUnknown(data['VALOR']!, _valorMeta));
//     }
//     if (data.containsKey('OBSERVACAO')) {
//       context.handle(
//           _observacaoMeta,
//           observacao.isAcceptableOrUnknown(
//               data['OBSERVACAO']!, _observacaoMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   PdvSangria map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return PdvSangria(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idPdvMovimento: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_PDV_MOVIMENTO']),
//       dataSangria: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_SANGRIA']),
//       horaSangria: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}HORA_SANGRIA']),
//       valor: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR']),
//       observacao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}OBSERVACAO']),
//     );
//   }

//   @override
//   $PdvSangriasTable createAlias(String alias) {
//     return $PdvSangriasTable(_db, alias);
//   }
// }

// class PdvSuprimentosCompanion extends UpdateCompanion<PdvSuprimento> {
//   final Value<int> id;
//   final Value<int?> idPdvMovimento;
//   final Value<DateTime?> dataSuprimento;
//   final Value<String?> horaSuprimento;
//   final Value<double?> valor;
//   final Value<String?> observacao;
//   const PdvSuprimentosCompanion({
//     this.id = const Value.absent(),
//     this.idPdvMovimento = const Value.absent(),
//     this.dataSuprimento = const Value.absent(),
//     this.horaSuprimento = const Value.absent(),
//     this.valor = const Value.absent(),
//     this.observacao = const Value.absent(),
//   });
//   PdvSuprimentosCompanion.insert({
//     this.id = const Value.absent(),
//     this.idPdvMovimento = const Value.absent(),
//     this.dataSuprimento = const Value.absent(),
//     this.horaSuprimento = const Value.absent(),
//     this.valor = const Value.absent(),
//     this.observacao = const Value.absent(),
//   });
//   static Insertable<PdvSuprimento> custom({
//     Expression<int>? id,
//     Expression<int?>? idPdvMovimento,
//     Expression<DateTime?>? dataSuprimento,
//     Expression<String?>? horaSuprimento,
//     Expression<double?>? valor,
//     Expression<String?>? observacao,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idPdvMovimento != null) 'ID_PDV_MOVIMENTO': idPdvMovimento,
//       if (dataSuprimento != null) 'DATA_SUPRIMENTO': dataSuprimento,
//       if (horaSuprimento != null) 'HORA_SUPRIMENTO': horaSuprimento,
//       if (valor != null) 'VALOR': valor,
//       if (observacao != null) 'OBSERVACAO': observacao,
//     });
//   }

//   PdvSuprimentosCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idPdvMovimento,
//       Value<DateTime?>? dataSuprimento,
//       Value<String?>? horaSuprimento,
//       Value<double?>? valor,
//       Value<String?>? observacao}) {
//     return PdvSuprimentosCompanion(
//       id: id ?? this.id,
//       idPdvMovimento: idPdvMovimento ?? this.idPdvMovimento,
//       dataSuprimento: dataSuprimento ?? this.dataSuprimento,
//       horaSuprimento: horaSuprimento ?? this.horaSuprimento,
//       valor: valor ?? this.valor,
//       observacao: observacao ?? this.observacao,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idPdvMovimento.present) {
//       map['ID_PDV_MOVIMENTO'] = Variable<int?>(idPdvMovimento.value);
//     }
//     if (dataSuprimento.present) {
//       map['DATA_SUPRIMENTO'] = Variable<DateTime?>(dataSuprimento.value);
//     }
//     if (horaSuprimento.present) {
//       map['HORA_SUPRIMENTO'] = Variable<String?>(horaSuprimento.value);
//     }
//     if (valor.present) {
//       map['VALOR'] = Variable<double?>(valor.value);
//     }
//     if (observacao.present) {
//       map['OBSERVACAO'] = Variable<String?>(observacao.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('PdvSuprimentosCompanion(')
//           ..write('id: $id, ')
//           ..write('idPdvMovimento: $idPdvMovimento, ')
//           ..write('dataSuprimento: $dataSuprimento, ')
//           ..write('horaSuprimento: $horaSuprimento, ')
//           ..write('valor: $valor, ')
//           ..write('observacao: $observacao')
//           ..write(')'))
//         .toString();
//   }
// }

// class $PdvSuprimentosTable extends PdvSuprimentos
//     with TableInfo<$PdvSuprimentosTable, PdvSuprimento> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $PdvSuprimentosTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idPdvMovimentoMeta =
//       const VerificationMeta('idPdvMovimento');
//   late final GeneratedColumn<int?> idPdvMovimento = GeneratedColumn<int?>(
//       'ID_PDV_MOVIMENTO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES PDV_MOVIMENTO(ID)');
//   final VerificationMeta _dataSuprimentoMeta =
//       const VerificationMeta('dataSuprimento');
//   late final GeneratedColumn<DateTime?> dataSuprimento =
//       GeneratedColumn<DateTime?>('DATA_SUPRIMENTO', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _horaSuprimentoMeta =
//       const VerificationMeta('horaSuprimento');
//   late final GeneratedColumn<String?> horaSuprimento = GeneratedColumn<String?>(
//       'HORA_SUPRIMENTO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _valorMeta = const VerificationMeta('valor');
//   late final GeneratedColumn<double?> valor = GeneratedColumn<double?>(
//       'VALOR', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _observacaoMeta = const VerificationMeta('observacao');
//   late final GeneratedColumn<String?> observacao = GeneratedColumn<String?>(
//       'OBSERVACAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns =>
//       [id, idPdvMovimento, dataSuprimento, horaSuprimento, valor, observacao];
//   @override
//   String get aliasedName => _alias ?? 'PDV_SUPRIMENTO';
//   @override
//   String get actualTableName => 'PDV_SUPRIMENTO';
//   @override
//   VerificationContext validateIntegrity(Insertable<PdvSuprimento> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_PDV_MOVIMENTO')) {
//       context.handle(
//           _idPdvMovimentoMeta,
//           idPdvMovimento.isAcceptableOrUnknown(
//               data['ID_PDV_MOVIMENTO']!, _idPdvMovimentoMeta));
//     }
//     if (data.containsKey('DATA_SUPRIMENTO')) {
//       context.handle(
//           _dataSuprimentoMeta,
//           dataSuprimento.isAcceptableOrUnknown(
//               data['DATA_SUPRIMENTO']!, _dataSuprimentoMeta));
//     }
//     if (data.containsKey('HORA_SUPRIMENTO')) {
//       context.handle(
//           _horaSuprimentoMeta,
//           horaSuprimento.isAcceptableOrUnknown(
//               data['HORA_SUPRIMENTO']!, _horaSuprimentoMeta));
//     }
//     if (data.containsKey('VALOR')) {
//       context.handle(
//           _valorMeta, valor.isAcceptableOrUnknown(data['VALOR']!, _valorMeta));
//     }
//     if (data.containsKey('OBSERVACAO')) {
//       context.handle(
//           _observacaoMeta,
//           observacao.isAcceptableOrUnknown(
//               data['OBSERVACAO']!, _observacaoMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   PdvSuprimento map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return PdvSuprimento(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idPdvMovimento: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_PDV_MOVIMENTO']),
//       dataSuprimento: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_SUPRIMENTO']),
//       horaSuprimento: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}HORA_SUPRIMENTO']),
//       valor: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR']),
//       observacao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}OBSERVACAO']),
//     );
//   }

//   @override
//   $PdvSuprimentosTable createAlias(String alias) {
//     return $PdvSuprimentosTable(_db, alias);
//   }
// }

// class PdvTipoPagamentosCompanion extends UpdateCompanion<PdvTipoPagamento> {
//   final Value<int> id;
//   final Value<String?> codigo;
//   final Value<String?> descricao;
//   final Value<String?> tef;
//   final Value<String?> imprimeVinculado;
//   final Value<String?> permiteTroco;
//   final Value<String?> tefTipoGp;
//   final Value<String?> geraParcelas;
//   final Value<String?> codigoPagamentoNfce;
//   const PdvTipoPagamentosCompanion({
//     this.id = const Value.absent(),
//     this.codigo = const Value.absent(),
//     this.descricao = const Value.absent(),
//     this.tef = const Value.absent(),
//     this.imprimeVinculado = const Value.absent(),
//     this.permiteTroco = const Value.absent(),
//     this.tefTipoGp = const Value.absent(),
//     this.geraParcelas = const Value.absent(),
//     this.codigoPagamentoNfce = const Value.absent(),
//   });
//   PdvTipoPagamentosCompanion.insert({
//     this.id = const Value.absent(),
//     this.codigo = const Value.absent(),
//     this.descricao = const Value.absent(),
//     this.tef = const Value.absent(),
//     this.imprimeVinculado = const Value.absent(),
//     this.permiteTroco = const Value.absent(),
//     this.tefTipoGp = const Value.absent(),
//     this.geraParcelas = const Value.absent(),
//     this.codigoPagamentoNfce = const Value.absent(),
//   });
//   static Insertable<PdvTipoPagamento> custom({
//     Expression<int>? id,
//     Expression<String?>? codigo,
//     Expression<String?>? descricao,
//     Expression<String?>? tef,
//     Expression<String?>? imprimeVinculado,
//     Expression<String?>? permiteTroco,
//     Expression<String?>? tefTipoGp,
//     Expression<String?>? geraParcelas,
//     Expression<String?>? codigoPagamentoNfce,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (codigo != null) 'CODIGO': codigo,
//       if (descricao != null) 'DESCRICAO': descricao,
//       if (tef != null) 'TEF': tef,
//       if (imprimeVinculado != null) 'IMPRIME_VINCULADO': imprimeVinculado,
//       if (permiteTroco != null) 'PERMITE_TROCO': permiteTroco,
//       if (tefTipoGp != null) 'TEF_TIPO_GP': tefTipoGp,
//       if (geraParcelas != null) 'GERA_PARCELAS': geraParcelas,
//       if (codigoPagamentoNfce != null)
//         'CODIGO_PAGAMENTO_NFCE': codigoPagamentoNfce,
//     });
//   }

//   PdvTipoPagamentosCompanion copyWith(
//       {Value<int>? id,
//       Value<String?>? codigo,
//       Value<String?>? descricao,
//       Value<String?>? tef,
//       Value<String?>? imprimeVinculado,
//       Value<String?>? permiteTroco,
//       Value<String?>? tefTipoGp,
//       Value<String?>? geraParcelas,
//       Value<String?>? codigoPagamentoNfce}) {
//     return PdvTipoPagamentosCompanion(
//       id: id ?? this.id,
//       codigo: codigo ?? this.codigo,
//       descricao: descricao ?? this.descricao,
//       tef: tef ?? this.tef,
//       imprimeVinculado: imprimeVinculado ?? this.imprimeVinculado,
//       permiteTroco: permiteTroco ?? this.permiteTroco,
//       tefTipoGp: tefTipoGp ?? this.tefTipoGp,
//       geraParcelas: geraParcelas ?? this.geraParcelas,
//       codigoPagamentoNfce: codigoPagamentoNfce ?? this.codigoPagamentoNfce,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (codigo.present) {
//       map['CODIGO'] = Variable<String?>(codigo.value);
//     }
//     if (descricao.present) {
//       map['DESCRICAO'] = Variable<String?>(descricao.value);
//     }
//     if (tef.present) {
//       map['TEF'] = Variable<String?>(tef.value);
//     }
//     if (imprimeVinculado.present) {
//       map['IMPRIME_VINCULADO'] = Variable<String?>(imprimeVinculado.value);
//     }
//     if (permiteTroco.present) {
//       map['PERMITE_TROCO'] = Variable<String?>(permiteTroco.value);
//     }
//     if (tefTipoGp.present) {
//       map['TEF_TIPO_GP'] = Variable<String?>(tefTipoGp.value);
//     }
//     if (geraParcelas.present) {
//       map['GERA_PARCELAS'] = Variable<String?>(geraParcelas.value);
//     }
//     if (codigoPagamentoNfce.present) {
//       map['CODIGO_PAGAMENTO_NFCE'] =
//           Variable<String?>(codigoPagamentoNfce.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('PdvTipoPagamentosCompanion(')
//           ..write('id: $id, ')
//           ..write('codigo: $codigo, ')
//           ..write('descricao: $descricao, ')
//           ..write('tef: $tef, ')
//           ..write('imprimeVinculado: $imprimeVinculado, ')
//           ..write('permiteTroco: $permiteTroco, ')
//           ..write('tefTipoGp: $tefTipoGp, ')
//           ..write('geraParcelas: $geraParcelas, ')
//           ..write('codigoPagamentoNfce: $codigoPagamentoNfce')
//           ..write(')'))
//         .toString();
//   }
// }

// class $PdvTipoPagamentosTable extends PdvTipoPagamentos
//     with TableInfo<$PdvTipoPagamentosTable, PdvTipoPagamento> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $PdvTipoPagamentosTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _codigoMeta = const VerificationMeta('codigo');
//   late final GeneratedColumn<String?> codigo = GeneratedColumn<String?>(
//       'CODIGO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 3),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _descricaoMeta = const VerificationMeta('descricao');
//   late final GeneratedColumn<String?> descricao = GeneratedColumn<String?>(
//       'DESCRICAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _tefMeta = const VerificationMeta('tef');
//   late final GeneratedColumn<String?> tef = GeneratedColumn<String?>(
//       'TEF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _imprimeVinculadoMeta =
//       const VerificationMeta('imprimeVinculado');
//   late final GeneratedColumn<String?> imprimeVinculado =
//       GeneratedColumn<String?>('IMPRIME_VINCULADO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _permiteTrocoMeta =
//       const VerificationMeta('permiteTroco');
//   late final GeneratedColumn<String?> permiteTroco = GeneratedColumn<String?>(
//       'PERMITE_TROCO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _tefTipoGpMeta = const VerificationMeta('tefTipoGp');
//   late final GeneratedColumn<String?> tefTipoGp = GeneratedColumn<String?>(
//       'TEF_TIPO_GP', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _geraParcelasMeta =
//       const VerificationMeta('geraParcelas');
//   late final GeneratedColumn<String?> geraParcelas = GeneratedColumn<String?>(
//       'GERA_PARCELAS', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _codigoPagamentoNfceMeta =
//       const VerificationMeta('codigoPagamentoNfce');
//   late final GeneratedColumn<String?> codigoPagamentoNfce =
//       GeneratedColumn<String?>('CODIGO_PAGAMENTO_NFCE', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 2),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         codigo,
//         descricao,
//         tef,
//         imprimeVinculado,
//         permiteTroco,
//         tefTipoGp,
//         geraParcelas,
//         codigoPagamentoNfce
//       ];
//   @override
//   String get aliasedName => _alias ?? 'PDV_TIPO_PAGAMENTO';
//   @override
//   String get actualTableName => 'PDV_TIPO_PAGAMENTO';
//   @override
//   VerificationContext validateIntegrity(Insertable<PdvTipoPagamento> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('CODIGO')) {
//       context.handle(_codigoMeta,
//           codigo.isAcceptableOrUnknown(data['CODIGO']!, _codigoMeta));
//     }
//     if (data.containsKey('DESCRICAO')) {
//       context.handle(_descricaoMeta,
//           descricao.isAcceptableOrUnknown(data['DESCRICAO']!, _descricaoMeta));
//     }
//     if (data.containsKey('TEF')) {
//       context.handle(
//           _tefMeta, tef.isAcceptableOrUnknown(data['TEF']!, _tefMeta));
//     }
//     if (data.containsKey('IMPRIME_VINCULADO')) {
//       context.handle(
//           _imprimeVinculadoMeta,
//           imprimeVinculado.isAcceptableOrUnknown(
//               data['IMPRIME_VINCULADO']!, _imprimeVinculadoMeta));
//     }
//     if (data.containsKey('PERMITE_TROCO')) {
//       context.handle(
//           _permiteTrocoMeta,
//           permiteTroco.isAcceptableOrUnknown(
//               data['PERMITE_TROCO']!, _permiteTrocoMeta));
//     }
//     if (data.containsKey('TEF_TIPO_GP')) {
//       context.handle(
//           _tefTipoGpMeta,
//           tefTipoGp.isAcceptableOrUnknown(
//               data['TEF_TIPO_GP']!, _tefTipoGpMeta));
//     }
//     if (data.containsKey('GERA_PARCELAS')) {
//       context.handle(
//           _geraParcelasMeta,
//           geraParcelas.isAcceptableOrUnknown(
//               data['GERA_PARCELAS']!, _geraParcelasMeta));
//     }
//     if (data.containsKey('CODIGO_PAGAMENTO_NFCE')) {
//       context.handle(
//           _codigoPagamentoNfceMeta,
//           codigoPagamentoNfce.isAcceptableOrUnknown(
//               data['CODIGO_PAGAMENTO_NFCE']!, _codigoPagamentoNfceMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   PdvTipoPagamento map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return PdvTipoPagamento(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       codigo: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO']),
//       descricao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DESCRICAO']),
//       tef: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TEF']),
//       imprimeVinculado: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}IMPRIME_VINCULADO']),
//       permiteTroco: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}PERMITE_TROCO']),
//       tefTipoGp: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TEF_TIPO_GP']),
//       geraParcelas: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}GERA_PARCELAS']),
//       codigoPagamentoNfce: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}CODIGO_PAGAMENTO_NFCE']),
//     );
//   }

//   @override
//   $PdvTipoPagamentosTable createAlias(String alias) {
//     return $PdvTipoPagamentosTable(_db, alias);
//   }
// }

// class PdvTotalTipoPagamentosCompanion
//     extends UpdateCompanion<PdvTotalTipoPagamento> {
//   final Value<int> id;
//   final Value<int?> idPdvVendaCabecalho;
//   final Value<int?> idPdvTipoPagamento;
//   final Value<DateTime?> dataVenda;
//   final Value<String?> horaVenda;
//   final Value<String?> serieEcf;
//   final Value<int?> coo;
//   final Value<int?> ccf;
//   final Value<int?> gnf;
//   final Value<double?> valor;
//   final Value<String?> nsu;
//   final Value<String?> estorno;
//   final Value<String?> rede;
//   final Value<String?> cartaoDc;
//   final Value<String?> hashRegistro;
//   const PdvTotalTipoPagamentosCompanion({
//     this.id = const Value.absent(),
//     this.idPdvVendaCabecalho = const Value.absent(),
//     this.idPdvTipoPagamento = const Value.absent(),
//     this.dataVenda = const Value.absent(),
//     this.horaVenda = const Value.absent(),
//     this.serieEcf = const Value.absent(),
//     this.coo = const Value.absent(),
//     this.ccf = const Value.absent(),
//     this.gnf = const Value.absent(),
//     this.valor = const Value.absent(),
//     this.nsu = const Value.absent(),
//     this.estorno = const Value.absent(),
//     this.rede = const Value.absent(),
//     this.cartaoDc = const Value.absent(),
//     this.hashRegistro = const Value.absent(),
//   });
//   PdvTotalTipoPagamentosCompanion.insert({
//     this.id = const Value.absent(),
//     this.idPdvVendaCabecalho = const Value.absent(),
//     this.idPdvTipoPagamento = const Value.absent(),
//     this.dataVenda = const Value.absent(),
//     this.horaVenda = const Value.absent(),
//     this.serieEcf = const Value.absent(),
//     this.coo = const Value.absent(),
//     this.ccf = const Value.absent(),
//     this.gnf = const Value.absent(),
//     this.valor = const Value.absent(),
//     this.nsu = const Value.absent(),
//     this.estorno = const Value.absent(),
//     this.rede = const Value.absent(),
//     this.cartaoDc = const Value.absent(),
//     this.hashRegistro = const Value.absent(),
//   });
//   static Insertable<PdvTotalTipoPagamento> custom({
//     Expression<int>? id,
//     Expression<int?>? idPdvVendaCabecalho,
//     Expression<int?>? idPdvTipoPagamento,
//     Expression<DateTime?>? dataVenda,
//     Expression<String?>? horaVenda,
//     Expression<String?>? serieEcf,
//     Expression<int?>? coo,
//     Expression<int?>? ccf,
//     Expression<int?>? gnf,
//     Expression<double?>? valor,
//     Expression<String?>? nsu,
//     Expression<String?>? estorno,
//     Expression<String?>? rede,
//     Expression<String?>? cartaoDc,
//     Expression<String?>? hashRegistro,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idPdvVendaCabecalho != null)
//         'ID_PDV_VENDA_CABECALHO': idPdvVendaCabecalho,
//       if (idPdvTipoPagamento != null)
//         'ID_PDV_TIPO_PAGAMENTO': idPdvTipoPagamento,
//       if (dataVenda != null) 'DATA_VENDA': dataVenda,
//       if (horaVenda != null) 'HORA_VENDA': horaVenda,
//       if (serieEcf != null) 'SERIE_ECF': serieEcf,
//       if (coo != null) 'COO': coo,
//       if (ccf != null) 'CCF': ccf,
//       if (gnf != null) 'GNF': gnf,
//       if (valor != null) 'VALOR': valor,
//       if (nsu != null) 'NSU': nsu,
//       if (estorno != null) 'ESTORNO': estorno,
//       if (rede != null) 'REDE': rede,
//       if (cartaoDc != null) 'CARTAO_DC': cartaoDc,
//       if (hashRegistro != null) 'HASH_REGISTRO': hashRegistro,
//     });
//   }

//   PdvTotalTipoPagamentosCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idPdvVendaCabecalho,
//       Value<int?>? idPdvTipoPagamento,
//       Value<DateTime?>? dataVenda,
//       Value<String?>? horaVenda,
//       Value<String?>? serieEcf,
//       Value<int?>? coo,
//       Value<int?>? ccf,
//       Value<int?>? gnf,
//       Value<double?>? valor,
//       Value<String?>? nsu,
//       Value<String?>? estorno,
//       Value<String?>? rede,
//       Value<String?>? cartaoDc,
//       Value<String?>? hashRegistro}) {
//     return PdvTotalTipoPagamentosCompanion(
//       id: id ?? this.id,
//       idPdvVendaCabecalho: idPdvVendaCabecalho ?? this.idPdvVendaCabecalho,
//       idPdvTipoPagamento: idPdvTipoPagamento ?? this.idPdvTipoPagamento,
//       dataVenda: dataVenda ?? this.dataVenda,
//       horaVenda: horaVenda ?? this.horaVenda,
//       serieEcf: serieEcf ?? this.serieEcf,
//       coo: coo ?? this.coo,
//       ccf: ccf ?? this.ccf,
//       gnf: gnf ?? this.gnf,
//       valor: valor ?? this.valor,
//       nsu: nsu ?? this.nsu,
//       estorno: estorno ?? this.estorno,
//       rede: rede ?? this.rede,
//       cartaoDc: cartaoDc ?? this.cartaoDc,
//       hashRegistro: hashRegistro ?? this.hashRegistro,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idPdvVendaCabecalho.present) {
//       map['ID_PDV_VENDA_CABECALHO'] = Variable<int?>(idPdvVendaCabecalho.value);
//     }
//     if (idPdvTipoPagamento.present) {
//       map['ID_PDV_TIPO_PAGAMENTO'] = Variable<int?>(idPdvTipoPagamento.value);
//     }
//     if (dataVenda.present) {
//       map['DATA_VENDA'] = Variable<DateTime?>(dataVenda.value);
//     }
//     if (horaVenda.present) {
//       map['HORA_VENDA'] = Variable<String?>(horaVenda.value);
//     }
//     if (serieEcf.present) {
//       map['SERIE_ECF'] = Variable<String?>(serieEcf.value);
//     }
//     if (coo.present) {
//       map['COO'] = Variable<int?>(coo.value);
//     }
//     if (ccf.present) {
//       map['CCF'] = Variable<int?>(ccf.value);
//     }
//     if (gnf.present) {
//       map['GNF'] = Variable<int?>(gnf.value);
//     }
//     if (valor.present) {
//       map['VALOR'] = Variable<double?>(valor.value);
//     }
//     if (nsu.present) {
//       map['NSU'] = Variable<String?>(nsu.value);
//     }
//     if (estorno.present) {
//       map['ESTORNO'] = Variable<String?>(estorno.value);
//     }
//     if (rede.present) {
//       map['REDE'] = Variable<String?>(rede.value);
//     }
//     if (cartaoDc.present) {
//       map['CARTAO_DC'] = Variable<String?>(cartaoDc.value);
//     }
//     if (hashRegistro.present) {
//       map['HASH_REGISTRO'] = Variable<String?>(hashRegistro.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('PdvTotalTipoPagamentosCompanion(')
//           ..write('id: $id, ')
//           ..write('idPdvVendaCabecalho: $idPdvVendaCabecalho, ')
//           ..write('idPdvTipoPagamento: $idPdvTipoPagamento, ')
//           ..write('dataVenda: $dataVenda, ')
//           ..write('horaVenda: $horaVenda, ')
//           ..write('serieEcf: $serieEcf, ')
//           ..write('coo: $coo, ')
//           ..write('ccf: $ccf, ')
//           ..write('gnf: $gnf, ')
//           ..write('valor: $valor, ')
//           ..write('nsu: $nsu, ')
//           ..write('estorno: $estorno, ')
//           ..write('rede: $rede, ')
//           ..write('cartaoDc: $cartaoDc, ')
//           ..write('hashRegistro: $hashRegistro')
//           ..write(')'))
//         .toString();
//   }
// }

// class $PdvTotalTipoPagamentosTable extends PdvTotalTipoPagamentos
//     with TableInfo<$PdvTotalTipoPagamentosTable, PdvTotalTipoPagamento> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $PdvTotalTipoPagamentosTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idPdvVendaCabecalhoMeta =
//       const VerificationMeta('idPdvVendaCabecalho');
//   late final GeneratedColumn<int?> idPdvVendaCabecalho = GeneratedColumn<int?>(
//       'ID_PDV_VENDA_CABECALHO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES PDV_VENDA_CABECALHO(ID)');
//   final VerificationMeta _idPdvTipoPagamentoMeta =
//       const VerificationMeta('idPdvTipoPagamento');
//   late final GeneratedColumn<int?> idPdvTipoPagamento = GeneratedColumn<int?>(
//       'ID_PDV_TIPO_PAGAMENTO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES PDV_TIPO_PAGAMENTO(ID)');
//   final VerificationMeta _dataVendaMeta = const VerificationMeta('dataVenda');
//   late final GeneratedColumn<DateTime?> dataVenda = GeneratedColumn<DateTime?>(
//       'DATA_VENDA', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _horaVendaMeta = const VerificationMeta('horaVenda');
//   late final GeneratedColumn<String?> horaVenda = GeneratedColumn<String?>(
//       'HORA_VENDA', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _serieEcfMeta = const VerificationMeta('serieEcf');
//   late final GeneratedColumn<String?> serieEcf = GeneratedColumn<String?>(
//       'SERIE_ECF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cooMeta = const VerificationMeta('coo');
//   late final GeneratedColumn<int?> coo = GeneratedColumn<int?>(
//       'COO', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _ccfMeta = const VerificationMeta('ccf');
//   late final GeneratedColumn<int?> ccf = GeneratedColumn<int?>(
//       'CCF', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _gnfMeta = const VerificationMeta('gnf');
//   late final GeneratedColumn<int?> gnf = GeneratedColumn<int?>(
//       'GNF', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _valorMeta = const VerificationMeta('valor');
//   late final GeneratedColumn<double?> valor = GeneratedColumn<double?>(
//       'VALOR', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _nsuMeta = const VerificationMeta('nsu');
//   late final GeneratedColumn<String?> nsu = GeneratedColumn<String?>(
//       'NSU', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 30),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _estornoMeta = const VerificationMeta('estorno');
//   late final GeneratedColumn<String?> estorno = GeneratedColumn<String?>(
//       'ESTORNO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _redeMeta = const VerificationMeta('rede');
//   late final GeneratedColumn<String?> rede = GeneratedColumn<String?>(
//       'REDE', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 10),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cartaoDcMeta = const VerificationMeta('cartaoDc');
//   late final GeneratedColumn<String?> cartaoDc = GeneratedColumn<String?>(
//       'CARTAO_DC', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _hashRegistroMeta =
//       const VerificationMeta('hashRegistro');
//   late final GeneratedColumn<String?> hashRegistro = GeneratedColumn<String?>(
//       'HASH_REGISTRO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 32),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idPdvVendaCabecalho,
//         idPdvTipoPagamento,
//         dataVenda,
//         horaVenda,
//         serieEcf,
//         coo,
//         ccf,
//         gnf,
//         valor,
//         nsu,
//         estorno,
//         rede,
//         cartaoDc,
//         hashRegistro
//       ];
//   @override
//   String get aliasedName => _alias ?? 'PDV_TOTAL_TIPO_PAGAMENTO';
//   @override
//   String get actualTableName => 'PDV_TOTAL_TIPO_PAGAMENTO';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<PdvTotalTipoPagamento> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_PDV_VENDA_CABECALHO')) {
//       context.handle(
//           _idPdvVendaCabecalhoMeta,
//           idPdvVendaCabecalho.isAcceptableOrUnknown(
//               data['ID_PDV_VENDA_CABECALHO']!, _idPdvVendaCabecalhoMeta));
//     }
//     if (data.containsKey('ID_PDV_TIPO_PAGAMENTO')) {
//       context.handle(
//           _idPdvTipoPagamentoMeta,
//           idPdvTipoPagamento.isAcceptableOrUnknown(
//               data['ID_PDV_TIPO_PAGAMENTO']!, _idPdvTipoPagamentoMeta));
//     }
//     if (data.containsKey('DATA_VENDA')) {
//       context.handle(_dataVendaMeta,
//           dataVenda.isAcceptableOrUnknown(data['DATA_VENDA']!, _dataVendaMeta));
//     }
//     if (data.containsKey('HORA_VENDA')) {
//       context.handle(_horaVendaMeta,
//           horaVenda.isAcceptableOrUnknown(data['HORA_VENDA']!, _horaVendaMeta));
//     }
//     if (data.containsKey('SERIE_ECF')) {
//       context.handle(_serieEcfMeta,
//           serieEcf.isAcceptableOrUnknown(data['SERIE_ECF']!, _serieEcfMeta));
//     }
//     if (data.containsKey('COO')) {
//       context.handle(
//           _cooMeta, coo.isAcceptableOrUnknown(data['COO']!, _cooMeta));
//     }
//     if (data.containsKey('CCF')) {
//       context.handle(
//           _ccfMeta, ccf.isAcceptableOrUnknown(data['CCF']!, _ccfMeta));
//     }
//     if (data.containsKey('GNF')) {
//       context.handle(
//           _gnfMeta, gnf.isAcceptableOrUnknown(data['GNF']!, _gnfMeta));
//     }
//     if (data.containsKey('VALOR')) {
//       context.handle(
//           _valorMeta, valor.isAcceptableOrUnknown(data['VALOR']!, _valorMeta));
//     }
//     if (data.containsKey('NSU')) {
//       context.handle(
//           _nsuMeta, nsu.isAcceptableOrUnknown(data['NSU']!, _nsuMeta));
//     }
//     if (data.containsKey('ESTORNO')) {
//       context.handle(_estornoMeta,
//           estorno.isAcceptableOrUnknown(data['ESTORNO']!, _estornoMeta));
//     }
//     if (data.containsKey('REDE')) {
//       context.handle(
//           _redeMeta, rede.isAcceptableOrUnknown(data['REDE']!, _redeMeta));
//     }
//     if (data.containsKey('CARTAO_DC')) {
//       context.handle(_cartaoDcMeta,
//           cartaoDc.isAcceptableOrUnknown(data['CARTAO_DC']!, _cartaoDcMeta));
//     }
//     if (data.containsKey('HASH_REGISTRO')) {
//       context.handle(
//           _hashRegistroMeta,
//           hashRegistro.isAcceptableOrUnknown(
//               data['HASH_REGISTRO']!, _hashRegistroMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   PdvTotalTipoPagamento map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return PdvTotalTipoPagamento(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idPdvVendaCabecalho: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ID_PDV_VENDA_CABECALHO']),
//       idPdvTipoPagamento: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ID_PDV_TIPO_PAGAMENTO']),
//       dataVenda: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_VENDA']),
//       horaVenda: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}HORA_VENDA']),
//       serieEcf: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}SERIE_ECF']),
//       coo: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}COO']),
//       ccf: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CCF']),
//       gnf: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}GNF']),
//       valor: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR']),
//       nsu: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NSU']),
//       estorno: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ESTORNO']),
//       rede: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}REDE']),
//       cartaoDc: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CARTAO_DC']),
//       hashRegistro: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}HASH_REGISTRO']),
//     );
//   }

//   @override
//   $PdvTotalTipoPagamentosTable createAlias(String alias) {
//     return $PdvTotalTipoPagamentosTable(_db, alias);
//   }
// }

// class PdvVendaCabecalhosCompanion extends UpdateCompanion<PdvVendaCabecalho> {
//   final Value<int> id;
//   final Value<int?> idCliente;
//   final Value<int?> idColaborador;
//   final Value<int?> idPdvMovimento;
//   final Value<int?> idEcfDav;
//   final Value<int?> idEcfPreVendaCabecalho;
//   final Value<String?> serieEcf;
//   final Value<int?> cfop;
//   final Value<int?> coo;
//   final Value<int?> ccf;
//   final Value<DateTime?> dataVenda;
//   final Value<String?> horaVenda;
//   final Value<double?> valorVenda;
//   final Value<double?> taxaDesconto;
//   final Value<double?> valorDesconto;
//   final Value<double?> taxaAcrescimo;
//   final Value<double?> valorAcrescimo;
//   final Value<double?> valorFinal;
//   final Value<double?> valorRecebido;
//   final Value<double?> valorTroco;
//   final Value<double?> valorCancelado;
//   final Value<double?> valorTotalProdutos;
//   final Value<double?> valorTotalDocumento;
//   final Value<double?> valorBaseIcms;
//   final Value<double?> valorIcms;
//   final Value<double?> valorIcmsOutras;
//   final Value<double?> valorIssqn;
//   final Value<double?> valorPis;
//   final Value<double?> valorCofins;
//   final Value<double?> valorAcrescimoItens;
//   final Value<double?> valorDescontoItens;
//   final Value<String?> statusVenda;
//   final Value<String?> nomeCliente;
//   final Value<String?> cpfCnpjCliente;
//   final Value<String?> cupomCancelado;
//   final Value<String?> hashRegistro;
//   final Value<String?> tipoOperacao;
//   const PdvVendaCabecalhosCompanion({
//     this.id = const Value.absent(),
//     this.idCliente = const Value.absent(),
//     this.idColaborador = const Value.absent(),
//     this.idPdvMovimento = const Value.absent(),
//     this.idEcfDav = const Value.absent(),
//     this.idEcfPreVendaCabecalho = const Value.absent(),
//     this.serieEcf = const Value.absent(),
//     this.cfop = const Value.absent(),
//     this.coo = const Value.absent(),
//     this.ccf = const Value.absent(),
//     this.dataVenda = const Value.absent(),
//     this.horaVenda = const Value.absent(),
//     this.valorVenda = const Value.absent(),
//     this.taxaDesconto = const Value.absent(),
//     this.valorDesconto = const Value.absent(),
//     this.taxaAcrescimo = const Value.absent(),
//     this.valorAcrescimo = const Value.absent(),
//     this.valorFinal = const Value.absent(),
//     this.valorRecebido = const Value.absent(),
//     this.valorTroco = const Value.absent(),
//     this.valorCancelado = const Value.absent(),
//     this.valorTotalProdutos = const Value.absent(),
//     this.valorTotalDocumento = const Value.absent(),
//     this.valorBaseIcms = const Value.absent(),
//     this.valorIcms = const Value.absent(),
//     this.valorIcmsOutras = const Value.absent(),
//     this.valorIssqn = const Value.absent(),
//     this.valorPis = const Value.absent(),
//     this.valorCofins = const Value.absent(),
//     this.valorAcrescimoItens = const Value.absent(),
//     this.valorDescontoItens = const Value.absent(),
//     this.statusVenda = const Value.absent(),
//     this.nomeCliente = const Value.absent(),
//     this.cpfCnpjCliente = const Value.absent(),
//     this.cupomCancelado = const Value.absent(),
//     this.hashRegistro = const Value.absent(),
//     this.tipoOperacao = const Value.absent(),
//   });
//   PdvVendaCabecalhosCompanion.insert({
//     this.id = const Value.absent(),
//     this.idCliente = const Value.absent(),
//     this.idColaborador = const Value.absent(),
//     this.idPdvMovimento = const Value.absent(),
//     this.idEcfDav = const Value.absent(),
//     this.idEcfPreVendaCabecalho = const Value.absent(),
//     this.serieEcf = const Value.absent(),
//     this.cfop = const Value.absent(),
//     this.coo = const Value.absent(),
//     this.ccf = const Value.absent(),
//     this.dataVenda = const Value.absent(),
//     this.horaVenda = const Value.absent(),
//     this.valorVenda = const Value.absent(),
//     this.taxaDesconto = const Value.absent(),
//     this.valorDesconto = const Value.absent(),
//     this.taxaAcrescimo = const Value.absent(),
//     this.valorAcrescimo = const Value.absent(),
//     this.valorFinal = const Value.absent(),
//     this.valorRecebido = const Value.absent(),
//     this.valorTroco = const Value.absent(),
//     this.valorCancelado = const Value.absent(),
//     this.valorTotalProdutos = const Value.absent(),
//     this.valorTotalDocumento = const Value.absent(),
//     this.valorBaseIcms = const Value.absent(),
//     this.valorIcms = const Value.absent(),
//     this.valorIcmsOutras = const Value.absent(),
//     this.valorIssqn = const Value.absent(),
//     this.valorPis = const Value.absent(),
//     this.valorCofins = const Value.absent(),
//     this.valorAcrescimoItens = const Value.absent(),
//     this.valorDescontoItens = const Value.absent(),
//     this.statusVenda = const Value.absent(),
//     this.nomeCliente = const Value.absent(),
//     this.cpfCnpjCliente = const Value.absent(),
//     this.cupomCancelado = const Value.absent(),
//     this.hashRegistro = const Value.absent(),
//     this.tipoOperacao = const Value.absent(),
//   });
//   static Insertable<PdvVendaCabecalho> custom({
//     Expression<int>? id,
//     Expression<int?>? idCliente,
//     Expression<int?>? idColaborador,
//     Expression<int?>? idPdvMovimento,
//     Expression<int?>? idEcfDav,
//     Expression<int?>? idEcfPreVendaCabecalho,
//     Expression<String?>? serieEcf,
//     Expression<int?>? cfop,
//     Expression<int?>? coo,
//     Expression<int?>? ccf,
//     Expression<DateTime?>? dataVenda,
//     Expression<String?>? horaVenda,
//     Expression<double?>? valorVenda,
//     Expression<double?>? taxaDesconto,
//     Expression<double?>? valorDesconto,
//     Expression<double?>? taxaAcrescimo,
//     Expression<double?>? valorAcrescimo,
//     Expression<double?>? valorFinal,
//     Expression<double?>? valorRecebido,
//     Expression<double?>? valorTroco,
//     Expression<double?>? valorCancelado,
//     Expression<double?>? valorTotalProdutos,
//     Expression<double?>? valorTotalDocumento,
//     Expression<double?>? valorBaseIcms,
//     Expression<double?>? valorIcms,
//     Expression<double?>? valorIcmsOutras,
//     Expression<double?>? valorIssqn,
//     Expression<double?>? valorPis,
//     Expression<double?>? valorCofins,
//     Expression<double?>? valorAcrescimoItens,
//     Expression<double?>? valorDescontoItens,
//     Expression<String?>? statusVenda,
//     Expression<String?>? nomeCliente,
//     Expression<String?>? cpfCnpjCliente,
//     Expression<String?>? cupomCancelado,
//     Expression<String?>? hashRegistro,
//     Expression<String?>? tipoOperacao,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idCliente != null) 'ID_CLIENTE': idCliente,
//       if (idColaborador != null) 'ID_COLABORADOR': idColaborador,
//       if (idPdvMovimento != null) 'ID_PDV_MOVIMENTO': idPdvMovimento,
//       if (idEcfDav != null) 'ID_ECF_DAV': idEcfDav,
//       if (idEcfPreVendaCabecalho != null)
//         'ID_ECF_PRE_VENDA_CABECALHO': idEcfPreVendaCabecalho,
//       if (serieEcf != null) 'SERIE_ECF': serieEcf,
//       if (cfop != null) 'CFOP': cfop,
//       if (coo != null) 'COO': coo,
//       if (ccf != null) 'CCF': ccf,
//       if (dataVenda != null) 'DATA_VENDA': dataVenda,
//       if (horaVenda != null) 'HORA_VENDA': horaVenda,
//       if (valorVenda != null) 'VALOR_VENDA': valorVenda,
//       if (taxaDesconto != null) 'TAXA_DESCONTO': taxaDesconto,
//       if (valorDesconto != null) 'VALOR_DESCONTO': valorDesconto,
//       if (taxaAcrescimo != null) 'TAXA_ACRESCIMO': taxaAcrescimo,
//       if (valorAcrescimo != null) 'VALOR_ACRESCIMO': valorAcrescimo,
//       if (valorFinal != null) 'VALOR_FINAL': valorFinal,
//       if (valorRecebido != null) 'VALOR_RECEBIDO': valorRecebido,
//       if (valorTroco != null) 'VALOR_TROCO': valorTroco,
//       if (valorCancelado != null) 'VALOR_CANCELADO': valorCancelado,
//       if (valorTotalProdutos != null)
//         'VALOR_TOTAL_PRODUTOS': valorTotalProdutos,
//       if (valorTotalDocumento != null)
//         'VALOR_TOTAL_DOCUMENTO': valorTotalDocumento,
//       if (valorBaseIcms != null) 'VALOR_BASE_ICMS': valorBaseIcms,
//       if (valorIcms != null) 'VALOR_ICMS': valorIcms,
//       if (valorIcmsOutras != null) 'VALOR_ICMS_OUTRAS': valorIcmsOutras,
//       if (valorIssqn != null) 'VALOR_ISSQN': valorIssqn,
//       if (valorPis != null) 'VALOR_PIS': valorPis,
//       if (valorCofins != null) 'VALOR_COFINS': valorCofins,
//       if (valorAcrescimoItens != null)
//         'VALOR_ACRESCIMO_ITENS': valorAcrescimoItens,
//       if (valorDescontoItens != null)
//         'VALOR_DESCONTO_ITENS': valorDescontoItens,
//       if (statusVenda != null) 'STATUS_VENDA': statusVenda,
//       if (nomeCliente != null) 'NOME_CLIENTE': nomeCliente,
//       if (cpfCnpjCliente != null) 'CPF_CNPJ_CLIENTE': cpfCnpjCliente,
//       if (cupomCancelado != null) 'CUPOM_CANCELADO': cupomCancelado,
//       if (hashRegistro != null) 'HASH_REGISTRO': hashRegistro,
//       if (tipoOperacao != null) 'TIPO_OPERACAO': tipoOperacao,
//     });
//   }

//   PdvVendaCabecalhosCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idCliente,
//       Value<int?>? idColaborador,
//       Value<int?>? idPdvMovimento,
//       Value<int?>? idEcfDav,
//       Value<int?>? idEcfPreVendaCabecalho,
//       Value<String?>? serieEcf,
//       Value<int?>? cfop,
//       Value<int?>? coo,
//       Value<int?>? ccf,
//       Value<DateTime?>? dataVenda,
//       Value<String?>? horaVenda,
//       Value<double?>? valorVenda,
//       Value<double?>? taxaDesconto,
//       Value<double?>? valorDesconto,
//       Value<double?>? taxaAcrescimo,
//       Value<double?>? valorAcrescimo,
//       Value<double?>? valorFinal,
//       Value<double?>? valorRecebido,
//       Value<double?>? valorTroco,
//       Value<double?>? valorCancelado,
//       Value<double?>? valorTotalProdutos,
//       Value<double?>? valorTotalDocumento,
//       Value<double?>? valorBaseIcms,
//       Value<double?>? valorIcms,
//       Value<double?>? valorIcmsOutras,
//       Value<double?>? valorIssqn,
//       Value<double?>? valorPis,
//       Value<double?>? valorCofins,
//       Value<double?>? valorAcrescimoItens,
//       Value<double?>? valorDescontoItens,
//       Value<String?>? statusVenda,
//       Value<String?>? nomeCliente,
//       Value<String?>? cpfCnpjCliente,
//       Value<String?>? cupomCancelado,
//       Value<String?>? hashRegistro,
//       Value<String?>? tipoOperacao}) {
//     return PdvVendaCabecalhosCompanion(
//       id: id ?? this.id,
//       idCliente: idCliente ?? this.idCliente,
//       idColaborador: idColaborador ?? this.idColaborador,
//       idPdvMovimento: idPdvMovimento ?? this.idPdvMovimento,
//       idEcfDav: idEcfDav ?? this.idEcfDav,
//       idEcfPreVendaCabecalho:
//           idEcfPreVendaCabecalho ?? this.idEcfPreVendaCabecalho,
//       serieEcf: serieEcf ?? this.serieEcf,
//       cfop: cfop ?? this.cfop,
//       coo: coo ?? this.coo,
//       ccf: ccf ?? this.ccf,
//       dataVenda: dataVenda ?? this.dataVenda,
//       horaVenda: horaVenda ?? this.horaVenda,
//       valorVenda: valorVenda ?? this.valorVenda,
//       taxaDesconto: taxaDesconto ?? this.taxaDesconto,
//       valorDesconto: valorDesconto ?? this.valorDesconto,
//       taxaAcrescimo: taxaAcrescimo ?? this.taxaAcrescimo,
//       valorAcrescimo: valorAcrescimo ?? this.valorAcrescimo,
//       valorFinal: valorFinal ?? this.valorFinal,
//       valorRecebido: valorRecebido ?? this.valorRecebido,
//       valorTroco: valorTroco ?? this.valorTroco,
//       valorCancelado: valorCancelado ?? this.valorCancelado,
//       valorTotalProdutos: valorTotalProdutos ?? this.valorTotalProdutos,
//       valorTotalDocumento: valorTotalDocumento ?? this.valorTotalDocumento,
//       valorBaseIcms: valorBaseIcms ?? this.valorBaseIcms,
//       valorIcms: valorIcms ?? this.valorIcms,
//       valorIcmsOutras: valorIcmsOutras ?? this.valorIcmsOutras,
//       valorIssqn: valorIssqn ?? this.valorIssqn,
//       valorPis: valorPis ?? this.valorPis,
//       valorCofins: valorCofins ?? this.valorCofins,
//       valorAcrescimoItens: valorAcrescimoItens ?? this.valorAcrescimoItens,
//       valorDescontoItens: valorDescontoItens ?? this.valorDescontoItens,
//       statusVenda: statusVenda ?? this.statusVenda,
//       nomeCliente: nomeCliente ?? this.nomeCliente,
//       cpfCnpjCliente: cpfCnpjCliente ?? this.cpfCnpjCliente,
//       cupomCancelado: cupomCancelado ?? this.cupomCancelado,
//       hashRegistro: hashRegistro ?? this.hashRegistro,
//       tipoOperacao: tipoOperacao ?? this.tipoOperacao,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idCliente.present) {
//       map['ID_CLIENTE'] = Variable<int?>(idCliente.value);
//     }
//     if (idColaborador.present) {
//       map['ID_COLABORADOR'] = Variable<int?>(idColaborador.value);
//     }
//     if (idPdvMovimento.present) {
//       map['ID_PDV_MOVIMENTO'] = Variable<int?>(idPdvMovimento.value);
//     }
//     if (idEcfDav.present) {
//       map['ID_ECF_DAV'] = Variable<int?>(idEcfDav.value);
//     }
//     if (idEcfPreVendaCabecalho.present) {
//       map['ID_ECF_PRE_VENDA_CABECALHO'] =
//           Variable<int?>(idEcfPreVendaCabecalho.value);
//     }
//     if (serieEcf.present) {
//       map['SERIE_ECF'] = Variable<String?>(serieEcf.value);
//     }
//     if (cfop.present) {
//       map['CFOP'] = Variable<int?>(cfop.value);
//     }
//     if (coo.present) {
//       map['COO'] = Variable<int?>(coo.value);
//     }
//     if (ccf.present) {
//       map['CCF'] = Variable<int?>(ccf.value);
//     }
//     if (dataVenda.present) {
//       map['DATA_VENDA'] = Variable<DateTime?>(dataVenda.value);
//     }
//     if (horaVenda.present) {
//       map['HORA_VENDA'] = Variable<String?>(horaVenda.value);
//     }
//     if (valorVenda.present) {
//       map['VALOR_VENDA'] = Variable<double?>(valorVenda.value);
//     }
//     if (taxaDesconto.present) {
//       map['TAXA_DESCONTO'] = Variable<double?>(taxaDesconto.value);
//     }
//     if (valorDesconto.present) {
//       map['VALOR_DESCONTO'] = Variable<double?>(valorDesconto.value);
//     }
//     if (taxaAcrescimo.present) {
//       map['TAXA_ACRESCIMO'] = Variable<double?>(taxaAcrescimo.value);
//     }
//     if (valorAcrescimo.present) {
//       map['VALOR_ACRESCIMO'] = Variable<double?>(valorAcrescimo.value);
//     }
//     if (valorFinal.present) {
//       map['VALOR_FINAL'] = Variable<double?>(valorFinal.value);
//     }
//     if (valorRecebido.present) {
//       map['VALOR_RECEBIDO'] = Variable<double?>(valorRecebido.value);
//     }
//     if (valorTroco.present) {
//       map['VALOR_TROCO'] = Variable<double?>(valorTroco.value);
//     }
//     if (valorCancelado.present) {
//       map['VALOR_CANCELADO'] = Variable<double?>(valorCancelado.value);
//     }
//     if (valorTotalProdutos.present) {
//       map['VALOR_TOTAL_PRODUTOS'] = Variable<double?>(valorTotalProdutos.value);
//     }
//     if (valorTotalDocumento.present) {
//       map['VALOR_TOTAL_DOCUMENTO'] =
//           Variable<double?>(valorTotalDocumento.value);
//     }
//     if (valorBaseIcms.present) {
//       map['VALOR_BASE_ICMS'] = Variable<double?>(valorBaseIcms.value);
//     }
//     if (valorIcms.present) {
//       map['VALOR_ICMS'] = Variable<double?>(valorIcms.value);
//     }
//     if (valorIcmsOutras.present) {
//       map['VALOR_ICMS_OUTRAS'] = Variable<double?>(valorIcmsOutras.value);
//     }
//     if (valorIssqn.present) {
//       map['VALOR_ISSQN'] = Variable<double?>(valorIssqn.value);
//     }
//     if (valorPis.present) {
//       map['VALOR_PIS'] = Variable<double?>(valorPis.value);
//     }
//     if (valorCofins.present) {
//       map['VALOR_COFINS'] = Variable<double?>(valorCofins.value);
//     }
//     if (valorAcrescimoItens.present) {
//       map['VALOR_ACRESCIMO_ITENS'] =
//           Variable<double?>(valorAcrescimoItens.value);
//     }
//     if (valorDescontoItens.present) {
//       map['VALOR_DESCONTO_ITENS'] = Variable<double?>(valorDescontoItens.value);
//     }
//     if (statusVenda.present) {
//       map['STATUS_VENDA'] = Variable<String?>(statusVenda.value);
//     }
//     if (nomeCliente.present) {
//       map['NOME_CLIENTE'] = Variable<String?>(nomeCliente.value);
//     }
//     if (cpfCnpjCliente.present) {
//       map['CPF_CNPJ_CLIENTE'] = Variable<String?>(cpfCnpjCliente.value);
//     }
//     if (cupomCancelado.present) {
//       map['CUPOM_CANCELADO'] = Variable<String?>(cupomCancelado.value);
//     }
//     if (hashRegistro.present) {
//       map['HASH_REGISTRO'] = Variable<String?>(hashRegistro.value);
//     }
//     if (tipoOperacao.present) {
//       map['TIPO_OPERACAO'] = Variable<String?>(tipoOperacao.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('PdvVendaCabecalhosCompanion(')
//           ..write('id: $id, ')
//           ..write('idCliente: $idCliente, ')
//           ..write('idColaborador: $idColaborador, ')
//           ..write('idPdvMovimento: $idPdvMovimento, ')
//           ..write('idEcfDav: $idEcfDav, ')
//           ..write('idEcfPreVendaCabecalho: $idEcfPreVendaCabecalho, ')
//           ..write('serieEcf: $serieEcf, ')
//           ..write('cfop: $cfop, ')
//           ..write('coo: $coo, ')
//           ..write('ccf: $ccf, ')
//           ..write('dataVenda: $dataVenda, ')
//           ..write('horaVenda: $horaVenda, ')
//           ..write('valorVenda: $valorVenda, ')
//           ..write('taxaDesconto: $taxaDesconto, ')
//           ..write('valorDesconto: $valorDesconto, ')
//           ..write('taxaAcrescimo: $taxaAcrescimo, ')
//           ..write('valorAcrescimo: $valorAcrescimo, ')
//           ..write('valorFinal: $valorFinal, ')
//           ..write('valorRecebido: $valorRecebido, ')
//           ..write('valorTroco: $valorTroco, ')
//           ..write('valorCancelado: $valorCancelado, ')
//           ..write('valorTotalProdutos: $valorTotalProdutos, ')
//           ..write('valorTotalDocumento: $valorTotalDocumento, ')
//           ..write('valorBaseIcms: $valorBaseIcms, ')
//           ..write('valorIcms: $valorIcms, ')
//           ..write('valorIcmsOutras: $valorIcmsOutras, ')
//           ..write('valorIssqn: $valorIssqn, ')
//           ..write('valorPis: $valorPis, ')
//           ..write('valorCofins: $valorCofins, ')
//           ..write('valorAcrescimoItens: $valorAcrescimoItens, ')
//           ..write('valorDescontoItens: $valorDescontoItens, ')
//           ..write('statusVenda: $statusVenda, ')
//           ..write('nomeCliente: $nomeCliente, ')
//           ..write('cpfCnpjCliente: $cpfCnpjCliente, ')
//           ..write('cupomCancelado: $cupomCancelado, ')
//           ..write('hashRegistro: $hashRegistro, ')
//           ..write('tipoOperacao: $tipoOperacao')
//           ..write(')'))
//         .toString();
//   }
// }

// class $PdvVendaCabecalhosTable extends PdvVendaCabecalhos
//     with TableInfo<$PdvVendaCabecalhosTable, PdvVendaCabecalho> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $PdvVendaCabecalhosTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idClienteMeta = const VerificationMeta('idCliente');
//   late final GeneratedColumn<int?> idCliente = GeneratedColumn<int?>(
//       'ID_CLIENTE', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES CLIENTE(ID)');
//   final VerificationMeta _idColaboradorMeta =
//       const VerificationMeta('idColaborador');
//   late final GeneratedColumn<int?> idColaborador = GeneratedColumn<int?>(
//       'ID_COLABORADOR', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES COLABORADOR(ID)');
//   final VerificationMeta _idPdvMovimentoMeta =
//       const VerificationMeta('idPdvMovimento');
//   late final GeneratedColumn<int?> idPdvMovimento = GeneratedColumn<int?>(
//       'ID_PDV_MOVIMENTO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES PDV_MOVIMENTO(ID)');
//   final VerificationMeta _idEcfDavMeta = const VerificationMeta('idEcfDav');
//   late final GeneratedColumn<int?> idEcfDav = GeneratedColumn<int?>(
//       'ID_ECF_DAV', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES ECF_DAV(ID)');
//   final VerificationMeta _idEcfPreVendaCabecalhoMeta =
//       const VerificationMeta('idEcfPreVendaCabecalho');
//   late final GeneratedColumn<int?> idEcfPreVendaCabecalho =
//       GeneratedColumn<int?>('ID_ECF_PRE_VENDA_CABECALHO', aliasedName, true,
//           typeName: 'INTEGER',
//           requiredDuringInsert: false,
//           $customConstraints:
//               'NULLABLE REFERENCES ECF_PRE_VENDA_CABECALHO(ID)');
//   final VerificationMeta _serieEcfMeta = const VerificationMeta('serieEcf');
//   late final GeneratedColumn<String?> serieEcf = GeneratedColumn<String?>(
//       'SERIE_ECF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cfopMeta = const VerificationMeta('cfop');
//   late final GeneratedColumn<int?> cfop = GeneratedColumn<int?>(
//       'CFOP', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _cooMeta = const VerificationMeta('coo');
//   late final GeneratedColumn<int?> coo = GeneratedColumn<int?>(
//       'COO', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _ccfMeta = const VerificationMeta('ccf');
//   late final GeneratedColumn<int?> ccf = GeneratedColumn<int?>(
//       'CCF', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _dataVendaMeta = const VerificationMeta('dataVenda');
//   late final GeneratedColumn<DateTime?> dataVenda = GeneratedColumn<DateTime?>(
//       'DATA_VENDA', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _horaVendaMeta = const VerificationMeta('horaVenda');
//   late final GeneratedColumn<String?> horaVenda = GeneratedColumn<String?>(
//       'HORA_VENDA', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _valorVendaMeta = const VerificationMeta('valorVenda');
//   late final GeneratedColumn<double?> valorVenda = GeneratedColumn<double?>(
//       'VALOR_VENDA', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _taxaDescontoMeta =
//       const VerificationMeta('taxaDesconto');
//   late final GeneratedColumn<double?> taxaDesconto = GeneratedColumn<double?>(
//       'TAXA_DESCONTO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorDescontoMeta =
//       const VerificationMeta('valorDesconto');
//   late final GeneratedColumn<double?> valorDesconto = GeneratedColumn<double?>(
//       'VALOR_DESCONTO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _taxaAcrescimoMeta =
//       const VerificationMeta('taxaAcrescimo');
//   late final GeneratedColumn<double?> taxaAcrescimo = GeneratedColumn<double?>(
//       'TAXA_ACRESCIMO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorAcrescimoMeta =
//       const VerificationMeta('valorAcrescimo');
//   late final GeneratedColumn<double?> valorAcrescimo = GeneratedColumn<double?>(
//       'VALOR_ACRESCIMO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorFinalMeta = const VerificationMeta('valorFinal');
//   late final GeneratedColumn<double?> valorFinal = GeneratedColumn<double?>(
//       'VALOR_FINAL', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorRecebidoMeta =
//       const VerificationMeta('valorRecebido');
//   late final GeneratedColumn<double?> valorRecebido = GeneratedColumn<double?>(
//       'VALOR_RECEBIDO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorTrocoMeta = const VerificationMeta('valorTroco');
//   late final GeneratedColumn<double?> valorTroco = GeneratedColumn<double?>(
//       'VALOR_TROCO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorCanceladoMeta =
//       const VerificationMeta('valorCancelado');
//   late final GeneratedColumn<double?> valorCancelado = GeneratedColumn<double?>(
//       'VALOR_CANCELADO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorTotalProdutosMeta =
//       const VerificationMeta('valorTotalProdutos');
//   late final GeneratedColumn<double?> valorTotalProdutos =
//       GeneratedColumn<double?>('VALOR_TOTAL_PRODUTOS', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorTotalDocumentoMeta =
//       const VerificationMeta('valorTotalDocumento');
//   late final GeneratedColumn<double?> valorTotalDocumento =
//       GeneratedColumn<double?>('VALOR_TOTAL_DOCUMENTO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorBaseIcmsMeta =
//       const VerificationMeta('valorBaseIcms');
//   late final GeneratedColumn<double?> valorBaseIcms = GeneratedColumn<double?>(
//       'VALOR_BASE_ICMS', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorIcmsMeta = const VerificationMeta('valorIcms');
//   late final GeneratedColumn<double?> valorIcms = GeneratedColumn<double?>(
//       'VALOR_ICMS', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorIcmsOutrasMeta =
//       const VerificationMeta('valorIcmsOutras');
//   late final GeneratedColumn<double?> valorIcmsOutras =
//       GeneratedColumn<double?>('VALOR_ICMS_OUTRAS', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorIssqnMeta = const VerificationMeta('valorIssqn');
//   late final GeneratedColumn<double?> valorIssqn = GeneratedColumn<double?>(
//       'VALOR_ISSQN', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorPisMeta = const VerificationMeta('valorPis');
//   late final GeneratedColumn<double?> valorPis = GeneratedColumn<double?>(
//       'VALOR_PIS', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorCofinsMeta =
//       const VerificationMeta('valorCofins');
//   late final GeneratedColumn<double?> valorCofins = GeneratedColumn<double?>(
//       'VALOR_COFINS', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorAcrescimoItensMeta =
//       const VerificationMeta('valorAcrescimoItens');
//   late final GeneratedColumn<double?> valorAcrescimoItens =
//       GeneratedColumn<double?>('VALOR_ACRESCIMO_ITENS', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorDescontoItensMeta =
//       const VerificationMeta('valorDescontoItens');
//   late final GeneratedColumn<double?> valorDescontoItens =
//       GeneratedColumn<double?>('VALOR_DESCONTO_ITENS', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _statusVendaMeta =
//       const VerificationMeta('statusVenda');
//   late final GeneratedColumn<String?> statusVenda = GeneratedColumn<String?>(
//       'STATUS_VENDA', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _nomeClienteMeta =
//       const VerificationMeta('nomeCliente');
//   late final GeneratedColumn<String?> nomeCliente = GeneratedColumn<String?>(
//       'NOME_CLIENTE', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cpfCnpjClienteMeta =
//       const VerificationMeta('cpfCnpjCliente');
//   late final GeneratedColumn<String?> cpfCnpjCliente = GeneratedColumn<String?>(
//       'CPF_CNPJ_CLIENTE', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cupomCanceladoMeta =
//       const VerificationMeta('cupomCancelado');
//   late final GeneratedColumn<String?> cupomCancelado = GeneratedColumn<String?>(
//       'CUPOM_CANCELADO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _hashRegistroMeta =
//       const VerificationMeta('hashRegistro');
//   late final GeneratedColumn<String?> hashRegistro = GeneratedColumn<String?>(
//       'HASH_REGISTRO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 32),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _tipoOperacaoMeta =
//       const VerificationMeta('tipoOperacao');
//   late final GeneratedColumn<String?> tipoOperacao = GeneratedColumn<String?>(
//       'TIPO_OPERACAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 3),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idCliente,
//         idColaborador,
//         idPdvMovimento,
//         idEcfDav,
//         idEcfPreVendaCabecalho,
//         serieEcf,
//         cfop,
//         coo,
//         ccf,
//         dataVenda,
//         horaVenda,
//         valorVenda,
//         taxaDesconto,
//         valorDesconto,
//         taxaAcrescimo,
//         valorAcrescimo,
//         valorFinal,
//         valorRecebido,
//         valorTroco,
//         valorCancelado,
//         valorTotalProdutos,
//         valorTotalDocumento,
//         valorBaseIcms,
//         valorIcms,
//         valorIcmsOutras,
//         valorIssqn,
//         valorPis,
//         valorCofins,
//         valorAcrescimoItens,
//         valorDescontoItens,
//         statusVenda,
//         nomeCliente,
//         cpfCnpjCliente,
//         cupomCancelado,
//         hashRegistro,
//         tipoOperacao
//       ];
//   @override
//   String get aliasedName => _alias ?? 'PDV_VENDA_CABECALHO';
//   @override
//   String get actualTableName => 'PDV_VENDA_CABECALHO';
//   @override
//   VerificationContext validateIntegrity(Insertable<PdvVendaCabecalho> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_CLIENTE')) {
//       context.handle(_idClienteMeta,
//           idCliente.isAcceptableOrUnknown(data['ID_CLIENTE']!, _idClienteMeta));
//     }
//     if (data.containsKey('ID_COLABORADOR')) {
//       context.handle(
//           _idColaboradorMeta,
//           idColaborador.isAcceptableOrUnknown(
//               data['ID_COLABORADOR']!, _idColaboradorMeta));
//     }
//     if (data.containsKey('ID_PDV_MOVIMENTO')) {
//       context.handle(
//           _idPdvMovimentoMeta,
//           idPdvMovimento.isAcceptableOrUnknown(
//               data['ID_PDV_MOVIMENTO']!, _idPdvMovimentoMeta));
//     }
//     if (data.containsKey('ID_ECF_DAV')) {
//       context.handle(_idEcfDavMeta,
//           idEcfDav.isAcceptableOrUnknown(data['ID_ECF_DAV']!, _idEcfDavMeta));
//     }
//     if (data.containsKey('ID_ECF_PRE_VENDA_CABECALHO')) {
//       context.handle(
//           _idEcfPreVendaCabecalhoMeta,
//           idEcfPreVendaCabecalho.isAcceptableOrUnknown(
//               data['ID_ECF_PRE_VENDA_CABECALHO']!,
//               _idEcfPreVendaCabecalhoMeta));
//     }
//     if (data.containsKey('SERIE_ECF')) {
//       context.handle(_serieEcfMeta,
//           serieEcf.isAcceptableOrUnknown(data['SERIE_ECF']!, _serieEcfMeta));
//     }
//     if (data.containsKey('CFOP')) {
//       context.handle(
//           _cfopMeta, cfop.isAcceptableOrUnknown(data['CFOP']!, _cfopMeta));
//     }
//     if (data.containsKey('COO')) {
//       context.handle(
//           _cooMeta, coo.isAcceptableOrUnknown(data['COO']!, _cooMeta));
//     }
//     if (data.containsKey('CCF')) {
//       context.handle(
//           _ccfMeta, ccf.isAcceptableOrUnknown(data['CCF']!, _ccfMeta));
//     }
//     if (data.containsKey('DATA_VENDA')) {
//       context.handle(_dataVendaMeta,
//           dataVenda.isAcceptableOrUnknown(data['DATA_VENDA']!, _dataVendaMeta));
//     }
//     if (data.containsKey('HORA_VENDA')) {
//       context.handle(_horaVendaMeta,
//           horaVenda.isAcceptableOrUnknown(data['HORA_VENDA']!, _horaVendaMeta));
//     }
//     if (data.containsKey('VALOR_VENDA')) {
//       context.handle(
//           _valorVendaMeta,
//           valorVenda.isAcceptableOrUnknown(
//               data['VALOR_VENDA']!, _valorVendaMeta));
//     }
//     if (data.containsKey('TAXA_DESCONTO')) {
//       context.handle(
//           _taxaDescontoMeta,
//           taxaDesconto.isAcceptableOrUnknown(
//               data['TAXA_DESCONTO']!, _taxaDescontoMeta));
//     }
//     if (data.containsKey('VALOR_DESCONTO')) {
//       context.handle(
//           _valorDescontoMeta,
//           valorDesconto.isAcceptableOrUnknown(
//               data['VALOR_DESCONTO']!, _valorDescontoMeta));
//     }
//     if (data.containsKey('TAXA_ACRESCIMO')) {
//       context.handle(
//           _taxaAcrescimoMeta,
//           taxaAcrescimo.isAcceptableOrUnknown(
//               data['TAXA_ACRESCIMO']!, _taxaAcrescimoMeta));
//     }
//     if (data.containsKey('VALOR_ACRESCIMO')) {
//       context.handle(
//           _valorAcrescimoMeta,
//           valorAcrescimo.isAcceptableOrUnknown(
//               data['VALOR_ACRESCIMO']!, _valorAcrescimoMeta));
//     }
//     if (data.containsKey('VALOR_FINAL')) {
//       context.handle(
//           _valorFinalMeta,
//           valorFinal.isAcceptableOrUnknown(
//               data['VALOR_FINAL']!, _valorFinalMeta));
//     }
//     if (data.containsKey('VALOR_RECEBIDO')) {
//       context.handle(
//           _valorRecebidoMeta,
//           valorRecebido.isAcceptableOrUnknown(
//               data['VALOR_RECEBIDO']!, _valorRecebidoMeta));
//     }
//     if (data.containsKey('VALOR_TROCO')) {
//       context.handle(
//           _valorTrocoMeta,
//           valorTroco.isAcceptableOrUnknown(
//               data['VALOR_TROCO']!, _valorTrocoMeta));
//     }
//     if (data.containsKey('VALOR_CANCELADO')) {
//       context.handle(
//           _valorCanceladoMeta,
//           valorCancelado.isAcceptableOrUnknown(
//               data['VALOR_CANCELADO']!, _valorCanceladoMeta));
//     }
//     if (data.containsKey('VALOR_TOTAL_PRODUTOS')) {
//       context.handle(
//           _valorTotalProdutosMeta,
//           valorTotalProdutos.isAcceptableOrUnknown(
//               data['VALOR_TOTAL_PRODUTOS']!, _valorTotalProdutosMeta));
//     }
//     if (data.containsKey('VALOR_TOTAL_DOCUMENTO')) {
//       context.handle(
//           _valorTotalDocumentoMeta,
//           valorTotalDocumento.isAcceptableOrUnknown(
//               data['VALOR_TOTAL_DOCUMENTO']!, _valorTotalDocumentoMeta));
//     }
//     if (data.containsKey('VALOR_BASE_ICMS')) {
//       context.handle(
//           _valorBaseIcmsMeta,
//           valorBaseIcms.isAcceptableOrUnknown(
//               data['VALOR_BASE_ICMS']!, _valorBaseIcmsMeta));
//     }
//     if (data.containsKey('VALOR_ICMS')) {
//       context.handle(_valorIcmsMeta,
//           valorIcms.isAcceptableOrUnknown(data['VALOR_ICMS']!, _valorIcmsMeta));
//     }
//     if (data.containsKey('VALOR_ICMS_OUTRAS')) {
//       context.handle(
//           _valorIcmsOutrasMeta,
//           valorIcmsOutras.isAcceptableOrUnknown(
//               data['VALOR_ICMS_OUTRAS']!, _valorIcmsOutrasMeta));
//     }
//     if (data.containsKey('VALOR_ISSQN')) {
//       context.handle(
//           _valorIssqnMeta,
//           valorIssqn.isAcceptableOrUnknown(
//               data['VALOR_ISSQN']!, _valorIssqnMeta));
//     }
//     if (data.containsKey('VALOR_PIS')) {
//       context.handle(_valorPisMeta,
//           valorPis.isAcceptableOrUnknown(data['VALOR_PIS']!, _valorPisMeta));
//     }
//     if (data.containsKey('VALOR_COFINS')) {
//       context.handle(
//           _valorCofinsMeta,
//           valorCofins.isAcceptableOrUnknown(
//               data['VALOR_COFINS']!, _valorCofinsMeta));
//     }
//     if (data.containsKey('VALOR_ACRESCIMO_ITENS')) {
//       context.handle(
//           _valorAcrescimoItensMeta,
//           valorAcrescimoItens.isAcceptableOrUnknown(
//               data['VALOR_ACRESCIMO_ITENS']!, _valorAcrescimoItensMeta));
//     }
//     if (data.containsKey('VALOR_DESCONTO_ITENS')) {
//       context.handle(
//           _valorDescontoItensMeta,
//           valorDescontoItens.isAcceptableOrUnknown(
//               data['VALOR_DESCONTO_ITENS']!, _valorDescontoItensMeta));
//     }
//     if (data.containsKey('STATUS_VENDA')) {
//       context.handle(
//           _statusVendaMeta,
//           statusVenda.isAcceptableOrUnknown(
//               data['STATUS_VENDA']!, _statusVendaMeta));
//     }
//     if (data.containsKey('NOME_CLIENTE')) {
//       context.handle(
//           _nomeClienteMeta,
//           nomeCliente.isAcceptableOrUnknown(
//               data['NOME_CLIENTE']!, _nomeClienteMeta));
//     }
//     if (data.containsKey('CPF_CNPJ_CLIENTE')) {
//       context.handle(
//           _cpfCnpjClienteMeta,
//           cpfCnpjCliente.isAcceptableOrUnknown(
//               data['CPF_CNPJ_CLIENTE']!, _cpfCnpjClienteMeta));
//     }
//     if (data.containsKey('CUPOM_CANCELADO')) {
//       context.handle(
//           _cupomCanceladoMeta,
//           cupomCancelado.isAcceptableOrUnknown(
//               data['CUPOM_CANCELADO']!, _cupomCanceladoMeta));
//     }
//     if (data.containsKey('HASH_REGISTRO')) {
//       context.handle(
//           _hashRegistroMeta,
//           hashRegistro.isAcceptableOrUnknown(
//               data['HASH_REGISTRO']!, _hashRegistroMeta));
//     }
//     if (data.containsKey('TIPO_OPERACAO')) {
//       context.handle(
//           _tipoOperacaoMeta,
//           tipoOperacao.isAcceptableOrUnknown(
//               data['TIPO_OPERACAO']!, _tipoOperacaoMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   PdvVendaCabecalho map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return PdvVendaCabecalho(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idCliente: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_CLIENTE']),
//       idColaborador: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_COLABORADOR']),
//       idPdvMovimento: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_PDV_MOVIMENTO']),
//       idEcfDav: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_ECF_DAV']),
//       idEcfPreVendaCabecalho: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ID_ECF_PRE_VENDA_CABECALHO']),
//       serieEcf: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}SERIE_ECF']),
//       cfop: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CFOP']),
//       coo: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}COO']),
//       ccf: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CCF']),
//       dataVenda: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_VENDA']),
//       horaVenda: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}HORA_VENDA']),
//       valorVenda: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_VENDA']),
//       taxaDesconto: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TAXA_DESCONTO']),
//       valorDesconto: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_DESCONTO']),
//       taxaAcrescimo: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TAXA_ACRESCIMO']),
//       valorAcrescimo: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_ACRESCIMO']),
//       valorFinal: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_FINAL']),
//       valorRecebido: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_RECEBIDO']),
//       valorTroco: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_TROCO']),
//       valorCancelado: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_CANCELADO']),
//       valorTotalProdutos: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_TOTAL_PRODUTOS']),
//       valorTotalDocumento: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_TOTAL_DOCUMENTO']),
//       valorBaseIcms: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_BASE_ICMS']),
//       valorIcms: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_ICMS']),
//       valorIcmsOutras: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_ICMS_OUTRAS']),
//       valorIssqn: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_ISSQN']),
//       valorPis: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_PIS']),
//       valorCofins: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_COFINS']),
//       valorAcrescimoItens: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_ACRESCIMO_ITENS']),
//       valorDescontoItens: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_DESCONTO_ITENS']),
//       statusVenda: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}STATUS_VENDA']),
//       nomeCliente: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NOME_CLIENTE']),
//       cpfCnpjCliente: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CPF_CNPJ_CLIENTE']),
//       cupomCancelado: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CUPOM_CANCELADO']),
//       hashRegistro: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}HASH_REGISTRO']),
//       tipoOperacao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TIPO_OPERACAO']),
//     );
//   }

//   @override
//   $PdvVendaCabecalhosTable createAlias(String alias) {
//     return $PdvVendaCabecalhosTable(_db, alias);
//   }
// }

// class PdvVendaDetalhesCompanion extends UpdateCompanion<PdvVendaDetalhe> {
//   final Value<int> id;
//   final Value<int?> idProduto;
//   final Value<int?> idPdvVendaCabecalho;
//   final Value<int?> cfop;
//   final Value<String?> gtin;
//   final Value<int?> ccf;
//   final Value<int?> coo;
//   final Value<String?> serieEcf;
//   final Value<int?> item;
//   final Value<double?> quantidade;
//   final Value<double?> valorUnitario;
//   final Value<double?> valorTotal;
//   final Value<double?> valorTotalItem;
//   final Value<double?> valorBaseIcms;
//   final Value<double?> taxaIcms;
//   final Value<double?> valorIcms;
//   final Value<double?> taxaDesconto;
//   final Value<double?> valorDesconto;
//   final Value<double?> taxaIssqn;
//   final Value<double?> valorIssqn;
//   final Value<double?> taxaPis;
//   final Value<double?> valorPis;
//   final Value<double?> taxaCofins;
//   final Value<double?> valorCofins;
//   final Value<double?> taxaAcrescimo;
//   final Value<double?> valorAcrescimo;
//   final Value<String?> totalizadorParcial;
//   final Value<String?> cst;
//   final Value<String?> cancelado;
//   final Value<String?> movimentaEstoque;
//   final Value<String?> ecfIcmsSt;
//   final Value<double?> valorImpostoFederal;
//   final Value<double?> valorImpostoEstadual;
//   final Value<double?> valorImpostoMunicipal;
//   final Value<String?> hashRegistro;
//   const PdvVendaDetalhesCompanion({
//     this.id = const Value.absent(),
//     this.idProduto = const Value.absent(),
//     this.idPdvVendaCabecalho = const Value.absent(),
//     this.cfop = const Value.absent(),
//     this.gtin = const Value.absent(),
//     this.ccf = const Value.absent(),
//     this.coo = const Value.absent(),
//     this.serieEcf = const Value.absent(),
//     this.item = const Value.absent(),
//     this.quantidade = const Value.absent(),
//     this.valorUnitario = const Value.absent(),
//     this.valorTotal = const Value.absent(),
//     this.valorTotalItem = const Value.absent(),
//     this.valorBaseIcms = const Value.absent(),
//     this.taxaIcms = const Value.absent(),
//     this.valorIcms = const Value.absent(),
//     this.taxaDesconto = const Value.absent(),
//     this.valorDesconto = const Value.absent(),
//     this.taxaIssqn = const Value.absent(),
//     this.valorIssqn = const Value.absent(),
//     this.taxaPis = const Value.absent(),
//     this.valorPis = const Value.absent(),
//     this.taxaCofins = const Value.absent(),
//     this.valorCofins = const Value.absent(),
//     this.taxaAcrescimo = const Value.absent(),
//     this.valorAcrescimo = const Value.absent(),
//     this.totalizadorParcial = const Value.absent(),
//     this.cst = const Value.absent(),
//     this.cancelado = const Value.absent(),
//     this.movimentaEstoque = const Value.absent(),
//     this.ecfIcmsSt = const Value.absent(),
//     this.valorImpostoFederal = const Value.absent(),
//     this.valorImpostoEstadual = const Value.absent(),
//     this.valorImpostoMunicipal = const Value.absent(),
//     this.hashRegistro = const Value.absent(),
//   });
//   PdvVendaDetalhesCompanion.insert({
//     this.id = const Value.absent(),
//     this.idProduto = const Value.absent(),
//     this.idPdvVendaCabecalho = const Value.absent(),
//     this.cfop = const Value.absent(),
//     this.gtin = const Value.absent(),
//     this.ccf = const Value.absent(),
//     this.coo = const Value.absent(),
//     this.serieEcf = const Value.absent(),
//     this.item = const Value.absent(),
//     this.quantidade = const Value.absent(),
//     this.valorUnitario = const Value.absent(),
//     this.valorTotal = const Value.absent(),
//     this.valorTotalItem = const Value.absent(),
//     this.valorBaseIcms = const Value.absent(),
//     this.taxaIcms = const Value.absent(),
//     this.valorIcms = const Value.absent(),
//     this.taxaDesconto = const Value.absent(),
//     this.valorDesconto = const Value.absent(),
//     this.taxaIssqn = const Value.absent(),
//     this.valorIssqn = const Value.absent(),
//     this.taxaPis = const Value.absent(),
//     this.valorPis = const Value.absent(),
//     this.taxaCofins = const Value.absent(),
//     this.valorCofins = const Value.absent(),
//     this.taxaAcrescimo = const Value.absent(),
//     this.valorAcrescimo = const Value.absent(),
//     this.totalizadorParcial = const Value.absent(),
//     this.cst = const Value.absent(),
//     this.cancelado = const Value.absent(),
//     this.movimentaEstoque = const Value.absent(),
//     this.ecfIcmsSt = const Value.absent(),
//     this.valorImpostoFederal = const Value.absent(),
//     this.valorImpostoEstadual = const Value.absent(),
//     this.valorImpostoMunicipal = const Value.absent(),
//     this.hashRegistro = const Value.absent(),
//   });
//   static Insertable<PdvVendaDetalhe> custom({
//     Expression<int>? id,
//     Expression<int?>? idProduto,
//     Expression<int?>? idPdvVendaCabecalho,
//     Expression<int?>? cfop,
//     Expression<String?>? gtin,
//     Expression<int?>? ccf,
//     Expression<int?>? coo,
//     Expression<String?>? serieEcf,
//     Expression<int?>? item,
//     Expression<double?>? quantidade,
//     Expression<double?>? valorUnitario,
//     Expression<double?>? valorTotal,
//     Expression<double?>? valorTotalItem,
//     Expression<double?>? valorBaseIcms,
//     Expression<double?>? taxaIcms,
//     Expression<double?>? valorIcms,
//     Expression<double?>? taxaDesconto,
//     Expression<double?>? valorDesconto,
//     Expression<double?>? taxaIssqn,
//     Expression<double?>? valorIssqn,
//     Expression<double?>? taxaPis,
//     Expression<double?>? valorPis,
//     Expression<double?>? taxaCofins,
//     Expression<double?>? valorCofins,
//     Expression<double?>? taxaAcrescimo,
//     Expression<double?>? valorAcrescimo,
//     Expression<String?>? totalizadorParcial,
//     Expression<String?>? cst,
//     Expression<String?>? cancelado,
//     Expression<String?>? movimentaEstoque,
//     Expression<String?>? ecfIcmsSt,
//     Expression<double?>? valorImpostoFederal,
//     Expression<double?>? valorImpostoEstadual,
//     Expression<double?>? valorImpostoMunicipal,
//     Expression<String?>? hashRegistro,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idProduto != null) 'ID_PRODUTO': idProduto,
//       if (idPdvVendaCabecalho != null)
//         'ID_PDV_VENDA_CABECALHO': idPdvVendaCabecalho,
//       if (cfop != null) 'CFOP': cfop,
//       if (gtin != null) 'GTIN': gtin,
//       if (ccf != null) 'CCF': ccf,
//       if (coo != null) 'COO': coo,
//       if (serieEcf != null) 'SERIE_ECF': serieEcf,
//       if (item != null) 'ITEM': item,
//       if (quantidade != null) 'QUANTIDADE': quantidade,
//       if (valorUnitario != null) 'VALOR_UNITARIO': valorUnitario,
//       if (valorTotal != null) 'VALOR_TOTAL': valorTotal,
//       if (valorTotalItem != null) 'VALOR_TOTAL_ITEM': valorTotalItem,
//       if (valorBaseIcms != null) 'VALOR_BASE_ICMS': valorBaseIcms,
//       if (taxaIcms != null) 'TAXA_ICMS': taxaIcms,
//       if (valorIcms != null) 'VALOR_ICMS': valorIcms,
//       if (taxaDesconto != null) 'TAXA_DESCONTO': taxaDesconto,
//       if (valorDesconto != null) 'VALOR_DESCONTO': valorDesconto,
//       if (taxaIssqn != null) 'TAXA_ISSQN': taxaIssqn,
//       if (valorIssqn != null) 'VALOR_ISSQN': valorIssqn,
//       if (taxaPis != null) 'TAXA_PIS': taxaPis,
//       if (valorPis != null) 'VALOR_PIS': valorPis,
//       if (taxaCofins != null) 'TAXA_COFINS': taxaCofins,
//       if (valorCofins != null) 'VALOR_COFINS': valorCofins,
//       if (taxaAcrescimo != null) 'TAXA_ACRESCIMO': taxaAcrescimo,
//       if (valorAcrescimo != null) 'VALOR_ACRESCIMO': valorAcrescimo,
//       if (totalizadorParcial != null) 'TOTALIZADOR_PARCIAL': totalizadorParcial,
//       if (cst != null) 'CST': cst,
//       if (cancelado != null) 'CANCELADO': cancelado,
//       if (movimentaEstoque != null) 'MOVIMENTA_ESTOQUE': movimentaEstoque,
//       if (ecfIcmsSt != null) 'ECF_ICMS_ST': ecfIcmsSt,
//       if (valorImpostoFederal != null)
//         'VALOR_IMPOSTO_FEDERAL': valorImpostoFederal,
//       if (valorImpostoEstadual != null)
//         'VALOR_IMPOSTO_ESTADUAL': valorImpostoEstadual,
//       if (valorImpostoMunicipal != null)
//         'VALOR_IMPOSTO_MUNICIPAL': valorImpostoMunicipal,
//       if (hashRegistro != null) 'HASH_REGISTRO': hashRegistro,
//     });
//   }

//   PdvVendaDetalhesCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idProduto,
//       Value<int?>? idPdvVendaCabecalho,
//       Value<int?>? cfop,
//       Value<String?>? gtin,
//       Value<int?>? ccf,
//       Value<int?>? coo,
//       Value<String?>? serieEcf,
//       Value<int?>? item,
//       Value<double?>? quantidade,
//       Value<double?>? valorUnitario,
//       Value<double?>? valorTotal,
//       Value<double?>? valorTotalItem,
//       Value<double?>? valorBaseIcms,
//       Value<double?>? taxaIcms,
//       Value<double?>? valorIcms,
//       Value<double?>? taxaDesconto,
//       Value<double?>? valorDesconto,
//       Value<double?>? taxaIssqn,
//       Value<double?>? valorIssqn,
//       Value<double?>? taxaPis,
//       Value<double?>? valorPis,
//       Value<double?>? taxaCofins,
//       Value<double?>? valorCofins,
//       Value<double?>? taxaAcrescimo,
//       Value<double?>? valorAcrescimo,
//       Value<String?>? totalizadorParcial,
//       Value<String?>? cst,
//       Value<String?>? cancelado,
//       Value<String?>? movimentaEstoque,
//       Value<String?>? ecfIcmsSt,
//       Value<double?>? valorImpostoFederal,
//       Value<double?>? valorImpostoEstadual,
//       Value<double?>? valorImpostoMunicipal,
//       Value<String?>? hashRegistro}) {
//     return PdvVendaDetalhesCompanion(
//       id: id ?? this.id,
//       idProduto: idProduto ?? this.idProduto,
//       idPdvVendaCabecalho: idPdvVendaCabecalho ?? this.idPdvVendaCabecalho,
//       cfop: cfop ?? this.cfop,
//       gtin: gtin ?? this.gtin,
//       ccf: ccf ?? this.ccf,
//       coo: coo ?? this.coo,
//       serieEcf: serieEcf ?? this.serieEcf,
//       item: item ?? this.item,
//       quantidade: quantidade ?? this.quantidade,
//       valorUnitario: valorUnitario ?? this.valorUnitario,
//       valorTotal: valorTotal ?? this.valorTotal,
//       valorTotalItem: valorTotalItem ?? this.valorTotalItem,
//       valorBaseIcms: valorBaseIcms ?? this.valorBaseIcms,
//       taxaIcms: taxaIcms ?? this.taxaIcms,
//       valorIcms: valorIcms ?? this.valorIcms,
//       taxaDesconto: taxaDesconto ?? this.taxaDesconto,
//       valorDesconto: valorDesconto ?? this.valorDesconto,
//       taxaIssqn: taxaIssqn ?? this.taxaIssqn,
//       valorIssqn: valorIssqn ?? this.valorIssqn,
//       taxaPis: taxaPis ?? this.taxaPis,
//       valorPis: valorPis ?? this.valorPis,
//       taxaCofins: taxaCofins ?? this.taxaCofins,
//       valorCofins: valorCofins ?? this.valorCofins,
//       taxaAcrescimo: taxaAcrescimo ?? this.taxaAcrescimo,
//       valorAcrescimo: valorAcrescimo ?? this.valorAcrescimo,
//       totalizadorParcial: totalizadorParcial ?? this.totalizadorParcial,
//       cst: cst ?? this.cst,
//       cancelado: cancelado ?? this.cancelado,
//       movimentaEstoque: movimentaEstoque ?? this.movimentaEstoque,
//       ecfIcmsSt: ecfIcmsSt ?? this.ecfIcmsSt,
//       valorImpostoFederal: valorImpostoFederal ?? this.valorImpostoFederal,
//       valorImpostoEstadual: valorImpostoEstadual ?? this.valorImpostoEstadual,
//       valorImpostoMunicipal:
//           valorImpostoMunicipal ?? this.valorImpostoMunicipal,
//       hashRegistro: hashRegistro ?? this.hashRegistro,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idProduto.present) {
//       map['ID_PRODUTO'] = Variable<int?>(idProduto.value);
//     }
//     if (idPdvVendaCabecalho.present) {
//       map['ID_PDV_VENDA_CABECALHO'] = Variable<int?>(idPdvVendaCabecalho.value);
//     }
//     if (cfop.present) {
//       map['CFOP'] = Variable<int?>(cfop.value);
//     }
//     if (gtin.present) {
//       map['GTIN'] = Variable<String?>(gtin.value);
//     }
//     if (ccf.present) {
//       map['CCF'] = Variable<int?>(ccf.value);
//     }
//     if (coo.present) {
//       map['COO'] = Variable<int?>(coo.value);
//     }
//     if (serieEcf.present) {
//       map['SERIE_ECF'] = Variable<String?>(serieEcf.value);
//     }
//     if (item.present) {
//       map['ITEM'] = Variable<int?>(item.value);
//     }
//     if (quantidade.present) {
//       map['QUANTIDADE'] = Variable<double?>(quantidade.value);
//     }
//     if (valorUnitario.present) {
//       map['VALOR_UNITARIO'] = Variable<double?>(valorUnitario.value);
//     }
//     if (valorTotal.present) {
//       map['VALOR_TOTAL'] = Variable<double?>(valorTotal.value);
//     }
//     if (valorTotalItem.present) {
//       map['VALOR_TOTAL_ITEM'] = Variable<double?>(valorTotalItem.value);
//     }
//     if (valorBaseIcms.present) {
//       map['VALOR_BASE_ICMS'] = Variable<double?>(valorBaseIcms.value);
//     }
//     if (taxaIcms.present) {
//       map['TAXA_ICMS'] = Variable<double?>(taxaIcms.value);
//     }
//     if (valorIcms.present) {
//       map['VALOR_ICMS'] = Variable<double?>(valorIcms.value);
//     }
//     if (taxaDesconto.present) {
//       map['TAXA_DESCONTO'] = Variable<double?>(taxaDesconto.value);
//     }
//     if (valorDesconto.present) {
//       map['VALOR_DESCONTO'] = Variable<double?>(valorDesconto.value);
//     }
//     if (taxaIssqn.present) {
//       map['TAXA_ISSQN'] = Variable<double?>(taxaIssqn.value);
//     }
//     if (valorIssqn.present) {
//       map['VALOR_ISSQN'] = Variable<double?>(valorIssqn.value);
//     }
//     if (taxaPis.present) {
//       map['TAXA_PIS'] = Variable<double?>(taxaPis.value);
//     }
//     if (valorPis.present) {
//       map['VALOR_PIS'] = Variable<double?>(valorPis.value);
//     }
//     if (taxaCofins.present) {
//       map['TAXA_COFINS'] = Variable<double?>(taxaCofins.value);
//     }
//     if (valorCofins.present) {
//       map['VALOR_COFINS'] = Variable<double?>(valorCofins.value);
//     }
//     if (taxaAcrescimo.present) {
//       map['TAXA_ACRESCIMO'] = Variable<double?>(taxaAcrescimo.value);
//     }
//     if (valorAcrescimo.present) {
//       map['VALOR_ACRESCIMO'] = Variable<double?>(valorAcrescimo.value);
//     }
//     if (totalizadorParcial.present) {
//       map['TOTALIZADOR_PARCIAL'] = Variable<String?>(totalizadorParcial.value);
//     }
//     if (cst.present) {
//       map['CST'] = Variable<String?>(cst.value);
//     }
//     if (cancelado.present) {
//       map['CANCELADO'] = Variable<String?>(cancelado.value);
//     }
//     if (movimentaEstoque.present) {
//       map['MOVIMENTA_ESTOQUE'] = Variable<String?>(movimentaEstoque.value);
//     }
//     if (ecfIcmsSt.present) {
//       map['ECF_ICMS_ST'] = Variable<String?>(ecfIcmsSt.value);
//     }
//     if (valorImpostoFederal.present) {
//       map['VALOR_IMPOSTO_FEDERAL'] =
//           Variable<double?>(valorImpostoFederal.value);
//     }
//     if (valorImpostoEstadual.present) {
//       map['VALOR_IMPOSTO_ESTADUAL'] =
//           Variable<double?>(valorImpostoEstadual.value);
//     }
//     if (valorImpostoMunicipal.present) {
//       map['VALOR_IMPOSTO_MUNICIPAL'] =
//           Variable<double?>(valorImpostoMunicipal.value);
//     }
//     if (hashRegistro.present) {
//       map['HASH_REGISTRO'] = Variable<String?>(hashRegistro.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('PdvVendaDetalhesCompanion(')
//           ..write('id: $id, ')
//           ..write('idProduto: $idProduto, ')
//           ..write('idPdvVendaCabecalho: $idPdvVendaCabecalho, ')
//           ..write('cfop: $cfop, ')
//           ..write('gtin: $gtin, ')
//           ..write('ccf: $ccf, ')
//           ..write('coo: $coo, ')
//           ..write('serieEcf: $serieEcf, ')
//           ..write('item: $item, ')
//           ..write('quantidade: $quantidade, ')
//           ..write('valorUnitario: $valorUnitario, ')
//           ..write('valorTotal: $valorTotal, ')
//           ..write('valorTotalItem: $valorTotalItem, ')
//           ..write('valorBaseIcms: $valorBaseIcms, ')
//           ..write('taxaIcms: $taxaIcms, ')
//           ..write('valorIcms: $valorIcms, ')
//           ..write('taxaDesconto: $taxaDesconto, ')
//           ..write('valorDesconto: $valorDesconto, ')
//           ..write('taxaIssqn: $taxaIssqn, ')
//           ..write('valorIssqn: $valorIssqn, ')
//           ..write('taxaPis: $taxaPis, ')
//           ..write('valorPis: $valorPis, ')
//           ..write('taxaCofins: $taxaCofins, ')
//           ..write('valorCofins: $valorCofins, ')
//           ..write('taxaAcrescimo: $taxaAcrescimo, ')
//           ..write('valorAcrescimo: $valorAcrescimo, ')
//           ..write('totalizadorParcial: $totalizadorParcial, ')
//           ..write('cst: $cst, ')
//           ..write('cancelado: $cancelado, ')
//           ..write('movimentaEstoque: $movimentaEstoque, ')
//           ..write('ecfIcmsSt: $ecfIcmsSt, ')
//           ..write('valorImpostoFederal: $valorImpostoFederal, ')
//           ..write('valorImpostoEstadual: $valorImpostoEstadual, ')
//           ..write('valorImpostoMunicipal: $valorImpostoMunicipal, ')
//           ..write('hashRegistro: $hashRegistro')
//           ..write(')'))
//         .toString();
//   }
// }

// class $PdvVendaDetalhesTable extends PdvVendaDetalhes
//     with TableInfo<$PdvVendaDetalhesTable, PdvVendaDetalhe> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $PdvVendaDetalhesTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idProdutoMeta = const VerificationMeta('idProduto');
//   late final GeneratedColumn<int?> idProduto = GeneratedColumn<int?>(
//       'ID_PRODUTO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES PRODUTO(ID)');
//   final VerificationMeta _idPdvVendaCabecalhoMeta =
//       const VerificationMeta('idPdvVendaCabecalho');
//   late final GeneratedColumn<int?> idPdvVendaCabecalho = GeneratedColumn<int?>(
//       'ID_PDV_VENDA_CABECALHO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES PDV_VENDA_CABECALHO(ID)');
//   final VerificationMeta _cfopMeta = const VerificationMeta('cfop');
//   late final GeneratedColumn<int?> cfop = GeneratedColumn<int?>(
//       'CFOP', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _gtinMeta = const VerificationMeta('gtin');
//   late final GeneratedColumn<String?> gtin = GeneratedColumn<String?>(
//       'GTIN', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _ccfMeta = const VerificationMeta('ccf');
//   late final GeneratedColumn<int?> ccf = GeneratedColumn<int?>(
//       'CCF', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _cooMeta = const VerificationMeta('coo');
//   late final GeneratedColumn<int?> coo = GeneratedColumn<int?>(
//       'COO', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _serieEcfMeta = const VerificationMeta('serieEcf');
//   late final GeneratedColumn<String?> serieEcf = GeneratedColumn<String?>(
//       'SERIE_ECF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _itemMeta = const VerificationMeta('item');
//   late final GeneratedColumn<int?> item = GeneratedColumn<int?>(
//       'ITEM', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _quantidadeMeta = const VerificationMeta('quantidade');
//   late final GeneratedColumn<double?> quantidade = GeneratedColumn<double?>(
//       'QUANTIDADE', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorUnitarioMeta =
//       const VerificationMeta('valorUnitario');
//   late final GeneratedColumn<double?> valorUnitario = GeneratedColumn<double?>(
//       'VALOR_UNITARIO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorTotalMeta = const VerificationMeta('valorTotal');
//   late final GeneratedColumn<double?> valorTotal = GeneratedColumn<double?>(
//       'VALOR_TOTAL', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorTotalItemMeta =
//       const VerificationMeta('valorTotalItem');
//   late final GeneratedColumn<double?> valorTotalItem = GeneratedColumn<double?>(
//       'VALOR_TOTAL_ITEM', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorBaseIcmsMeta =
//       const VerificationMeta('valorBaseIcms');
//   late final GeneratedColumn<double?> valorBaseIcms = GeneratedColumn<double?>(
//       'VALOR_BASE_ICMS', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _taxaIcmsMeta = const VerificationMeta('taxaIcms');
//   late final GeneratedColumn<double?> taxaIcms = GeneratedColumn<double?>(
//       'TAXA_ICMS', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorIcmsMeta = const VerificationMeta('valorIcms');
//   late final GeneratedColumn<double?> valorIcms = GeneratedColumn<double?>(
//       'VALOR_ICMS', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _taxaDescontoMeta =
//       const VerificationMeta('taxaDesconto');
//   late final GeneratedColumn<double?> taxaDesconto = GeneratedColumn<double?>(
//       'TAXA_DESCONTO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorDescontoMeta =
//       const VerificationMeta('valorDesconto');
//   late final GeneratedColumn<double?> valorDesconto = GeneratedColumn<double?>(
//       'VALOR_DESCONTO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _taxaIssqnMeta = const VerificationMeta('taxaIssqn');
//   late final GeneratedColumn<double?> taxaIssqn = GeneratedColumn<double?>(
//       'TAXA_ISSQN', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorIssqnMeta = const VerificationMeta('valorIssqn');
//   late final GeneratedColumn<double?> valorIssqn = GeneratedColumn<double?>(
//       'VALOR_ISSQN', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _taxaPisMeta = const VerificationMeta('taxaPis');
//   late final GeneratedColumn<double?> taxaPis = GeneratedColumn<double?>(
//       'TAXA_PIS', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorPisMeta = const VerificationMeta('valorPis');
//   late final GeneratedColumn<double?> valorPis = GeneratedColumn<double?>(
//       'VALOR_PIS', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _taxaCofinsMeta = const VerificationMeta('taxaCofins');
//   late final GeneratedColumn<double?> taxaCofins = GeneratedColumn<double?>(
//       'TAXA_COFINS', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorCofinsMeta =
//       const VerificationMeta('valorCofins');
//   late final GeneratedColumn<double?> valorCofins = GeneratedColumn<double?>(
//       'VALOR_COFINS', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _taxaAcrescimoMeta =
//       const VerificationMeta('taxaAcrescimo');
//   late final GeneratedColumn<double?> taxaAcrescimo = GeneratedColumn<double?>(
//       'TAXA_ACRESCIMO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorAcrescimoMeta =
//       const VerificationMeta('valorAcrescimo');
//   late final GeneratedColumn<double?> valorAcrescimo = GeneratedColumn<double?>(
//       'VALOR_ACRESCIMO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _totalizadorParcialMeta =
//       const VerificationMeta('totalizadorParcial');
//   late final GeneratedColumn<String?> totalizadorParcial =
//       GeneratedColumn<String?>(
//           'TOTALIZADOR_PARCIAL', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 10),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _cstMeta = const VerificationMeta('cst');
//   late final GeneratedColumn<String?> cst = GeneratedColumn<String?>(
//       'CST', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 3),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _canceladoMeta = const VerificationMeta('cancelado');
//   late final GeneratedColumn<String?> cancelado = GeneratedColumn<String?>(
//       'CANCELADO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _movimentaEstoqueMeta =
//       const VerificationMeta('movimentaEstoque');
//   late final GeneratedColumn<String?> movimentaEstoque =
//       GeneratedColumn<String?>('MOVIMENTA_ESTOQUE', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _ecfIcmsStMeta = const VerificationMeta('ecfIcmsSt');
//   late final GeneratedColumn<String?> ecfIcmsSt = GeneratedColumn<String?>(
//       'ECF_ICMS_ST', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 4),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _valorImpostoFederalMeta =
//       const VerificationMeta('valorImpostoFederal');
//   late final GeneratedColumn<double?> valorImpostoFederal =
//       GeneratedColumn<double?>('VALOR_IMPOSTO_FEDERAL', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorImpostoEstadualMeta =
//       const VerificationMeta('valorImpostoEstadual');
//   late final GeneratedColumn<double?> valorImpostoEstadual =
//       GeneratedColumn<double?>('VALOR_IMPOSTO_ESTADUAL', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorImpostoMunicipalMeta =
//       const VerificationMeta('valorImpostoMunicipal');
//   late final GeneratedColumn<double?> valorImpostoMunicipal =
//       GeneratedColumn<double?>('VALOR_IMPOSTO_MUNICIPAL', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _hashRegistroMeta =
//       const VerificationMeta('hashRegistro');
//   late final GeneratedColumn<String?> hashRegistro = GeneratedColumn<String?>(
//       'HASH_REGISTRO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 32),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idProduto,
//         idPdvVendaCabecalho,
//         cfop,
//         gtin,
//         ccf,
//         coo,
//         serieEcf,
//         item,
//         quantidade,
//         valorUnitario,
//         valorTotal,
//         valorTotalItem,
//         valorBaseIcms,
//         taxaIcms,
//         valorIcms,
//         taxaDesconto,
//         valorDesconto,
//         taxaIssqn,
//         valorIssqn,
//         taxaPis,
//         valorPis,
//         taxaCofins,
//         valorCofins,
//         taxaAcrescimo,
//         valorAcrescimo,
//         totalizadorParcial,
//         cst,
//         cancelado,
//         movimentaEstoque,
//         ecfIcmsSt,
//         valorImpostoFederal,
//         valorImpostoEstadual,
//         valorImpostoMunicipal,
//         hashRegistro
//       ];
//   @override
//   String get aliasedName => _alias ?? 'PDV_VENDA_DETALHE';
//   @override
//   String get actualTableName => 'PDV_VENDA_DETALHE';
//   @override
//   VerificationContext validateIntegrity(Insertable<PdvVendaDetalhe> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_PRODUTO')) {
//       context.handle(_idProdutoMeta,
//           idProduto.isAcceptableOrUnknown(data['ID_PRODUTO']!, _idProdutoMeta));
//     }
//     if (data.containsKey('ID_PDV_VENDA_CABECALHO')) {
//       context.handle(
//           _idPdvVendaCabecalhoMeta,
//           idPdvVendaCabecalho.isAcceptableOrUnknown(
//               data['ID_PDV_VENDA_CABECALHO']!, _idPdvVendaCabecalhoMeta));
//     }
//     if (data.containsKey('CFOP')) {
//       context.handle(
//           _cfopMeta, cfop.isAcceptableOrUnknown(data['CFOP']!, _cfopMeta));
//     }
//     if (data.containsKey('GTIN')) {
//       context.handle(
//           _gtinMeta, gtin.isAcceptableOrUnknown(data['GTIN']!, _gtinMeta));
//     }
//     if (data.containsKey('CCF')) {
//       context.handle(
//           _ccfMeta, ccf.isAcceptableOrUnknown(data['CCF']!, _ccfMeta));
//     }
//     if (data.containsKey('COO')) {
//       context.handle(
//           _cooMeta, coo.isAcceptableOrUnknown(data['COO']!, _cooMeta));
//     }
//     if (data.containsKey('SERIE_ECF')) {
//       context.handle(_serieEcfMeta,
//           serieEcf.isAcceptableOrUnknown(data['SERIE_ECF']!, _serieEcfMeta));
//     }
//     if (data.containsKey('ITEM')) {
//       context.handle(
//           _itemMeta, item.isAcceptableOrUnknown(data['ITEM']!, _itemMeta));
//     }
//     if (data.containsKey('QUANTIDADE')) {
//       context.handle(
//           _quantidadeMeta,
//           quantidade.isAcceptableOrUnknown(
//               data['QUANTIDADE']!, _quantidadeMeta));
//     }
//     if (data.containsKey('VALOR_UNITARIO')) {
//       context.handle(
//           _valorUnitarioMeta,
//           valorUnitario.isAcceptableOrUnknown(
//               data['VALOR_UNITARIO']!, _valorUnitarioMeta));
//     }
//     if (data.containsKey('VALOR_TOTAL')) {
//       context.handle(
//           _valorTotalMeta,
//           valorTotal.isAcceptableOrUnknown(
//               data['VALOR_TOTAL']!, _valorTotalMeta));
//     }
//     if (data.containsKey('VALOR_TOTAL_ITEM')) {
//       context.handle(
//           _valorTotalItemMeta,
//           valorTotalItem.isAcceptableOrUnknown(
//               data['VALOR_TOTAL_ITEM']!, _valorTotalItemMeta));
//     }
//     if (data.containsKey('VALOR_BASE_ICMS')) {
//       context.handle(
//           _valorBaseIcmsMeta,
//           valorBaseIcms.isAcceptableOrUnknown(
//               data['VALOR_BASE_ICMS']!, _valorBaseIcmsMeta));
//     }
//     if (data.containsKey('TAXA_ICMS')) {
//       context.handle(_taxaIcmsMeta,
//           taxaIcms.isAcceptableOrUnknown(data['TAXA_ICMS']!, _taxaIcmsMeta));
//     }
//     if (data.containsKey('VALOR_ICMS')) {
//       context.handle(_valorIcmsMeta,
//           valorIcms.isAcceptableOrUnknown(data['VALOR_ICMS']!, _valorIcmsMeta));
//     }
//     if (data.containsKey('TAXA_DESCONTO')) {
//       context.handle(
//           _taxaDescontoMeta,
//           taxaDesconto.isAcceptableOrUnknown(
//               data['TAXA_DESCONTO']!, _taxaDescontoMeta));
//     }
//     if (data.containsKey('VALOR_DESCONTO')) {
//       context.handle(
//           _valorDescontoMeta,
//           valorDesconto.isAcceptableOrUnknown(
//               data['VALOR_DESCONTO']!, _valorDescontoMeta));
//     }
//     if (data.containsKey('TAXA_ISSQN')) {
//       context.handle(_taxaIssqnMeta,
//           taxaIssqn.isAcceptableOrUnknown(data['TAXA_ISSQN']!, _taxaIssqnMeta));
//     }
//     if (data.containsKey('VALOR_ISSQN')) {
//       context.handle(
//           _valorIssqnMeta,
//           valorIssqn.isAcceptableOrUnknown(
//               data['VALOR_ISSQN']!, _valorIssqnMeta));
//     }
//     if (data.containsKey('TAXA_PIS')) {
//       context.handle(_taxaPisMeta,
//           taxaPis.isAcceptableOrUnknown(data['TAXA_PIS']!, _taxaPisMeta));
//     }
//     if (data.containsKey('VALOR_PIS')) {
//       context.handle(_valorPisMeta,
//           valorPis.isAcceptableOrUnknown(data['VALOR_PIS']!, _valorPisMeta));
//     }
//     if (data.containsKey('TAXA_COFINS')) {
//       context.handle(
//           _taxaCofinsMeta,
//           taxaCofins.isAcceptableOrUnknown(
//               data['TAXA_COFINS']!, _taxaCofinsMeta));
//     }
//     if (data.containsKey('VALOR_COFINS')) {
//       context.handle(
//           _valorCofinsMeta,
//           valorCofins.isAcceptableOrUnknown(
//               data['VALOR_COFINS']!, _valorCofinsMeta));
//     }
//     if (data.containsKey('TAXA_ACRESCIMO')) {
//       context.handle(
//           _taxaAcrescimoMeta,
//           taxaAcrescimo.isAcceptableOrUnknown(
//               data['TAXA_ACRESCIMO']!, _taxaAcrescimoMeta));
//     }
//     if (data.containsKey('VALOR_ACRESCIMO')) {
//       context.handle(
//           _valorAcrescimoMeta,
//           valorAcrescimo.isAcceptableOrUnknown(
//               data['VALOR_ACRESCIMO']!, _valorAcrescimoMeta));
//     }
//     if (data.containsKey('TOTALIZADOR_PARCIAL')) {
//       context.handle(
//           _totalizadorParcialMeta,
//           totalizadorParcial.isAcceptableOrUnknown(
//               data['TOTALIZADOR_PARCIAL']!, _totalizadorParcialMeta));
//     }
//     if (data.containsKey('CST')) {
//       context.handle(
//           _cstMeta, cst.isAcceptableOrUnknown(data['CST']!, _cstMeta));
//     }
//     if (data.containsKey('CANCELADO')) {
//       context.handle(_canceladoMeta,
//           cancelado.isAcceptableOrUnknown(data['CANCELADO']!, _canceladoMeta));
//     }
//     if (data.containsKey('MOVIMENTA_ESTOQUE')) {
//       context.handle(
//           _movimentaEstoqueMeta,
//           movimentaEstoque.isAcceptableOrUnknown(
//               data['MOVIMENTA_ESTOQUE']!, _movimentaEstoqueMeta));
//     }
//     if (data.containsKey('ECF_ICMS_ST')) {
//       context.handle(
//           _ecfIcmsStMeta,
//           ecfIcmsSt.isAcceptableOrUnknown(
//               data['ECF_ICMS_ST']!, _ecfIcmsStMeta));
//     }
//     if (data.containsKey('VALOR_IMPOSTO_FEDERAL')) {
//       context.handle(
//           _valorImpostoFederalMeta,
//           valorImpostoFederal.isAcceptableOrUnknown(
//               data['VALOR_IMPOSTO_FEDERAL']!, _valorImpostoFederalMeta));
//     }
//     if (data.containsKey('VALOR_IMPOSTO_ESTADUAL')) {
//       context.handle(
//           _valorImpostoEstadualMeta,
//           valorImpostoEstadual.isAcceptableOrUnknown(
//               data['VALOR_IMPOSTO_ESTADUAL']!, _valorImpostoEstadualMeta));
//     }
//     if (data.containsKey('VALOR_IMPOSTO_MUNICIPAL')) {
//       context.handle(
//           _valorImpostoMunicipalMeta,
//           valorImpostoMunicipal.isAcceptableOrUnknown(
//               data['VALOR_IMPOSTO_MUNICIPAL']!, _valorImpostoMunicipalMeta));
//     }
//     if (data.containsKey('HASH_REGISTRO')) {
//       context.handle(
//           _hashRegistroMeta,
//           hashRegistro.isAcceptableOrUnknown(
//               data['HASH_REGISTRO']!, _hashRegistroMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   PdvVendaDetalhe map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return PdvVendaDetalhe(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idProduto: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_PRODUTO']),
//       idPdvVendaCabecalho: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ID_PDV_VENDA_CABECALHO']),
//       cfop: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CFOP']),
//       gtin: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}GTIN']),
//       ccf: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CCF']),
//       coo: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}COO']),
//       serieEcf: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}SERIE_ECF']),
//       item: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ITEM']),
//       quantidade: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}QUANTIDADE']),
//       valorUnitario: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_UNITARIO']),
//       valorTotal: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_TOTAL']),
//       valorTotalItem: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_TOTAL_ITEM']),
//       valorBaseIcms: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_BASE_ICMS']),
//       taxaIcms: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TAXA_ICMS']),
//       valorIcms: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_ICMS']),
//       taxaDesconto: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TAXA_DESCONTO']),
//       valorDesconto: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_DESCONTO']),
//       taxaIssqn: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TAXA_ISSQN']),
//       valorIssqn: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_ISSQN']),
//       taxaPis: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TAXA_PIS']),
//       valorPis: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_PIS']),
//       taxaCofins: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TAXA_COFINS']),
//       valorCofins: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_COFINS']),
//       taxaAcrescimo: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TAXA_ACRESCIMO']),
//       valorAcrescimo: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_ACRESCIMO']),
//       totalizadorParcial: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}TOTALIZADOR_PARCIAL']),
//       cst: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CST']),
//       cancelado: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CANCELADO']),
//       movimentaEstoque: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}MOVIMENTA_ESTOQUE']),
//       ecfIcmsSt: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ECF_ICMS_ST']),
//       valorImpostoFederal: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_IMPOSTO_FEDERAL']),
//       valorImpostoEstadual: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_IMPOSTO_ESTADUAL']),
//       valorImpostoMunicipal: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_IMPOSTO_MUNICIPAL']),
//       hashRegistro: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}HASH_REGISTRO']),
//     );
//   }

//   @override
//   $PdvVendaDetalhesTable createAlias(String alias) {
//     return $PdvVendaDetalhesTable(_db, alias);
//   }
// }

// class ProdutosCompanion extends UpdateCompanion<Produto> {
//   final Value<int> id;
//   final Value<int?> idProdutoUnidade;
//   final Value<int?> idTributGrupoTributario;
//   final Value<int?> idProdutoTipo;
//   final Value<int?> idProdutoSubgrupo;
//   final Value<String?> gtin;
//   final Value<String?> codigoInterno;
//   final Value<String?> nome;
//   final Value<String?> descricao;
//   final Value<String?> descricaoPdv;
//   final Value<double?> valorCompra;
//   final Value<double?> valorVenda;
//   final Value<double?> quantidadeEstoque;
//   final Value<double?> estoqueMinimo;
//   final Value<double?> estoqueMaximo;
//   final Value<String?> codigoNcm;
//   final Value<String?> iat;
//   final Value<String?> ippt;
//   final Value<String?> tipoItemSped;
//   final Value<double?> taxaIpi;
//   final Value<double?> taxaIssqn;
//   final Value<double?> taxaPis;
//   final Value<double?> taxaCofins;
//   final Value<double?> taxaIcms;
//   final Value<String?> cst;
//   final Value<String?> csosn;
//   final Value<String?> totalizadorParcial;
//   final Value<String?> ecfIcmsSt;
//   final Value<int?> codigoBalanca;
//   final Value<String?> pafPSt;
//   final Value<String?> hashRegistro;
//   final Value<double?> valorCusto;
//   final Value<String?> situacao;
//   final Value<String?> codigoCest;
//   const ProdutosCompanion({
//     this.id = const Value.absent(),
//     this.idProdutoUnidade = const Value.absent(),
//     this.idTributGrupoTributario = const Value.absent(),
//     this.idProdutoTipo = const Value.absent(),
//     this.idProdutoSubgrupo = const Value.absent(),
//     this.gtin = const Value.absent(),
//     this.codigoInterno = const Value.absent(),
//     this.nome = const Value.absent(),
//     this.descricao = const Value.absent(),
//     this.descricaoPdv = const Value.absent(),
//     this.valorCompra = const Value.absent(),
//     this.valorVenda = const Value.absent(),
//     this.quantidadeEstoque = const Value.absent(),
//     this.estoqueMinimo = const Value.absent(),
//     this.estoqueMaximo = const Value.absent(),
//     this.codigoNcm = const Value.absent(),
//     this.iat = const Value.absent(),
//     this.ippt = const Value.absent(),
//     this.tipoItemSped = const Value.absent(),
//     this.taxaIpi = const Value.absent(),
//     this.taxaIssqn = const Value.absent(),
//     this.taxaPis = const Value.absent(),
//     this.taxaCofins = const Value.absent(),
//     this.taxaIcms = const Value.absent(),
//     this.cst = const Value.absent(),
//     this.csosn = const Value.absent(),
//     this.totalizadorParcial = const Value.absent(),
//     this.ecfIcmsSt = const Value.absent(),
//     this.codigoBalanca = const Value.absent(),
//     this.pafPSt = const Value.absent(),
//     this.hashRegistro = const Value.absent(),
//     this.valorCusto = const Value.absent(),
//     this.situacao = const Value.absent(),
//     this.codigoCest = const Value.absent(),
//   });
//   ProdutosCompanion.insert({
//     this.id = const Value.absent(),
//     this.idProdutoUnidade = const Value.absent(),
//     this.idTributGrupoTributario = const Value.absent(),
//     this.idProdutoTipo = const Value.absent(),
//     this.idProdutoSubgrupo = const Value.absent(),
//     this.gtin = const Value.absent(),
//     this.codigoInterno = const Value.absent(),
//     this.nome = const Value.absent(),
//     this.descricao = const Value.absent(),
//     this.descricaoPdv = const Value.absent(),
//     this.valorCompra = const Value.absent(),
//     this.valorVenda = const Value.absent(),
//     this.quantidadeEstoque = const Value.absent(),
//     this.estoqueMinimo = const Value.absent(),
//     this.estoqueMaximo = const Value.absent(),
//     this.codigoNcm = const Value.absent(),
//     this.iat = const Value.absent(),
//     this.ippt = const Value.absent(),
//     this.tipoItemSped = const Value.absent(),
//     this.taxaIpi = const Value.absent(),
//     this.taxaIssqn = const Value.absent(),
//     this.taxaPis = const Value.absent(),
//     this.taxaCofins = const Value.absent(),
//     this.taxaIcms = const Value.absent(),
//     this.cst = const Value.absent(),
//     this.csosn = const Value.absent(),
//     this.totalizadorParcial = const Value.absent(),
//     this.ecfIcmsSt = const Value.absent(),
//     this.codigoBalanca = const Value.absent(),
//     this.pafPSt = const Value.absent(),
//     this.hashRegistro = const Value.absent(),
//     this.valorCusto = const Value.absent(),
//     this.situacao = const Value.absent(),
//     this.codigoCest = const Value.absent(),
//   });
//   static Insertable<Produto> custom({
//     Expression<int>? id,
//     Expression<int?>? idProdutoUnidade,
//     Expression<int?>? idTributGrupoTributario,
//     Expression<int?>? idProdutoTipo,
//     Expression<int?>? idProdutoSubgrupo,
//     Expression<String?>? gtin,
//     Expression<String?>? codigoInterno,
//     Expression<String?>? nome,
//     Expression<String?>? descricao,
//     Expression<String?>? descricaoPdv,
//     Expression<double?>? valorCompra,
//     Expression<double?>? valorVenda,
//     Expression<double?>? quantidadeEstoque,
//     Expression<double?>? estoqueMinimo,
//     Expression<double?>? estoqueMaximo,
//     Expression<String?>? codigoNcm,
//     Expression<String?>? iat,
//     Expression<String?>? ippt,
//     Expression<String?>? tipoItemSped,
//     Expression<double?>? taxaIpi,
//     Expression<double?>? taxaIssqn,
//     Expression<double?>? taxaPis,
//     Expression<double?>? taxaCofins,
//     Expression<double?>? taxaIcms,
//     Expression<String?>? cst,
//     Expression<String?>? csosn,
//     Expression<String?>? totalizadorParcial,
//     Expression<String?>? ecfIcmsSt,
//     Expression<int?>? codigoBalanca,
//     Expression<String?>? pafPSt,
//     Expression<String?>? hashRegistro,
//     Expression<double?>? valorCusto,
//     Expression<String?>? situacao,
//     Expression<String?>? codigoCest,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idProdutoUnidade != null) 'ID_PRODUTO_UNIDADE': idProdutoUnidade,
//       if (idTributGrupoTributario != null)
//         'ID_TRIBUT_GRUPO_TRIBUTARIO': idTributGrupoTributario,
//       if (idProdutoTipo != null) 'ID_PRODUTO_TIPO': idProdutoTipo,
//       if (idProdutoSubgrupo != null) 'ID_PRODUTO_SUBGRUPO': idProdutoSubgrupo,
//       if (gtin != null) 'GTIN': gtin,
//       if (codigoInterno != null) 'CODIGO_INTERNO': codigoInterno,
//       if (nome != null) 'NOME': nome,
//       if (descricao != null) 'DESCRICAO': descricao,
//       if (descricaoPdv != null) 'DESCRICAO_PDV': descricaoPdv,
//       if (valorCompra != null) 'VALOR_COMPRA': valorCompra,
//       if (valorVenda != null) 'VALOR_VENDA': valorVenda,
//       if (quantidadeEstoque != null) 'QUANTIDADE_ESTOQUE': quantidadeEstoque,
//       if (estoqueMinimo != null) 'ESTOQUE_MINIMO': estoqueMinimo,
//       if (estoqueMaximo != null) 'ESTOQUE_MAXIMO': estoqueMaximo,
//       if (codigoNcm != null) 'CODIGO_NCM': codigoNcm,
//       if (iat != null) 'IAT': iat,
//       if (ippt != null) 'IPPT': ippt,
//       if (tipoItemSped != null) 'TIPO_ITEM_SPED': tipoItemSped,
//       if (taxaIpi != null) 'TAXA_IPI': taxaIpi,
//       if (taxaIssqn != null) 'TAXA_ISSQN': taxaIssqn,
//       if (taxaPis != null) 'TAXA_PIS': taxaPis,
//       if (taxaCofins != null) 'TAXA_COFINS': taxaCofins,
//       if (taxaIcms != null) 'TAXA_ICMS': taxaIcms,
//       if (cst != null) 'CST': cst,
//       if (csosn != null) 'CSOSN': csosn,
//       if (totalizadorParcial != null) 'TOTALIZADOR_PARCIAL': totalizadorParcial,
//       if (ecfIcmsSt != null) 'ECF_ICMS_ST': ecfIcmsSt,
//       if (codigoBalanca != null) 'CODIGO_BALANCA': codigoBalanca,
//       if (pafPSt != null) 'PAF_P_ST': pafPSt,
//       if (hashRegistro != null) 'HASH_REGISTRO': hashRegistro,
//       if (valorCusto != null) 'VALOR_CUSTO': valorCusto,
//       if (situacao != null) 'SITUACAO': situacao,
//       if (codigoCest != null) 'CODIGO_CEST': codigoCest,
//     });
//   }

//   ProdutosCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idProdutoUnidade,
//       Value<int?>? idTributGrupoTributario,
//       Value<int?>? idProdutoTipo,
//       Value<int?>? idProdutoSubgrupo,
//       Value<String?>? gtin,
//       Value<String?>? codigoInterno,
//       Value<String?>? nome,
//       Value<String?>? descricao,
//       Value<String?>? descricaoPdv,
//       Value<double?>? valorCompra,
//       Value<double?>? valorVenda,
//       Value<double?>? quantidadeEstoque,
//       Value<double?>? estoqueMinimo,
//       Value<double?>? estoqueMaximo,
//       Value<String?>? codigoNcm,
//       Value<String?>? iat,
//       Value<String?>? ippt,
//       Value<String?>? tipoItemSped,
//       Value<double?>? taxaIpi,
//       Value<double?>? taxaIssqn,
//       Value<double?>? taxaPis,
//       Value<double?>? taxaCofins,
//       Value<double?>? taxaIcms,
//       Value<String?>? cst,
//       Value<String?>? csosn,
//       Value<String?>? totalizadorParcial,
//       Value<String?>? ecfIcmsSt,
//       Value<int?>? codigoBalanca,
//       Value<String?>? pafPSt,
//       Value<String?>? hashRegistro,
//       Value<double?>? valorCusto,
//       Value<String?>? situacao,
//       Value<String?>? codigoCest}) {
//     return ProdutosCompanion(
//       id: id ?? this.id,
//       idProdutoUnidade: idProdutoUnidade ?? this.idProdutoUnidade,
//       idTributGrupoTributario:
//           idTributGrupoTributario ?? this.idTributGrupoTributario,
//       idProdutoTipo: idProdutoTipo ?? this.idProdutoTipo,
//       idProdutoSubgrupo: idProdutoSubgrupo ?? this.idProdutoSubgrupo,
//       gtin: gtin ?? this.gtin,
//       codigoInterno: codigoInterno ?? this.codigoInterno,
//       nome: nome ?? this.nome,
//       descricao: descricao ?? this.descricao,
//       descricaoPdv: descricaoPdv ?? this.descricaoPdv,
//       valorCompra: valorCompra ?? this.valorCompra,
//       valorVenda: valorVenda ?? this.valorVenda,
//       quantidadeEstoque: quantidadeEstoque ?? this.quantidadeEstoque,
//       estoqueMinimo: estoqueMinimo ?? this.estoqueMinimo,
//       estoqueMaximo: estoqueMaximo ?? this.estoqueMaximo,
//       codigoNcm: codigoNcm ?? this.codigoNcm,
//       iat: iat ?? this.iat,
//       ippt: ippt ?? this.ippt,
//       tipoItemSped: tipoItemSped ?? this.tipoItemSped,
//       taxaIpi: taxaIpi ?? this.taxaIpi,
//       taxaIssqn: taxaIssqn ?? this.taxaIssqn,
//       taxaPis: taxaPis ?? this.taxaPis,
//       taxaCofins: taxaCofins ?? this.taxaCofins,
//       taxaIcms: taxaIcms ?? this.taxaIcms,
//       cst: cst ?? this.cst,
//       csosn: csosn ?? this.csosn,
//       totalizadorParcial: totalizadorParcial ?? this.totalizadorParcial,
//       ecfIcmsSt: ecfIcmsSt ?? this.ecfIcmsSt,
//       codigoBalanca: codigoBalanca ?? this.codigoBalanca,
//       pafPSt: pafPSt ?? this.pafPSt,
//       hashRegistro: hashRegistro ?? this.hashRegistro,
//       valorCusto: valorCusto ?? this.valorCusto,
//       situacao: situacao ?? this.situacao,
//       codigoCest: codigoCest ?? this.codigoCest,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idProdutoUnidade.present) {
//       map['ID_PRODUTO_UNIDADE'] = Variable<int?>(idProdutoUnidade.value);
//     }
//     if (idTributGrupoTributario.present) {
//       map['ID_TRIBUT_GRUPO_TRIBUTARIO'] =
//           Variable<int?>(idTributGrupoTributario.value);
//     }
//     if (idProdutoTipo.present) {
//       map['ID_PRODUTO_TIPO'] = Variable<int?>(idProdutoTipo.value);
//     }
//     if (idProdutoSubgrupo.present) {
//       map['ID_PRODUTO_SUBGRUPO'] = Variable<int?>(idProdutoSubgrupo.value);
//     }
//     if (gtin.present) {
//       map['GTIN'] = Variable<String?>(gtin.value);
//     }
//     if (codigoInterno.present) {
//       map['CODIGO_INTERNO'] = Variable<String?>(codigoInterno.value);
//     }
//     if (nome.present) {
//       map['NOME'] = Variable<String?>(nome.value);
//     }
//     if (descricao.present) {
//       map['DESCRICAO'] = Variable<String?>(descricao.value);
//     }
//     if (descricaoPdv.present) {
//       map['DESCRICAO_PDV'] = Variable<String?>(descricaoPdv.value);
//     }
//     if (valorCompra.present) {
//       map['VALOR_COMPRA'] = Variable<double?>(valorCompra.value);
//     }
//     if (valorVenda.present) {
//       map['VALOR_VENDA'] = Variable<double?>(valorVenda.value);
//     }
//     if (quantidadeEstoque.present) {
//       map['QUANTIDADE_ESTOQUE'] = Variable<double?>(quantidadeEstoque.value);
//     }
//     if (estoqueMinimo.present) {
//       map['ESTOQUE_MINIMO'] = Variable<double?>(estoqueMinimo.value);
//     }
//     if (estoqueMaximo.present) {
//       map['ESTOQUE_MAXIMO'] = Variable<double?>(estoqueMaximo.value);
//     }
//     if (codigoNcm.present) {
//       map['CODIGO_NCM'] = Variable<String?>(codigoNcm.value);
//     }
//     if (iat.present) {
//       map['IAT'] = Variable<String?>(iat.value);
//     }
//     if (ippt.present) {
//       map['IPPT'] = Variable<String?>(ippt.value);
//     }
//     if (tipoItemSped.present) {
//       map['TIPO_ITEM_SPED'] = Variable<String?>(tipoItemSped.value);
//     }
//     if (taxaIpi.present) {
//       map['TAXA_IPI'] = Variable<double?>(taxaIpi.value);
//     }
//     if (taxaIssqn.present) {
//       map['TAXA_ISSQN'] = Variable<double?>(taxaIssqn.value);
//     }
//     if (taxaPis.present) {
//       map['TAXA_PIS'] = Variable<double?>(taxaPis.value);
//     }
//     if (taxaCofins.present) {
//       map['TAXA_COFINS'] = Variable<double?>(taxaCofins.value);
//     }
//     if (taxaIcms.present) {
//       map['TAXA_ICMS'] = Variable<double?>(taxaIcms.value);
//     }
//     if (cst.present) {
//       map['CST'] = Variable<String?>(cst.value);
//     }
//     if (csosn.present) {
//       map['CSOSN'] = Variable<String?>(csosn.value);
//     }
//     if (totalizadorParcial.present) {
//       map['TOTALIZADOR_PARCIAL'] = Variable<String?>(totalizadorParcial.value);
//     }
//     if (ecfIcmsSt.present) {
//       map['ECF_ICMS_ST'] = Variable<String?>(ecfIcmsSt.value);
//     }
//     if (codigoBalanca.present) {
//       map['CODIGO_BALANCA'] = Variable<int?>(codigoBalanca.value);
//     }
//     if (pafPSt.present) {
//       map['PAF_P_ST'] = Variable<String?>(pafPSt.value);
//     }
//     if (hashRegistro.present) {
//       map['HASH_REGISTRO'] = Variable<String?>(hashRegistro.value);
//     }
//     if (valorCusto.present) {
//       map['VALOR_CUSTO'] = Variable<double?>(valorCusto.value);
//     }
//     if (situacao.present) {
//       map['SITUACAO'] = Variable<String?>(situacao.value);
//     }
//     if (codigoCest.present) {
//       map['CODIGO_CEST'] = Variable<String?>(codigoCest.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('ProdutosCompanion(')
//           ..write('id: $id, ')
//           ..write('idProdutoUnidade: $idProdutoUnidade, ')
//           ..write('idTributGrupoTributario: $idTributGrupoTributario, ')
//           ..write('idProdutoTipo: $idProdutoTipo, ')
//           ..write('idProdutoSubgrupo: $idProdutoSubgrupo, ')
//           ..write('gtin: $gtin, ')
//           ..write('codigoInterno: $codigoInterno, ')
//           ..write('nome: $nome, ')
//           ..write('descricao: $descricao, ')
//           ..write('descricaoPdv: $descricaoPdv, ')
//           ..write('valorCompra: $valorCompra, ')
//           ..write('valorVenda: $valorVenda, ')
//           ..write('quantidadeEstoque: $quantidadeEstoque, ')
//           ..write('estoqueMinimo: $estoqueMinimo, ')
//           ..write('estoqueMaximo: $estoqueMaximo, ')
//           ..write('codigoNcm: $codigoNcm, ')
//           ..write('iat: $iat, ')
//           ..write('ippt: $ippt, ')
//           ..write('tipoItemSped: $tipoItemSped, ')
//           ..write('taxaIpi: $taxaIpi, ')
//           ..write('taxaIssqn: $taxaIssqn, ')
//           ..write('taxaPis: $taxaPis, ')
//           ..write('taxaCofins: $taxaCofins, ')
//           ..write('taxaIcms: $taxaIcms, ')
//           ..write('cst: $cst, ')
//           ..write('csosn: $csosn, ')
//           ..write('totalizadorParcial: $totalizadorParcial, ')
//           ..write('ecfIcmsSt: $ecfIcmsSt, ')
//           ..write('codigoBalanca: $codigoBalanca, ')
//           ..write('pafPSt: $pafPSt, ')
//           ..write('hashRegistro: $hashRegistro, ')
//           ..write('valorCusto: $valorCusto, ')
//           ..write('situacao: $situacao, ')
//           ..write('codigoCest: $codigoCest')
//           ..write(')'))
//         .toString();
//   }
// }

// class $ProdutosTable extends Produtos with TableInfo<$ProdutosTable, Produto> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $ProdutosTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idProdutoUnidadeMeta =
//       const VerificationMeta('idProdutoUnidade');
//   late final GeneratedColumn<int?> idProdutoUnidade = GeneratedColumn<int?>(
//       'ID_PRODUTO_UNIDADE', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES PRODUTO_UNIDADE(ID)');
//   final VerificationMeta _idTributGrupoTributarioMeta =
//       const VerificationMeta('idTributGrupoTributario');
//   late final GeneratedColumn<int?> idTributGrupoTributario =
//       GeneratedColumn<int?>('ID_TRIBUT_GRUPO_TRIBUTARIO', aliasedName, true,
//           typeName: 'INTEGER',
//           requiredDuringInsert: false,
//           $customConstraints:
//               'NULLABLE REFERENCES TRIBUT_GRUPO_TRIBUTARIO(ID)');
//   final VerificationMeta _idProdutoTipoMeta =
//       const VerificationMeta('idProdutoTipo');
//   late final GeneratedColumn<int?> idProdutoTipo = GeneratedColumn<int?>(
//       'ID_PRODUTO_TIPO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES PRODUTO_TIPO(ID)');
//   final VerificationMeta _idProdutoSubgrupoMeta =
//       const VerificationMeta('idProdutoSubgrupo');
//   late final GeneratedColumn<int?> idProdutoSubgrupo = GeneratedColumn<int?>(
//       'ID_PRODUTO_SUBGRUPO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES PRODUTO_SUBGRUPO(ID)');
//   final VerificationMeta _gtinMeta = const VerificationMeta('gtin');
//   late final GeneratedColumn<String?> gtin = GeneratedColumn<String?>(
//       'GTIN', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _codigoInternoMeta =
//       const VerificationMeta('codigoInterno');
//   late final GeneratedColumn<String?> codigoInterno = GeneratedColumn<String?>(
//       'CODIGO_INTERNO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 50),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _nomeMeta = const VerificationMeta('nome');
//   late final GeneratedColumn<String?> nome = GeneratedColumn<String?>(
//       'NOME', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _descricaoMeta = const VerificationMeta('descricao');
//   late final GeneratedColumn<String?> descricao = GeneratedColumn<String?>(
//       'DESCRICAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _descricaoPdvMeta =
//       const VerificationMeta('descricaoPdv');
//   late final GeneratedColumn<String?> descricaoPdv = GeneratedColumn<String?>(
//       'DESCRICAO_PDV', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 30),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _valorCompraMeta =
//       const VerificationMeta('valorCompra');
//   late final GeneratedColumn<double?> valorCompra = GeneratedColumn<double?>(
//       'VALOR_COMPRA', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorVendaMeta = const VerificationMeta('valorVenda');
//   late final GeneratedColumn<double?> valorVenda = GeneratedColumn<double?>(
//       'VALOR_VENDA', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _quantidadeEstoqueMeta =
//       const VerificationMeta('quantidadeEstoque');
//   late final GeneratedColumn<double?> quantidadeEstoque =
//       GeneratedColumn<double?>('QUANTIDADE_ESTOQUE', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _estoqueMinimoMeta =
//       const VerificationMeta('estoqueMinimo');
//   late final GeneratedColumn<double?> estoqueMinimo = GeneratedColumn<double?>(
//       'ESTOQUE_MINIMO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _estoqueMaximoMeta =
//       const VerificationMeta('estoqueMaximo');
//   late final GeneratedColumn<double?> estoqueMaximo = GeneratedColumn<double?>(
//       'ESTOQUE_MAXIMO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _codigoNcmMeta = const VerificationMeta('codigoNcm');
//   late final GeneratedColumn<String?> codigoNcm = GeneratedColumn<String?>(
//       'CODIGO_NCM', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _iatMeta = const VerificationMeta('iat');
//   late final GeneratedColumn<String?> iat = GeneratedColumn<String?>(
//       'IAT', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _ipptMeta = const VerificationMeta('ippt');
//   late final GeneratedColumn<String?> ippt = GeneratedColumn<String?>(
//       'IPPT', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _tipoItemSpedMeta =
//       const VerificationMeta('tipoItemSped');
//   late final GeneratedColumn<String?> tipoItemSped = GeneratedColumn<String?>(
//       'TIPO_ITEM_SPED', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _taxaIpiMeta = const VerificationMeta('taxaIpi');
//   late final GeneratedColumn<double?> taxaIpi = GeneratedColumn<double?>(
//       'TAXA_IPI', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _taxaIssqnMeta = const VerificationMeta('taxaIssqn');
//   late final GeneratedColumn<double?> taxaIssqn = GeneratedColumn<double?>(
//       'TAXA_ISSQN', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _taxaPisMeta = const VerificationMeta('taxaPis');
//   late final GeneratedColumn<double?> taxaPis = GeneratedColumn<double?>(
//       'TAXA_PIS', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _taxaCofinsMeta = const VerificationMeta('taxaCofins');
//   late final GeneratedColumn<double?> taxaCofins = GeneratedColumn<double?>(
//       'TAXA_COFINS', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _taxaIcmsMeta = const VerificationMeta('taxaIcms');
//   late final GeneratedColumn<double?> taxaIcms = GeneratedColumn<double?>(
//       'TAXA_ICMS', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _cstMeta = const VerificationMeta('cst');
//   late final GeneratedColumn<String?> cst = GeneratedColumn<String?>(
//       'CST', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 3),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _csosnMeta = const VerificationMeta('csosn');
//   late final GeneratedColumn<String?> csosn = GeneratedColumn<String?>(
//       'CSOSN', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 4),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _totalizadorParcialMeta =
//       const VerificationMeta('totalizadorParcial');
//   late final GeneratedColumn<String?> totalizadorParcial =
//       GeneratedColumn<String?>(
//           'TOTALIZADOR_PARCIAL', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 10),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _ecfIcmsStMeta = const VerificationMeta('ecfIcmsSt');
//   late final GeneratedColumn<String?> ecfIcmsSt = GeneratedColumn<String?>(
//       'ECF_ICMS_ST', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 4),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _codigoBalancaMeta =
//       const VerificationMeta('codigoBalanca');
//   late final GeneratedColumn<int?> codigoBalanca = GeneratedColumn<int?>(
//       'CODIGO_BALANCA', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _pafPStMeta = const VerificationMeta('pafPSt');
//   late final GeneratedColumn<String?> pafPSt = GeneratedColumn<String?>(
//       'PAF_P_ST', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _hashRegistroMeta =
//       const VerificationMeta('hashRegistro');
//   late final GeneratedColumn<String?> hashRegistro = GeneratedColumn<String?>(
//       'HASH_REGISTRO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 32),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _valorCustoMeta = const VerificationMeta('valorCusto');
//   late final GeneratedColumn<double?> valorCusto = GeneratedColumn<double?>(
//       'VALOR_CUSTO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _situacaoMeta = const VerificationMeta('situacao');
//   late final GeneratedColumn<String?> situacao = GeneratedColumn<String?>(
//       'SITUACAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _codigoCestMeta = const VerificationMeta('codigoCest');
//   late final GeneratedColumn<String?> codigoCest = GeneratedColumn<String?>(
//       'CODIGO_CEST', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 7),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idProdutoUnidade,
//         idTributGrupoTributario,
//         idProdutoTipo,
//         idProdutoSubgrupo,
//         gtin,
//         codigoInterno,
//         nome,
//         descricao,
//         descricaoPdv,
//         valorCompra,
//         valorVenda,
//         quantidadeEstoque,
//         estoqueMinimo,
//         estoqueMaximo,
//         codigoNcm,
//         iat,
//         ippt,
//         tipoItemSped,
//         taxaIpi,
//         taxaIssqn,
//         taxaPis,
//         taxaCofins,
//         taxaIcms,
//         cst,
//         csosn,
//         totalizadorParcial,
//         ecfIcmsSt,
//         codigoBalanca,
//         pafPSt,
//         hashRegistro,
//         valorCusto,
//         situacao,
//         codigoCest
//       ];
//   @override
//   String get aliasedName => _alias ?? 'PRODUTO';
//   @override
//   String get actualTableName => 'PRODUTO';
//   @override
//   VerificationContext validateIntegrity(Insertable<Produto> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_PRODUTO_UNIDADE')) {
//       context.handle(
//           _idProdutoUnidadeMeta,
//           idProdutoUnidade.isAcceptableOrUnknown(
//               data['ID_PRODUTO_UNIDADE']!, _idProdutoUnidadeMeta));
//     }
//     if (data.containsKey('ID_TRIBUT_GRUPO_TRIBUTARIO')) {
//       context.handle(
//           _idTributGrupoTributarioMeta,
//           idTributGrupoTributario.isAcceptableOrUnknown(
//               data['ID_TRIBUT_GRUPO_TRIBUTARIO']!,
//               _idTributGrupoTributarioMeta));
//     }
//     if (data.containsKey('ID_PRODUTO_TIPO')) {
//       context.handle(
//           _idProdutoTipoMeta,
//           idProdutoTipo.isAcceptableOrUnknown(
//               data['ID_PRODUTO_TIPO']!, _idProdutoTipoMeta));
//     }
//     if (data.containsKey('ID_PRODUTO_SUBGRUPO')) {
//       context.handle(
//           _idProdutoSubgrupoMeta,
//           idProdutoSubgrupo.isAcceptableOrUnknown(
//               data['ID_PRODUTO_SUBGRUPO']!, _idProdutoSubgrupoMeta));
//     }
//     if (data.containsKey('GTIN')) {
//       context.handle(
//           _gtinMeta, gtin.isAcceptableOrUnknown(data['GTIN']!, _gtinMeta));
//     }
//     if (data.containsKey('CODIGO_INTERNO')) {
//       context.handle(
//           _codigoInternoMeta,
//           codigoInterno.isAcceptableOrUnknown(
//               data['CODIGO_INTERNO']!, _codigoInternoMeta));
//     }
//     if (data.containsKey('NOME')) {
//       context.handle(
//           _nomeMeta, nome.isAcceptableOrUnknown(data['NOME']!, _nomeMeta));
//     }
//     if (data.containsKey('DESCRICAO')) {
//       context.handle(_descricaoMeta,
//           descricao.isAcceptableOrUnknown(data['DESCRICAO']!, _descricaoMeta));
//     }
//     if (data.containsKey('DESCRICAO_PDV')) {
//       context.handle(
//           _descricaoPdvMeta,
//           descricaoPdv.isAcceptableOrUnknown(
//               data['DESCRICAO_PDV']!, _descricaoPdvMeta));
//     }
//     if (data.containsKey('VALOR_COMPRA')) {
//       context.handle(
//           _valorCompraMeta,
//           valorCompra.isAcceptableOrUnknown(
//               data['VALOR_COMPRA']!, _valorCompraMeta));
//     }
//     if (data.containsKey('VALOR_VENDA')) {
//       context.handle(
//           _valorVendaMeta,
//           valorVenda.isAcceptableOrUnknown(
//               data['VALOR_VENDA']!, _valorVendaMeta));
//     }
//     if (data.containsKey('QUANTIDADE_ESTOQUE')) {
//       context.handle(
//           _quantidadeEstoqueMeta,
//           quantidadeEstoque.isAcceptableOrUnknown(
//               data['QUANTIDADE_ESTOQUE']!, _quantidadeEstoqueMeta));
//     }
//     if (data.containsKey('ESTOQUE_MINIMO')) {
//       context.handle(
//           _estoqueMinimoMeta,
//           estoqueMinimo.isAcceptableOrUnknown(
//               data['ESTOQUE_MINIMO']!, _estoqueMinimoMeta));
//     }
//     if (data.containsKey('ESTOQUE_MAXIMO')) {
//       context.handle(
//           _estoqueMaximoMeta,
//           estoqueMaximo.isAcceptableOrUnknown(
//               data['ESTOQUE_MAXIMO']!, _estoqueMaximoMeta));
//     }
//     if (data.containsKey('CODIGO_NCM')) {
//       context.handle(_codigoNcmMeta,
//           codigoNcm.isAcceptableOrUnknown(data['CODIGO_NCM']!, _codigoNcmMeta));
//     }
//     if (data.containsKey('IAT')) {
//       context.handle(
//           _iatMeta, iat.isAcceptableOrUnknown(data['IAT']!, _iatMeta));
//     }
//     if (data.containsKey('IPPT')) {
//       context.handle(
//           _ipptMeta, ippt.isAcceptableOrUnknown(data['IPPT']!, _ipptMeta));
//     }
//     if (data.containsKey('TIPO_ITEM_SPED')) {
//       context.handle(
//           _tipoItemSpedMeta,
//           tipoItemSped.isAcceptableOrUnknown(
//               data['TIPO_ITEM_SPED']!, _tipoItemSpedMeta));
//     }
//     if (data.containsKey('TAXA_IPI')) {
//       context.handle(_taxaIpiMeta,
//           taxaIpi.isAcceptableOrUnknown(data['TAXA_IPI']!, _taxaIpiMeta));
//     }
//     if (data.containsKey('TAXA_ISSQN')) {
//       context.handle(_taxaIssqnMeta,
//           taxaIssqn.isAcceptableOrUnknown(data['TAXA_ISSQN']!, _taxaIssqnMeta));
//     }
//     if (data.containsKey('TAXA_PIS')) {
//       context.handle(_taxaPisMeta,
//           taxaPis.isAcceptableOrUnknown(data['TAXA_PIS']!, _taxaPisMeta));
//     }
//     if (data.containsKey('TAXA_COFINS')) {
//       context.handle(
//           _taxaCofinsMeta,
//           taxaCofins.isAcceptableOrUnknown(
//               data['TAXA_COFINS']!, _taxaCofinsMeta));
//     }
//     if (data.containsKey('TAXA_ICMS')) {
//       context.handle(_taxaIcmsMeta,
//           taxaIcms.isAcceptableOrUnknown(data['TAXA_ICMS']!, _taxaIcmsMeta));
//     }
//     if (data.containsKey('CST')) {
//       context.handle(
//           _cstMeta, cst.isAcceptableOrUnknown(data['CST']!, _cstMeta));
//     }
//     if (data.containsKey('CSOSN')) {
//       context.handle(
//           _csosnMeta, csosn.isAcceptableOrUnknown(data['CSOSN']!, _csosnMeta));
//     }
//     if (data.containsKey('TOTALIZADOR_PARCIAL')) {
//       context.handle(
//           _totalizadorParcialMeta,
//           totalizadorParcial.isAcceptableOrUnknown(
//               data['TOTALIZADOR_PARCIAL']!, _totalizadorParcialMeta));
//     }
//     if (data.containsKey('ECF_ICMS_ST')) {
//       context.handle(
//           _ecfIcmsStMeta,
//           ecfIcmsSt.isAcceptableOrUnknown(
//               data['ECF_ICMS_ST']!, _ecfIcmsStMeta));
//     }
//     if (data.containsKey('CODIGO_BALANCA')) {
//       context.handle(
//           _codigoBalancaMeta,
//           codigoBalanca.isAcceptableOrUnknown(
//               data['CODIGO_BALANCA']!, _codigoBalancaMeta));
//     }
//     if (data.containsKey('PAF_P_ST')) {
//       context.handle(_pafPStMeta,
//           pafPSt.isAcceptableOrUnknown(data['PAF_P_ST']!, _pafPStMeta));
//     }
//     if (data.containsKey('HASH_REGISTRO')) {
//       context.handle(
//           _hashRegistroMeta,
//           hashRegistro.isAcceptableOrUnknown(
//               data['HASH_REGISTRO']!, _hashRegistroMeta));
//     }
//     if (data.containsKey('VALOR_CUSTO')) {
//       context.handle(
//           _valorCustoMeta,
//           valorCusto.isAcceptableOrUnknown(
//               data['VALOR_CUSTO']!, _valorCustoMeta));
//     }
//     if (data.containsKey('SITUACAO')) {
//       context.handle(_situacaoMeta,
//           situacao.isAcceptableOrUnknown(data['SITUACAO']!, _situacaoMeta));
//     }
//     if (data.containsKey('CODIGO_CEST')) {
//       context.handle(
//           _codigoCestMeta,
//           codigoCest.isAcceptableOrUnknown(
//               data['CODIGO_CEST']!, _codigoCestMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   Produto map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return Produto(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idProdutoUnidade: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ID_PRODUTO_UNIDADE']),
//       idTributGrupoTributario: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ID_TRIBUT_GRUPO_TRIBUTARIO']),
//       idProdutoTipo: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_PRODUTO_TIPO']),
//       idProdutoSubgrupo: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ID_PRODUTO_SUBGRUPO']),
//       gtin: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}GTIN']),
//       codigoInterno: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO_INTERNO']),
//       nome: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NOME']),
//       descricao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DESCRICAO']),
//       descricaoPdv: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DESCRICAO_PDV']),
//       valorCompra: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_COMPRA']),
//       valorVenda: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_VENDA']),
//       quantidadeEstoque: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}QUANTIDADE_ESTOQUE']),
//       estoqueMinimo: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ESTOQUE_MINIMO']),
//       estoqueMaximo: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ESTOQUE_MAXIMO']),
//       codigoNcm: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO_NCM']),
//       iat: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}IAT']),
//       ippt: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}IPPT']),
//       tipoItemSped: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TIPO_ITEM_SPED']),
//       taxaIpi: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TAXA_IPI']),
//       taxaIssqn: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TAXA_ISSQN']),
//       taxaPis: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TAXA_PIS']),
//       taxaCofins: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TAXA_COFINS']),
//       taxaIcms: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TAXA_ICMS']),
//       cst: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CST']),
//       csosn: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CSOSN']),
//       totalizadorParcial: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}TOTALIZADOR_PARCIAL']),
//       ecfIcmsSt: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ECF_ICMS_ST']),
//       codigoBalanca: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO_BALANCA']),
//       pafPSt: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}PAF_P_ST']),
//       hashRegistro: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}HASH_REGISTRO']),
//       valorCusto: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_CUSTO']),
//       situacao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}SITUACAO']),
//       codigoCest: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO_CEST']),
//     );
//   }

//   @override
//   $ProdutosTable createAlias(String alias) {
//     return $ProdutosTable(_db, alias);
//   }
// }

// class ProdutoFichaTecnicasCompanion
//     extends UpdateCompanion<ProdutoFichaTecnica> {
//   final Value<int> id;
//   final Value<int?> idProduto;
//   final Value<String?> descricao;
//   final Value<int?> idProdutoFilho;
//   final Value<double?> quantidade;
//   final Value<double?> valorCusto;
//   final Value<double?> percentualCusto;
//   const ProdutoFichaTecnicasCompanion({
//     this.id = const Value.absent(),
//     this.idProduto = const Value.absent(),
//     this.descricao = const Value.absent(),
//     this.idProdutoFilho = const Value.absent(),
//     this.quantidade = const Value.absent(),
//     this.valorCusto = const Value.absent(),
//     this.percentualCusto = const Value.absent(),
//   });
//   ProdutoFichaTecnicasCompanion.insert({
//     this.id = const Value.absent(),
//     this.idProduto = const Value.absent(),
//     this.descricao = const Value.absent(),
//     this.idProdutoFilho = const Value.absent(),
//     this.quantidade = const Value.absent(),
//     this.valorCusto = const Value.absent(),
//     this.percentualCusto = const Value.absent(),
//   });
//   static Insertable<ProdutoFichaTecnica> custom({
//     Expression<int>? id,
//     Expression<int?>? idProduto,
//     Expression<String?>? descricao,
//     Expression<int?>? idProdutoFilho,
//     Expression<double?>? quantidade,
//     Expression<double?>? valorCusto,
//     Expression<double?>? percentualCusto,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idProduto != null) 'ID_PRODUTO': idProduto,
//       if (descricao != null) 'DESCRICAO': descricao,
//       if (idProdutoFilho != null) 'ID_PRODUTO_FILHO': idProdutoFilho,
//       if (quantidade != null) 'QUANTIDADE': quantidade,
//       if (valorCusto != null) 'VALOR_CUSTO': valorCusto,
//       if (percentualCusto != null) 'PERCENTUAL_CUSTO': percentualCusto,
//     });
//   }

//   ProdutoFichaTecnicasCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idProduto,
//       Value<String?>? descricao,
//       Value<int?>? idProdutoFilho,
//       Value<double?>? quantidade,
//       Value<double?>? valorCusto,
//       Value<double?>? percentualCusto}) {
//     return ProdutoFichaTecnicasCompanion(
//       id: id ?? this.id,
//       idProduto: idProduto ?? this.idProduto,
//       descricao: descricao ?? this.descricao,
//       idProdutoFilho: idProdutoFilho ?? this.idProdutoFilho,
//       quantidade: quantidade ?? this.quantidade,
//       valorCusto: valorCusto ?? this.valorCusto,
//       percentualCusto: percentualCusto ?? this.percentualCusto,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idProduto.present) {
//       map['ID_PRODUTO'] = Variable<int?>(idProduto.value);
//     }
//     if (descricao.present) {
//       map['DESCRICAO'] = Variable<String?>(descricao.value);
//     }
//     if (idProdutoFilho.present) {
//       map['ID_PRODUTO_FILHO'] = Variable<int?>(idProdutoFilho.value);
//     }
//     if (quantidade.present) {
//       map['QUANTIDADE'] = Variable<double?>(quantidade.value);
//     }
//     if (valorCusto.present) {
//       map['VALOR_CUSTO'] = Variable<double?>(valorCusto.value);
//     }
//     if (percentualCusto.present) {
//       map['PERCENTUAL_CUSTO'] = Variable<double?>(percentualCusto.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('ProdutoFichaTecnicasCompanion(')
//           ..write('id: $id, ')
//           ..write('idProduto: $idProduto, ')
//           ..write('descricao: $descricao, ')
//           ..write('idProdutoFilho: $idProdutoFilho, ')
//           ..write('quantidade: $quantidade, ')
//           ..write('valorCusto: $valorCusto, ')
//           ..write('percentualCusto: $percentualCusto')
//           ..write(')'))
//         .toString();
//   }
// }

// class $ProdutoFichaTecnicasTable extends ProdutoFichaTecnicas
//     with TableInfo<$ProdutoFichaTecnicasTable, ProdutoFichaTecnica> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $ProdutoFichaTecnicasTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idProdutoMeta = const VerificationMeta('idProduto');
//   late final GeneratedColumn<int?> idProduto = GeneratedColumn<int?>(
//       'ID_PRODUTO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES PRODUTO(ID)');
//   final VerificationMeta _descricaoMeta = const VerificationMeta('descricao');
//   late final GeneratedColumn<String?> descricao = GeneratedColumn<String?>(
//       'DESCRICAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 50),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _idProdutoFilhoMeta =
//       const VerificationMeta('idProdutoFilho');
//   late final GeneratedColumn<int?> idProdutoFilho = GeneratedColumn<int?>(
//       'ID_PRODUTO_FILHO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES PRODUTO_FILHO(ID)');
//   final VerificationMeta _quantidadeMeta = const VerificationMeta('quantidade');
//   late final GeneratedColumn<double?> quantidade = GeneratedColumn<double?>(
//       'QUANTIDADE', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorCustoMeta = const VerificationMeta('valorCusto');
//   late final GeneratedColumn<double?> valorCusto = GeneratedColumn<double?>(
//       'VALOR_CUSTO', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _percentualCustoMeta =
//       const VerificationMeta('percentualCusto');
//   late final GeneratedColumn<double?> percentualCusto =
//       GeneratedColumn<double?>('PERCENTUAL_CUSTO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idProduto,
//         descricao,
//         idProdutoFilho,
//         quantidade,
//         valorCusto,
//         percentualCusto
//       ];
//   @override
//   String get aliasedName => _alias ?? 'PRODUTO_FICHA_TECNICA';
//   @override
//   String get actualTableName => 'PRODUTO_FICHA_TECNICA';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<ProdutoFichaTecnica> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_PRODUTO')) {
//       context.handle(_idProdutoMeta,
//           idProduto.isAcceptableOrUnknown(data['ID_PRODUTO']!, _idProdutoMeta));
//     }
//     if (data.containsKey('DESCRICAO')) {
//       context.handle(_descricaoMeta,
//           descricao.isAcceptableOrUnknown(data['DESCRICAO']!, _descricaoMeta));
//     }
//     if (data.containsKey('ID_PRODUTO_FILHO')) {
//       context.handle(
//           _idProdutoFilhoMeta,
//           idProdutoFilho.isAcceptableOrUnknown(
//               data['ID_PRODUTO_FILHO']!, _idProdutoFilhoMeta));
//     }
//     if (data.containsKey('QUANTIDADE')) {
//       context.handle(
//           _quantidadeMeta,
//           quantidade.isAcceptableOrUnknown(
//               data['QUANTIDADE']!, _quantidadeMeta));
//     }
//     if (data.containsKey('VALOR_CUSTO')) {
//       context.handle(
//           _valorCustoMeta,
//           valorCusto.isAcceptableOrUnknown(
//               data['VALOR_CUSTO']!, _valorCustoMeta));
//     }
//     if (data.containsKey('PERCENTUAL_CUSTO')) {
//       context.handle(
//           _percentualCustoMeta,
//           percentualCusto.isAcceptableOrUnknown(
//               data['PERCENTUAL_CUSTO']!, _percentualCustoMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   ProdutoFichaTecnica map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return ProdutoFichaTecnica(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idProduto: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_PRODUTO']),
//       descricao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DESCRICAO']),
//       idProdutoFilho: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_PRODUTO_FILHO']),
//       quantidade: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}QUANTIDADE']),
//       valorCusto: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_CUSTO']),
//       percentualCusto: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}PERCENTUAL_CUSTO']),
//     );
//   }

//   @override
//   $ProdutoFichaTecnicasTable createAlias(String alias) {
//     return $ProdutoFichaTecnicasTable(_db, alias);
//   }
// }

// class ProdutoGruposCompanion extends UpdateCompanion<ProdutoGrupo> {
//   final Value<int> id;
//   final Value<String?> nome;
//   final Value<String?> descricao;
//   const ProdutoGruposCompanion({
//     this.id = const Value.absent(),
//     this.nome = const Value.absent(),
//     this.descricao = const Value.absent(),
//   });
//   ProdutoGruposCompanion.insert({
//     this.id = const Value.absent(),
//     this.nome = const Value.absent(),
//     this.descricao = const Value.absent(),
//   });
//   static Insertable<ProdutoGrupo> custom({
//     Expression<int>? id,
//     Expression<String?>? nome,
//     Expression<String?>? descricao,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (nome != null) 'NOME': nome,
//       if (descricao != null) 'DESCRICAO': descricao,
//     });
//   }

//   ProdutoGruposCompanion copyWith(
//       {Value<int>? id, Value<String?>? nome, Value<String?>? descricao}) {
//     return ProdutoGruposCompanion(
//       id: id ?? this.id,
//       nome: nome ?? this.nome,
//       descricao: descricao ?? this.descricao,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (nome.present) {
//       map['NOME'] = Variable<String?>(nome.value);
//     }
//     if (descricao.present) {
//       map['DESCRICAO'] = Variable<String?>(descricao.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('ProdutoGruposCompanion(')
//           ..write('id: $id, ')
//           ..write('nome: $nome, ')
//           ..write('descricao: $descricao')
//           ..write(')'))
//         .toString();
//   }
// }

// class $ProdutoGruposTable extends ProdutoGrupos
//     with TableInfo<$ProdutoGruposTable, ProdutoGrupo> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $ProdutoGruposTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _nomeMeta = const VerificationMeta('nome');
//   late final GeneratedColumn<String?> nome = GeneratedColumn<String?>(
//       'NOME', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _descricaoMeta = const VerificationMeta('descricao');
//   late final GeneratedColumn<String?> descricao = GeneratedColumn<String?>(
//       'DESCRICAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [id, nome, descricao];
//   @override
//   String get aliasedName => _alias ?? 'PRODUTO_GRUPO';
//   @override
//   String get actualTableName => 'PRODUTO_GRUPO';
//   @override
//   VerificationContext validateIntegrity(Insertable<ProdutoGrupo> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('NOME')) {
//       context.handle(
//           _nomeMeta, nome.isAcceptableOrUnknown(data['NOME']!, _nomeMeta));
//     }
//     if (data.containsKey('DESCRICAO')) {
//       context.handle(_descricaoMeta,
//           descricao.isAcceptableOrUnknown(data['DESCRICAO']!, _descricaoMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   ProdutoGrupo map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return ProdutoGrupo(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       nome: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NOME']),
//       descricao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DESCRICAO']),
//     );
//   }

//   @override
//   $ProdutoGruposTable createAlias(String alias) {
//     return $ProdutoGruposTable(_db, alias);
//   }
// }

// class ProdutoImagemsCompanion extends UpdateCompanion<ProdutoImagem> {
//   final Value<int> id;
//   final Value<int?> idProduto;
//   final Value<Uint8List?> imagem;
//   const ProdutoImagemsCompanion({
//     this.id = const Value.absent(),
//     this.idProduto = const Value.absent(),
//     this.imagem = const Value.absent(),
//   });
//   ProdutoImagemsCompanion.insert({
//     this.id = const Value.absent(),
//     this.idProduto = const Value.absent(),
//     this.imagem = const Value.absent(),
//   });
//   static Insertable<ProdutoImagem> custom({
//     Expression<int>? id,
//     Expression<int?>? idProduto,
//     Expression<Uint8List?>? imagem,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idProduto != null) 'ID_PRODUTO': idProduto,
//       if (imagem != null) 'IMAGEM': imagem,
//     });
//   }

//   ProdutoImagemsCompanion copyWith(
//       {Value<int>? id, Value<int?>? idProduto, Value<Uint8List?>? imagem}) {
//     return ProdutoImagemsCompanion(
//       id: id ?? this.id,
//       idProduto: idProduto ?? this.idProduto,
//       imagem: imagem ?? this.imagem,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idProduto.present) {
//       map['ID_PRODUTO'] = Variable<int?>(idProduto.value);
//     }
//     if (imagem.present) {
//       map['IMAGEM'] = Variable<Uint8List?>(imagem.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('ProdutoImagemsCompanion(')
//           ..write('id: $id, ')
//           ..write('idProduto: $idProduto, ')
//           ..write('imagem: $imagem')
//           ..write(')'))
//         .toString();
//   }
// }

// class $ProdutoImagemsTable extends ProdutoImagems
//     with TableInfo<$ProdutoImagemsTable, ProdutoImagem> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $ProdutoImagemsTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idProdutoMeta = const VerificationMeta('idProduto');
//   late final GeneratedColumn<int?> idProduto = GeneratedColumn<int?>(
//       'ID_PRODUTO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES PRODUTO(ID)');
//   final VerificationMeta _imagemMeta = const VerificationMeta('imagem');
//   late final GeneratedColumn<Uint8List?> imagem = GeneratedColumn<Uint8List?>(
//       'IMAGEM', aliasedName, true,
//       typeName: 'BLOB', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [id, idProduto, imagem];
//   @override
//   String get aliasedName => _alias ?? 'PRODUTO_IMAGEM';
//   @override
//   String get actualTableName => 'PRODUTO_IMAGEM';
//   @override
//   VerificationContext validateIntegrity(Insertable<ProdutoImagem> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_PRODUTO')) {
//       context.handle(_idProdutoMeta,
//           idProduto.isAcceptableOrUnknown(data['ID_PRODUTO']!, _idProdutoMeta));
//     }
//     if (data.containsKey('IMAGEM')) {
//       context.handle(_imagemMeta,
//           imagem.isAcceptableOrUnknown(data['IMAGEM']!, _imagemMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   ProdutoImagem map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return ProdutoImagem(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idProduto: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_PRODUTO']),
//       imagem: const BlobType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}IMAGEM']),
//     );
//   }

//   @override
//   $ProdutoImagemsTable createAlias(String alias) {
//     return $ProdutoImagemsTable(_db, alias);
//   }
// }

// class ProdutoPromocaosCompanion extends UpdateCompanion<ProdutoPromocao> {
//   final Value<int> id;
//   final Value<int?> idProduto;
//   final Value<DateTime?> dataInicio;
//   final Value<DateTime?> dataFim;
//   final Value<double?> quantidadeEmPromocao;
//   final Value<double?> quantidadeMaximaCliente;
//   final Value<double?> valor;
//   const ProdutoPromocaosCompanion({
//     this.id = const Value.absent(),
//     this.idProduto = const Value.absent(),
//     this.dataInicio = const Value.absent(),
//     this.dataFim = const Value.absent(),
//     this.quantidadeEmPromocao = const Value.absent(),
//     this.quantidadeMaximaCliente = const Value.absent(),
//     this.valor = const Value.absent(),
//   });
//   ProdutoPromocaosCompanion.insert({
//     this.id = const Value.absent(),
//     this.idProduto = const Value.absent(),
//     this.dataInicio = const Value.absent(),
//     this.dataFim = const Value.absent(),
//     this.quantidadeEmPromocao = const Value.absent(),
//     this.quantidadeMaximaCliente = const Value.absent(),
//     this.valor = const Value.absent(),
//   });
//   static Insertable<ProdutoPromocao> custom({
//     Expression<int>? id,
//     Expression<int?>? idProduto,
//     Expression<DateTime?>? dataInicio,
//     Expression<DateTime?>? dataFim,
//     Expression<double?>? quantidadeEmPromocao,
//     Expression<double?>? quantidadeMaximaCliente,
//     Expression<double?>? valor,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idProduto != null) 'ID_PRODUTO': idProduto,
//       if (dataInicio != null) 'DATA_INICIO': dataInicio,
//       if (dataFim != null) 'DATA_FIM': dataFim,
//       if (quantidadeEmPromocao != null)
//         'QUANTIDADE_EM_PROMOCAO': quantidadeEmPromocao,
//       if (quantidadeMaximaCliente != null)
//         'QUANTIDADE_MAXIMA_CLIENTE': quantidadeMaximaCliente,
//       if (valor != null) 'VALOR': valor,
//     });
//   }

//   ProdutoPromocaosCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idProduto,
//       Value<DateTime?>? dataInicio,
//       Value<DateTime?>? dataFim,
//       Value<double?>? quantidadeEmPromocao,
//       Value<double?>? quantidadeMaximaCliente,
//       Value<double?>? valor}) {
//     return ProdutoPromocaosCompanion(
//       id: id ?? this.id,
//       idProduto: idProduto ?? this.idProduto,
//       dataInicio: dataInicio ?? this.dataInicio,
//       dataFim: dataFim ?? this.dataFim,
//       quantidadeEmPromocao: quantidadeEmPromocao ?? this.quantidadeEmPromocao,
//       quantidadeMaximaCliente:
//           quantidadeMaximaCliente ?? this.quantidadeMaximaCliente,
//       valor: valor ?? this.valor,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idProduto.present) {
//       map['ID_PRODUTO'] = Variable<int?>(idProduto.value);
//     }
//     if (dataInicio.present) {
//       map['DATA_INICIO'] = Variable<DateTime?>(dataInicio.value);
//     }
//     if (dataFim.present) {
//       map['DATA_FIM'] = Variable<DateTime?>(dataFim.value);
//     }
//     if (quantidadeEmPromocao.present) {
//       map['QUANTIDADE_EM_PROMOCAO'] =
//           Variable<double?>(quantidadeEmPromocao.value);
//     }
//     if (quantidadeMaximaCliente.present) {
//       map['QUANTIDADE_MAXIMA_CLIENTE'] =
//           Variable<double?>(quantidadeMaximaCliente.value);
//     }
//     if (valor.present) {
//       map['VALOR'] = Variable<double?>(valor.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('ProdutoPromocaosCompanion(')
//           ..write('id: $id, ')
//           ..write('idProduto: $idProduto, ')
//           ..write('dataInicio: $dataInicio, ')
//           ..write('dataFim: $dataFim, ')
//           ..write('quantidadeEmPromocao: $quantidadeEmPromocao, ')
//           ..write('quantidadeMaximaCliente: $quantidadeMaximaCliente, ')
//           ..write('valor: $valor')
//           ..write(')'))
//         .toString();
//   }
// }

// class $ProdutoPromocaosTable extends ProdutoPromocaos
//     with TableInfo<$ProdutoPromocaosTable, ProdutoPromocao> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $ProdutoPromocaosTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idProdutoMeta = const VerificationMeta('idProduto');
//   late final GeneratedColumn<int?> idProduto = GeneratedColumn<int?>(
//       'ID_PRODUTO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES PRODUTO(ID)');
//   final VerificationMeta _dataInicioMeta = const VerificationMeta('dataInicio');
//   late final GeneratedColumn<DateTime?> dataInicio = GeneratedColumn<DateTime?>(
//       'DATA_INICIO', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _dataFimMeta = const VerificationMeta('dataFim');
//   late final GeneratedColumn<DateTime?> dataFim = GeneratedColumn<DateTime?>(
//       'DATA_FIM', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _quantidadeEmPromocaoMeta =
//       const VerificationMeta('quantidadeEmPromocao');
//   late final GeneratedColumn<double?> quantidadeEmPromocao =
//       GeneratedColumn<double?>('QUANTIDADE_EM_PROMOCAO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _quantidadeMaximaClienteMeta =
//       const VerificationMeta('quantidadeMaximaCliente');
//   late final GeneratedColumn<double?> quantidadeMaximaCliente =
//       GeneratedColumn<double?>('QUANTIDADE_MAXIMA_CLIENTE', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorMeta = const VerificationMeta('valor');
//   late final GeneratedColumn<double?> valor = GeneratedColumn<double?>(
//       'VALOR', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idProduto,
//         dataInicio,
//         dataFim,
//         quantidadeEmPromocao,
//         quantidadeMaximaCliente,
//         valor
//       ];
//   @override
//   String get aliasedName => _alias ?? 'PRODUTO_PROMOCAO';
//   @override
//   String get actualTableName => 'PRODUTO_PROMOCAO';
//   @override
//   VerificationContext validateIntegrity(Insertable<ProdutoPromocao> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_PRODUTO')) {
//       context.handle(_idProdutoMeta,
//           idProduto.isAcceptableOrUnknown(data['ID_PRODUTO']!, _idProdutoMeta));
//     }
//     if (data.containsKey('DATA_INICIO')) {
//       context.handle(
//           _dataInicioMeta,
//           dataInicio.isAcceptableOrUnknown(
//               data['DATA_INICIO']!, _dataInicioMeta));
//     }
//     if (data.containsKey('DATA_FIM')) {
//       context.handle(_dataFimMeta,
//           dataFim.isAcceptableOrUnknown(data['DATA_FIM']!, _dataFimMeta));
//     }
//     if (data.containsKey('QUANTIDADE_EM_PROMOCAO')) {
//       context.handle(
//           _quantidadeEmPromocaoMeta,
//           quantidadeEmPromocao.isAcceptableOrUnknown(
//               data['QUANTIDADE_EM_PROMOCAO']!, _quantidadeEmPromocaoMeta));
//     }
//     if (data.containsKey('QUANTIDADE_MAXIMA_CLIENTE')) {
//       context.handle(
//           _quantidadeMaximaClienteMeta,
//           quantidadeMaximaCliente.isAcceptableOrUnknown(
//               data['QUANTIDADE_MAXIMA_CLIENTE']!,
//               _quantidadeMaximaClienteMeta));
//     }
//     if (data.containsKey('VALOR')) {
//       context.handle(
//           _valorMeta, valor.isAcceptableOrUnknown(data['VALOR']!, _valorMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   ProdutoPromocao map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return ProdutoPromocao(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idProduto: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_PRODUTO']),
//       dataInicio: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_INICIO']),
//       dataFim: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_FIM']),
//       quantidadeEmPromocao: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}QUANTIDADE_EM_PROMOCAO']),
//       quantidadeMaximaCliente: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}QUANTIDADE_MAXIMA_CLIENTE']),
//       valor: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR']),
//     );
//   }

//   @override
//   $ProdutoPromocaosTable createAlias(String alias) {
//     return $ProdutoPromocaosTable(_db, alias);
//   }
// }

// class ProdutoSubgruposCompanion extends UpdateCompanion<ProdutoSubgrupo> {
//   final Value<int> id;
//   final Value<int?> idProdutoGrupo;
//   final Value<String?> nome;
//   final Value<String?> descricao;
//   const ProdutoSubgruposCompanion({
//     this.id = const Value.absent(),
//     this.idProdutoGrupo = const Value.absent(),
//     this.nome = const Value.absent(),
//     this.descricao = const Value.absent(),
//   });
//   ProdutoSubgruposCompanion.insert({
//     this.id = const Value.absent(),
//     this.idProdutoGrupo = const Value.absent(),
//     this.nome = const Value.absent(),
//     this.descricao = const Value.absent(),
//   });
//   static Insertable<ProdutoSubgrupo> custom({
//     Expression<int>? id,
//     Expression<int?>? idProdutoGrupo,
//     Expression<String?>? nome,
//     Expression<String?>? descricao,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idProdutoGrupo != null) 'ID_PRODUTO_GRUPO': idProdutoGrupo,
//       if (nome != null) 'NOME': nome,
//       if (descricao != null) 'DESCRICAO': descricao,
//     });
//   }

//   ProdutoSubgruposCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idProdutoGrupo,
//       Value<String?>? nome,
//       Value<String?>? descricao}) {
//     return ProdutoSubgruposCompanion(
//       id: id ?? this.id,
//       idProdutoGrupo: idProdutoGrupo ?? this.idProdutoGrupo,
//       nome: nome ?? this.nome,
//       descricao: descricao ?? this.descricao,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idProdutoGrupo.present) {
//       map['ID_PRODUTO_GRUPO'] = Variable<int?>(idProdutoGrupo.value);
//     }
//     if (nome.present) {
//       map['NOME'] = Variable<String?>(nome.value);
//     }
//     if (descricao.present) {
//       map['DESCRICAO'] = Variable<String?>(descricao.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('ProdutoSubgruposCompanion(')
//           ..write('id: $id, ')
//           ..write('idProdutoGrupo: $idProdutoGrupo, ')
//           ..write('nome: $nome, ')
//           ..write('descricao: $descricao')
//           ..write(')'))
//         .toString();
//   }
// }

// class $ProdutoSubgruposTable extends ProdutoSubgrupos
//     with TableInfo<$ProdutoSubgruposTable, ProdutoSubgrupo> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $ProdutoSubgruposTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idProdutoGrupoMeta =
//       const VerificationMeta('idProdutoGrupo');
//   late final GeneratedColumn<int?> idProdutoGrupo = GeneratedColumn<int?>(
//       'ID_PRODUTO_GRUPO', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES PRODUTO_GRUPO(ID)');
//   final VerificationMeta _nomeMeta = const VerificationMeta('nome');
//   late final GeneratedColumn<String?> nome = GeneratedColumn<String?>(
//       'NOME', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _descricaoMeta = const VerificationMeta('descricao');
//   late final GeneratedColumn<String?> descricao = GeneratedColumn<String?>(
//       'DESCRICAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [id, idProdutoGrupo, nome, descricao];
//   @override
//   String get aliasedName => _alias ?? 'PRODUTO_SUBGRUPO';
//   @override
//   String get actualTableName => 'PRODUTO_SUBGRUPO';
//   @override
//   VerificationContext validateIntegrity(Insertable<ProdutoSubgrupo> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_PRODUTO_GRUPO')) {
//       context.handle(
//           _idProdutoGrupoMeta,
//           idProdutoGrupo.isAcceptableOrUnknown(
//               data['ID_PRODUTO_GRUPO']!, _idProdutoGrupoMeta));
//     }
//     if (data.containsKey('NOME')) {
//       context.handle(
//           _nomeMeta, nome.isAcceptableOrUnknown(data['NOME']!, _nomeMeta));
//     }
//     if (data.containsKey('DESCRICAO')) {
//       context.handle(_descricaoMeta,
//           descricao.isAcceptableOrUnknown(data['DESCRICAO']!, _descricaoMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   ProdutoSubgrupo map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return ProdutoSubgrupo(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idProdutoGrupo: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_PRODUTO_GRUPO']),
//       nome: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NOME']),
//       descricao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DESCRICAO']),
//     );
//   }

//   @override
//   $ProdutoSubgruposTable createAlias(String alias) {
//     return $ProdutoSubgruposTable(_db, alias);
//   }
// }

// class ProdutoTiposCompanion extends UpdateCompanion<ProdutoTipo> {
//   final Value<int> id;
//   final Value<String?> codigo;
//   final Value<String?> descricao;
//   const ProdutoTiposCompanion({
//     this.id = const Value.absent(),
//     this.codigo = const Value.absent(),
//     this.descricao = const Value.absent(),
//   });
//   ProdutoTiposCompanion.insert({
//     this.id = const Value.absent(),
//     this.codigo = const Value.absent(),
//     this.descricao = const Value.absent(),
//   });
//   static Insertable<ProdutoTipo> custom({
//     Expression<int>? id,
//     Expression<String?>? codigo,
//     Expression<String?>? descricao,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (codigo != null) 'CODIGO': codigo,
//       if (descricao != null) 'DESCRICAO': descricao,
//     });
//   }

//   ProdutoTiposCompanion copyWith(
//       {Value<int>? id, Value<String?>? codigo, Value<String?>? descricao}) {
//     return ProdutoTiposCompanion(
//       id: id ?? this.id,
//       codigo: codigo ?? this.codigo,
//       descricao: descricao ?? this.descricao,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (codigo.present) {
//       map['CODIGO'] = Variable<String?>(codigo.value);
//     }
//     if (descricao.present) {
//       map['DESCRICAO'] = Variable<String?>(descricao.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('ProdutoTiposCompanion(')
//           ..write('id: $id, ')
//           ..write('codigo: $codigo, ')
//           ..write('descricao: $descricao')
//           ..write(')'))
//         .toString();
//   }
// }

// class $ProdutoTiposTable extends ProdutoTipos
//     with TableInfo<$ProdutoTiposTable, ProdutoTipo> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $ProdutoTiposTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _codigoMeta = const VerificationMeta('codigo');
//   late final GeneratedColumn<String?> codigo = GeneratedColumn<String?>(
//       'CODIGO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _descricaoMeta = const VerificationMeta('descricao');
//   late final GeneratedColumn<String?> descricao = GeneratedColumn<String?>(
//       'DESCRICAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 50),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [id, codigo, descricao];
//   @override
//   String get aliasedName => _alias ?? 'PRODUTO_TIPO';
//   @override
//   String get actualTableName => 'PRODUTO_TIPO';
//   @override
//   VerificationContext validateIntegrity(Insertable<ProdutoTipo> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('CODIGO')) {
//       context.handle(_codigoMeta,
//           codigo.isAcceptableOrUnknown(data['CODIGO']!, _codigoMeta));
//     }
//     if (data.containsKey('DESCRICAO')) {
//       context.handle(_descricaoMeta,
//           descricao.isAcceptableOrUnknown(data['DESCRICAO']!, _descricaoMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   ProdutoTipo map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return ProdutoTipo(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       codigo: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO']),
//       descricao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DESCRICAO']),
//     );
//   }

//   @override
//   $ProdutoTiposTable createAlias(String alias) {
//     return $ProdutoTiposTable(_db, alias);
//   }
// }

// class ProdutoUnidadesCompanion extends UpdateCompanion<ProdutoUnidade> {
//   final Value<int> id;
//   final Value<String?> sigla;
//   final Value<String?> descricao;
//   final Value<String?> podeFracionar;
//   const ProdutoUnidadesCompanion({
//     this.id = const Value.absent(),
//     this.sigla = const Value.absent(),
//     this.descricao = const Value.absent(),
//     this.podeFracionar = const Value.absent(),
//   });
//   ProdutoUnidadesCompanion.insert({
//     this.id = const Value.absent(),
//     this.sigla = const Value.absent(),
//     this.descricao = const Value.absent(),
//     this.podeFracionar = const Value.absent(),
//   });
//   static Insertable<ProdutoUnidade> custom({
//     Expression<int>? id,
//     Expression<String?>? sigla,
//     Expression<String?>? descricao,
//     Expression<String?>? podeFracionar,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (sigla != null) 'SIGLA': sigla,
//       if (descricao != null) 'DESCRICAO': descricao,
//       if (podeFracionar != null) 'PODE_FRACIONAR': podeFracionar,
//     });
//   }

//   ProdutoUnidadesCompanion copyWith(
//       {Value<int>? id,
//       Value<String?>? sigla,
//       Value<String?>? descricao,
//       Value<String?>? podeFracionar}) {
//     return ProdutoUnidadesCompanion(
//       id: id ?? this.id,
//       sigla: sigla ?? this.sigla,
//       descricao: descricao ?? this.descricao,
//       podeFracionar: podeFracionar ?? this.podeFracionar,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (sigla.present) {
//       map['SIGLA'] = Variable<String?>(sigla.value);
//     }
//     if (descricao.present) {
//       map['DESCRICAO'] = Variable<String?>(descricao.value);
//     }
//     if (podeFracionar.present) {
//       map['PODE_FRACIONAR'] = Variable<String?>(podeFracionar.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('ProdutoUnidadesCompanion(')
//           ..write('id: $id, ')
//           ..write('sigla: $sigla, ')
//           ..write('descricao: $descricao, ')
//           ..write('podeFracionar: $podeFracionar')
//           ..write(')'))
//         .toString();
//   }
// }

// class $ProdutoUnidadesTable extends ProdutoUnidades
//     with TableInfo<$ProdutoUnidadesTable, ProdutoUnidade> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $ProdutoUnidadesTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _siglaMeta = const VerificationMeta('sigla');
//   late final GeneratedColumn<String?> sigla = GeneratedColumn<String?>(
//       'SIGLA', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 10),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _descricaoMeta = const VerificationMeta('descricao');
//   late final GeneratedColumn<String?> descricao = GeneratedColumn<String?>(
//       'DESCRICAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _podeFracionarMeta =
//       const VerificationMeta('podeFracionar');
//   late final GeneratedColumn<String?> podeFracionar = GeneratedColumn<String?>(
//       'PODE_FRACIONAR', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [id, sigla, descricao, podeFracionar];
//   @override
//   String get aliasedName => _alias ?? 'PRODUTO_UNIDADE';
//   @override
//   String get actualTableName => 'PRODUTO_UNIDADE';
//   @override
//   VerificationContext validateIntegrity(Insertable<ProdutoUnidade> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('SIGLA')) {
//       context.handle(
//           _siglaMeta, sigla.isAcceptableOrUnknown(data['SIGLA']!, _siglaMeta));
//     }
//     if (data.containsKey('DESCRICAO')) {
//       context.handle(_descricaoMeta,
//           descricao.isAcceptableOrUnknown(data['DESCRICAO']!, _descricaoMeta));
//     }
//     if (data.containsKey('PODE_FRACIONAR')) {
//       context.handle(
//           _podeFracionarMeta,
//           podeFracionar.isAcceptableOrUnknown(
//               data['PODE_FRACIONAR']!, _podeFracionarMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   ProdutoUnidade map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return ProdutoUnidade(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       sigla: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}SIGLA']),
//       descricao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DESCRICAO']),
//       podeFracionar: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}PODE_FRACIONAR']),
//     );
//   }

//   @override
//   $ProdutoUnidadesTable createAlias(String alias) {
//     return $ProdutoUnidadesTable(_db, alias);
//   }
// }

// class ReservasCompanion extends UpdateCompanion<Reserva> {
//   final Value<int> id;
//   final Value<int?> idCliente;
//   final Value<String?> nomeContato;
//   final Value<String?> telefoneContato;
//   final Value<DateTime?> dataReserva;
//   final Value<String?> horaReserva;
//   final Value<int?> quantidadePessoas;
//   final Value<String?> situacao;
//   const ReservasCompanion({
//     this.id = const Value.absent(),
//     this.idCliente = const Value.absent(),
//     this.nomeContato = const Value.absent(),
//     this.telefoneContato = const Value.absent(),
//     this.dataReserva = const Value.absent(),
//     this.horaReserva = const Value.absent(),
//     this.quantidadePessoas = const Value.absent(),
//     this.situacao = const Value.absent(),
//   });
//   ReservasCompanion.insert({
//     this.id = const Value.absent(),
//     this.idCliente = const Value.absent(),
//     this.nomeContato = const Value.absent(),
//     this.telefoneContato = const Value.absent(),
//     this.dataReserva = const Value.absent(),
//     this.horaReserva = const Value.absent(),
//     this.quantidadePessoas = const Value.absent(),
//     this.situacao = const Value.absent(),
//   });
//   static Insertable<Reserva> custom({
//     Expression<int>? id,
//     Expression<int?>? idCliente,
//     Expression<String?>? nomeContato,
//     Expression<String?>? telefoneContato,
//     Expression<DateTime?>? dataReserva,
//     Expression<String?>? horaReserva,
//     Expression<int?>? quantidadePessoas,
//     Expression<String?>? situacao,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idCliente != null) 'ID_CLIENTE': idCliente,
//       if (nomeContato != null) 'NOME_CONTATO': nomeContato,
//       if (telefoneContato != null) 'TELEFONE_CONTATO': telefoneContato,
//       if (dataReserva != null) 'DATA_RESERVA': dataReserva,
//       if (horaReserva != null) 'HORA_RESERVA': horaReserva,
//       if (quantidadePessoas != null) 'QUANTIDADE_PESSOAS': quantidadePessoas,
//       if (situacao != null) 'SITUACAO': situacao,
//     });
//   }

//   ReservasCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idCliente,
//       Value<String?>? nomeContato,
//       Value<String?>? telefoneContato,
//       Value<DateTime?>? dataReserva,
//       Value<String?>? horaReserva,
//       Value<int?>? quantidadePessoas,
//       Value<String?>? situacao}) {
//     return ReservasCompanion(
//       id: id ?? this.id,
//       idCliente: idCliente ?? this.idCliente,
//       nomeContato: nomeContato ?? this.nomeContato,
//       telefoneContato: telefoneContato ?? this.telefoneContato,
//       dataReserva: dataReserva ?? this.dataReserva,
//       horaReserva: horaReserva ?? this.horaReserva,
//       quantidadePessoas: quantidadePessoas ?? this.quantidadePessoas,
//       situacao: situacao ?? this.situacao,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idCliente.present) {
//       map['ID_CLIENTE'] = Variable<int?>(idCliente.value);
//     }
//     if (nomeContato.present) {
//       map['NOME_CONTATO'] = Variable<String?>(nomeContato.value);
//     }
//     if (telefoneContato.present) {
//       map['TELEFONE_CONTATO'] = Variable<String?>(telefoneContato.value);
//     }
//     if (dataReserva.present) {
//       map['DATA_RESERVA'] = Variable<DateTime?>(dataReserva.value);
//     }
//     if (horaReserva.present) {
//       map['HORA_RESERVA'] = Variable<String?>(horaReserva.value);
//     }
//     if (quantidadePessoas.present) {
//       map['QUANTIDADE_PESSOAS'] = Variable<int?>(quantidadePessoas.value);
//     }
//     if (situacao.present) {
//       map['SITUACAO'] = Variable<String?>(situacao.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('ReservasCompanion(')
//           ..write('id: $id, ')
//           ..write('idCliente: $idCliente, ')
//           ..write('nomeContato: $nomeContato, ')
//           ..write('telefoneContato: $telefoneContato, ')
//           ..write('dataReserva: $dataReserva, ')
//           ..write('horaReserva: $horaReserva, ')
//           ..write('quantidadePessoas: $quantidadePessoas, ')
//           ..write('situacao: $situacao')
//           ..write(')'))
//         .toString();
//   }
// }

// class $ReservasTable extends Reservas with TableInfo<$ReservasTable, Reserva> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $ReservasTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idClienteMeta = const VerificationMeta('idCliente');
//   late final GeneratedColumn<int?> idCliente = GeneratedColumn<int?>(
//       'ID_CLIENTE', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES CLIENTE(ID)');
//   final VerificationMeta _nomeContatoMeta =
//       const VerificationMeta('nomeContato');
//   late final GeneratedColumn<String?> nomeContato = GeneratedColumn<String?>(
//       'NOME_CONTATO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _telefoneContatoMeta =
//       const VerificationMeta('telefoneContato');
//   late final GeneratedColumn<String?> telefoneContato =
//       GeneratedColumn<String?>('TELEFONE_CONTATO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 15),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _dataReservaMeta =
//       const VerificationMeta('dataReserva');
//   late final GeneratedColumn<DateTime?> dataReserva =
//       GeneratedColumn<DateTime?>('DATA_RESERVA', aliasedName, true,
//           typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _horaReservaMeta =
//       const VerificationMeta('horaReserva');
//   late final GeneratedColumn<String?> horaReserva = GeneratedColumn<String?>(
//       'HORA_RESERVA', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _quantidadePessoasMeta =
//       const VerificationMeta('quantidadePessoas');
//   late final GeneratedColumn<int?> quantidadePessoas = GeneratedColumn<int?>(
//       'QUANTIDADE_PESSOAS', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _situacaoMeta = const VerificationMeta('situacao');
//   late final GeneratedColumn<String?> situacao = GeneratedColumn<String?>(
//       'SITUACAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idCliente,
//         nomeContato,
//         telefoneContato,
//         dataReserva,
//         horaReserva,
//         quantidadePessoas,
//         situacao
//       ];
//   @override
//   String get aliasedName => _alias ?? 'RESERVA';
//   @override
//   String get actualTableName => 'RESERVA';
//   @override
//   VerificationContext validateIntegrity(Insertable<Reserva> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_CLIENTE')) {
//       context.handle(_idClienteMeta,
//           idCliente.isAcceptableOrUnknown(data['ID_CLIENTE']!, _idClienteMeta));
//     }
//     if (data.containsKey('NOME_CONTATO')) {
//       context.handle(
//           _nomeContatoMeta,
//           nomeContato.isAcceptableOrUnknown(
//               data['NOME_CONTATO']!, _nomeContatoMeta));
//     }
//     if (data.containsKey('TELEFONE_CONTATO')) {
//       context.handle(
//           _telefoneContatoMeta,
//           telefoneContato.isAcceptableOrUnknown(
//               data['TELEFONE_CONTATO']!, _telefoneContatoMeta));
//     }
//     if (data.containsKey('DATA_RESERVA')) {
//       context.handle(
//           _dataReservaMeta,
//           dataReserva.isAcceptableOrUnknown(
//               data['DATA_RESERVA']!, _dataReservaMeta));
//     }
//     if (data.containsKey('HORA_RESERVA')) {
//       context.handle(
//           _horaReservaMeta,
//           horaReserva.isAcceptableOrUnknown(
//               data['HORA_RESERVA']!, _horaReservaMeta));
//     }
//     if (data.containsKey('QUANTIDADE_PESSOAS')) {
//       context.handle(
//           _quantidadePessoasMeta,
//           quantidadePessoas.isAcceptableOrUnknown(
//               data['QUANTIDADE_PESSOAS']!, _quantidadePessoasMeta));
//     }
//     if (data.containsKey('SITUACAO')) {
//       context.handle(_situacaoMeta,
//           situacao.isAcceptableOrUnknown(data['SITUACAO']!, _situacaoMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   Reserva map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return Reserva(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idCliente: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_CLIENTE']),
//       nomeContato: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NOME_CONTATO']),
//       telefoneContato: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}TELEFONE_CONTATO']),
//       dataReserva: const DateTimeType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DATA_RESERVA']),
//       horaReserva: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}HORA_RESERVA']),
//       quantidadePessoas: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}QUANTIDADE_PESSOAS']),
//       situacao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}SITUACAO']),
//     );
//   }

//   @override
//   $ReservasTable createAlias(String alias) {
//     return $ReservasTable(_db, alias);
//   }
// }

// class ReservaMesasCompanion extends UpdateCompanion<ReservaMesa> {
//   final Value<int> id;
//   final Value<int?> idMesa;
//   final Value<int?> idReserva;
//   const ReservaMesasCompanion({
//     this.id = const Value.absent(),
//     this.idMesa = const Value.absent(),
//     this.idReserva = const Value.absent(),
//   });
//   ReservaMesasCompanion.insert({
//     this.id = const Value.absent(),
//     this.idMesa = const Value.absent(),
//     this.idReserva = const Value.absent(),
//   });
//   static Insertable<ReservaMesa> custom({
//     Expression<int>? id,
//     Expression<int?>? idMesa,
//     Expression<int?>? idReserva,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idMesa != null) 'ID_MESA': idMesa,
//       if (idReserva != null) 'ID_RESERVA': idReserva,
//     });
//   }

//   ReservaMesasCompanion copyWith(
//       {Value<int>? id, Value<int?>? idMesa, Value<int?>? idReserva}) {
//     return ReservaMesasCompanion(
//       id: id ?? this.id,
//       idMesa: idMesa ?? this.idMesa,
//       idReserva: idReserva ?? this.idReserva,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idMesa.present) {
//       map['ID_MESA'] = Variable<int?>(idMesa.value);
//     }
//     if (idReserva.present) {
//       map['ID_RESERVA'] = Variable<int?>(idReserva.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('ReservaMesasCompanion(')
//           ..write('id: $id, ')
//           ..write('idMesa: $idMesa, ')
//           ..write('idReserva: $idReserva')
//           ..write(')'))
//         .toString();
//   }
// }

// class $ReservaMesasTable extends ReservaMesas
//     with TableInfo<$ReservaMesasTable, ReservaMesa> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $ReservaMesasTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idMesaMeta = const VerificationMeta('idMesa');
//   late final GeneratedColumn<int?> idMesa = GeneratedColumn<int?>(
//       'ID_MESA', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES MESA(ID)');
//   final VerificationMeta _idReservaMeta = const VerificationMeta('idReserva');
//   late final GeneratedColumn<int?> idReserva = GeneratedColumn<int?>(
//       'ID_RESERVA', aliasedName, true,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       $customConstraints: 'NULLABLE REFERENCES RESERVA(ID)');
//   @override
//   List<GeneratedColumn> get $columns => [id, idMesa, idReserva];
//   @override
//   String get aliasedName => _alias ?? 'RESERVA_MESA';
//   @override
//   String get actualTableName => 'RESERVA_MESA';
//   @override
//   VerificationContext validateIntegrity(Insertable<ReservaMesa> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_MESA')) {
//       context.handle(_idMesaMeta,
//           idMesa.isAcceptableOrUnknown(data['ID_MESA']!, _idMesaMeta));
//     }
//     if (data.containsKey('ID_RESERVA')) {
//       context.handle(_idReservaMeta,
//           idReserva.isAcceptableOrUnknown(data['ID_RESERVA']!, _idReservaMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   ReservaMesa map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return ReservaMesa(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idMesa: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_MESA']),
//       idReserva: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID_RESERVA']),
//     );
//   }

//   @override
//   $ReservaMesasTable createAlias(String alias) {
//     return $ReservaMesasTable(_db, alias);
//   }
// }

// class TaxaEntregasCompanion extends UpdateCompanion<TaxaEntrega> {
//   final Value<int> id;
//   final Value<String?> nome;
//   final Value<double?> valor;
//   final Value<int?> estimativaMinutos;
//   const TaxaEntregasCompanion({
//     this.id = const Value.absent(),
//     this.nome = const Value.absent(),
//     this.valor = const Value.absent(),
//     this.estimativaMinutos = const Value.absent(),
//   });
//   TaxaEntregasCompanion.insert({
//     this.id = const Value.absent(),
//     this.nome = const Value.absent(),
//     this.valor = const Value.absent(),
//     this.estimativaMinutos = const Value.absent(),
//   });
//   static Insertable<TaxaEntrega> custom({
//     Expression<int>? id,
//     Expression<String?>? nome,
//     Expression<double?>? valor,
//     Expression<int?>? estimativaMinutos,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (nome != null) 'NOME': nome,
//       if (valor != null) 'VALOR': valor,
//       if (estimativaMinutos != null) 'ESTIMATIVA_MINUTOS': estimativaMinutos,
//     });
//   }

//   TaxaEntregasCompanion copyWith(
//       {Value<int>? id,
//       Value<String?>? nome,
//       Value<double?>? valor,
//       Value<int?>? estimativaMinutos}) {
//     return TaxaEntregasCompanion(
//       id: id ?? this.id,
//       nome: nome ?? this.nome,
//       valor: valor ?? this.valor,
//       estimativaMinutos: estimativaMinutos ?? this.estimativaMinutos,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (nome.present) {
//       map['NOME'] = Variable<String?>(nome.value);
//     }
//     if (valor.present) {
//       map['VALOR'] = Variable<double?>(valor.value);
//     }
//     if (estimativaMinutos.present) {
//       map['ESTIMATIVA_MINUTOS'] = Variable<int?>(estimativaMinutos.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('TaxaEntregasCompanion(')
//           ..write('id: $id, ')
//           ..write('nome: $nome, ')
//           ..write('valor: $valor, ')
//           ..write('estimativaMinutos: $estimativaMinutos')
//           ..write(')'))
//         .toString();
//   }
// }

// class $TaxaEntregasTable extends TaxaEntregas
//     with TableInfo<$TaxaEntregasTable, TaxaEntrega> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $TaxaEntregasTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _nomeMeta = const VerificationMeta('nome');
//   late final GeneratedColumn<String?> nome = GeneratedColumn<String?>(
//       'NOME', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _valorMeta = const VerificationMeta('valor');
//   late final GeneratedColumn<double?> valor = GeneratedColumn<double?>(
//       'VALOR', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _estimativaMinutosMeta =
//       const VerificationMeta('estimativaMinutos');
//   late final GeneratedColumn<int?> estimativaMinutos = GeneratedColumn<int?>(
//       'ESTIMATIVA_MINUTOS', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [id, nome, valor, estimativaMinutos];
//   @override
//   String get aliasedName => _alias ?? 'TAXA_ENTREGA';
//   @override
//   String get actualTableName => 'TAXA_ENTREGA';
//   @override
//   VerificationContext validateIntegrity(Insertable<TaxaEntrega> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('NOME')) {
//       context.handle(
//           _nomeMeta, nome.isAcceptableOrUnknown(data['NOME']!, _nomeMeta));
//     }
//     if (data.containsKey('VALOR')) {
//       context.handle(
//           _valorMeta, valor.isAcceptableOrUnknown(data['VALOR']!, _valorMeta));
//     }
//     if (data.containsKey('ESTIMATIVA_MINUTOS')) {
//       context.handle(
//           _estimativaMinutosMeta,
//           estimativaMinutos.isAcceptableOrUnknown(
//               data['ESTIMATIVA_MINUTOS']!, _estimativaMinutosMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   TaxaEntrega map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return TaxaEntrega(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       nome: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}NOME']),
//       valor: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR']),
//       estimativaMinutos: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ESTIMATIVA_MINUTOS']),
//     );
//   }

//   @override
//   $TaxaEntregasTable createAlias(String alias) {
//     return $TaxaEntregasTable(_db, alias);
//   }
// }

// class TributCofinssCompanion extends UpdateCompanion<TributCofins> {
//   final Value<int> id;
//   final Value<int?> idTributConfiguraOfGt;
//   final Value<String?> cstCofins;
//   final Value<String?> efdTabela435;
//   final Value<String?> modalidadeBaseCalculo;
//   final Value<double?> porcentoBaseCalculo;
//   final Value<double?> aliquotaPorcento;
//   final Value<double?> aliquotaUnidade;
//   final Value<double?> valorPrecoMaximo;
//   final Value<double?> valorPautaFiscal;
//   const TributCofinssCompanion({
//     this.id = const Value.absent(),
//     this.idTributConfiguraOfGt = const Value.absent(),
//     this.cstCofins = const Value.absent(),
//     this.efdTabela435 = const Value.absent(),
//     this.modalidadeBaseCalculo = const Value.absent(),
//     this.porcentoBaseCalculo = const Value.absent(),
//     this.aliquotaPorcento = const Value.absent(),
//     this.aliquotaUnidade = const Value.absent(),
//     this.valorPrecoMaximo = const Value.absent(),
//     this.valorPautaFiscal = const Value.absent(),
//   });
//   TributCofinssCompanion.insert({
//     this.id = const Value.absent(),
//     this.idTributConfiguraOfGt = const Value.absent(),
//     this.cstCofins = const Value.absent(),
//     this.efdTabela435 = const Value.absent(),
//     this.modalidadeBaseCalculo = const Value.absent(),
//     this.porcentoBaseCalculo = const Value.absent(),
//     this.aliquotaPorcento = const Value.absent(),
//     this.aliquotaUnidade = const Value.absent(),
//     this.valorPrecoMaximo = const Value.absent(),
//     this.valorPautaFiscal = const Value.absent(),
//   });
//   static Insertable<TributCofins> custom({
//     Expression<int>? id,
//     Expression<int?>? idTributConfiguraOfGt,
//     Expression<String?>? cstCofins,
//     Expression<String?>? efdTabela435,
//     Expression<String?>? modalidadeBaseCalculo,
//     Expression<double?>? porcentoBaseCalculo,
//     Expression<double?>? aliquotaPorcento,
//     Expression<double?>? aliquotaUnidade,
//     Expression<double?>? valorPrecoMaximo,
//     Expression<double?>? valorPautaFiscal,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idTributConfiguraOfGt != null)
//         'ID_TRIBUT_CONFIGURA_OF_GT': idTributConfiguraOfGt,
//       if (cstCofins != null) 'CST_COFINS': cstCofins,
//       if (efdTabela435 != null) 'EFD_TABELA_435': efdTabela435,
//       if (modalidadeBaseCalculo != null)
//         'MODALIDADE_BASE_CALCULO': modalidadeBaseCalculo,
//       if (porcentoBaseCalculo != null)
//         'PORCENTO_BASE_CALCULO': porcentoBaseCalculo,
//       if (aliquotaPorcento != null) 'ALIQUOTA_PORCENTO': aliquotaPorcento,
//       if (aliquotaUnidade != null) 'ALIQUOTA_UNIDADE': aliquotaUnidade,
//       if (valorPrecoMaximo != null) 'VALOR_PRECO_MAXIMO': valorPrecoMaximo,
//       if (valorPautaFiscal != null) 'VALOR_PAUTA_FISCAL': valorPautaFiscal,
//     });
//   }

//   TributCofinssCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idTributConfiguraOfGt,
//       Value<String?>? cstCofins,
//       Value<String?>? efdTabela435,
//       Value<String?>? modalidadeBaseCalculo,
//       Value<double?>? porcentoBaseCalculo,
//       Value<double?>? aliquotaPorcento,
//       Value<double?>? aliquotaUnidade,
//       Value<double?>? valorPrecoMaximo,
//       Value<double?>? valorPautaFiscal}) {
//     return TributCofinssCompanion(
//       id: id ?? this.id,
//       idTributConfiguraOfGt:
//           idTributConfiguraOfGt ?? this.idTributConfiguraOfGt,
//       cstCofins: cstCofins ?? this.cstCofins,
//       efdTabela435: efdTabela435 ?? this.efdTabela435,
//       modalidadeBaseCalculo:
//           modalidadeBaseCalculo ?? this.modalidadeBaseCalculo,
//       porcentoBaseCalculo: porcentoBaseCalculo ?? this.porcentoBaseCalculo,
//       aliquotaPorcento: aliquotaPorcento ?? this.aliquotaPorcento,
//       aliquotaUnidade: aliquotaUnidade ?? this.aliquotaUnidade,
//       valorPrecoMaximo: valorPrecoMaximo ?? this.valorPrecoMaximo,
//       valorPautaFiscal: valorPautaFiscal ?? this.valorPautaFiscal,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idTributConfiguraOfGt.present) {
//       map['ID_TRIBUT_CONFIGURA_OF_GT'] =
//           Variable<int?>(idTributConfiguraOfGt.value);
//     }
//     if (cstCofins.present) {
//       map['CST_COFINS'] = Variable<String?>(cstCofins.value);
//     }
//     if (efdTabela435.present) {
//       map['EFD_TABELA_435'] = Variable<String?>(efdTabela435.value);
//     }
//     if (modalidadeBaseCalculo.present) {
//       map['MODALIDADE_BASE_CALCULO'] =
//           Variable<String?>(modalidadeBaseCalculo.value);
//     }
//     if (porcentoBaseCalculo.present) {
//       map['PORCENTO_BASE_CALCULO'] =
//           Variable<double?>(porcentoBaseCalculo.value);
//     }
//     if (aliquotaPorcento.present) {
//       map['ALIQUOTA_PORCENTO'] = Variable<double?>(aliquotaPorcento.value);
//     }
//     if (aliquotaUnidade.present) {
//       map['ALIQUOTA_UNIDADE'] = Variable<double?>(aliquotaUnidade.value);
//     }
//     if (valorPrecoMaximo.present) {
//       map['VALOR_PRECO_MAXIMO'] = Variable<double?>(valorPrecoMaximo.value);
//     }
//     if (valorPautaFiscal.present) {
//       map['VALOR_PAUTA_FISCAL'] = Variable<double?>(valorPautaFiscal.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('TributCofinssCompanion(')
//           ..write('id: $id, ')
//           ..write('idTributConfiguraOfGt: $idTributConfiguraOfGt, ')
//           ..write('cstCofins: $cstCofins, ')
//           ..write('efdTabela435: $efdTabela435, ')
//           ..write('modalidadeBaseCalculo: $modalidadeBaseCalculo, ')
//           ..write('porcentoBaseCalculo: $porcentoBaseCalculo, ')
//           ..write('aliquotaPorcento: $aliquotaPorcento, ')
//           ..write('aliquotaUnidade: $aliquotaUnidade, ')
//           ..write('valorPrecoMaximo: $valorPrecoMaximo, ')
//           ..write('valorPautaFiscal: $valorPautaFiscal')
//           ..write(')'))
//         .toString();
//   }
// }

// class $TributCofinssTable extends TributCofinss
//     with TableInfo<$TributCofinssTable, TributCofins> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $TributCofinssTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idTributConfiguraOfGtMeta =
//       const VerificationMeta('idTributConfiguraOfGt');
//   late final GeneratedColumn<int?> idTributConfiguraOfGt =
//       GeneratedColumn<int?>('ID_TRIBUT_CONFIGURA_OF_GT', aliasedName, true,
//           typeName: 'INTEGER',
//           requiredDuringInsert: false,
//           $customConstraints: 'NULLABLE REFERENCES TRIBUT_CONFIGURA_OF_GT(ID)');
//   final VerificationMeta _cstCofinsMeta = const VerificationMeta('cstCofins');
//   late final GeneratedColumn<String?> cstCofins = GeneratedColumn<String?>(
//       'CST_COFINS', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _efdTabela435Meta =
//       const VerificationMeta('efdTabela435');
//   late final GeneratedColumn<String?> efdTabela435 = GeneratedColumn<String?>(
//       'EFD_TABELA_435', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _modalidadeBaseCalculoMeta =
//       const VerificationMeta('modalidadeBaseCalculo');
//   late final GeneratedColumn<String?> modalidadeBaseCalculo =
//       GeneratedColumn<String?>('MODALIDADE_BASE_CALCULO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _porcentoBaseCalculoMeta =
//       const VerificationMeta('porcentoBaseCalculo');
//   late final GeneratedColumn<double?> porcentoBaseCalculo =
//       GeneratedColumn<double?>('PORCENTO_BASE_CALCULO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _aliquotaPorcentoMeta =
//       const VerificationMeta('aliquotaPorcento');
//   late final GeneratedColumn<double?> aliquotaPorcento =
//       GeneratedColumn<double?>('ALIQUOTA_PORCENTO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _aliquotaUnidadeMeta =
//       const VerificationMeta('aliquotaUnidade');
//   late final GeneratedColumn<double?> aliquotaUnidade =
//       GeneratedColumn<double?>('ALIQUOTA_UNIDADE', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorPrecoMaximoMeta =
//       const VerificationMeta('valorPrecoMaximo');
//   late final GeneratedColumn<double?> valorPrecoMaximo =
//       GeneratedColumn<double?>('VALOR_PRECO_MAXIMO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorPautaFiscalMeta =
//       const VerificationMeta('valorPautaFiscal');
//   late final GeneratedColumn<double?> valorPautaFiscal =
//       GeneratedColumn<double?>('VALOR_PAUTA_FISCAL', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idTributConfiguraOfGt,
//         cstCofins,
//         efdTabela435,
//         modalidadeBaseCalculo,
//         porcentoBaseCalculo,
//         aliquotaPorcento,
//         aliquotaUnidade,
//         valorPrecoMaximo,
//         valorPautaFiscal
//       ];
//   @override
//   String get aliasedName => _alias ?? 'TRIBUT_COFINS';
//   @override
//   String get actualTableName => 'TRIBUT_COFINS';
//   @override
//   VerificationContext validateIntegrity(Insertable<TributCofins> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_TRIBUT_CONFIGURA_OF_GT')) {
//       context.handle(
//           _idTributConfiguraOfGtMeta,
//           idTributConfiguraOfGt.isAcceptableOrUnknown(
//               data['ID_TRIBUT_CONFIGURA_OF_GT']!, _idTributConfiguraOfGtMeta));
//     }
//     if (data.containsKey('CST_COFINS')) {
//       context.handle(_cstCofinsMeta,
//           cstCofins.isAcceptableOrUnknown(data['CST_COFINS']!, _cstCofinsMeta));
//     }
//     if (data.containsKey('EFD_TABELA_435')) {
//       context.handle(
//           _efdTabela435Meta,
//           efdTabela435.isAcceptableOrUnknown(
//               data['EFD_TABELA_435']!, _efdTabela435Meta));
//     }
//     if (data.containsKey('MODALIDADE_BASE_CALCULO')) {
//       context.handle(
//           _modalidadeBaseCalculoMeta,
//           modalidadeBaseCalculo.isAcceptableOrUnknown(
//               data['MODALIDADE_BASE_CALCULO']!, _modalidadeBaseCalculoMeta));
//     }
//     if (data.containsKey('PORCENTO_BASE_CALCULO')) {
//       context.handle(
//           _porcentoBaseCalculoMeta,
//           porcentoBaseCalculo.isAcceptableOrUnknown(
//               data['PORCENTO_BASE_CALCULO']!, _porcentoBaseCalculoMeta));
//     }
//     if (data.containsKey('ALIQUOTA_PORCENTO')) {
//       context.handle(
//           _aliquotaPorcentoMeta,
//           aliquotaPorcento.isAcceptableOrUnknown(
//               data['ALIQUOTA_PORCENTO']!, _aliquotaPorcentoMeta));
//     }
//     if (data.containsKey('ALIQUOTA_UNIDADE')) {
//       context.handle(
//           _aliquotaUnidadeMeta,
//           aliquotaUnidade.isAcceptableOrUnknown(
//               data['ALIQUOTA_UNIDADE']!, _aliquotaUnidadeMeta));
//     }
//     if (data.containsKey('VALOR_PRECO_MAXIMO')) {
//       context.handle(
//           _valorPrecoMaximoMeta,
//           valorPrecoMaximo.isAcceptableOrUnknown(
//               data['VALOR_PRECO_MAXIMO']!, _valorPrecoMaximoMeta));
//     }
//     if (data.containsKey('VALOR_PAUTA_FISCAL')) {
//       context.handle(
//           _valorPautaFiscalMeta,
//           valorPautaFiscal.isAcceptableOrUnknown(
//               data['VALOR_PAUTA_FISCAL']!, _valorPautaFiscalMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   TributCofins map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return TributCofins(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idTributConfiguraOfGt: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ID_TRIBUT_CONFIGURA_OF_GT']),
//       cstCofins: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CST_COFINS']),
//       efdTabela435: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}EFD_TABELA_435']),
//       modalidadeBaseCalculo: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}MODALIDADE_BASE_CALCULO']),
//       porcentoBaseCalculo: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}PORCENTO_BASE_CALCULO']),
//       aliquotaPorcento: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ALIQUOTA_PORCENTO']),
//       aliquotaUnidade: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ALIQUOTA_UNIDADE']),
//       valorPrecoMaximo: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_PRECO_MAXIMO']),
//       valorPautaFiscal: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_PAUTA_FISCAL']),
//     );
//   }

//   @override
//   $TributCofinssTable createAlias(String alias) {
//     return $TributCofinssTable(_db, alias);
//   }
// }

// class TributConfiguraOfGtsCompanion
//     extends UpdateCompanion<TributConfiguraOfGt> {
//   final Value<int> id;
//   final Value<int?> idTributGrupoTributario;
//   final Value<int?> idTributOperacaoFiscal;
//   const TributConfiguraOfGtsCompanion({
//     this.id = const Value.absent(),
//     this.idTributGrupoTributario = const Value.absent(),
//     this.idTributOperacaoFiscal = const Value.absent(),
//   });
//   TributConfiguraOfGtsCompanion.insert({
//     this.id = const Value.absent(),
//     this.idTributGrupoTributario = const Value.absent(),
//     this.idTributOperacaoFiscal = const Value.absent(),
//   });
//   static Insertable<TributConfiguraOfGt> custom({
//     Expression<int>? id,
//     Expression<int?>? idTributGrupoTributario,
//     Expression<int?>? idTributOperacaoFiscal,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idTributGrupoTributario != null)
//         'ID_TRIBUT_GRUPO_TRIBUTARIO': idTributGrupoTributario,
//       if (idTributOperacaoFiscal != null)
//         'ID_TRIBUT_OPERACAO_FISCAL': idTributOperacaoFiscal,
//     });
//   }

//   TributConfiguraOfGtsCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idTributGrupoTributario,
//       Value<int?>? idTributOperacaoFiscal}) {
//     return TributConfiguraOfGtsCompanion(
//       id: id ?? this.id,
//       idTributGrupoTributario:
//           idTributGrupoTributario ?? this.idTributGrupoTributario,
//       idTributOperacaoFiscal:
//           idTributOperacaoFiscal ?? this.idTributOperacaoFiscal,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idTributGrupoTributario.present) {
//       map['ID_TRIBUT_GRUPO_TRIBUTARIO'] =
//           Variable<int?>(idTributGrupoTributario.value);
//     }
//     if (idTributOperacaoFiscal.present) {
//       map['ID_TRIBUT_OPERACAO_FISCAL'] =
//           Variable<int?>(idTributOperacaoFiscal.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('TributConfiguraOfGtsCompanion(')
//           ..write('id: $id, ')
//           ..write('idTributGrupoTributario: $idTributGrupoTributario, ')
//           ..write('idTributOperacaoFiscal: $idTributOperacaoFiscal')
//           ..write(')'))
//         .toString();
//   }
// }

// class $TributConfiguraOfGtsTable extends TributConfiguraOfGts
//     with TableInfo<$TributConfiguraOfGtsTable, TributConfiguraOfGt> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $TributConfiguraOfGtsTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idTributGrupoTributarioMeta =
//       const VerificationMeta('idTributGrupoTributario');
//   late final GeneratedColumn<int?> idTributGrupoTributario =
//       GeneratedColumn<int?>('ID_TRIBUT_GRUPO_TRIBUTARIO', aliasedName, true,
//           typeName: 'INTEGER',
//           requiredDuringInsert: false,
//           $customConstraints:
//               'NULLABLE REFERENCES TRIBUT_GRUPO_TRIBUTARIO(ID)');
//   final VerificationMeta _idTributOperacaoFiscalMeta =
//       const VerificationMeta('idTributOperacaoFiscal');
//   late final GeneratedColumn<int?> idTributOperacaoFiscal =
//       GeneratedColumn<int?>('ID_TRIBUT_OPERACAO_FISCAL', aliasedName, true,
//           typeName: 'INTEGER',
//           requiredDuringInsert: false,
//           $customConstraints: 'NULLABLE REFERENCES TRIBUT_OPERACAO_FISCAL(ID)');
//   @override
//   List<GeneratedColumn> get $columns =>
//       [id, idTributGrupoTributario, idTributOperacaoFiscal];
//   @override
//   String get aliasedName => _alias ?? 'TRIBUT_CONFIGURA_OF_GT';
//   @override
//   String get actualTableName => 'TRIBUT_CONFIGURA_OF_GT';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<TributConfiguraOfGt> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_TRIBUT_GRUPO_TRIBUTARIO')) {
//       context.handle(
//           _idTributGrupoTributarioMeta,
//           idTributGrupoTributario.isAcceptableOrUnknown(
//               data['ID_TRIBUT_GRUPO_TRIBUTARIO']!,
//               _idTributGrupoTributarioMeta));
//     }
//     if (data.containsKey('ID_TRIBUT_OPERACAO_FISCAL')) {
//       context.handle(
//           _idTributOperacaoFiscalMeta,
//           idTributOperacaoFiscal.isAcceptableOrUnknown(
//               data['ID_TRIBUT_OPERACAO_FISCAL']!, _idTributOperacaoFiscalMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   TributConfiguraOfGt map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return TributConfiguraOfGt(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idTributGrupoTributario: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ID_TRIBUT_GRUPO_TRIBUTARIO']),
//       idTributOperacaoFiscal: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ID_TRIBUT_OPERACAO_FISCAL']),
//     );
//   }

//   @override
//   $TributConfiguraOfGtsTable createAlias(String alias) {
//     return $TributConfiguraOfGtsTable(_db, alias);
//   }
// }

// class TributGrupoTributariosCompanion
//     extends UpdateCompanion<TributGrupoTributario> {
//   final Value<int> id;
//   final Value<String?> descricao;
//   final Value<String?> origemMercadoria;
//   final Value<String?> observacao;
//   const TributGrupoTributariosCompanion({
//     this.id = const Value.absent(),
//     this.descricao = const Value.absent(),
//     this.origemMercadoria = const Value.absent(),
//     this.observacao = const Value.absent(),
//   });
//   TributGrupoTributariosCompanion.insert({
//     this.id = const Value.absent(),
//     this.descricao = const Value.absent(),
//     this.origemMercadoria = const Value.absent(),
//     this.observacao = const Value.absent(),
//   });
//   static Insertable<TributGrupoTributario> custom({
//     Expression<int>? id,
//     Expression<String?>? descricao,
//     Expression<String?>? origemMercadoria,
//     Expression<String?>? observacao,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (descricao != null) 'DESCRICAO': descricao,
//       if (origemMercadoria != null) 'ORIGEM_MERCADORIA': origemMercadoria,
//       if (observacao != null) 'OBSERVACAO': observacao,
//     });
//   }

//   TributGrupoTributariosCompanion copyWith(
//       {Value<int>? id,
//       Value<String?>? descricao,
//       Value<String?>? origemMercadoria,
//       Value<String?>? observacao}) {
//     return TributGrupoTributariosCompanion(
//       id: id ?? this.id,
//       descricao: descricao ?? this.descricao,
//       origemMercadoria: origemMercadoria ?? this.origemMercadoria,
//       observacao: observacao ?? this.observacao,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (descricao.present) {
//       map['DESCRICAO'] = Variable<String?>(descricao.value);
//     }
//     if (origemMercadoria.present) {
//       map['ORIGEM_MERCADORIA'] = Variable<String?>(origemMercadoria.value);
//     }
//     if (observacao.present) {
//       map['OBSERVACAO'] = Variable<String?>(observacao.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('TributGrupoTributariosCompanion(')
//           ..write('id: $id, ')
//           ..write('descricao: $descricao, ')
//           ..write('origemMercadoria: $origemMercadoria, ')
//           ..write('observacao: $observacao')
//           ..write(')'))
//         .toString();
//   }
// }

// class $TributGrupoTributariosTable extends TributGrupoTributarios
//     with TableInfo<$TributGrupoTributariosTable, TributGrupoTributario> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $TributGrupoTributariosTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _descricaoMeta = const VerificationMeta('descricao');
//   late final GeneratedColumn<String?> descricao = GeneratedColumn<String?>(
//       'DESCRICAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _origemMercadoriaMeta =
//       const VerificationMeta('origemMercadoria');
//   late final GeneratedColumn<String?> origemMercadoria =
//       GeneratedColumn<String?>('ORIGEM_MERCADORIA', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _observacaoMeta = const VerificationMeta('observacao');
//   late final GeneratedColumn<String?> observacao = GeneratedColumn<String?>(
//       'OBSERVACAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns =>
//       [id, descricao, origemMercadoria, observacao];
//   @override
//   String get aliasedName => _alias ?? 'TRIBUT_GRUPO_TRIBUTARIO';
//   @override
//   String get actualTableName => 'TRIBUT_GRUPO_TRIBUTARIO';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<TributGrupoTributario> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('DESCRICAO')) {
//       context.handle(_descricaoMeta,
//           descricao.isAcceptableOrUnknown(data['DESCRICAO']!, _descricaoMeta));
//     }
//     if (data.containsKey('ORIGEM_MERCADORIA')) {
//       context.handle(
//           _origemMercadoriaMeta,
//           origemMercadoria.isAcceptableOrUnknown(
//               data['ORIGEM_MERCADORIA']!, _origemMercadoriaMeta));
//     }
//     if (data.containsKey('OBSERVACAO')) {
//       context.handle(
//           _observacaoMeta,
//           observacao.isAcceptableOrUnknown(
//               data['OBSERVACAO']!, _observacaoMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   TributGrupoTributario map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return TributGrupoTributario(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       descricao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DESCRICAO']),
//       origemMercadoria: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ORIGEM_MERCADORIA']),
//       observacao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}OBSERVACAO']),
//     );
//   }

//   @override
//   $TributGrupoTributariosTable createAlias(String alias) {
//     return $TributGrupoTributariosTable(_db, alias);
//   }
// }

// class TributIcmsCustomCabsCompanion
//     extends UpdateCompanion<TributIcmsCustomCab> {
//   final Value<int> id;
//   final Value<String?> descricao;
//   final Value<String?> origemMercadoria;
//   const TributIcmsCustomCabsCompanion({
//     this.id = const Value.absent(),
//     this.descricao = const Value.absent(),
//     this.origemMercadoria = const Value.absent(),
//   });
//   TributIcmsCustomCabsCompanion.insert({
//     this.id = const Value.absent(),
//     this.descricao = const Value.absent(),
//     this.origemMercadoria = const Value.absent(),
//   });
//   static Insertable<TributIcmsCustomCab> custom({
//     Expression<int>? id,
//     Expression<String?>? descricao,
//     Expression<String?>? origemMercadoria,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (descricao != null) 'DESCRICAO': descricao,
//       if (origemMercadoria != null) 'ORIGEM_MERCADORIA': origemMercadoria,
//     });
//   }

//   TributIcmsCustomCabsCompanion copyWith(
//       {Value<int>? id,
//       Value<String?>? descricao,
//       Value<String?>? origemMercadoria}) {
//     return TributIcmsCustomCabsCompanion(
//       id: id ?? this.id,
//       descricao: descricao ?? this.descricao,
//       origemMercadoria: origemMercadoria ?? this.origemMercadoria,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (descricao.present) {
//       map['DESCRICAO'] = Variable<String?>(descricao.value);
//     }
//     if (origemMercadoria.present) {
//       map['ORIGEM_MERCADORIA'] = Variable<String?>(origemMercadoria.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('TributIcmsCustomCabsCompanion(')
//           ..write('id: $id, ')
//           ..write('descricao: $descricao, ')
//           ..write('origemMercadoria: $origemMercadoria')
//           ..write(')'))
//         .toString();
//   }
// }

// class $TributIcmsCustomCabsTable extends TributIcmsCustomCabs
//     with TableInfo<$TributIcmsCustomCabsTable, TributIcmsCustomCab> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $TributIcmsCustomCabsTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _descricaoMeta = const VerificationMeta('descricao');
//   late final GeneratedColumn<String?> descricao = GeneratedColumn<String?>(
//       'DESCRICAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _origemMercadoriaMeta =
//       const VerificationMeta('origemMercadoria');
//   late final GeneratedColumn<String?> origemMercadoria =
//       GeneratedColumn<String?>('ORIGEM_MERCADORIA', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [id, descricao, origemMercadoria];
//   @override
//   String get aliasedName => _alias ?? 'TRIBUT_ICMS_CUSTOM_CAB';
//   @override
//   String get actualTableName => 'TRIBUT_ICMS_CUSTOM_CAB';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<TributIcmsCustomCab> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('DESCRICAO')) {
//       context.handle(_descricaoMeta,
//           descricao.isAcceptableOrUnknown(data['DESCRICAO']!, _descricaoMeta));
//     }
//     if (data.containsKey('ORIGEM_MERCADORIA')) {
//       context.handle(
//           _origemMercadoriaMeta,
//           origemMercadoria.isAcceptableOrUnknown(
//               data['ORIGEM_MERCADORIA']!, _origemMercadoriaMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   TributIcmsCustomCab map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return TributIcmsCustomCab(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       descricao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DESCRICAO']),
//       origemMercadoria: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ORIGEM_MERCADORIA']),
//     );
//   }

//   @override
//   $TributIcmsCustomCabsTable createAlias(String alias) {
//     return $TributIcmsCustomCabsTable(_db, alias);
//   }
// }

// class TributIcmsCustomDetsCompanion
//     extends UpdateCompanion<TributIcmsCustomDet> {
//   final Value<int> id;
//   final Value<int?> idTributIcmsCustomCab;
//   final Value<String?> ufDestino;
//   final Value<int?> cfop;
//   final Value<String?> csosn;
//   final Value<String?> cst;
//   final Value<String?> modalidadeBc;
//   final Value<double?> aliquota;
//   final Value<double?> valorPauta;
//   final Value<double?> valorPrecoMaximo;
//   final Value<double?> mva;
//   final Value<double?> porcentoBc;
//   final Value<String?> modalidadeBcSt;
//   final Value<double?> aliquotaInternaSt;
//   final Value<double?> aliquotaInterestadualSt;
//   final Value<double?> porcentoBcSt;
//   final Value<double?> aliquotaIcmsSt;
//   final Value<double?> valorPautaSt;
//   final Value<double?> valorPrecoMaximoSt;
//   const TributIcmsCustomDetsCompanion({
//     this.id = const Value.absent(),
//     this.idTributIcmsCustomCab = const Value.absent(),
//     this.ufDestino = const Value.absent(),
//     this.cfop = const Value.absent(),
//     this.csosn = const Value.absent(),
//     this.cst = const Value.absent(),
//     this.modalidadeBc = const Value.absent(),
//     this.aliquota = const Value.absent(),
//     this.valorPauta = const Value.absent(),
//     this.valorPrecoMaximo = const Value.absent(),
//     this.mva = const Value.absent(),
//     this.porcentoBc = const Value.absent(),
//     this.modalidadeBcSt = const Value.absent(),
//     this.aliquotaInternaSt = const Value.absent(),
//     this.aliquotaInterestadualSt = const Value.absent(),
//     this.porcentoBcSt = const Value.absent(),
//     this.aliquotaIcmsSt = const Value.absent(),
//     this.valorPautaSt = const Value.absent(),
//     this.valorPrecoMaximoSt = const Value.absent(),
//   });
//   TributIcmsCustomDetsCompanion.insert({
//     this.id = const Value.absent(),
//     this.idTributIcmsCustomCab = const Value.absent(),
//     this.ufDestino = const Value.absent(),
//     this.cfop = const Value.absent(),
//     this.csosn = const Value.absent(),
//     this.cst = const Value.absent(),
//     this.modalidadeBc = const Value.absent(),
//     this.aliquota = const Value.absent(),
//     this.valorPauta = const Value.absent(),
//     this.valorPrecoMaximo = const Value.absent(),
//     this.mva = const Value.absent(),
//     this.porcentoBc = const Value.absent(),
//     this.modalidadeBcSt = const Value.absent(),
//     this.aliquotaInternaSt = const Value.absent(),
//     this.aliquotaInterestadualSt = const Value.absent(),
//     this.porcentoBcSt = const Value.absent(),
//     this.aliquotaIcmsSt = const Value.absent(),
//     this.valorPautaSt = const Value.absent(),
//     this.valorPrecoMaximoSt = const Value.absent(),
//   });
//   static Insertable<TributIcmsCustomDet> custom({
//     Expression<int>? id,
//     Expression<int?>? idTributIcmsCustomCab,
//     Expression<String?>? ufDestino,
//     Expression<int?>? cfop,
//     Expression<String?>? csosn,
//     Expression<String?>? cst,
//     Expression<String?>? modalidadeBc,
//     Expression<double?>? aliquota,
//     Expression<double?>? valorPauta,
//     Expression<double?>? valorPrecoMaximo,
//     Expression<double?>? mva,
//     Expression<double?>? porcentoBc,
//     Expression<String?>? modalidadeBcSt,
//     Expression<double?>? aliquotaInternaSt,
//     Expression<double?>? aliquotaInterestadualSt,
//     Expression<double?>? porcentoBcSt,
//     Expression<double?>? aliquotaIcmsSt,
//     Expression<double?>? valorPautaSt,
//     Expression<double?>? valorPrecoMaximoSt,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idTributIcmsCustomCab != null)
//         'ID_TRIBUT_ICMS_CUSTOM_CAB': idTributIcmsCustomCab,
//       if (ufDestino != null) 'UF_DESTINO': ufDestino,
//       if (cfop != null) 'CFOP': cfop,
//       if (csosn != null) 'CSOSN': csosn,
//       if (cst != null) 'CST': cst,
//       if (modalidadeBc != null) 'MODALIDADE_BC': modalidadeBc,
//       if (aliquota != null) 'ALIQUOTA': aliquota,
//       if (valorPauta != null) 'VALOR_PAUTA': valorPauta,
//       if (valorPrecoMaximo != null) 'VALOR_PRECO_MAXIMO': valorPrecoMaximo,
//       if (mva != null) 'MVA': mva,
//       if (porcentoBc != null) 'PORCENTO_BC': porcentoBc,
//       if (modalidadeBcSt != null) 'MODALIDADE_BC_ST': modalidadeBcSt,
//       if (aliquotaInternaSt != null) 'ALIQUOTA_INTERNA_ST': aliquotaInternaSt,
//       if (aliquotaInterestadualSt != null)
//         'ALIQUOTA_INTERESTADUAL_ST': aliquotaInterestadualSt,
//       if (porcentoBcSt != null) 'PORCENTO_BC_ST': porcentoBcSt,
//       if (aliquotaIcmsSt != null) 'ALIQUOTA_ICMS_ST': aliquotaIcmsSt,
//       if (valorPautaSt != null) 'VALOR_PAUTA_ST': valorPautaSt,
//       if (valorPrecoMaximoSt != null)
//         'VALOR_PRECO_MAXIMO_ST': valorPrecoMaximoSt,
//     });
//   }

//   TributIcmsCustomDetsCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idTributIcmsCustomCab,
//       Value<String?>? ufDestino,
//       Value<int?>? cfop,
//       Value<String?>? csosn,
//       Value<String?>? cst,
//       Value<String?>? modalidadeBc,
//       Value<double?>? aliquota,
//       Value<double?>? valorPauta,
//       Value<double?>? valorPrecoMaximo,
//       Value<double?>? mva,
//       Value<double?>? porcentoBc,
//       Value<String?>? modalidadeBcSt,
//       Value<double?>? aliquotaInternaSt,
//       Value<double?>? aliquotaInterestadualSt,
//       Value<double?>? porcentoBcSt,
//       Value<double?>? aliquotaIcmsSt,
//       Value<double?>? valorPautaSt,
//       Value<double?>? valorPrecoMaximoSt}) {
//     return TributIcmsCustomDetsCompanion(
//       id: id ?? this.id,
//       idTributIcmsCustomCab:
//           idTributIcmsCustomCab ?? this.idTributIcmsCustomCab,
//       ufDestino: ufDestino ?? this.ufDestino,
//       cfop: cfop ?? this.cfop,
//       csosn: csosn ?? this.csosn,
//       cst: cst ?? this.cst,
//       modalidadeBc: modalidadeBc ?? this.modalidadeBc,
//       aliquota: aliquota ?? this.aliquota,
//       valorPauta: valorPauta ?? this.valorPauta,
//       valorPrecoMaximo: valorPrecoMaximo ?? this.valorPrecoMaximo,
//       mva: mva ?? this.mva,
//       porcentoBc: porcentoBc ?? this.porcentoBc,
//       modalidadeBcSt: modalidadeBcSt ?? this.modalidadeBcSt,
//       aliquotaInternaSt: aliquotaInternaSt ?? this.aliquotaInternaSt,
//       aliquotaInterestadualSt:
//           aliquotaInterestadualSt ?? this.aliquotaInterestadualSt,
//       porcentoBcSt: porcentoBcSt ?? this.porcentoBcSt,
//       aliquotaIcmsSt: aliquotaIcmsSt ?? this.aliquotaIcmsSt,
//       valorPautaSt: valorPautaSt ?? this.valorPautaSt,
//       valorPrecoMaximoSt: valorPrecoMaximoSt ?? this.valorPrecoMaximoSt,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idTributIcmsCustomCab.present) {
//       map['ID_TRIBUT_ICMS_CUSTOM_CAB'] =
//           Variable<int?>(idTributIcmsCustomCab.value);
//     }
//     if (ufDestino.present) {
//       map['UF_DESTINO'] = Variable<String?>(ufDestino.value);
//     }
//     if (cfop.present) {
//       map['CFOP'] = Variable<int?>(cfop.value);
//     }
//     if (csosn.present) {
//       map['CSOSN'] = Variable<String?>(csosn.value);
//     }
//     if (cst.present) {
//       map['CST'] = Variable<String?>(cst.value);
//     }
//     if (modalidadeBc.present) {
//       map['MODALIDADE_BC'] = Variable<String?>(modalidadeBc.value);
//     }
//     if (aliquota.present) {
//       map['ALIQUOTA'] = Variable<double?>(aliquota.value);
//     }
//     if (valorPauta.present) {
//       map['VALOR_PAUTA'] = Variable<double?>(valorPauta.value);
//     }
//     if (valorPrecoMaximo.present) {
//       map['VALOR_PRECO_MAXIMO'] = Variable<double?>(valorPrecoMaximo.value);
//     }
//     if (mva.present) {
//       map['MVA'] = Variable<double?>(mva.value);
//     }
//     if (porcentoBc.present) {
//       map['PORCENTO_BC'] = Variable<double?>(porcentoBc.value);
//     }
//     if (modalidadeBcSt.present) {
//       map['MODALIDADE_BC_ST'] = Variable<String?>(modalidadeBcSt.value);
//     }
//     if (aliquotaInternaSt.present) {
//       map['ALIQUOTA_INTERNA_ST'] = Variable<double?>(aliquotaInternaSt.value);
//     }
//     if (aliquotaInterestadualSt.present) {
//       map['ALIQUOTA_INTERESTADUAL_ST'] =
//           Variable<double?>(aliquotaInterestadualSt.value);
//     }
//     if (porcentoBcSt.present) {
//       map['PORCENTO_BC_ST'] = Variable<double?>(porcentoBcSt.value);
//     }
//     if (aliquotaIcmsSt.present) {
//       map['ALIQUOTA_ICMS_ST'] = Variable<double?>(aliquotaIcmsSt.value);
//     }
//     if (valorPautaSt.present) {
//       map['VALOR_PAUTA_ST'] = Variable<double?>(valorPautaSt.value);
//     }
//     if (valorPrecoMaximoSt.present) {
//       map['VALOR_PRECO_MAXIMO_ST'] =
//           Variable<double?>(valorPrecoMaximoSt.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('TributIcmsCustomDetsCompanion(')
//           ..write('id: $id, ')
//           ..write('idTributIcmsCustomCab: $idTributIcmsCustomCab, ')
//           ..write('ufDestino: $ufDestino, ')
//           ..write('cfop: $cfop, ')
//           ..write('csosn: $csosn, ')
//           ..write('cst: $cst, ')
//           ..write('modalidadeBc: $modalidadeBc, ')
//           ..write('aliquota: $aliquota, ')
//           ..write('valorPauta: $valorPauta, ')
//           ..write('valorPrecoMaximo: $valorPrecoMaximo, ')
//           ..write('mva: $mva, ')
//           ..write('porcentoBc: $porcentoBc, ')
//           ..write('modalidadeBcSt: $modalidadeBcSt, ')
//           ..write('aliquotaInternaSt: $aliquotaInternaSt, ')
//           ..write('aliquotaInterestadualSt: $aliquotaInterestadualSt, ')
//           ..write('porcentoBcSt: $porcentoBcSt, ')
//           ..write('aliquotaIcmsSt: $aliquotaIcmsSt, ')
//           ..write('valorPautaSt: $valorPautaSt, ')
//           ..write('valorPrecoMaximoSt: $valorPrecoMaximoSt')
//           ..write(')'))
//         .toString();
//   }
// }

// class $TributIcmsCustomDetsTable extends TributIcmsCustomDets
//     with TableInfo<$TributIcmsCustomDetsTable, TributIcmsCustomDet> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $TributIcmsCustomDetsTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idTributIcmsCustomCabMeta =
//       const VerificationMeta('idTributIcmsCustomCab');
//   late final GeneratedColumn<int?> idTributIcmsCustomCab =
//       GeneratedColumn<int?>('ID_TRIBUT_ICMS_CUSTOM_CAB', aliasedName, true,
//           typeName: 'INTEGER',
//           requiredDuringInsert: false,
//           $customConstraints: 'NULLABLE REFERENCES TRIBUT_ICMS_CUSTOM_CAB(ID)');
//   final VerificationMeta _ufDestinoMeta = const VerificationMeta('ufDestino');
//   late final GeneratedColumn<String?> ufDestino = GeneratedColumn<String?>(
//       'UF_DESTINO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cfopMeta = const VerificationMeta('cfop');
//   late final GeneratedColumn<int?> cfop = GeneratedColumn<int?>(
//       'CFOP', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _csosnMeta = const VerificationMeta('csosn');
//   late final GeneratedColumn<String?> csosn = GeneratedColumn<String?>(
//       'CSOSN', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 3),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cstMeta = const VerificationMeta('cst');
//   late final GeneratedColumn<String?> cst = GeneratedColumn<String?>(
//       'CST', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _modalidadeBcMeta =
//       const VerificationMeta('modalidadeBc');
//   late final GeneratedColumn<String?> modalidadeBc = GeneratedColumn<String?>(
//       'MODALIDADE_BC', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _aliquotaMeta = const VerificationMeta('aliquota');
//   late final GeneratedColumn<double?> aliquota = GeneratedColumn<double?>(
//       'ALIQUOTA', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorPautaMeta = const VerificationMeta('valorPauta');
//   late final GeneratedColumn<double?> valorPauta = GeneratedColumn<double?>(
//       'VALOR_PAUTA', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorPrecoMaximoMeta =
//       const VerificationMeta('valorPrecoMaximo');
//   late final GeneratedColumn<double?> valorPrecoMaximo =
//       GeneratedColumn<double?>('VALOR_PRECO_MAXIMO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _mvaMeta = const VerificationMeta('mva');
//   late final GeneratedColumn<double?> mva = GeneratedColumn<double?>(
//       'MVA', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _porcentoBcMeta = const VerificationMeta('porcentoBc');
//   late final GeneratedColumn<double?> porcentoBc = GeneratedColumn<double?>(
//       'PORCENTO_BC', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _modalidadeBcStMeta =
//       const VerificationMeta('modalidadeBcSt');
//   late final GeneratedColumn<String?> modalidadeBcSt = GeneratedColumn<String?>(
//       'MODALIDADE_BC_ST', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _aliquotaInternaStMeta =
//       const VerificationMeta('aliquotaInternaSt');
//   late final GeneratedColumn<double?> aliquotaInternaSt =
//       GeneratedColumn<double?>('ALIQUOTA_INTERNA_ST', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _aliquotaInterestadualStMeta =
//       const VerificationMeta('aliquotaInterestadualSt');
//   late final GeneratedColumn<double?> aliquotaInterestadualSt =
//       GeneratedColumn<double?>('ALIQUOTA_INTERESTADUAL_ST', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _porcentoBcStMeta =
//       const VerificationMeta('porcentoBcSt');
//   late final GeneratedColumn<double?> porcentoBcSt = GeneratedColumn<double?>(
//       'PORCENTO_BC_ST', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _aliquotaIcmsStMeta =
//       const VerificationMeta('aliquotaIcmsSt');
//   late final GeneratedColumn<double?> aliquotaIcmsSt = GeneratedColumn<double?>(
//       'ALIQUOTA_ICMS_ST', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorPautaStMeta =
//       const VerificationMeta('valorPautaSt');
//   late final GeneratedColumn<double?> valorPautaSt = GeneratedColumn<double?>(
//       'VALOR_PAUTA_ST', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorPrecoMaximoStMeta =
//       const VerificationMeta('valorPrecoMaximoSt');
//   late final GeneratedColumn<double?> valorPrecoMaximoSt =
//       GeneratedColumn<double?>('VALOR_PRECO_MAXIMO_ST', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idTributIcmsCustomCab,
//         ufDestino,
//         cfop,
//         csosn,
//         cst,
//         modalidadeBc,
//         aliquota,
//         valorPauta,
//         valorPrecoMaximo,
//         mva,
//         porcentoBc,
//         modalidadeBcSt,
//         aliquotaInternaSt,
//         aliquotaInterestadualSt,
//         porcentoBcSt,
//         aliquotaIcmsSt,
//         valorPautaSt,
//         valorPrecoMaximoSt
//       ];
//   @override
//   String get aliasedName => _alias ?? 'TRIBUT_ICMS_CUSTOM_DET';
//   @override
//   String get actualTableName => 'TRIBUT_ICMS_CUSTOM_DET';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<TributIcmsCustomDet> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_TRIBUT_ICMS_CUSTOM_CAB')) {
//       context.handle(
//           _idTributIcmsCustomCabMeta,
//           idTributIcmsCustomCab.isAcceptableOrUnknown(
//               data['ID_TRIBUT_ICMS_CUSTOM_CAB']!, _idTributIcmsCustomCabMeta));
//     }
//     if (data.containsKey('UF_DESTINO')) {
//       context.handle(_ufDestinoMeta,
//           ufDestino.isAcceptableOrUnknown(data['UF_DESTINO']!, _ufDestinoMeta));
//     }
//     if (data.containsKey('CFOP')) {
//       context.handle(
//           _cfopMeta, cfop.isAcceptableOrUnknown(data['CFOP']!, _cfopMeta));
//     }
//     if (data.containsKey('CSOSN')) {
//       context.handle(
//           _csosnMeta, csosn.isAcceptableOrUnknown(data['CSOSN']!, _csosnMeta));
//     }
//     if (data.containsKey('CST')) {
//       context.handle(
//           _cstMeta, cst.isAcceptableOrUnknown(data['CST']!, _cstMeta));
//     }
//     if (data.containsKey('MODALIDADE_BC')) {
//       context.handle(
//           _modalidadeBcMeta,
//           modalidadeBc.isAcceptableOrUnknown(
//               data['MODALIDADE_BC']!, _modalidadeBcMeta));
//     }
//     if (data.containsKey('ALIQUOTA')) {
//       context.handle(_aliquotaMeta,
//           aliquota.isAcceptableOrUnknown(data['ALIQUOTA']!, _aliquotaMeta));
//     }
//     if (data.containsKey('VALOR_PAUTA')) {
//       context.handle(
//           _valorPautaMeta,
//           valorPauta.isAcceptableOrUnknown(
//               data['VALOR_PAUTA']!, _valorPautaMeta));
//     }
//     if (data.containsKey('VALOR_PRECO_MAXIMO')) {
//       context.handle(
//           _valorPrecoMaximoMeta,
//           valorPrecoMaximo.isAcceptableOrUnknown(
//               data['VALOR_PRECO_MAXIMO']!, _valorPrecoMaximoMeta));
//     }
//     if (data.containsKey('MVA')) {
//       context.handle(
//           _mvaMeta, mva.isAcceptableOrUnknown(data['MVA']!, _mvaMeta));
//     }
//     if (data.containsKey('PORCENTO_BC')) {
//       context.handle(
//           _porcentoBcMeta,
//           porcentoBc.isAcceptableOrUnknown(
//               data['PORCENTO_BC']!, _porcentoBcMeta));
//     }
//     if (data.containsKey('MODALIDADE_BC_ST')) {
//       context.handle(
//           _modalidadeBcStMeta,
//           modalidadeBcSt.isAcceptableOrUnknown(
//               data['MODALIDADE_BC_ST']!, _modalidadeBcStMeta));
//     }
//     if (data.containsKey('ALIQUOTA_INTERNA_ST')) {
//       context.handle(
//           _aliquotaInternaStMeta,
//           aliquotaInternaSt.isAcceptableOrUnknown(
//               data['ALIQUOTA_INTERNA_ST']!, _aliquotaInternaStMeta));
//     }
//     if (data.containsKey('ALIQUOTA_INTERESTADUAL_ST')) {
//       context.handle(
//           _aliquotaInterestadualStMeta,
//           aliquotaInterestadualSt.isAcceptableOrUnknown(
//               data['ALIQUOTA_INTERESTADUAL_ST']!,
//               _aliquotaInterestadualStMeta));
//     }
//     if (data.containsKey('PORCENTO_BC_ST')) {
//       context.handle(
//           _porcentoBcStMeta,
//           porcentoBcSt.isAcceptableOrUnknown(
//               data['PORCENTO_BC_ST']!, _porcentoBcStMeta));
//     }
//     if (data.containsKey('ALIQUOTA_ICMS_ST')) {
//       context.handle(
//           _aliquotaIcmsStMeta,
//           aliquotaIcmsSt.isAcceptableOrUnknown(
//               data['ALIQUOTA_ICMS_ST']!, _aliquotaIcmsStMeta));
//     }
//     if (data.containsKey('VALOR_PAUTA_ST')) {
//       context.handle(
//           _valorPautaStMeta,
//           valorPautaSt.isAcceptableOrUnknown(
//               data['VALOR_PAUTA_ST']!, _valorPautaStMeta));
//     }
//     if (data.containsKey('VALOR_PRECO_MAXIMO_ST')) {
//       context.handle(
//           _valorPrecoMaximoStMeta,
//           valorPrecoMaximoSt.isAcceptableOrUnknown(
//               data['VALOR_PRECO_MAXIMO_ST']!, _valorPrecoMaximoStMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   TributIcmsCustomDet map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return TributIcmsCustomDet(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idTributIcmsCustomCab: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ID_TRIBUT_ICMS_CUSTOM_CAB']),
//       ufDestino: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}UF_DESTINO']),
//       cfop: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CFOP']),
//       csosn: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CSOSN']),
//       cst: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CST']),
//       modalidadeBc: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}MODALIDADE_BC']),
//       aliquota: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ALIQUOTA']),
//       valorPauta: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_PAUTA']),
//       valorPrecoMaximo: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_PRECO_MAXIMO']),
//       mva: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}MVA']),
//       porcentoBc: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}PORCENTO_BC']),
//       modalidadeBcSt: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}MODALIDADE_BC_ST']),
//       aliquotaInternaSt: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ALIQUOTA_INTERNA_ST']),
//       aliquotaInterestadualSt: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ALIQUOTA_INTERESTADUAL_ST']),
//       porcentoBcSt: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}PORCENTO_BC_ST']),
//       aliquotaIcmsSt: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ALIQUOTA_ICMS_ST']),
//       valorPautaSt: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_PAUTA_ST']),
//       valorPrecoMaximoSt: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_PRECO_MAXIMO_ST']),
//     );
//   }

//   @override
//   $TributIcmsCustomDetsTable createAlias(String alias) {
//     return $TributIcmsCustomDetsTable(_db, alias);
//   }
// }

// class TributIcmsUfsCompanion extends UpdateCompanion<TributIcmsUf> {
//   final Value<int> id;
//   final Value<int?> idTributConfiguraOfGt;
//   final Value<String?> ufDestino;
//   final Value<int?> cfop;
//   final Value<String?> csosn;
//   final Value<String?> cst;
//   final Value<String?> modalidadeBc;
//   final Value<double?> aliquota;
//   final Value<double?> valorPauta;
//   final Value<double?> valorPrecoMaximo;
//   final Value<double?> mva;
//   final Value<double?> porcentoBc;
//   final Value<String?> modalidadeBcSt;
//   final Value<double?> aliquotaInternaSt;
//   final Value<double?> aliquotaInterestadualSt;
//   final Value<double?> porcentoBcSt;
//   final Value<double?> aliquotaIcmsSt;
//   final Value<double?> valorPautaSt;
//   final Value<double?> valorPrecoMaximoSt;
//   const TributIcmsUfsCompanion({
//     this.id = const Value.absent(),
//     this.idTributConfiguraOfGt = const Value.absent(),
//     this.ufDestino = const Value.absent(),
//     this.cfop = const Value.absent(),
//     this.csosn = const Value.absent(),
//     this.cst = const Value.absent(),
//     this.modalidadeBc = const Value.absent(),
//     this.aliquota = const Value.absent(),
//     this.valorPauta = const Value.absent(),
//     this.valorPrecoMaximo = const Value.absent(),
//     this.mva = const Value.absent(),
//     this.porcentoBc = const Value.absent(),
//     this.modalidadeBcSt = const Value.absent(),
//     this.aliquotaInternaSt = const Value.absent(),
//     this.aliquotaInterestadualSt = const Value.absent(),
//     this.porcentoBcSt = const Value.absent(),
//     this.aliquotaIcmsSt = const Value.absent(),
//     this.valorPautaSt = const Value.absent(),
//     this.valorPrecoMaximoSt = const Value.absent(),
//   });
//   TributIcmsUfsCompanion.insert({
//     this.id = const Value.absent(),
//     this.idTributConfiguraOfGt = const Value.absent(),
//     this.ufDestino = const Value.absent(),
//     this.cfop = const Value.absent(),
//     this.csosn = const Value.absent(),
//     this.cst = const Value.absent(),
//     this.modalidadeBc = const Value.absent(),
//     this.aliquota = const Value.absent(),
//     this.valorPauta = const Value.absent(),
//     this.valorPrecoMaximo = const Value.absent(),
//     this.mva = const Value.absent(),
//     this.porcentoBc = const Value.absent(),
//     this.modalidadeBcSt = const Value.absent(),
//     this.aliquotaInternaSt = const Value.absent(),
//     this.aliquotaInterestadualSt = const Value.absent(),
//     this.porcentoBcSt = const Value.absent(),
//     this.aliquotaIcmsSt = const Value.absent(),
//     this.valorPautaSt = const Value.absent(),
//     this.valorPrecoMaximoSt = const Value.absent(),
//   });
//   static Insertable<TributIcmsUf> custom({
//     Expression<int>? id,
//     Expression<int?>? idTributConfiguraOfGt,
//     Expression<String?>? ufDestino,
//     Expression<int?>? cfop,
//     Expression<String?>? csosn,
//     Expression<String?>? cst,
//     Expression<String?>? modalidadeBc,
//     Expression<double?>? aliquota,
//     Expression<double?>? valorPauta,
//     Expression<double?>? valorPrecoMaximo,
//     Expression<double?>? mva,
//     Expression<double?>? porcentoBc,
//     Expression<String?>? modalidadeBcSt,
//     Expression<double?>? aliquotaInternaSt,
//     Expression<double?>? aliquotaInterestadualSt,
//     Expression<double?>? porcentoBcSt,
//     Expression<double?>? aliquotaIcmsSt,
//     Expression<double?>? valorPautaSt,
//     Expression<double?>? valorPrecoMaximoSt,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idTributConfiguraOfGt != null)
//         'ID_TRIBUT_CONFIGURA_OF_GT': idTributConfiguraOfGt,
//       if (ufDestino != null) 'UF_DESTINO': ufDestino,
//       if (cfop != null) 'CFOP': cfop,
//       if (csosn != null) 'CSOSN': csosn,
//       if (cst != null) 'CST': cst,
//       if (modalidadeBc != null) 'MODALIDADE_BC': modalidadeBc,
//       if (aliquota != null) 'ALIQUOTA': aliquota,
//       if (valorPauta != null) 'VALOR_PAUTA': valorPauta,
//       if (valorPrecoMaximo != null) 'VALOR_PRECO_MAXIMO': valorPrecoMaximo,
//       if (mva != null) 'MVA': mva,
//       if (porcentoBc != null) 'PORCENTO_BC': porcentoBc,
//       if (modalidadeBcSt != null) 'MODALIDADE_BC_ST': modalidadeBcSt,
//       if (aliquotaInternaSt != null) 'ALIQUOTA_INTERNA_ST': aliquotaInternaSt,
//       if (aliquotaInterestadualSt != null)
//         'ALIQUOTA_INTERESTADUAL_ST': aliquotaInterestadualSt,
//       if (porcentoBcSt != null) 'PORCENTO_BC_ST': porcentoBcSt,
//       if (aliquotaIcmsSt != null) 'ALIQUOTA_ICMS_ST': aliquotaIcmsSt,
//       if (valorPautaSt != null) 'VALOR_PAUTA_ST': valorPautaSt,
//       if (valorPrecoMaximoSt != null)
//         'VALOR_PRECO_MAXIMO_ST': valorPrecoMaximoSt,
//     });
//   }

//   TributIcmsUfsCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idTributConfiguraOfGt,
//       Value<String?>? ufDestino,
//       Value<int?>? cfop,
//       Value<String?>? csosn,
//       Value<String?>? cst,
//       Value<String?>? modalidadeBc,
//       Value<double?>? aliquota,
//       Value<double?>? valorPauta,
//       Value<double?>? valorPrecoMaximo,
//       Value<double?>? mva,
//       Value<double?>? porcentoBc,
//       Value<String?>? modalidadeBcSt,
//       Value<double?>? aliquotaInternaSt,
//       Value<double?>? aliquotaInterestadualSt,
//       Value<double?>? porcentoBcSt,
//       Value<double?>? aliquotaIcmsSt,
//       Value<double?>? valorPautaSt,
//       Value<double?>? valorPrecoMaximoSt}) {
//     return TributIcmsUfsCompanion(
//       id: id ?? this.id,
//       idTributConfiguraOfGt:
//           idTributConfiguraOfGt ?? this.idTributConfiguraOfGt,
//       ufDestino: ufDestino ?? this.ufDestino,
//       cfop: cfop ?? this.cfop,
//       csosn: csosn ?? this.csosn,
//       cst: cst ?? this.cst,
//       modalidadeBc: modalidadeBc ?? this.modalidadeBc,
//       aliquota: aliquota ?? this.aliquota,
//       valorPauta: valorPauta ?? this.valorPauta,
//       valorPrecoMaximo: valorPrecoMaximo ?? this.valorPrecoMaximo,
//       mva: mva ?? this.mva,
//       porcentoBc: porcentoBc ?? this.porcentoBc,
//       modalidadeBcSt: modalidadeBcSt ?? this.modalidadeBcSt,
//       aliquotaInternaSt: aliquotaInternaSt ?? this.aliquotaInternaSt,
//       aliquotaInterestadualSt:
//           aliquotaInterestadualSt ?? this.aliquotaInterestadualSt,
//       porcentoBcSt: porcentoBcSt ?? this.porcentoBcSt,
//       aliquotaIcmsSt: aliquotaIcmsSt ?? this.aliquotaIcmsSt,
//       valorPautaSt: valorPautaSt ?? this.valorPautaSt,
//       valorPrecoMaximoSt: valorPrecoMaximoSt ?? this.valorPrecoMaximoSt,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idTributConfiguraOfGt.present) {
//       map['ID_TRIBUT_CONFIGURA_OF_GT'] =
//           Variable<int?>(idTributConfiguraOfGt.value);
//     }
//     if (ufDestino.present) {
//       map['UF_DESTINO'] = Variable<String?>(ufDestino.value);
//     }
//     if (cfop.present) {
//       map['CFOP'] = Variable<int?>(cfop.value);
//     }
//     if (csosn.present) {
//       map['CSOSN'] = Variable<String?>(csosn.value);
//     }
//     if (cst.present) {
//       map['CST'] = Variable<String?>(cst.value);
//     }
//     if (modalidadeBc.present) {
//       map['MODALIDADE_BC'] = Variable<String?>(modalidadeBc.value);
//     }
//     if (aliquota.present) {
//       map['ALIQUOTA'] = Variable<double?>(aliquota.value);
//     }
//     if (valorPauta.present) {
//       map['VALOR_PAUTA'] = Variable<double?>(valorPauta.value);
//     }
//     if (valorPrecoMaximo.present) {
//       map['VALOR_PRECO_MAXIMO'] = Variable<double?>(valorPrecoMaximo.value);
//     }
//     if (mva.present) {
//       map['MVA'] = Variable<double?>(mva.value);
//     }
//     if (porcentoBc.present) {
//       map['PORCENTO_BC'] = Variable<double?>(porcentoBc.value);
//     }
//     if (modalidadeBcSt.present) {
//       map['MODALIDADE_BC_ST'] = Variable<String?>(modalidadeBcSt.value);
//     }
//     if (aliquotaInternaSt.present) {
//       map['ALIQUOTA_INTERNA_ST'] = Variable<double?>(aliquotaInternaSt.value);
//     }
//     if (aliquotaInterestadualSt.present) {
//       map['ALIQUOTA_INTERESTADUAL_ST'] =
//           Variable<double?>(aliquotaInterestadualSt.value);
//     }
//     if (porcentoBcSt.present) {
//       map['PORCENTO_BC_ST'] = Variable<double?>(porcentoBcSt.value);
//     }
//     if (aliquotaIcmsSt.present) {
//       map['ALIQUOTA_ICMS_ST'] = Variable<double?>(aliquotaIcmsSt.value);
//     }
//     if (valorPautaSt.present) {
//       map['VALOR_PAUTA_ST'] = Variable<double?>(valorPautaSt.value);
//     }
//     if (valorPrecoMaximoSt.present) {
//       map['VALOR_PRECO_MAXIMO_ST'] =
//           Variable<double?>(valorPrecoMaximoSt.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('TributIcmsUfsCompanion(')
//           ..write('id: $id, ')
//           ..write('idTributConfiguraOfGt: $idTributConfiguraOfGt, ')
//           ..write('ufDestino: $ufDestino, ')
//           ..write('cfop: $cfop, ')
//           ..write('csosn: $csosn, ')
//           ..write('cst: $cst, ')
//           ..write('modalidadeBc: $modalidadeBc, ')
//           ..write('aliquota: $aliquota, ')
//           ..write('valorPauta: $valorPauta, ')
//           ..write('valorPrecoMaximo: $valorPrecoMaximo, ')
//           ..write('mva: $mva, ')
//           ..write('porcentoBc: $porcentoBc, ')
//           ..write('modalidadeBcSt: $modalidadeBcSt, ')
//           ..write('aliquotaInternaSt: $aliquotaInternaSt, ')
//           ..write('aliquotaInterestadualSt: $aliquotaInterestadualSt, ')
//           ..write('porcentoBcSt: $porcentoBcSt, ')
//           ..write('aliquotaIcmsSt: $aliquotaIcmsSt, ')
//           ..write('valorPautaSt: $valorPautaSt, ')
//           ..write('valorPrecoMaximoSt: $valorPrecoMaximoSt')
//           ..write(')'))
//         .toString();
//   }
// }

// class $TributIcmsUfsTable extends TributIcmsUfs
//     with TableInfo<$TributIcmsUfsTable, TributIcmsUf> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $TributIcmsUfsTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idTributConfiguraOfGtMeta =
//       const VerificationMeta('idTributConfiguraOfGt');
//   late final GeneratedColumn<int?> idTributConfiguraOfGt =
//       GeneratedColumn<int?>('ID_TRIBUT_CONFIGURA_OF_GT', aliasedName, true,
//           typeName: 'INTEGER',
//           requiredDuringInsert: false,
//           $customConstraints: 'NULLABLE REFERENCES TRIBUT_CONFIGURA_OF_GT(ID)');
//   final VerificationMeta _ufDestinoMeta = const VerificationMeta('ufDestino');
//   late final GeneratedColumn<String?> ufDestino = GeneratedColumn<String?>(
//       'UF_DESTINO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cfopMeta = const VerificationMeta('cfop');
//   late final GeneratedColumn<int?> cfop = GeneratedColumn<int?>(
//       'CFOP', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _csosnMeta = const VerificationMeta('csosn');
//   late final GeneratedColumn<String?> csosn = GeneratedColumn<String?>(
//       'CSOSN', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 3),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cstMeta = const VerificationMeta('cst');
//   late final GeneratedColumn<String?> cst = GeneratedColumn<String?>(
//       'CST', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _modalidadeBcMeta =
//       const VerificationMeta('modalidadeBc');
//   late final GeneratedColumn<String?> modalidadeBc = GeneratedColumn<String?>(
//       'MODALIDADE_BC', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _aliquotaMeta = const VerificationMeta('aliquota');
//   late final GeneratedColumn<double?> aliquota = GeneratedColumn<double?>(
//       'ALIQUOTA', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorPautaMeta = const VerificationMeta('valorPauta');
//   late final GeneratedColumn<double?> valorPauta = GeneratedColumn<double?>(
//       'VALOR_PAUTA', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorPrecoMaximoMeta =
//       const VerificationMeta('valorPrecoMaximo');
//   late final GeneratedColumn<double?> valorPrecoMaximo =
//       GeneratedColumn<double?>('VALOR_PRECO_MAXIMO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _mvaMeta = const VerificationMeta('mva');
//   late final GeneratedColumn<double?> mva = GeneratedColumn<double?>(
//       'MVA', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _porcentoBcMeta = const VerificationMeta('porcentoBc');
//   late final GeneratedColumn<double?> porcentoBc = GeneratedColumn<double?>(
//       'PORCENTO_BC', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _modalidadeBcStMeta =
//       const VerificationMeta('modalidadeBcSt');
//   late final GeneratedColumn<String?> modalidadeBcSt = GeneratedColumn<String?>(
//       'MODALIDADE_BC_ST', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _aliquotaInternaStMeta =
//       const VerificationMeta('aliquotaInternaSt');
//   late final GeneratedColumn<double?> aliquotaInternaSt =
//       GeneratedColumn<double?>('ALIQUOTA_INTERNA_ST', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _aliquotaInterestadualStMeta =
//       const VerificationMeta('aliquotaInterestadualSt');
//   late final GeneratedColumn<double?> aliquotaInterestadualSt =
//       GeneratedColumn<double?>('ALIQUOTA_INTERESTADUAL_ST', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _porcentoBcStMeta =
//       const VerificationMeta('porcentoBcSt');
//   late final GeneratedColumn<double?> porcentoBcSt = GeneratedColumn<double?>(
//       'PORCENTO_BC_ST', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _aliquotaIcmsStMeta =
//       const VerificationMeta('aliquotaIcmsSt');
//   late final GeneratedColumn<double?> aliquotaIcmsSt = GeneratedColumn<double?>(
//       'ALIQUOTA_ICMS_ST', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorPautaStMeta =
//       const VerificationMeta('valorPautaSt');
//   late final GeneratedColumn<double?> valorPautaSt = GeneratedColumn<double?>(
//       'VALOR_PAUTA_ST', aliasedName, true,
//       typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorPrecoMaximoStMeta =
//       const VerificationMeta('valorPrecoMaximoSt');
//   late final GeneratedColumn<double?> valorPrecoMaximoSt =
//       GeneratedColumn<double?>('VALOR_PRECO_MAXIMO_ST', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idTributConfiguraOfGt,
//         ufDestino,
//         cfop,
//         csosn,
//         cst,
//         modalidadeBc,
//         aliquota,
//         valorPauta,
//         valorPrecoMaximo,
//         mva,
//         porcentoBc,
//         modalidadeBcSt,
//         aliquotaInternaSt,
//         aliquotaInterestadualSt,
//         porcentoBcSt,
//         aliquotaIcmsSt,
//         valorPautaSt,
//         valorPrecoMaximoSt
//       ];
//   @override
//   String get aliasedName => _alias ?? 'TRIBUT_ICMS_UF';
//   @override
//   String get actualTableName => 'TRIBUT_ICMS_UF';
//   @override
//   VerificationContext validateIntegrity(Insertable<TributIcmsUf> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_TRIBUT_CONFIGURA_OF_GT')) {
//       context.handle(
//           _idTributConfiguraOfGtMeta,
//           idTributConfiguraOfGt.isAcceptableOrUnknown(
//               data['ID_TRIBUT_CONFIGURA_OF_GT']!, _idTributConfiguraOfGtMeta));
//     }
//     if (data.containsKey('UF_DESTINO')) {
//       context.handle(_ufDestinoMeta,
//           ufDestino.isAcceptableOrUnknown(data['UF_DESTINO']!, _ufDestinoMeta));
//     }
//     if (data.containsKey('CFOP')) {
//       context.handle(
//           _cfopMeta, cfop.isAcceptableOrUnknown(data['CFOP']!, _cfopMeta));
//     }
//     if (data.containsKey('CSOSN')) {
//       context.handle(
//           _csosnMeta, csosn.isAcceptableOrUnknown(data['CSOSN']!, _csosnMeta));
//     }
//     if (data.containsKey('CST')) {
//       context.handle(
//           _cstMeta, cst.isAcceptableOrUnknown(data['CST']!, _cstMeta));
//     }
//     if (data.containsKey('MODALIDADE_BC')) {
//       context.handle(
//           _modalidadeBcMeta,
//           modalidadeBc.isAcceptableOrUnknown(
//               data['MODALIDADE_BC']!, _modalidadeBcMeta));
//     }
//     if (data.containsKey('ALIQUOTA')) {
//       context.handle(_aliquotaMeta,
//           aliquota.isAcceptableOrUnknown(data['ALIQUOTA']!, _aliquotaMeta));
//     }
//     if (data.containsKey('VALOR_PAUTA')) {
//       context.handle(
//           _valorPautaMeta,
//           valorPauta.isAcceptableOrUnknown(
//               data['VALOR_PAUTA']!, _valorPautaMeta));
//     }
//     if (data.containsKey('VALOR_PRECO_MAXIMO')) {
//       context.handle(
//           _valorPrecoMaximoMeta,
//           valorPrecoMaximo.isAcceptableOrUnknown(
//               data['VALOR_PRECO_MAXIMO']!, _valorPrecoMaximoMeta));
//     }
//     if (data.containsKey('MVA')) {
//       context.handle(
//           _mvaMeta, mva.isAcceptableOrUnknown(data['MVA']!, _mvaMeta));
//     }
//     if (data.containsKey('PORCENTO_BC')) {
//       context.handle(
//           _porcentoBcMeta,
//           porcentoBc.isAcceptableOrUnknown(
//               data['PORCENTO_BC']!, _porcentoBcMeta));
//     }
//     if (data.containsKey('MODALIDADE_BC_ST')) {
//       context.handle(
//           _modalidadeBcStMeta,
//           modalidadeBcSt.isAcceptableOrUnknown(
//               data['MODALIDADE_BC_ST']!, _modalidadeBcStMeta));
//     }
//     if (data.containsKey('ALIQUOTA_INTERNA_ST')) {
//       context.handle(
//           _aliquotaInternaStMeta,
//           aliquotaInternaSt.isAcceptableOrUnknown(
//               data['ALIQUOTA_INTERNA_ST']!, _aliquotaInternaStMeta));
//     }
//     if (data.containsKey('ALIQUOTA_INTERESTADUAL_ST')) {
//       context.handle(
//           _aliquotaInterestadualStMeta,
//           aliquotaInterestadualSt.isAcceptableOrUnknown(
//               data['ALIQUOTA_INTERESTADUAL_ST']!,
//               _aliquotaInterestadualStMeta));
//     }
//     if (data.containsKey('PORCENTO_BC_ST')) {
//       context.handle(
//           _porcentoBcStMeta,
//           porcentoBcSt.isAcceptableOrUnknown(
//               data['PORCENTO_BC_ST']!, _porcentoBcStMeta));
//     }
//     if (data.containsKey('ALIQUOTA_ICMS_ST')) {
//       context.handle(
//           _aliquotaIcmsStMeta,
//           aliquotaIcmsSt.isAcceptableOrUnknown(
//               data['ALIQUOTA_ICMS_ST']!, _aliquotaIcmsStMeta));
//     }
//     if (data.containsKey('VALOR_PAUTA_ST')) {
//       context.handle(
//           _valorPautaStMeta,
//           valorPautaSt.isAcceptableOrUnknown(
//               data['VALOR_PAUTA_ST']!, _valorPautaStMeta));
//     }
//     if (data.containsKey('VALOR_PRECO_MAXIMO_ST')) {
//       context.handle(
//           _valorPrecoMaximoStMeta,
//           valorPrecoMaximoSt.isAcceptableOrUnknown(
//               data['VALOR_PRECO_MAXIMO_ST']!, _valorPrecoMaximoStMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   TributIcmsUf map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return TributIcmsUf(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idTributConfiguraOfGt: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ID_TRIBUT_CONFIGURA_OF_GT']),
//       ufDestino: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}UF_DESTINO']),
//       cfop: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CFOP']),
//       csosn: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CSOSN']),
//       cst: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CST']),
//       modalidadeBc: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}MODALIDADE_BC']),
//       aliquota: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ALIQUOTA']),
//       valorPauta: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_PAUTA']),
//       valorPrecoMaximo: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_PRECO_MAXIMO']),
//       mva: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}MVA']),
//       porcentoBc: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}PORCENTO_BC']),
//       modalidadeBcSt: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}MODALIDADE_BC_ST']),
//       aliquotaInternaSt: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ALIQUOTA_INTERNA_ST']),
//       aliquotaInterestadualSt: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ALIQUOTA_INTERESTADUAL_ST']),
//       porcentoBcSt: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}PORCENTO_BC_ST']),
//       aliquotaIcmsSt: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ALIQUOTA_ICMS_ST']),
//       valorPautaSt: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_PAUTA_ST']),
//       valorPrecoMaximoSt: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_PRECO_MAXIMO_ST']),
//     );
//   }

//   @override
//   $TributIcmsUfsTable createAlias(String alias) {
//     return $TributIcmsUfsTable(_db, alias);
//   }
// }

// class TributIpisCompanion extends UpdateCompanion<TributIpi> {
//   final Value<int> id;
//   final Value<int?> idTributConfiguraOfGt;
//   final Value<String?> cstIpi;
//   final Value<String?> modalidadeBaseCalculo;
//   final Value<double?> porcentoBaseCalculo;
//   final Value<double?> aliquotaPorcento;
//   final Value<double?> aliquotaUnidade;
//   final Value<double?> valorPrecoMaximo;
//   final Value<double?> valorPautaFiscal;
//   const TributIpisCompanion({
//     this.id = const Value.absent(),
//     this.idTributConfiguraOfGt = const Value.absent(),
//     this.cstIpi = const Value.absent(),
//     this.modalidadeBaseCalculo = const Value.absent(),
//     this.porcentoBaseCalculo = const Value.absent(),
//     this.aliquotaPorcento = const Value.absent(),
//     this.aliquotaUnidade = const Value.absent(),
//     this.valorPrecoMaximo = const Value.absent(),
//     this.valorPautaFiscal = const Value.absent(),
//   });
//   TributIpisCompanion.insert({
//     this.id = const Value.absent(),
//     this.idTributConfiguraOfGt = const Value.absent(),
//     this.cstIpi = const Value.absent(),
//     this.modalidadeBaseCalculo = const Value.absent(),
//     this.porcentoBaseCalculo = const Value.absent(),
//     this.aliquotaPorcento = const Value.absent(),
//     this.aliquotaUnidade = const Value.absent(),
//     this.valorPrecoMaximo = const Value.absent(),
//     this.valorPautaFiscal = const Value.absent(),
//   });
//   static Insertable<TributIpi> custom({
//     Expression<int>? id,
//     Expression<int?>? idTributConfiguraOfGt,
//     Expression<String?>? cstIpi,
//     Expression<String?>? modalidadeBaseCalculo,
//     Expression<double?>? porcentoBaseCalculo,
//     Expression<double?>? aliquotaPorcento,
//     Expression<double?>? aliquotaUnidade,
//     Expression<double?>? valorPrecoMaximo,
//     Expression<double?>? valorPautaFiscal,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idTributConfiguraOfGt != null)
//         'ID_TRIBUT_CONFIGURA_OF_GT': idTributConfiguraOfGt,
//       if (cstIpi != null) 'CST_IPI': cstIpi,
//       if (modalidadeBaseCalculo != null)
//         'MODALIDADE_BASE_CALCULO': modalidadeBaseCalculo,
//       if (porcentoBaseCalculo != null)
//         'PORCENTO_BASE_CALCULO': porcentoBaseCalculo,
//       if (aliquotaPorcento != null) 'ALIQUOTA_PORCENTO': aliquotaPorcento,
//       if (aliquotaUnidade != null) 'ALIQUOTA_UNIDADE': aliquotaUnidade,
//       if (valorPrecoMaximo != null) 'VALOR_PRECO_MAXIMO': valorPrecoMaximo,
//       if (valorPautaFiscal != null) 'VALOR_PAUTA_FISCAL': valorPautaFiscal,
//     });
//   }

//   TributIpisCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idTributConfiguraOfGt,
//       Value<String?>? cstIpi,
//       Value<String?>? modalidadeBaseCalculo,
//       Value<double?>? porcentoBaseCalculo,
//       Value<double?>? aliquotaPorcento,
//       Value<double?>? aliquotaUnidade,
//       Value<double?>? valorPrecoMaximo,
//       Value<double?>? valorPautaFiscal}) {
//     return TributIpisCompanion(
//       id: id ?? this.id,
//       idTributConfiguraOfGt:
//           idTributConfiguraOfGt ?? this.idTributConfiguraOfGt,
//       cstIpi: cstIpi ?? this.cstIpi,
//       modalidadeBaseCalculo:
//           modalidadeBaseCalculo ?? this.modalidadeBaseCalculo,
//       porcentoBaseCalculo: porcentoBaseCalculo ?? this.porcentoBaseCalculo,
//       aliquotaPorcento: aliquotaPorcento ?? this.aliquotaPorcento,
//       aliquotaUnidade: aliquotaUnidade ?? this.aliquotaUnidade,
//       valorPrecoMaximo: valorPrecoMaximo ?? this.valorPrecoMaximo,
//       valorPautaFiscal: valorPautaFiscal ?? this.valorPautaFiscal,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idTributConfiguraOfGt.present) {
//       map['ID_TRIBUT_CONFIGURA_OF_GT'] =
//           Variable<int?>(idTributConfiguraOfGt.value);
//     }
//     if (cstIpi.present) {
//       map['CST_IPI'] = Variable<String?>(cstIpi.value);
//     }
//     if (modalidadeBaseCalculo.present) {
//       map['MODALIDADE_BASE_CALCULO'] =
//           Variable<String?>(modalidadeBaseCalculo.value);
//     }
//     if (porcentoBaseCalculo.present) {
//       map['PORCENTO_BASE_CALCULO'] =
//           Variable<double?>(porcentoBaseCalculo.value);
//     }
//     if (aliquotaPorcento.present) {
//       map['ALIQUOTA_PORCENTO'] = Variable<double?>(aliquotaPorcento.value);
//     }
//     if (aliquotaUnidade.present) {
//       map['ALIQUOTA_UNIDADE'] = Variable<double?>(aliquotaUnidade.value);
//     }
//     if (valorPrecoMaximo.present) {
//       map['VALOR_PRECO_MAXIMO'] = Variable<double?>(valorPrecoMaximo.value);
//     }
//     if (valorPautaFiscal.present) {
//       map['VALOR_PAUTA_FISCAL'] = Variable<double?>(valorPautaFiscal.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('TributIpisCompanion(')
//           ..write('id: $id, ')
//           ..write('idTributConfiguraOfGt: $idTributConfiguraOfGt, ')
//           ..write('cstIpi: $cstIpi, ')
//           ..write('modalidadeBaseCalculo: $modalidadeBaseCalculo, ')
//           ..write('porcentoBaseCalculo: $porcentoBaseCalculo, ')
//           ..write('aliquotaPorcento: $aliquotaPorcento, ')
//           ..write('aliquotaUnidade: $aliquotaUnidade, ')
//           ..write('valorPrecoMaximo: $valorPrecoMaximo, ')
//           ..write('valorPautaFiscal: $valorPautaFiscal')
//           ..write(')'))
//         .toString();
//   }
// }

// class $TributIpisTable extends TributIpis
//     with TableInfo<$TributIpisTable, TributIpi> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $TributIpisTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idTributConfiguraOfGtMeta =
//       const VerificationMeta('idTributConfiguraOfGt');
//   late final GeneratedColumn<int?> idTributConfiguraOfGt =
//       GeneratedColumn<int?>('ID_TRIBUT_CONFIGURA_OF_GT', aliasedName, true,
//           typeName: 'INTEGER',
//           requiredDuringInsert: false,
//           $customConstraints: 'NULLABLE REFERENCES TRIBUT_CONFIGURA_OF_GT(ID)');
//   final VerificationMeta _cstIpiMeta = const VerificationMeta('cstIpi');
//   late final GeneratedColumn<String?> cstIpi = GeneratedColumn<String?>(
//       'CST_IPI', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _modalidadeBaseCalculoMeta =
//       const VerificationMeta('modalidadeBaseCalculo');
//   late final GeneratedColumn<String?> modalidadeBaseCalculo =
//       GeneratedColumn<String?>('MODALIDADE_BASE_CALCULO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _porcentoBaseCalculoMeta =
//       const VerificationMeta('porcentoBaseCalculo');
//   late final GeneratedColumn<double?> porcentoBaseCalculo =
//       GeneratedColumn<double?>('PORCENTO_BASE_CALCULO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _aliquotaPorcentoMeta =
//       const VerificationMeta('aliquotaPorcento');
//   late final GeneratedColumn<double?> aliquotaPorcento =
//       GeneratedColumn<double?>('ALIQUOTA_PORCENTO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _aliquotaUnidadeMeta =
//       const VerificationMeta('aliquotaUnidade');
//   late final GeneratedColumn<double?> aliquotaUnidade =
//       GeneratedColumn<double?>('ALIQUOTA_UNIDADE', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorPrecoMaximoMeta =
//       const VerificationMeta('valorPrecoMaximo');
//   late final GeneratedColumn<double?> valorPrecoMaximo =
//       GeneratedColumn<double?>('VALOR_PRECO_MAXIMO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorPautaFiscalMeta =
//       const VerificationMeta('valorPautaFiscal');
//   late final GeneratedColumn<double?> valorPautaFiscal =
//       GeneratedColumn<double?>('VALOR_PAUTA_FISCAL', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idTributConfiguraOfGt,
//         cstIpi,
//         modalidadeBaseCalculo,
//         porcentoBaseCalculo,
//         aliquotaPorcento,
//         aliquotaUnidade,
//         valorPrecoMaximo,
//         valorPautaFiscal
//       ];
//   @override
//   String get aliasedName => _alias ?? 'TRIBUT_IPI';
//   @override
//   String get actualTableName => 'TRIBUT_IPI';
//   @override
//   VerificationContext validateIntegrity(Insertable<TributIpi> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_TRIBUT_CONFIGURA_OF_GT')) {
//       context.handle(
//           _idTributConfiguraOfGtMeta,
//           idTributConfiguraOfGt.isAcceptableOrUnknown(
//               data['ID_TRIBUT_CONFIGURA_OF_GT']!, _idTributConfiguraOfGtMeta));
//     }
//     if (data.containsKey('CST_IPI')) {
//       context.handle(_cstIpiMeta,
//           cstIpi.isAcceptableOrUnknown(data['CST_IPI']!, _cstIpiMeta));
//     }
//     if (data.containsKey('MODALIDADE_BASE_CALCULO')) {
//       context.handle(
//           _modalidadeBaseCalculoMeta,
//           modalidadeBaseCalculo.isAcceptableOrUnknown(
//               data['MODALIDADE_BASE_CALCULO']!, _modalidadeBaseCalculoMeta));
//     }
//     if (data.containsKey('PORCENTO_BASE_CALCULO')) {
//       context.handle(
//           _porcentoBaseCalculoMeta,
//           porcentoBaseCalculo.isAcceptableOrUnknown(
//               data['PORCENTO_BASE_CALCULO']!, _porcentoBaseCalculoMeta));
//     }
//     if (data.containsKey('ALIQUOTA_PORCENTO')) {
//       context.handle(
//           _aliquotaPorcentoMeta,
//           aliquotaPorcento.isAcceptableOrUnknown(
//               data['ALIQUOTA_PORCENTO']!, _aliquotaPorcentoMeta));
//     }
//     if (data.containsKey('ALIQUOTA_UNIDADE')) {
//       context.handle(
//           _aliquotaUnidadeMeta,
//           aliquotaUnidade.isAcceptableOrUnknown(
//               data['ALIQUOTA_UNIDADE']!, _aliquotaUnidadeMeta));
//     }
//     if (data.containsKey('VALOR_PRECO_MAXIMO')) {
//       context.handle(
//           _valorPrecoMaximoMeta,
//           valorPrecoMaximo.isAcceptableOrUnknown(
//               data['VALOR_PRECO_MAXIMO']!, _valorPrecoMaximoMeta));
//     }
//     if (data.containsKey('VALOR_PAUTA_FISCAL')) {
//       context.handle(
//           _valorPautaFiscalMeta,
//           valorPautaFiscal.isAcceptableOrUnknown(
//               data['VALOR_PAUTA_FISCAL']!, _valorPautaFiscalMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   TributIpi map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return TributIpi(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idTributConfiguraOfGt: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ID_TRIBUT_CONFIGURA_OF_GT']),
//       cstIpi: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CST_IPI']),
//       modalidadeBaseCalculo: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}MODALIDADE_BASE_CALCULO']),
//       porcentoBaseCalculo: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}PORCENTO_BASE_CALCULO']),
//       aliquotaPorcento: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ALIQUOTA_PORCENTO']),
//       aliquotaUnidade: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ALIQUOTA_UNIDADE']),
//       valorPrecoMaximo: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_PRECO_MAXIMO']),
//       valorPautaFiscal: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_PAUTA_FISCAL']),
//     );
//   }

//   @override
//   $TributIpisTable createAlias(String alias) {
//     return $TributIpisTable(_db, alias);
//   }
// }

// class TributIsssCompanion extends UpdateCompanion<TributIss> {
//   final Value<int> id;
//   final Value<int?> idTributOperacaoFiscal;
//   final Value<String?> modalidadeBaseCalculo;
//   final Value<double?> porcentoBaseCalculo;
//   final Value<double?> aliquotaPorcento;
//   final Value<double?> aliquotaUnidade;
//   final Value<double?> valorPrecoMaximo;
//   final Value<double?> valorPautaFiscal;
//   final Value<int?> itemListaServico;
//   final Value<String?> codigoTributacao;
//   const TributIsssCompanion({
//     this.id = const Value.absent(),
//     this.idTributOperacaoFiscal = const Value.absent(),
//     this.modalidadeBaseCalculo = const Value.absent(),
//     this.porcentoBaseCalculo = const Value.absent(),
//     this.aliquotaPorcento = const Value.absent(),
//     this.aliquotaUnidade = const Value.absent(),
//     this.valorPrecoMaximo = const Value.absent(),
//     this.valorPautaFiscal = const Value.absent(),
//     this.itemListaServico = const Value.absent(),
//     this.codigoTributacao = const Value.absent(),
//   });
//   TributIsssCompanion.insert({
//     this.id = const Value.absent(),
//     this.idTributOperacaoFiscal = const Value.absent(),
//     this.modalidadeBaseCalculo = const Value.absent(),
//     this.porcentoBaseCalculo = const Value.absent(),
//     this.aliquotaPorcento = const Value.absent(),
//     this.aliquotaUnidade = const Value.absent(),
//     this.valorPrecoMaximo = const Value.absent(),
//     this.valorPautaFiscal = const Value.absent(),
//     this.itemListaServico = const Value.absent(),
//     this.codigoTributacao = const Value.absent(),
//   });
//   static Insertable<TributIss> custom({
//     Expression<int>? id,
//     Expression<int?>? idTributOperacaoFiscal,
//     Expression<String?>? modalidadeBaseCalculo,
//     Expression<double?>? porcentoBaseCalculo,
//     Expression<double?>? aliquotaPorcento,
//     Expression<double?>? aliquotaUnidade,
//     Expression<double?>? valorPrecoMaximo,
//     Expression<double?>? valorPautaFiscal,
//     Expression<int?>? itemListaServico,
//     Expression<String?>? codigoTributacao,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idTributOperacaoFiscal != null)
//         'ID_TRIBUT_OPERACAO_FISCAL': idTributOperacaoFiscal,
//       if (modalidadeBaseCalculo != null)
//         'MODALIDADE_BASE_CALCULO': modalidadeBaseCalculo,
//       if (porcentoBaseCalculo != null)
//         'PORCENTO_BASE_CALCULO': porcentoBaseCalculo,
//       if (aliquotaPorcento != null) 'ALIQUOTA_PORCENTO': aliquotaPorcento,
//       if (aliquotaUnidade != null) 'ALIQUOTA_UNIDADE': aliquotaUnidade,
//       if (valorPrecoMaximo != null) 'VALOR_PRECO_MAXIMO': valorPrecoMaximo,
//       if (valorPautaFiscal != null) 'VALOR_PAUTA_FISCAL': valorPautaFiscal,
//       if (itemListaServico != null) 'ITEM_LISTA_SERVICO': itemListaServico,
//       if (codigoTributacao != null) 'CODIGO_TRIBUTACAO': codigoTributacao,
//     });
//   }

//   TributIsssCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idTributOperacaoFiscal,
//       Value<String?>? modalidadeBaseCalculo,
//       Value<double?>? porcentoBaseCalculo,
//       Value<double?>? aliquotaPorcento,
//       Value<double?>? aliquotaUnidade,
//       Value<double?>? valorPrecoMaximo,
//       Value<double?>? valorPautaFiscal,
//       Value<int?>? itemListaServico,
//       Value<String?>? codigoTributacao}) {
//     return TributIsssCompanion(
//       id: id ?? this.id,
//       idTributOperacaoFiscal:
//           idTributOperacaoFiscal ?? this.idTributOperacaoFiscal,
//       modalidadeBaseCalculo:
//           modalidadeBaseCalculo ?? this.modalidadeBaseCalculo,
//       porcentoBaseCalculo: porcentoBaseCalculo ?? this.porcentoBaseCalculo,
//       aliquotaPorcento: aliquotaPorcento ?? this.aliquotaPorcento,
//       aliquotaUnidade: aliquotaUnidade ?? this.aliquotaUnidade,
//       valorPrecoMaximo: valorPrecoMaximo ?? this.valorPrecoMaximo,
//       valorPautaFiscal: valorPautaFiscal ?? this.valorPautaFiscal,
//       itemListaServico: itemListaServico ?? this.itemListaServico,
//       codigoTributacao: codigoTributacao ?? this.codigoTributacao,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idTributOperacaoFiscal.present) {
//       map['ID_TRIBUT_OPERACAO_FISCAL'] =
//           Variable<int?>(idTributOperacaoFiscal.value);
//     }
//     if (modalidadeBaseCalculo.present) {
//       map['MODALIDADE_BASE_CALCULO'] =
//           Variable<String?>(modalidadeBaseCalculo.value);
//     }
//     if (porcentoBaseCalculo.present) {
//       map['PORCENTO_BASE_CALCULO'] =
//           Variable<double?>(porcentoBaseCalculo.value);
//     }
//     if (aliquotaPorcento.present) {
//       map['ALIQUOTA_PORCENTO'] = Variable<double?>(aliquotaPorcento.value);
//     }
//     if (aliquotaUnidade.present) {
//       map['ALIQUOTA_UNIDADE'] = Variable<double?>(aliquotaUnidade.value);
//     }
//     if (valorPrecoMaximo.present) {
//       map['VALOR_PRECO_MAXIMO'] = Variable<double?>(valorPrecoMaximo.value);
//     }
//     if (valorPautaFiscal.present) {
//       map['VALOR_PAUTA_FISCAL'] = Variable<double?>(valorPautaFiscal.value);
//     }
//     if (itemListaServico.present) {
//       map['ITEM_LISTA_SERVICO'] = Variable<int?>(itemListaServico.value);
//     }
//     if (codigoTributacao.present) {
//       map['CODIGO_TRIBUTACAO'] = Variable<String?>(codigoTributacao.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('TributIsssCompanion(')
//           ..write('id: $id, ')
//           ..write('idTributOperacaoFiscal: $idTributOperacaoFiscal, ')
//           ..write('modalidadeBaseCalculo: $modalidadeBaseCalculo, ')
//           ..write('porcentoBaseCalculo: $porcentoBaseCalculo, ')
//           ..write('aliquotaPorcento: $aliquotaPorcento, ')
//           ..write('aliquotaUnidade: $aliquotaUnidade, ')
//           ..write('valorPrecoMaximo: $valorPrecoMaximo, ')
//           ..write('valorPautaFiscal: $valorPautaFiscal, ')
//           ..write('itemListaServico: $itemListaServico, ')
//           ..write('codigoTributacao: $codigoTributacao')
//           ..write(')'))
//         .toString();
//   }
// }

// class $TributIsssTable extends TributIsss
//     with TableInfo<$TributIsssTable, TributIss> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $TributIsssTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idTributOperacaoFiscalMeta =
//       const VerificationMeta('idTributOperacaoFiscal');
//   late final GeneratedColumn<int?> idTributOperacaoFiscal =
//       GeneratedColumn<int?>('ID_TRIBUT_OPERACAO_FISCAL', aliasedName, true,
//           typeName: 'INTEGER',
//           requiredDuringInsert: false,
//           $customConstraints: 'NULLABLE REFERENCES TRIBUT_OPERACAO_FISCAL(ID)');
//   final VerificationMeta _modalidadeBaseCalculoMeta =
//       const VerificationMeta('modalidadeBaseCalculo');
//   late final GeneratedColumn<String?> modalidadeBaseCalculo =
//       GeneratedColumn<String?>('MODALIDADE_BASE_CALCULO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _porcentoBaseCalculoMeta =
//       const VerificationMeta('porcentoBaseCalculo');
//   late final GeneratedColumn<double?> porcentoBaseCalculo =
//       GeneratedColumn<double?>('PORCENTO_BASE_CALCULO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _aliquotaPorcentoMeta =
//       const VerificationMeta('aliquotaPorcento');
//   late final GeneratedColumn<double?> aliquotaPorcento =
//       GeneratedColumn<double?>('ALIQUOTA_PORCENTO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _aliquotaUnidadeMeta =
//       const VerificationMeta('aliquotaUnidade');
//   late final GeneratedColumn<double?> aliquotaUnidade =
//       GeneratedColumn<double?>('ALIQUOTA_UNIDADE', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorPrecoMaximoMeta =
//       const VerificationMeta('valorPrecoMaximo');
//   late final GeneratedColumn<double?> valorPrecoMaximo =
//       GeneratedColumn<double?>('VALOR_PRECO_MAXIMO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorPautaFiscalMeta =
//       const VerificationMeta('valorPautaFiscal');
//   late final GeneratedColumn<double?> valorPautaFiscal =
//       GeneratedColumn<double?>('VALOR_PAUTA_FISCAL', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _itemListaServicoMeta =
//       const VerificationMeta('itemListaServico');
//   late final GeneratedColumn<int?> itemListaServico = GeneratedColumn<int?>(
//       'ITEM_LISTA_SERVICO', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _codigoTributacaoMeta =
//       const VerificationMeta('codigoTributacao');
//   late final GeneratedColumn<String?> codigoTributacao =
//       GeneratedColumn<String?>('CODIGO_TRIBUTACAO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idTributOperacaoFiscal,
//         modalidadeBaseCalculo,
//         porcentoBaseCalculo,
//         aliquotaPorcento,
//         aliquotaUnidade,
//         valorPrecoMaximo,
//         valorPautaFiscal,
//         itemListaServico,
//         codigoTributacao
//       ];
//   @override
//   String get aliasedName => _alias ?? 'TRIBUT_ISS';
//   @override
//   String get actualTableName => 'TRIBUT_ISS';
//   @override
//   VerificationContext validateIntegrity(Insertable<TributIss> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_TRIBUT_OPERACAO_FISCAL')) {
//       context.handle(
//           _idTributOperacaoFiscalMeta,
//           idTributOperacaoFiscal.isAcceptableOrUnknown(
//               data['ID_TRIBUT_OPERACAO_FISCAL']!, _idTributOperacaoFiscalMeta));
//     }
//     if (data.containsKey('MODALIDADE_BASE_CALCULO')) {
//       context.handle(
//           _modalidadeBaseCalculoMeta,
//           modalidadeBaseCalculo.isAcceptableOrUnknown(
//               data['MODALIDADE_BASE_CALCULO']!, _modalidadeBaseCalculoMeta));
//     }
//     if (data.containsKey('PORCENTO_BASE_CALCULO')) {
//       context.handle(
//           _porcentoBaseCalculoMeta,
//           porcentoBaseCalculo.isAcceptableOrUnknown(
//               data['PORCENTO_BASE_CALCULO']!, _porcentoBaseCalculoMeta));
//     }
//     if (data.containsKey('ALIQUOTA_PORCENTO')) {
//       context.handle(
//           _aliquotaPorcentoMeta,
//           aliquotaPorcento.isAcceptableOrUnknown(
//               data['ALIQUOTA_PORCENTO']!, _aliquotaPorcentoMeta));
//     }
//     if (data.containsKey('ALIQUOTA_UNIDADE')) {
//       context.handle(
//           _aliquotaUnidadeMeta,
//           aliquotaUnidade.isAcceptableOrUnknown(
//               data['ALIQUOTA_UNIDADE']!, _aliquotaUnidadeMeta));
//     }
//     if (data.containsKey('VALOR_PRECO_MAXIMO')) {
//       context.handle(
//           _valorPrecoMaximoMeta,
//           valorPrecoMaximo.isAcceptableOrUnknown(
//               data['VALOR_PRECO_MAXIMO']!, _valorPrecoMaximoMeta));
//     }
//     if (data.containsKey('VALOR_PAUTA_FISCAL')) {
//       context.handle(
//           _valorPautaFiscalMeta,
//           valorPautaFiscal.isAcceptableOrUnknown(
//               data['VALOR_PAUTA_FISCAL']!, _valorPautaFiscalMeta));
//     }
//     if (data.containsKey('ITEM_LISTA_SERVICO')) {
//       context.handle(
//           _itemListaServicoMeta,
//           itemListaServico.isAcceptableOrUnknown(
//               data['ITEM_LISTA_SERVICO']!, _itemListaServicoMeta));
//     }
//     if (data.containsKey('CODIGO_TRIBUTACAO')) {
//       context.handle(
//           _codigoTributacaoMeta,
//           codigoTributacao.isAcceptableOrUnknown(
//               data['CODIGO_TRIBUTACAO']!, _codigoTributacaoMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   TributIss map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return TributIss(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idTributOperacaoFiscal: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ID_TRIBUT_OPERACAO_FISCAL']),
//       modalidadeBaseCalculo: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}MODALIDADE_BASE_CALCULO']),
//       porcentoBaseCalculo: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}PORCENTO_BASE_CALCULO']),
//       aliquotaPorcento: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ALIQUOTA_PORCENTO']),
//       aliquotaUnidade: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ALIQUOTA_UNIDADE']),
//       valorPrecoMaximo: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_PRECO_MAXIMO']),
//       valorPautaFiscal: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_PAUTA_FISCAL']),
//       itemListaServico: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ITEM_LISTA_SERVICO']),
//       codigoTributacao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO_TRIBUTACAO']),
//     );
//   }

//   @override
//   $TributIsssTable createAlias(String alias) {
//     return $TributIsssTable(_db, alias);
//   }
// }

// class TributOperacaoFiscalsCompanion
//     extends UpdateCompanion<TributOperacaoFiscal> {
//   final Value<int> id;
//   final Value<String?> descricao;
//   final Value<String?> descricaoNaNf;
//   final Value<int?> cfop;
//   final Value<String?> observacao;
//   const TributOperacaoFiscalsCompanion({
//     this.id = const Value.absent(),
//     this.descricao = const Value.absent(),
//     this.descricaoNaNf = const Value.absent(),
//     this.cfop = const Value.absent(),
//     this.observacao = const Value.absent(),
//   });
//   TributOperacaoFiscalsCompanion.insert({
//     this.id = const Value.absent(),
//     this.descricao = const Value.absent(),
//     this.descricaoNaNf = const Value.absent(),
//     this.cfop = const Value.absent(),
//     this.observacao = const Value.absent(),
//   });
//   static Insertable<TributOperacaoFiscal> custom({
//     Expression<int>? id,
//     Expression<String?>? descricao,
//     Expression<String?>? descricaoNaNf,
//     Expression<int?>? cfop,
//     Expression<String?>? observacao,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (descricao != null) 'DESCRICAO': descricao,
//       if (descricaoNaNf != null) 'DESCRICAO_NA_NF': descricaoNaNf,
//       if (cfop != null) 'CFOP': cfop,
//       if (observacao != null) 'OBSERVACAO': observacao,
//     });
//   }

//   TributOperacaoFiscalsCompanion copyWith(
//       {Value<int>? id,
//       Value<String?>? descricao,
//       Value<String?>? descricaoNaNf,
//       Value<int?>? cfop,
//       Value<String?>? observacao}) {
//     return TributOperacaoFiscalsCompanion(
//       id: id ?? this.id,
//       descricao: descricao ?? this.descricao,
//       descricaoNaNf: descricaoNaNf ?? this.descricaoNaNf,
//       cfop: cfop ?? this.cfop,
//       observacao: observacao ?? this.observacao,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (descricao.present) {
//       map['DESCRICAO'] = Variable<String?>(descricao.value);
//     }
//     if (descricaoNaNf.present) {
//       map['DESCRICAO_NA_NF'] = Variable<String?>(descricaoNaNf.value);
//     }
//     if (cfop.present) {
//       map['CFOP'] = Variable<int?>(cfop.value);
//     }
//     if (observacao.present) {
//       map['OBSERVACAO'] = Variable<String?>(observacao.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('TributOperacaoFiscalsCompanion(')
//           ..write('id: $id, ')
//           ..write('descricao: $descricao, ')
//           ..write('descricaoNaNf: $descricaoNaNf, ')
//           ..write('cfop: $cfop, ')
//           ..write('observacao: $observacao')
//           ..write(')'))
//         .toString();
//   }
// }

// class $TributOperacaoFiscalsTable extends TributOperacaoFiscals
//     with TableInfo<$TributOperacaoFiscalsTable, TributOperacaoFiscal> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $TributOperacaoFiscalsTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _descricaoMeta = const VerificationMeta('descricao');
//   late final GeneratedColumn<String?> descricao = GeneratedColumn<String?>(
//       'DESCRICAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _descricaoNaNfMeta =
//       const VerificationMeta('descricaoNaNf');
//   late final GeneratedColumn<String?> descricaoNaNf = GeneratedColumn<String?>(
//       'DESCRICAO_NA_NF', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _cfopMeta = const VerificationMeta('cfop');
//   late final GeneratedColumn<int?> cfop = GeneratedColumn<int?>(
//       'CFOP', aliasedName, true,
//       typeName: 'INTEGER', requiredDuringInsert: false);
//   final VerificationMeta _observacaoMeta = const VerificationMeta('observacao');
//   late final GeneratedColumn<String?> observacao = GeneratedColumn<String?>(
//       'OBSERVACAO', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns =>
//       [id, descricao, descricaoNaNf, cfop, observacao];
//   @override
//   String get aliasedName => _alias ?? 'TRIBUT_OPERACAO_FISCAL';
//   @override
//   String get actualTableName => 'TRIBUT_OPERACAO_FISCAL';
//   @override
//   VerificationContext validateIntegrity(
//       Insertable<TributOperacaoFiscal> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('DESCRICAO')) {
//       context.handle(_descricaoMeta,
//           descricao.isAcceptableOrUnknown(data['DESCRICAO']!, _descricaoMeta));
//     }
//     if (data.containsKey('DESCRICAO_NA_NF')) {
//       context.handle(
//           _descricaoNaNfMeta,
//           descricaoNaNf.isAcceptableOrUnknown(
//               data['DESCRICAO_NA_NF']!, _descricaoNaNfMeta));
//     }
//     if (data.containsKey('CFOP')) {
//       context.handle(
//           _cfopMeta, cfop.isAcceptableOrUnknown(data['CFOP']!, _cfopMeta));
//     }
//     if (data.containsKey('OBSERVACAO')) {
//       context.handle(
//           _observacaoMeta,
//           observacao.isAcceptableOrUnknown(
//               data['OBSERVACAO']!, _observacaoMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   TributOperacaoFiscal map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return TributOperacaoFiscal(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       descricao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DESCRICAO']),
//       descricaoNaNf: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}DESCRICAO_NA_NF']),
//       cfop: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CFOP']),
//       observacao: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}OBSERVACAO']),
//     );
//   }

//   @override
//   $TributOperacaoFiscalsTable createAlias(String alias) {
//     return $TributOperacaoFiscalsTable(_db, alias);
//   }
// }

// class TributPissCompanion extends UpdateCompanion<TributPis> {
//   final Value<int> id;
//   final Value<int?> idTributConfiguraOfGt;
//   final Value<String?> cstPis;
//   final Value<String?> efdTabela435;
//   final Value<String?> modalidadeBaseCalculo;
//   final Value<double?> porcentoBaseCalculo;
//   final Value<double?> aliquotaPorcento;
//   final Value<double?> aliquotaUnidade;
//   final Value<double?> valorPrecoMaximo;
//   final Value<double?> valorPautaFiscal;
//   const TributPissCompanion({
//     this.id = const Value.absent(),
//     this.idTributConfiguraOfGt = const Value.absent(),
//     this.cstPis = const Value.absent(),
//     this.efdTabela435 = const Value.absent(),
//     this.modalidadeBaseCalculo = const Value.absent(),
//     this.porcentoBaseCalculo = const Value.absent(),
//     this.aliquotaPorcento = const Value.absent(),
//     this.aliquotaUnidade = const Value.absent(),
//     this.valorPrecoMaximo = const Value.absent(),
//     this.valorPautaFiscal = const Value.absent(),
//   });
//   TributPissCompanion.insert({
//     this.id = const Value.absent(),
//     this.idTributConfiguraOfGt = const Value.absent(),
//     this.cstPis = const Value.absent(),
//     this.efdTabela435 = const Value.absent(),
//     this.modalidadeBaseCalculo = const Value.absent(),
//     this.porcentoBaseCalculo = const Value.absent(),
//     this.aliquotaPorcento = const Value.absent(),
//     this.aliquotaUnidade = const Value.absent(),
//     this.valorPrecoMaximo = const Value.absent(),
//     this.valorPautaFiscal = const Value.absent(),
//   });
//   static Insertable<TributPis> custom({
//     Expression<int>? id,
//     Expression<int?>? idTributConfiguraOfGt,
//     Expression<String?>? cstPis,
//     Expression<String?>? efdTabela435,
//     Expression<String?>? modalidadeBaseCalculo,
//     Expression<double?>? porcentoBaseCalculo,
//     Expression<double?>? aliquotaPorcento,
//     Expression<double?>? aliquotaUnidade,
//     Expression<double?>? valorPrecoMaximo,
//     Expression<double?>? valorPautaFiscal,
//   }) {
//     return RawValuesInsertable({
//       if (id != null) 'ID': id,
//       if (idTributConfiguraOfGt != null)
//         'ID_TRIBUT_CONFIGURA_OF_GT': idTributConfiguraOfGt,
//       if (cstPis != null) 'CST_PIS': cstPis,
//       if (efdTabela435 != null) 'EFD_TABELA_435': efdTabela435,
//       if (modalidadeBaseCalculo != null)
//         'MODALIDADE_BASE_CALCULO': modalidadeBaseCalculo,
//       if (porcentoBaseCalculo != null)
//         'PORCENTO_BASE_CALCULO': porcentoBaseCalculo,
//       if (aliquotaPorcento != null) 'ALIQUOTA_PORCENTO': aliquotaPorcento,
//       if (aliquotaUnidade != null) 'ALIQUOTA_UNIDADE': aliquotaUnidade,
//       if (valorPrecoMaximo != null) 'VALOR_PRECO_MAXIMO': valorPrecoMaximo,
//       if (valorPautaFiscal != null) 'VALOR_PAUTA_FISCAL': valorPautaFiscal,
//     });
//   }

//   TributPissCompanion copyWith(
//       {Value<int>? id,
//       Value<int?>? idTributConfiguraOfGt,
//       Value<String?>? cstPis,
//       Value<String?>? efdTabela435,
//       Value<String?>? modalidadeBaseCalculo,
//       Value<double?>? porcentoBaseCalculo,
//       Value<double?>? aliquotaPorcento,
//       Value<double?>? aliquotaUnidade,
//       Value<double?>? valorPrecoMaximo,
//       Value<double?>? valorPautaFiscal}) {
//     return TributPissCompanion(
//       id: id ?? this.id,
//       idTributConfiguraOfGt:
//           idTributConfiguraOfGt ?? this.idTributConfiguraOfGt,
//       cstPis: cstPis ?? this.cstPis,
//       efdTabela435: efdTabela435 ?? this.efdTabela435,
//       modalidadeBaseCalculo:
//           modalidadeBaseCalculo ?? this.modalidadeBaseCalculo,
//       porcentoBaseCalculo: porcentoBaseCalculo ?? this.porcentoBaseCalculo,
//       aliquotaPorcento: aliquotaPorcento ?? this.aliquotaPorcento,
//       aliquotaUnidade: aliquotaUnidade ?? this.aliquotaUnidade,
//       valorPrecoMaximo: valorPrecoMaximo ?? this.valorPrecoMaximo,
//       valorPautaFiscal: valorPautaFiscal ?? this.valorPautaFiscal,
//     );
//   }

//   @override
//   Map<String, Expression> toColumns(bool nullToAbsent) {
//     final map = <String, Expression>{};
//     if (id.present) {
//       map['ID'] = Variable<int>(id.value);
//     }
//     if (idTributConfiguraOfGt.present) {
//       map['ID_TRIBUT_CONFIGURA_OF_GT'] =
//           Variable<int?>(idTributConfiguraOfGt.value);
//     }
//     if (cstPis.present) {
//       map['CST_PIS'] = Variable<String?>(cstPis.value);
//     }
//     if (efdTabela435.present) {
//       map['EFD_TABELA_435'] = Variable<String?>(efdTabela435.value);
//     }
//     if (modalidadeBaseCalculo.present) {
//       map['MODALIDADE_BASE_CALCULO'] =
//           Variable<String?>(modalidadeBaseCalculo.value);
//     }
//     if (porcentoBaseCalculo.present) {
//       map['PORCENTO_BASE_CALCULO'] =
//           Variable<double?>(porcentoBaseCalculo.value);
//     }
//     if (aliquotaPorcento.present) {
//       map['ALIQUOTA_PORCENTO'] = Variable<double?>(aliquotaPorcento.value);
//     }
//     if (aliquotaUnidade.present) {
//       map['ALIQUOTA_UNIDADE'] = Variable<double?>(aliquotaUnidade.value);
//     }
//     if (valorPrecoMaximo.present) {
//       map['VALOR_PRECO_MAXIMO'] = Variable<double?>(valorPrecoMaximo.value);
//     }
//     if (valorPautaFiscal.present) {
//       map['VALOR_PAUTA_FISCAL'] = Variable<double?>(valorPautaFiscal.value);
//     }
//     return map;
//   }

//   @override
//   String toString() {
//     return (StringBuffer('TributPissCompanion(')
//           ..write('id: $id, ')
//           ..write('idTributConfiguraOfGt: $idTributConfiguraOfGt, ')
//           ..write('cstPis: $cstPis, ')
//           ..write('efdTabela435: $efdTabela435, ')
//           ..write('modalidadeBaseCalculo: $modalidadeBaseCalculo, ')
//           ..write('porcentoBaseCalculo: $porcentoBaseCalculo, ')
//           ..write('aliquotaPorcento: $aliquotaPorcento, ')
//           ..write('aliquotaUnidade: $aliquotaUnidade, ')
//           ..write('valorPrecoMaximo: $valorPrecoMaximo, ')
//           ..write('valorPautaFiscal: $valorPautaFiscal')
//           ..write(')'))
//         .toString();
//   }
// }

// class $TributPissTable extends TributPiss
//     with TableInfo<$TributPissTable, TributPis> {
//   final GeneratedDatabase _db;
//   final String? _alias;
//   $TributPissTable(this._db, [this._alias]);
//   final VerificationMeta _idMeta = const VerificationMeta('id');
//   late final GeneratedColumn<int?> id = GeneratedColumn<int?>(
//       'ID', aliasedName, false,
//       typeName: 'INTEGER',
//       requiredDuringInsert: false,
//       defaultConstraints: 'PRIMARY KEY AUTOINCREMENT');
//   final VerificationMeta _idTributConfiguraOfGtMeta =
//       const VerificationMeta('idTributConfiguraOfGt');
//   late final GeneratedColumn<int?> idTributConfiguraOfGt =
//       GeneratedColumn<int?>('ID_TRIBUT_CONFIGURA_OF_GT', aliasedName, true,
//           typeName: 'INTEGER',
//           requiredDuringInsert: false,
//           $customConstraints: 'NULLABLE REFERENCES TRIBUT_CONFIGURA_OF_GT(ID)');
//   final VerificationMeta _cstPisMeta = const VerificationMeta('cstPis');
//   late final GeneratedColumn<String?> cstPis = GeneratedColumn<String?>(
//       'CST_PIS', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _efdTabela435Meta =
//       const VerificationMeta('efdTabela435');
//   late final GeneratedColumn<String?> efdTabela435 = GeneratedColumn<String?>(
//       'EFD_TABELA_435', aliasedName, true,
//       additionalChecks:
//           GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
//       typeName: 'TEXT',
//       requiredDuringInsert: false);
//   final VerificationMeta _modalidadeBaseCalculoMeta =
//       const VerificationMeta('modalidadeBaseCalculo');
//   late final GeneratedColumn<String?> modalidadeBaseCalculo =
//       GeneratedColumn<String?>('MODALIDADE_BASE_CALCULO', aliasedName, true,
//           additionalChecks: GeneratedColumn.checkTextLength(
//               minTextLength: 0, maxTextLength: 1),
//           typeName: 'TEXT',
//           requiredDuringInsert: false);
//   final VerificationMeta _porcentoBaseCalculoMeta =
//       const VerificationMeta('porcentoBaseCalculo');
//   late final GeneratedColumn<double?> porcentoBaseCalculo =
//       GeneratedColumn<double?>('PORCENTO_BASE_CALCULO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _aliquotaPorcentoMeta =
//       const VerificationMeta('aliquotaPorcento');
//   late final GeneratedColumn<double?> aliquotaPorcento =
//       GeneratedColumn<double?>('ALIQUOTA_PORCENTO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _aliquotaUnidadeMeta =
//       const VerificationMeta('aliquotaUnidade');
//   late final GeneratedColumn<double?> aliquotaUnidade =
//       GeneratedColumn<double?>('ALIQUOTA_UNIDADE', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorPrecoMaximoMeta =
//       const VerificationMeta('valorPrecoMaximo');
//   late final GeneratedColumn<double?> valorPrecoMaximo =
//       GeneratedColumn<double?>('VALOR_PRECO_MAXIMO', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   final VerificationMeta _valorPautaFiscalMeta =
//       const VerificationMeta('valorPautaFiscal');
//   late final GeneratedColumn<double?> valorPautaFiscal =
//       GeneratedColumn<double?>('VALOR_PAUTA_FISCAL', aliasedName, true,
//           typeName: 'REAL', requiredDuringInsert: false);
//   @override
//   List<GeneratedColumn> get $columns => [
//         id,
//         idTributConfiguraOfGt,
//         cstPis,
//         efdTabela435,
//         modalidadeBaseCalculo,
//         porcentoBaseCalculo,
//         aliquotaPorcento,
//         aliquotaUnidade,
//         valorPrecoMaximo,
//         valorPautaFiscal
//       ];
//   @override
//   String get aliasedName => _alias ?? 'TRIBUT_PIS';
//   @override
//   String get actualTableName => 'TRIBUT_PIS';
//   @override
//   VerificationContext validateIntegrity(Insertable<TributPis> instance,
//       {bool isInserting = false}) {
//     final context = VerificationContext();
//     final data = instance.toColumns(true);
//     if (data.containsKey('ID')) {
//       context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
//     }
//     if (data.containsKey('ID_TRIBUT_CONFIGURA_OF_GT')) {
//       context.handle(
//           _idTributConfiguraOfGtMeta,
//           idTributConfiguraOfGt.isAcceptableOrUnknown(
//               data['ID_TRIBUT_CONFIGURA_OF_GT']!, _idTributConfiguraOfGtMeta));
//     }
//     if (data.containsKey('CST_PIS')) {
//       context.handle(_cstPisMeta,
//           cstPis.isAcceptableOrUnknown(data['CST_PIS']!, _cstPisMeta));
//     }
//     if (data.containsKey('EFD_TABELA_435')) {
//       context.handle(
//           _efdTabela435Meta,
//           efdTabela435.isAcceptableOrUnknown(
//               data['EFD_TABELA_435']!, _efdTabela435Meta));
//     }
//     if (data.containsKey('MODALIDADE_BASE_CALCULO')) {
//       context.handle(
//           _modalidadeBaseCalculoMeta,
//           modalidadeBaseCalculo.isAcceptableOrUnknown(
//               data['MODALIDADE_BASE_CALCULO']!, _modalidadeBaseCalculoMeta));
//     }
//     if (data.containsKey('PORCENTO_BASE_CALCULO')) {
//       context.handle(
//           _porcentoBaseCalculoMeta,
//           porcentoBaseCalculo.isAcceptableOrUnknown(
//               data['PORCENTO_BASE_CALCULO']!, _porcentoBaseCalculoMeta));
//     }
//     if (data.containsKey('ALIQUOTA_PORCENTO')) {
//       context.handle(
//           _aliquotaPorcentoMeta,
//           aliquotaPorcento.isAcceptableOrUnknown(
//               data['ALIQUOTA_PORCENTO']!, _aliquotaPorcentoMeta));
//     }
//     if (data.containsKey('ALIQUOTA_UNIDADE')) {
//       context.handle(
//           _aliquotaUnidadeMeta,
//           aliquotaUnidade.isAcceptableOrUnknown(
//               data['ALIQUOTA_UNIDADE']!, _aliquotaUnidadeMeta));
//     }
//     if (data.containsKey('VALOR_PRECO_MAXIMO')) {
//       context.handle(
//           _valorPrecoMaximoMeta,
//           valorPrecoMaximo.isAcceptableOrUnknown(
//               data['VALOR_PRECO_MAXIMO']!, _valorPrecoMaximoMeta));
//     }
//     if (data.containsKey('VALOR_PAUTA_FISCAL')) {
//       context.handle(
//           _valorPautaFiscalMeta,
//           valorPautaFiscal.isAcceptableOrUnknown(
//               data['VALOR_PAUTA_FISCAL']!, _valorPautaFiscalMeta));
//     }
//     return context;
//   }

//   @override
//   Set<GeneratedColumn> get $primaryKey => {id};
//   @override
//   TributPis map(Map<String, dynamic> data, {String? tablePrefix}) {
//     final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
//     return TributPis(
//       id: const IntType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ID'])!,
//       idTributConfiguraOfGt: const IntType().mapFromDatabaseResponse(
//           data['${effectivePrefix}ID_TRIBUT_CONFIGURA_OF_GT']),
//       cstPis: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}CST_PIS']),
//       efdTabela435: const StringType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}EFD_TABELA_435']),
//       modalidadeBaseCalculo: const StringType().mapFromDatabaseResponse(
//           data['${effectivePrefix}MODALIDADE_BASE_CALCULO']),
//       porcentoBaseCalculo: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}PORCENTO_BASE_CALCULO']),
//       aliquotaPorcento: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ALIQUOTA_PORCENTO']),
//       aliquotaUnidade: const RealType()
//           .mapFromDatabaseResponse(data['${effectivePrefix}ALIQUOTA_UNIDADE']),
//       valorPrecoMaximo: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_PRECO_MAXIMO']),
//       valorPautaFiscal: const RealType().mapFromDatabaseResponse(
//           data['${effectivePrefix}VALOR_PAUTA_FISCAL']),
//     );
//   }

//   @override
//   $TributPissTable createAlias(String alias) {
//     return $TributPissTable(_db, alias);
//   }
// }

abstract class _$AppDatabase extends GeneratedDatabase {
  _$AppDatabase(QueryExecutor e) : super(SqlTypeSystem.defaultInstance, e);
  late final $CardapiosTable cardapios = $CardapiosTable(this);
  late final $CardapioPerguntaPadraosTable cardapioPerguntaPadraos =
      $CardapioPerguntaPadraosTable(this);
  late final $CardapioRespostaPadraosTable cardapioRespostaPadraos =
      $CardapioRespostaPadraosTable(this);
  late final $CfopsTable cfops = $CfopsTable(this);
  late final $ClientesTable clientes = $ClientesTable(this);
  late final $ColaboradorsTable colaboradors = $ColaboradorsTable(this);
  late final $ComandasTable comandas = $ComandasTable(this);
  late final $ComandaDetalhesTable comandaDetalhes =
      $ComandaDetalhesTable(this);
  late final $ComandaDetalheComplementosTable comandaDetalheComplementos =
      $ComandaDetalheComplementosTable(this);
  late final $ComandaObservacaoPadraosTable comandaObservacaoPadraos =
      $ComandaObservacaoPadraosTable(this);
  late final $ComandaPedidosTable comandaPedidos = $ComandaPedidosTable(this);
  late final $CompraPedidoCabecalhosTable compraPedidoCabecalhos =
      $CompraPedidoCabecalhosTable(this);
  late final $CompraPedidoDetalhesTable compraPedidoDetalhes =
      $CompraPedidoDetalhesTable(this);
  late final $ContadorsTable contadors = $ContadorsTable(this);
  late final $ContasPagarsTable contasPagars = $ContasPagarsTable(this);
  late final $ContasRecebersTable contasRecebers = $ContasRecebersTable(this);
  late final $CozinhasTable cozinhas = $CozinhasTable(this);
  late final $DeliverysTable deliverys = $DeliverysTable(this);
  late final $DeliveryAcertosTable deliveryAcertos =
      $DeliveryAcertosTable(this);
  late final $DeliveryAcertoComandasTable deliveryAcertoComandas =
      $DeliveryAcertoComandasTable(this);
  late final $EcfAliquotassTable ecfAliquotass = $EcfAliquotassTable(this);
  late final $EcfDocumentosEmitidossTable ecfDocumentosEmitidoss =
      $EcfDocumentosEmitidossTable(this);
  late final $EcfE3sTable ecfE3s = $EcfE3sTable(this);
  late final $EcfImpressorasTable ecfImpressoras = $EcfImpressorasTable(this);
  late final $EcfLogTotaissTable ecfLogTotaiss = $EcfLogTotaissTable(this);
  late final $EcfR01sTable ecfR01s = $EcfR01sTable(this);
  late final $EcfR02sTable ecfR02s = $EcfR02sTable(this);
  late final $EcfR03sTable ecfR03s = $EcfR03sTable(this);
  late final $EcfR06sTable ecfR06s = $EcfR06sTable(this);
  late final $EcfR07sTable ecfR07s = $EcfR07sTable(this);
  late final $EcfRecebimentoNaoFiscalsTable ecfRecebimentoNaoFiscals =
      $EcfRecebimentoNaoFiscalsTable(this);
  late final $EcfRelatorioGerencialsTable ecfRelatorioGerencials =
      $EcfRelatorioGerencialsTable(this);
  late final $EcfSintegra60AsTable ecfSintegra60As =
      $EcfSintegra60AsTable(this);
  late final $EcfSintegra60MsTable ecfSintegra60Ms =
      $EcfSintegra60MsTable(this);
  late final $EmpresasTable empresas = $EmpresasTable(this);
  late final $EmpresaCnaesTable empresaCnaes = $EmpresaCnaesTable(this);
  late final $EmpresaDeliveryPedidosTable empresaDeliveryPedidos =
      $EmpresaDeliveryPedidosTable(this);
  late final $EmpresaSegmentosTable empresaSegmentos =
      $EmpresaSegmentosTable(this);
  late final $EntregadorRotasTable entregadorRotas =
      $EntregadorRotasTable(this);
  late final $EntregadorRotaDetalhesTable entregadorRotaDetalhes =
      $EntregadorRotaDetalhesTable(this);
  late final $FidelidadeHistoricosTable fidelidadeHistoricos =
      $FidelidadeHistoricosTable(this);
  late final $FidelidadeUtilizadosTable fidelidadeUtilizados =
      $FidelidadeUtilizadosTable(this);
  late final $FornecedorsTable fornecedors = $FornecedorsTable(this);
  late final $IbptsTable ibpts = $IbptsTable(this);
  late final $LogImportacaosTable logImportacaos = $LogImportacaosTable(this);
  late final $MesasTable mesas = $MesasTable(this);
  late final $NfcePlanoPagamentosTable nfcePlanoPagamentos =
      $NfcePlanoPagamentosTable(this);
  late final $NfeAcessoXmlsTable nfeAcessoXmls = $NfeAcessoXmlsTable(this);
  late final $NfeCabecalhosTable nfeCabecalhos = $NfeCabecalhosTable(this);
  late final $NfeCanasTable nfeCanas = $NfeCanasTable(this);
  late final $NfeCanaDeducoesSafrasTable nfeCanaDeducoesSafras =
      $NfeCanaDeducoesSafrasTable(this);
  late final $NfeCanaFornecimentoDiariosTable nfeCanaFornecimentoDiarios =
      $NfeCanaFornecimentoDiariosTable(this);
  late final $NfeConfiguracaosTable nfeConfiguracaos =
      $NfeConfiguracaosTable(this);
  late final $NfeCteReferenciadosTable nfeCteReferenciados =
      $NfeCteReferenciadosTable(this);
  late final $NfeCupomFiscalReferenciadosTable nfeCupomFiscalReferenciados =
      $NfeCupomFiscalReferenciadosTable(this);
  late final $NfeDeclaracaoImportacaosTable nfeDeclaracaoImportacaos =
      $NfeDeclaracaoImportacaosTable(this);
  late final $NfeDestinatariosTable nfeDestinatarios =
      $NfeDestinatariosTable(this);
  late final $NfeDetEspecificoArmamentosTable nfeDetEspecificoArmamentos =
      $NfeDetEspecificoArmamentosTable(this);
  late final $NfeDetEspecificoCombustivelsTable nfeDetEspecificoCombustivels =
      $NfeDetEspecificoCombustivelsTable(this);
  late final $NfeDetEspecificoMedicamentosTable nfeDetEspecificoMedicamentos =
      $NfeDetEspecificoMedicamentosTable(this);
  late final $NfeDetEspecificoVeiculosTable nfeDetEspecificoVeiculos =
      $NfeDetEspecificoVeiculosTable(this);
  late final $NfeDetalhesTable nfeDetalhes = $NfeDetalhesTable(this);
  late final $NfeDetalheImpostoCofinssTable nfeDetalheImpostoCofinss =
      $NfeDetalheImpostoCofinssTable(this);
  late final $NfeDetalheImpostoCofinsStsTable nfeDetalheImpostoCofinsSts =
      $NfeDetalheImpostoCofinsStsTable(this);
  late final $NfeDetalheImpostoIcmssTable nfeDetalheImpostoIcmss =
      $NfeDetalheImpostoIcmssTable(this);
  late final $NfeDetalheImpostoIcmsUfdestsTable nfeDetalheImpostoIcmsUfdests =
      $NfeDetalheImpostoIcmsUfdestsTable(this);
  late final $NfeDetalheImpostoIisTable nfeDetalheImpostoIis =
      $NfeDetalheImpostoIisTable(this);
  late final $NfeDetalheImpostoIpisTable nfeDetalheImpostoIpis =
      $NfeDetalheImpostoIpisTable(this);
  late final $NfeDetalheImpostoIssqnsTable nfeDetalheImpostoIssqns =
      $NfeDetalheImpostoIssqnsTable(this);
  late final $NfeDetalheImpostoPissTable nfeDetalheImpostoPiss =
      $NfeDetalheImpostoPissTable(this);
  late final $NfeDetalheImpostoPisStsTable nfeDetalheImpostoPisSts =
      $NfeDetalheImpostoPisStsTable(this);
  late final $NfeDuplicatasTable nfeDuplicatas = $NfeDuplicatasTable(this);
  late final $NfeEmitentesTable nfeEmitentes = $NfeEmitentesTable(this);
  late final $NfeExportacaosTable nfeExportacaos = $NfeExportacaosTable(this);
  late final $NfeFaturasTable nfeFaturas = $NfeFaturasTable(this);
  late final $NfeImportacaoDetalhesTable nfeImportacaoDetalhes =
      $NfeImportacaoDetalhesTable(this);
  late final $NfeInformacaoPagamentosTable nfeInformacaoPagamentos =
      $NfeInformacaoPagamentosTable(this);
  late final $NfeItemRastreadosTable nfeItemRastreados =
      $NfeItemRastreadosTable(this);
  late final $NfeLocalEntregasTable nfeLocalEntregas =
      $NfeLocalEntregasTable(this);
  late final $NfeLocalRetiradasTable nfeLocalRetiradas =
      $NfeLocalRetiradasTable(this);
  late final $NfeNfReferenciadasTable nfeNfReferenciadas =
      $NfeNfReferenciadasTable(this);
  late final $NfeNumerosTable nfeNumeros = $NfeNumerosTable(this);
  late final $NfeNumeroInutilizadosTable nfeNumeroInutilizados =
      $NfeNumeroInutilizadosTable(this);
  late final $NfeProcessoReferenciadosTable nfeProcessoReferenciados =
      $NfeProcessoReferenciadosTable(this);
  late final $NfeProdRuralReferenciadasTable nfeProdRuralReferenciadas =
      $NfeProdRuralReferenciadasTable(this);
  late final $NfeReferenciadasTable nfeReferenciadas =
      $NfeReferenciadasTable(this);
  late final $NfeResponsavelTecnicosTable nfeResponsavelTecnicos =
      $NfeResponsavelTecnicosTable(this);
  late final $NfeTransportesTable nfeTransportes = $NfeTransportesTable(this);
  late final $NfeTransporteReboquesTable nfeTransporteReboques =
      $NfeTransporteReboquesTable(this);
  late final $NfeTransporteVolumesTable nfeTransporteVolumes =
      $NfeTransporteVolumesTable(this);
  late final $NfeTransporteVolumeLacresTable nfeTransporteVolumeLacres =
      $NfeTransporteVolumeLacresTable(this);
  late final $PdvCaixasTable pdvCaixas = $PdvCaixasTable(this);
  late final $PdvConfiguracaosTable pdvConfiguracaos =
      $PdvConfiguracaosTable(this);
  late final $PdvConfiguracaoBalancasTable pdvConfiguracaoBalancas =
      $PdvConfiguracaoBalancasTable(this);
  late final $PdvConfiguracaoLeitorSerialsTable pdvConfiguracaoLeitorSerials =
      $PdvConfiguracaoLeitorSerialsTable(this);
  late final $PdvFechamentosTable pdvFechamentos = $PdvFechamentosTable(this);
  late final $PdvMovimentosTable pdvMovimentos = $PdvMovimentosTable(this);
  late final $PdvOperadorsTable pdvOperadors = $PdvOperadorsTable(this);
  late final $PdvSangriasTable pdvSangrias = $PdvSangriasTable(this);
  late final $PdvSuprimentosTable pdvSuprimentos = $PdvSuprimentosTable(this);
  late final $PdvTipoPagamentosTable pdvTipoPagamentos =
      $PdvTipoPagamentosTable(this);
  late final $PdvTotalTipoPagamentosTable pdvTotalTipoPagamentos =
      $PdvTotalTipoPagamentosTable(this);
  late final $PdvVendaCabecalhosTable pdvVendaCabecalhos =
      $PdvVendaCabecalhosTable(this);
  late final $PdvVendaDetalhesTable pdvVendaDetalhes =
      $PdvVendaDetalhesTable(this);
  late final $ProdutosTable produtos = $ProdutosTable(this);
  late final $ProdutoFichaTecnicasTable produtoFichaTecnicas =
      $ProdutoFichaTecnicasTable(this);
  late final $ProdutoGruposTable produtoGrupos = $ProdutoGruposTable(this);
  late final $ProdutoImagemsTable produtoImagems = $ProdutoImagemsTable(this);
  late final $ProdutoPromocaosTable produtoPromocaos =
      $ProdutoPromocaosTable(this);
  late final $ProdutoSubgruposTable produtoSubgrupos =
      $ProdutoSubgruposTable(this);
  late final $ProdutoTiposTable produtoTipos = $ProdutoTiposTable(this);
  late final $ProdutoUnidadesTable produtoUnidades =
      $ProdutoUnidadesTable(this);
  late final $ReservasTable reservas = $ReservasTable(this);
  late final $ReservaMesasTable reservaMesas = $ReservaMesasTable(this);
  late final $TaxaEntregasTable taxaEntregas = $TaxaEntregasTable(this);
  late final $TributCofinssTable tributCofinss = $TributCofinssTable(this);
  late final $TributConfiguraOfGtsTable tributConfiguraOfGts =
      $TributConfiguraOfGtsTable(this);
  late final $TributGrupoTributariosTable tributGrupoTributarios =
      $TributGrupoTributariosTable(this);
  late final $TributIcmsCustomCabsTable tributIcmsCustomCabs =
      $TributIcmsCustomCabsTable(this);
  late final $TributIcmsCustomDetsTable tributIcmsCustomDets =
      $TributIcmsCustomDetsTable(this);
  late final $TributIcmsUfsTable tributIcmsUfs = $TributIcmsUfsTable(this);
  late final $TributIpisTable tributIpis = $TributIpisTable(this);
  late final $TributIsssTable tributIsss = $TributIsssTable(this);
  late final $TributOperacaoFiscalsTable tributOperacaoFiscals =
      $TributOperacaoFiscalsTable(this);
  late final $TributPissTable tributPiss = $TributPissTable(this);
  late final CardapioDao cardapioDao = CardapioDao(this as AppDatabase);
  late final CardapioPerguntaPadraoDao cardapioPerguntaPadraoDao =
      CardapioPerguntaPadraoDao(this as AppDatabase);
  late final CardapioRespostaPadraoDao cardapioRespostaPadraoDao =
      CardapioRespostaPadraoDao(this as AppDatabase);
  late final CfopDao cfopDao = CfopDao(this as AppDatabase);
  late final ClienteDao clienteDao = ClienteDao(this as AppDatabase);
  late final ColaboradorDao colaboradorDao =
      ColaboradorDao(this as AppDatabase);
  late final ComandaDao comandaDao = ComandaDao(this as AppDatabase);
  late final ComandaDetalheDao comandaDetalheDao =
      ComandaDetalheDao(this as AppDatabase);
  late final ComandaDetalheComplementoDao comandaDetalheComplementoDao =
      ComandaDetalheComplementoDao(this as AppDatabase);
  late final ComandaObservacaoPadraoDao comandaObservacaoPadraoDao =
      ComandaObservacaoPadraoDao(this as AppDatabase);
  late final ComandaPedidoDao comandaPedidoDao =
      ComandaPedidoDao(this as AppDatabase);
  late final CompraPedidoCabecalhoDao compraPedidoCabecalhoDao =
      CompraPedidoCabecalhoDao(this as AppDatabase);
  late final CompraPedidoDetalheDao compraPedidoDetalheDao =
      CompraPedidoDetalheDao(this as AppDatabase);
  late final ContadorDao contadorDao = ContadorDao(this as AppDatabase);
  late final ContasPagarDao contasPagarDao =
      ContasPagarDao(this as AppDatabase);
  late final ContasReceberDao contasReceberDao =
      ContasReceberDao(this as AppDatabase);
  late final CozinhaDao cozinhaDao = CozinhaDao(this as AppDatabase);
  late final DeliveryDao deliveryDao = DeliveryDao(this as AppDatabase);
  late final DeliveryAcertoDao deliveryAcertoDao =
      DeliveryAcertoDao(this as AppDatabase);
  late final DeliveryAcertoComandaDao deliveryAcertoComandaDao =
      DeliveryAcertoComandaDao(this as AppDatabase);
  late final EcfAliquotasDao ecfAliquotasDao =
      EcfAliquotasDao(this as AppDatabase);
  late final EcfDocumentosEmitidosDao ecfDocumentosEmitidosDao =
      EcfDocumentosEmitidosDao(this as AppDatabase);
  late final EcfE3Dao ecfE3Dao = EcfE3Dao(this as AppDatabase);
  late final EcfImpressoraDao ecfImpressoraDao =
      EcfImpressoraDao(this as AppDatabase);
  late final EcfLogTotaisDao ecfLogTotaisDao =
      EcfLogTotaisDao(this as AppDatabase);
  late final EcfR01Dao ecfR01Dao = EcfR01Dao(this as AppDatabase);
  late final EcfR02Dao ecfR02Dao = EcfR02Dao(this as AppDatabase);
  late final EcfR03Dao ecfR03Dao = EcfR03Dao(this as AppDatabase);
  late final EcfR06Dao ecfR06Dao = EcfR06Dao(this as AppDatabase);
  late final EcfR07Dao ecfR07Dao = EcfR07Dao(this as AppDatabase);
  late final EcfRecebimentoNaoFiscalDao ecfRecebimentoNaoFiscalDao =
      EcfRecebimentoNaoFiscalDao(this as AppDatabase);
  late final EcfRelatorioGerencialDao ecfRelatorioGerencialDao =
      EcfRelatorioGerencialDao(this as AppDatabase);
  late final EcfSintegra60ADao ecfSintegra60ADao =
      EcfSintegra60ADao(this as AppDatabase);
  late final EcfSintegra60MDao ecfSintegra60MDao =
      EcfSintegra60MDao(this as AppDatabase);
  late final EmpresaDao empresaDao = EmpresaDao(this as AppDatabase);
  late final EmpresaCnaeDao empresaCnaeDao =
      EmpresaCnaeDao(this as AppDatabase);
  late final EmpresaDeliveryPedidoDao empresaDeliveryPedidoDao =
      EmpresaDeliveryPedidoDao(this as AppDatabase);
  late final EmpresaSegmentoDao empresaSegmentoDao =
      EmpresaSegmentoDao(this as AppDatabase);
  late final EntregadorRotaDao entregadorRotaDao =
      EntregadorRotaDao(this as AppDatabase);
  late final EntregadorRotaDetalheDao entregadorRotaDetalheDao =
      EntregadorRotaDetalheDao(this as AppDatabase);
  late final FidelidadeHistoricoDao fidelidadeHistoricoDao =
      FidelidadeHistoricoDao(this as AppDatabase);
  late final FidelidadeUtilizadoDao fidelidadeUtilizadoDao =
      FidelidadeUtilizadoDao(this as AppDatabase);
  late final FornecedorDao fornecedorDao = FornecedorDao(this as AppDatabase);
  late final IbptDao ibptDao = IbptDao(this as AppDatabase);
  late final LogImportacaoDao logImportacaoDao =
      LogImportacaoDao(this as AppDatabase);
  late final MesaDao mesaDao = MesaDao(this as AppDatabase);
  late final NfcePlanoPagamentoDao nfcePlanoPagamentoDao =
      NfcePlanoPagamentoDao(this as AppDatabase);
  late final NfeCabecalhoDao nfeCabecalhoDao =
      NfeCabecalhoDao(this as AppDatabase);
  late final NfeConfiguracaoDao nfeConfiguracaoDao =
      NfeConfiguracaoDao(this as AppDatabase);
  late final NfeNumeroDao nfeNumeroDao = NfeNumeroDao(this as AppDatabase);
  late final NfeNumeroInutilizadoDao nfeNumeroInutilizadoDao =
      NfeNumeroInutilizadoDao(this as AppDatabase);
  late final PdvCaixaDao pdvCaixaDao = PdvCaixaDao(this as AppDatabase);
  late final PdvConfiguracaoDao pdvConfiguracaoDao =
      PdvConfiguracaoDao(this as AppDatabase);
  late final PdvConfiguracaoBalancaDao pdvConfiguracaoBalancaDao =
      PdvConfiguracaoBalancaDao(this as AppDatabase);
  late final PdvConfiguracaoLeitorSerialDao pdvConfiguracaoLeitorSerialDao =
      PdvConfiguracaoLeitorSerialDao(this as AppDatabase);
  late final PdvFechamentoDao pdvFechamentoDao =
      PdvFechamentoDao(this as AppDatabase);
  late final PdvMovimentoDao pdvMovimentoDao =
      PdvMovimentoDao(this as AppDatabase);
  late final PdvOperadorDao pdvOperadorDao =
      PdvOperadorDao(this as AppDatabase);
  late final PdvSangriaDao pdvSangriaDao = PdvSangriaDao(this as AppDatabase);
  late final PdvSuprimentoDao pdvSuprimentoDao =
      PdvSuprimentoDao(this as AppDatabase);
  late final PdvTipoPagamentoDao pdvTipoPagamentoDao =
      PdvTipoPagamentoDao(this as AppDatabase);
  late final PdvTotalTipoPagamentoDao pdvTotalTipoPagamentoDao =
      PdvTotalTipoPagamentoDao(this as AppDatabase);
  late final PdvVendaCabecalhoDao pdvVendaCabecalhoDao =
      PdvVendaCabecalhoDao(this as AppDatabase);
  late final PdvVendaDetalheDao pdvVendaDetalheDao =
      PdvVendaDetalheDao(this as AppDatabase);
  late final ProdutoDao produtoDao = ProdutoDao(this as AppDatabase);
  late final ProdutoFichaTecnicaDao produtoFichaTecnicaDao =
      ProdutoFichaTecnicaDao(this as AppDatabase);
  late final ProdutoGrupoDao produtoGrupoDao =
      ProdutoGrupoDao(this as AppDatabase);
  late final ProdutoImagemDao produtoImagemDao =
      ProdutoImagemDao(this as AppDatabase);
  late final ProdutoPromocaoDao produtoPromocaoDao =
      ProdutoPromocaoDao(this as AppDatabase);
  late final ProdutoSubgrupoDao produtoSubgrupoDao =
      ProdutoSubgrupoDao(this as AppDatabase);
  late final ProdutoTipoDao produtoTipoDao =
      ProdutoTipoDao(this as AppDatabase);
  late final ProdutoUnidadeDao produtoUnidadeDao =
      ProdutoUnidadeDao(this as AppDatabase);
  late final ReservaDao reservaDao = ReservaDao(this as AppDatabase);
  late final ReservaMesaDao reservaMesaDao =
      ReservaMesaDao(this as AppDatabase);
  late final TaxaEntregaDao taxaEntregaDao =
      TaxaEntregaDao(this as AppDatabase);
  late final TributConfiguraOfGtDao tributConfiguraOfGtDao =
      TributConfiguraOfGtDao(this as AppDatabase);
  late final TributGrupoTributarioDao tributGrupoTributarioDao =
      TributGrupoTributarioDao(this as AppDatabase);
  late final TributIcmsCustomCabDao tributIcmsCustomCabDao =
      TributIcmsCustomCabDao(this as AppDatabase);
  late final TributOperacaoFiscalDao tributOperacaoFiscalDao =
      TributOperacaoFiscalDao(this as AppDatabase);
  late final TributIcmsUfDao tributIcmsUfDao =
      TributIcmsUfDao(this as AppDatabase);
  late final TributIpiDao tributIpiDao = TributIpiDao(this as AppDatabase);
  late final TributIssDao tributIssDao = TributIssDao(this as AppDatabase);
  late final TributPisDao tributPisDao = TributPisDao(this as AppDatabase);
  @override
  Iterable<TableInfo> get allTables => allSchemaEntities.whereType<TableInfo>();
  @override
  List<DatabaseSchemaEntity> get allSchemaEntities => [
        cardapios,
        cardapioPerguntaPadraos,
        cardapioRespostaPadraos,
        cfops,
        clientes,
        colaboradors,
        comandas,
        comandaDetalhes,
        comandaDetalheComplementos,
        comandaObservacaoPadraos,
        comandaPedidos,
        compraPedidoCabecalhos,
        compraPedidoDetalhes,
        contadors,
        contasPagars,
        contasRecebers,
        cozinhas,
        deliverys,
        deliveryAcertos,
        deliveryAcertoComandas,
        ecfAliquotass,
        ecfDocumentosEmitidoss,
        ecfE3s,
        ecfImpressoras,
        ecfLogTotaiss,
        ecfR01s,
        ecfR02s,
        ecfR03s,
        ecfR06s,
        ecfR07s,
        ecfRecebimentoNaoFiscals,
        ecfRelatorioGerencials,
        ecfSintegra60As,
        ecfSintegra60Ms,
        empresas,
        empresaCnaes,
        empresaDeliveryPedidos,
        empresaSegmentos,
        entregadorRotas,
        entregadorRotaDetalhes,
        fidelidadeHistoricos,
        fidelidadeUtilizados,
        fornecedors,
        ibpts,
        logImportacaos,
        mesas,
        nfcePlanoPagamentos,
        nfeAcessoXmls,
        nfeCabecalhos,
        nfeCanas,
        nfeCanaDeducoesSafras,
        nfeCanaFornecimentoDiarios,
        nfeConfiguracaos,
        nfeCteReferenciados,
        nfeCupomFiscalReferenciados,
        nfeDeclaracaoImportacaos,
        nfeDestinatarios,
        nfeDetEspecificoArmamentos,
        nfeDetEspecificoCombustivels,
        nfeDetEspecificoMedicamentos,
        nfeDetEspecificoVeiculos,
        nfeDetalhes,
        nfeDetalheImpostoCofinss,
        nfeDetalheImpostoCofinsSts,
        nfeDetalheImpostoIcmss,
        nfeDetalheImpostoIcmsUfdests,
        nfeDetalheImpostoIis,
        nfeDetalheImpostoIpis,
        nfeDetalheImpostoIssqns,
        nfeDetalheImpostoPiss,
        nfeDetalheImpostoPisSts,
        nfeDuplicatas,
        nfeEmitentes,
        nfeExportacaos,
        nfeFaturas,
        nfeImportacaoDetalhes,
        nfeInformacaoPagamentos,
        nfeItemRastreados,
        nfeLocalEntregas,
        nfeLocalRetiradas,
        nfeNfReferenciadas,
        nfeNumeros,
        nfeNumeroInutilizados,
        nfeProcessoReferenciados,
        nfeProdRuralReferenciadas,
        nfeReferenciadas,
        nfeResponsavelTecnicos,
        nfeTransportes,
        nfeTransporteReboques,
        nfeTransporteVolumes,
        nfeTransporteVolumeLacres,
        pdvCaixas,
        pdvConfiguracaos,
        pdvConfiguracaoBalancas,
        pdvConfiguracaoLeitorSerials,
        pdvFechamentos,
        pdvMovimentos,
        pdvOperadors,
        pdvSangrias,
        pdvSuprimentos,
        pdvTipoPagamentos,
        pdvTotalTipoPagamentos,
        pdvVendaCabecalhos,
        pdvVendaDetalhes,
        produtos,
        produtoFichaTecnicas,
        produtoGrupos,
        produtoImagems,
        produtoPromocaos,
        produtoSubgrupos,
        produtoTipos,
        produtoUnidades,
        reservas,
        reservaMesas,
        taxaEntregas,
        tributCofinss,
        tributConfiguraOfGts,
        tributGrupoTributarios,
        tributIcmsCustomCabs,
        tributIcmsCustomDets,
        tributIcmsUfs,
        tributIpis,
        tributIsss,
        tributOperacaoFiscals,
        tributPiss
      ];
}
